{
    "project": {},
    "files": {
        "addon/-private/adapters/build-url-mixin.js": {
            "name": "addon/-private/adapters/build-url-mixin.js",
            "modules": {},
            "classes": {
                "DS.BuildURLMixin": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/ext/date.js": {
            "name": "addon/-private/ext/date.js",
            "modules": {},
            "classes": {
                "Ember.Date": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "addon/-private/system/debug/debug-adapter.js": {
            "name": "addon/-private/system/debug/debug-adapter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/system/debug/debug-info.js": {
            "name": "addon/-private/system/debug/debug-info.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS.Model": 1
            },
            "namespaces": {}
        },
        "addon/-private/system/model/attr.js": {
            "name": "addon/-private/system/model/attr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/model/errors.js": {
            "name": "addon/-private/system/model/errors.js",
            "modules": {},
            "classes": {
                "DS.Errors": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/model/model.js": {
            "name": "addon/-private/system/model/model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/model/states.js": {
            "name": "addon/-private/system/model/states.js",
            "modules": {},
            "classes": {
                "DS.RootState": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/record-arrays/adapter-populated-record-array.js": {
            "name": "addon/-private/system/record-arrays/adapter-populated-record-array.js",
            "modules": {},
            "classes": {
                "DS.AdapterPopulatedRecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/record-arrays/filtered-record-array.js": {
            "name": "addon/-private/system/record-arrays/filtered-record-array.js",
            "modules": {},
            "classes": {
                "DS.FilteredRecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/record-arrays/record-array.js": {
            "name": "addon/-private/system/record-arrays/record-array.js",
            "modules": {},
            "classes": {
                "DS.RecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/relationships/belongs-to.js": {
            "name": "addon/-private/system/relationships/belongs-to.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {}
        },
        "addon/-private/system/relationships/ext.js": {
            "name": "addon/-private/system/relationships/ext.js",
            "modules": {},
            "classes": {
                "DS.Model": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/relationships/has-many.js": {
            "name": "addon/-private/system/relationships/has-many.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {}
        },
        "addon/-private/system/store/container-instance-cache.js": {
            "name": "addon/-private/system/store/container-instance-cache.js",
            "modules": {},
            "classes": {
                "ContainerInstanceCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/system/debug.js": {
            "name": "addon/-private/system/debug.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/system/many-array.js": {
            "name": "addon/-private/system/many-array.js",
            "modules": {},
            "classes": {
                "DS.ManyArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/model.js": {
            "name": "addon/-private/system/model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/system/normalize-model-name.js": {
            "name": "addon/-private/system/normalize-model-name.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {}
        },
        "addon/-private/system/promise-proxies.js": {
            "name": "addon/-private/system/promise-proxies.js",
            "modules": {},
            "classes": {
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1,
                "DS.PromiseManyArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/record-array-manager.js": {
            "name": "addon/-private/system/record-array-manager.js",
            "modules": {},
            "classes": {
                "DS.RecordArrayManager": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/record-arrays.js": {
            "name": "addon/-private/system/record-arrays.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/system/snapshot-record-array.js": {
            "name": "addon/-private/system/snapshot-record-array.js",
            "modules": {},
            "classes": {
                "DS.SnapshotRecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/snapshot.js": {
            "name": "addon/-private/system/snapshot.js",
            "modules": {},
            "classes": {
                "DS.Snapshot": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/system/store.js": {
            "name": "addon/-private/system/store.js",
            "modules": {},
            "classes": {
                "DS.Store": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/transforms/boolean.js": {
            "name": "addon/-private/transforms/boolean.js",
            "modules": {},
            "classes": {
                "DS.BooleanTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/transforms/date.js": {
            "name": "addon/-private/transforms/date.js",
            "modules": {},
            "classes": {
                "DS.DateTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/transforms/number.js": {
            "name": "addon/-private/transforms/number.js",
            "modules": {},
            "classes": {
                "DS.NumberTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/transforms/string.js": {
            "name": "addon/-private/transforms/string.js",
            "modules": {},
            "classes": {
                "DS.StringTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/-private/adapters.js": {
            "name": "addon/-private/adapters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/core.js": {
            "name": "addon/-private/core.js",
            "modules": {},
            "classes": {
                "DS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/-private/serializers.js": {
            "name": "addon/-private/serializers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/adapters/errors.js": {
            "name": "addon/adapters/errors.js",
            "modules": {},
            "classes": {
                "DS.AdapterError": 1,
                "DS.InvalidError": 1,
                "DS.TimeoutError": 1,
                "DS.AbortError": 1,
                "DS.UnauthorizedError": 1,
                "DS.ForbiddenError": 1,
                "DS.NotFoundError": 1,
                "DS.ConflictError": 1,
                "DS.ServerError": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/adapters/json-api.js": {
            "name": "addon/adapters/json-api.js",
            "modules": {},
            "classes": {
                "DS.JSONAPIAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/adapters/rest.js": {
            "name": "addon/adapters/rest.js",
            "modules": {},
            "classes": {
                "DS.RESTAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/serializers/embedded-records-mixin.js": {
            "name": "addon/serializers/embedded-records-mixin.js",
            "modules": {},
            "classes": {
                "DS.EmbeddedRecordsMixin": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/serializers/json-api.js": {
            "name": "addon/serializers/json-api.js",
            "modules": {},
            "classes": {
                "DS.JSONAPISerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/serializers/json.js": {
            "name": "addon/serializers/json.js",
            "modules": {},
            "classes": {
                "DS.JSONSerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/serializers/rest.js": {
            "name": "addon/serializers/rest.js",
            "modules": {},
            "classes": {
                "DS.RESTSerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/adapter.js": {
            "name": "addon/adapter.js",
            "modules": {},
            "classes": {
                "DS.Adapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/attr.js": {
            "name": "addon/attr.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {}
        },
        "addon/index.js": {
            "name": "addon/index.js",
            "modules": {
                "ember-data": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/relationships.js": {
            "name": "addon/relationships.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/serializer.js": {
            "name": "addon/serializer.js",
            "modules": {},
            "classes": {
                "DS.Serializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "addon/transform.js": {
            "name": "addon/transform.js",
            "modules": {},
            "classes": {
                "DS.Transform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "node_modules/ember-inflector/addon/lib/ext/string.js": {
            "name": "node_modules/ember-inflector/addon/lib/ext/string.js",
            "modules": {},
            "classes": {},
            "fors": {
                "String": 1,
                "DS.String": 1
            },
            "namespaces": {}
        },
        "node_modules/ember-inflector/addon/lib/helpers/pluralize.js": {
            "name": "node_modules/ember-inflector/addon/lib/helpers/pluralize.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.HTMLBars.helpers": 1
            },
            "namespaces": {}
        },
        "node_modules/ember-inflector/addon/lib/helpers/singularize.js": {
            "name": "node_modules/ember-inflector/addon/lib/helpers/singularize.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.HTMLBars.helpers": 1
            },
            "namespaces": {}
        },
        "node_modules/ember-inflector/addon/lib/system/inflector.js": {
            "name": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "modules": {},
            "classes": {
                "Ember.Inflector": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        }
    },
    "modules": {
        "ember-data": {
            "name": "ember-data",
            "submodules": {},
            "elements": {},
            "classes": {
                "DS.BuildURLMixin": 1,
                "Ember.Date": 1,
                "DS.Model": 1,
                "DS.Errors": 1,
                "DS.RootState": 1,
                "DS.AdapterPopulatedRecordArray": 1,
                "DS.FilteredRecordArray": 1,
                "DS.RecordArray": 1,
                "DS": 1,
                "ContainerInstanceCache": 1,
                "DS.ManyArray": 1,
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1,
                "DS.PromiseManyArray": 1,
                "DS.RecordArrayManager": 1,
                "DS.SnapshotRecordArray": 1,
                "DS.Snapshot": 1,
                "DS.Store": 1,
                "DS.BooleanTransform": 1,
                "DS.DateTransform": 1,
                "DS.NumberTransform": 1,
                "DS.StringTransform": 1,
                "DS.AdapterError": 1,
                "DS.InvalidError": 1,
                "DS.TimeoutError": 1,
                "DS.AbortError": 1,
                "DS.UnauthorizedError": 1,
                "DS.ForbiddenError": 1,
                "DS.NotFoundError": 1,
                "DS.ConflictError": 1,
                "DS.ServerError": 1,
                "DS.JSONAPIAdapter": 1,
                "DS.RESTAdapter": 1,
                "DS.EmbeddedRecordsMixin": 1,
                "DS.JSONAPISerializer": 1,
                "DS.JSONSerializer": 1,
                "DS.RESTSerializer": 1,
                "DS.Adapter": 1,
                "DS.Serializer": 1,
                "DS.Transform": 1,
                "DS.String": 1,
                "DS.Ember.HTMLBars.helpers": 1,
                "Ember.HTMLBars.helpers": 1,
                "Ember.Inflector": 1
            },
            "fors": {
                "DS.Model": 1,
                "DS": 1,
                "String": 1,
                "DS.String": 1,
                "Ember.HTMLBars.helpers": 1
            },
            "namespaces": {
                "Ember": 1,
                "DS": 1
            },
            "tag": "main",
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 32,
            "description": "Ember Data",
            "itemtype": "main"
        }
    },
    "classes": {
        "DS.BuildURLMixin": {
            "name": "DS.BuildURLMixin",
            "shortname": "DS.BuildURLMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DS.RESTAdapter"
            ],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 5,
            "description": "WARNING: This interface is likely to change in order to accomodate https://github.com/emberjs/rfcs/pull/4\n## Using BuildURLMixin\nTo use url building, include the mixin when extending an adapter, and call `buildURL` where needed.\n  The default behaviour is designed for RESTAdapter.\n### Example\n```javascript\n  export default DS.Adapter.extend(BuildURLMixin, {\n    findRecord: function(store, type, id, snapshot) {\n      var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n      return this.ajax(url, 'GET');\n    }\n  });\n  ```\n### Attributes\nThe `host` and `namespace` attributes will be used if defined, and are optional."
        },
        "Ember.Date": {
            "name": "Ember.Date",
            "shortname": "Ember.Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "addon/-private/ext/date.js",
            "line": 9,
            "description": "Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>\n\n© 2011 Colin Snover <http://zetafleet.com>\n\nReleased under MIT license.",
            "static": 1,
            "deprecated": true
        },
        "DS.Model": {
            "name": "DS.Model",
            "shortname": "DS.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/relationships/ext.js",
            "line": 96,
            "description": "The model class that all Ember Data records descend from.\n  This is the public API of Ember Data models. If you are using Ember Data\n  in your application, this is the class you should use.\n  If you are working on Ember Data internals, you most likely want to be dealing\n  with `InternalModel`",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS.Errors": {
            "name": "DS.Errors",
            "shortname": "DS.Errors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/model/errors.js",
            "line": 15,
            "description": "Holds validation errors for a given record, organized by attribute names.\n\nEvery `DS.Model` has an `errors` property that is an instance of\n`DS.Errors`. This can be used to display validation error\nmessages returned from the server when a `record.save()` rejects.\n\nFor Example, if you had a `User` model that looked like this:\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: attr('string'),\n  email: attr('string')\n});\n```\nAnd you attempted to save a record that did not validate on the backend:\n\n```javascript\nvar user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save();\n```\n\nYour backend would be expected to return an error response that described\nthe problem, so that error messages can be generated on the app.\n\nAPI responses will be translated into instances of `DS.Errors` differently,\ndepending on the specific combination of adapter and serializer used. You\nmay want to check the documentation or the source code of the libraries\nthat you are using, to know how they expect errors to be communicated.\n\nErrors can be displayed to the user by accessing their property name\nto get an array of all the error objects for that property. Each\nerror object is a JavaScript object with two keys:\n\n- `message` A string containing the error message from the backend\n- `attribute` The name of the property associated with this error message\n\n```handlebars\n<label>Username: {{input value=username}} </label>\n{{#each model.errors.username as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n\n<label>Email: {{input value=email}} </label>\n{{#each model.errors.email as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\nYou can also access the special `messages` property on the error\nobject to get an array of all the error strings.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Enumerable",
                "Ember.Evented"
            ]
        },
        "DS.RootState": {
            "name": "DS.RootState",
            "shortname": "DS.RootState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/model/states.js",
            "line": 12,
            "description": "### State\n\nEach record has a `currentState` property that explicitly tracks what\nstate a record is in at any given time. For instance, if a record is\nnewly created and has not yet been sent to the adapter to be saved,\nit would be in the `root.loaded.created.uncommitted` state.  If a\nrecord has had local modifications made to it that are in the\nprocess of being saved, the record would be in the\n`root.loaded.updated.inFlight` state. (This state paths will be\nexplained in more detail below.)\n\nEvents are sent by the record or its store to the record's\n`currentState` property. How the state reacts to these events is\ndependent on which state it is in. In some states, certain events\nwill be invalid and will cause an exception to be raised.\n\nStates are hierarchical and every state is a substate of the\n`RootState`. For example, a record can be in the\n`root.deleted.uncommitted` state, then transition into the\n`root.deleted.inFlight` state. If a child state does not implement\nan event handler, the state manager will attempt to invoke the event\non all parent states until the root state is reached. The state\nhierarchy of a record is described in terms of a path string. You\ncan determine a record's current state by getting the state's\n`stateName` property:\n\n```javascript\nrecord.get('currentState.stateName');\n//=> \"root.created.uncommitted\"\n ```\n\nThe hierarchy of valid states that ship with ember data looks like\nthis:\n\n```text\n* root\n  * deleted\n    * saved\n    * uncommitted\n    * inFlight\n  * empty\n  * loaded\n    * created\n      * uncommitted\n      * inFlight\n    * saved\n    * updated\n      * uncommitted\n      * inFlight\n  * loading\n```\n\nThe `DS.Model` states are themselves stateless. What that means is\nthat, the hierarchical states that each of *those* points to is a\nshared data structure. For performance reasons, instead of each\nrecord getting its own copy of the hierarchy of states, each record\npoints to this global, immutable shared instance. How does a state\nknow which record it should be acting on? We pass the record\ninstance into the state's event handlers as the first argument.\n\nThe record passed as the first parameter is where you should stash\nstate about the record if needed; you should never store data on the state\nobject itself.\n\n### Events and Flags\n\nA state may implement zero or more events and flags.\n\n#### Events\n\nEvents are named functions that are invoked when sent to a record. The\nrecord will first look for a method with the given name on the\ncurrent state. If no method is found, it will search the current\nstate's parent, and then its grandparent, and so on until reaching\nthe top of the hierarchy. If the root is reached without an event\nhandler being found, an exception will be raised. This can be very\nhelpful when debugging new features.\n\nHere's an example implementation of a state with a `myEvent` event handler:\n\n```javascript\naState: DS.State.create({\n  myEvent: function(manager, param) {\n    console.log(\"Received myEvent with\", param);\n  }\n})\n```\n\nTo trigger this event:\n\n```javascript\nrecord.send('myEvent', 'foo');\n//=> \"Received myEvent with foo\"\n```\n\nNote that an optional parameter can be sent to a record's `send()` method,\nwhich will be passed as the second parameter to the event handler.\n\nEvents should transition to a different state if appropriate. This can be\ndone by calling the record's `transitionTo()` method with a path to the\ndesired state. The state manager will attempt to resolve the state path\nrelative to the current state. If no state is found at that path, it will\nattempt to resolve it relative to the current state's parent, and then its\nparent, and so on until the root is reached. For example, imagine a hierarchy\nlike this:\n\n    * created\n      * uncommitted <-- currentState\n      * inFlight\n    * updated\n      * inFlight\n\nIf we are currently in the `uncommitted` state, calling\n`transitionTo('inFlight')` would transition to the `created.inFlight` state,\nwhile calling `transitionTo('updated.inFlight')` would transition to\nthe `updated.inFlight` state.\n\nRemember that *only events* should ever cause a state transition. You should\nnever call `transitionTo()` from outside a state's event handler. If you are\ntempted to do so, create a new event and send that to the state manager.\n\n#### Flags\n\nFlags are Boolean values that can be used to introspect a record's current\nstate in a more user-friendly way than examining its state path. For example,\ninstead of doing this:\n\n```javascript\nvar statePath = record.get('stateManager.currentPath');\nif (statePath === 'created.inFlight') {\n  doSomething();\n}\n```\n\nYou can say:\n\n```javascript\nif (record.get('isNew') && record.get('isSaving')) {\n  doSomething();\n}\n```\n\nIf your state does not set a value for a given flag, the value will\nbe inherited from its parent (or the first place in the state hierarchy\nwhere it is defined).\n\nThe current set of flags are defined below. If you want to add a new flag,\nin addition to the area below, you will also need to declare it in the\n`DS.Model` class.\n\n\n * [isEmpty](DS.Model.html#property_isEmpty)\n * [isLoading](DS.Model.html#property_isLoading)\n * [isLoaded](DS.Model.html#property_isLoaded)\n * [isDirty](DS.Model.html#property_isDirty)\n * [isSaving](DS.Model.html#property_isSaving)\n * [isDeleted](DS.Model.html#property_isDeleted)\n * [isNew](DS.Model.html#property_isNew)\n * [isValid](DS.Model.html#property_isValid)"
        },
        "DS.AdapterPopulatedRecordArray": {
            "name": "DS.AdapterPopulatedRecordArray",
            "shortname": "DS.AdapterPopulatedRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/record-arrays/adapter-populated-record-array.js",
            "line": 12,
            "description": "Represents an ordered list of records whose order and membership is\ndetermined by the adapter. For example, a query sent to the adapter\nmay trigger a search on the server, whose results would be loaded\ninto an instance of the `AdapterPopulatedRecordArray`.",
            "extends": "DS.RecordArray"
        },
        "DS.FilteredRecordArray": {
            "name": "DS.FilteredRecordArray",
            "shortname": "DS.FilteredRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/record-arrays/filtered-record-array.js",
            "line": 10,
            "description": "Represents a list of records whose membership is determined by the\nstore. As records are created, loaded, or modified, the store\nevaluates them to determine if they should be part of the record\narray.",
            "extends": "DS.RecordArray"
        },
        "DS.RecordArray": {
            "name": "DS.RecordArray",
            "shortname": "DS.RecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 12,
            "description": "A record array is an array that contains records of a certain type. The record\narray materializes records as needed when they are retrieved for the first\ntime. You should not create record arrays yourself. Instead, an instance of\n`DS.RecordArray` or its subclasses will be returned by your application's store\nin response to queries.",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS": {
            "name": "DS",
            "shortname": "DS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "",
            "file": "addon/-private/core.js",
            "line": 8,
            "description": "All Ember Data classes, methods and functions are defined inside of this namespace.",
            "static": 1
        },
        "ContainerInstanceCache": {
            "name": "ContainerInstanceCache",
            "shortname": "ContainerInstanceCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "",
            "file": "addon/-private/system/store/container-instance-cache.js",
            "line": 5,
            "description": "The `ContainerInstanceCache` serves as a lazy cache for looking up\ninstances of serializers and adapters. It has some additional logic for\nfinding the 'fallback' adapter or serializer.\n\nThe 'fallback' adapter or serializer is an adapter or serializer that is looked up\nwhen the preferred lookup fails. For example, say you try to look up `adapter:post`,\nbut there is no entry (app/adapters/post.js in EmberCLI) for `adapter:post` in the registry.\n\nThe `fallbacks` array passed will then be used; the first entry in the fallbacks array\nthat exists in the container will then be cached for `adapter:post`. So, the next time you\nlook up `adapter:post`, you'll get the `adapter:application` instance (or whatever the fallback\nwas if `adapter:application` doesn't exist).",
            "access": "private",
            "tagname": ""
        },
        "DS.ManyArray": {
            "name": "DS.ManyArray",
            "shortname": "DS.ManyArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/many-array.js",
            "line": 12,
            "description": "A `ManyArray` is a `MutableArray` that represents the contents of a has-many\nrelationship.\n\nThe `ManyArray` is instantiated lazily the first time the relationship is\nrequested.\n\n### Inverses\n\nOften, the relationships in Ember Data applications will have\nan inverse. For example, imagine the following models are\ndefined:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\nIf you created a new instance of `App.Post` and added\na `App.Comment` record to its `comments` has-many\nrelationship, you would expect the comment's `post`\nproperty to be set to the post that contained\nthe has-many.\n\nWe call the record to which a relationship belongs the\nrelationship's _owner_.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.MutableArray",
                "Ember.Evented"
            ]
        },
        "DS.PromiseArray": {
            "name": "DS.PromiseArray",
            "shortname": "DS.PromiseArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/promise-proxies.js",
            "line": 7,
            "description": "A `PromiseArray` is an object that acts like both an `Ember.Array`\nand a promise. When the promise is resolved the resulting value\nwill be set to the `PromiseArray`'s `content` property. This makes\nit easy to create data bindings with the `PromiseArray` that will be\nupdated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseArray = DS.PromiseArray.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseArray.get('length'); // 0\n\npromiseArray.then(function() {\n  promiseArray.get('length'); // 100\n});\n```",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.PromiseObject": {
            "name": "DS.PromiseObject",
            "shortname": "DS.PromiseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/promise-proxies.js",
            "line": 38,
            "description": "A `PromiseObject` is an object that acts like both an `Ember.Object`\nand a promise. When the promise is resolved, then the resulting value\nwill be set to the `PromiseObject`'s `content` property. This makes\nit easy to create data bindings with the `PromiseObject` that will\nbe updated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseObject = DS.PromiseObject.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseObject.get('name'); // null\n\npromiseObject.then(function() {\n  promiseObject.get('name'); // 'Tomster'\n});\n```",
            "extends": "Ember.ObjectProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.PromiseManyArray": {
            "name": "DS.PromiseManyArray",
            "shortname": "DS.PromiseManyArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/promise-proxies.js",
            "line": 81,
            "description": "A PromiseManyArray is a PromiseArray that also proxies certain method calls\nto the underlying manyArray.\nRight now we proxy:\n\n  * `reload()`\n  * `createRecord()`\n  * `on()`\n  * `one()`\n  * `trigger()`\n  * `off()`\n  * `has()`",
            "extends": "Ember.ArrayProxy"
        },
        "DS.RecordArrayManager": {
            "name": "DS.RecordArrayManager",
            "shortname": "DS.RecordArrayManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/record-array-manager.js",
            "line": 15,
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "DS.SnapshotRecordArray": {
            "name": "DS.SnapshotRecordArray",
            "shortname": "DS.SnapshotRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 5,
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "snapshots",
                    "description": "An array of snapshots",
                    "type": "Array"
                },
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "DS.Snapshot": {
            "name": "DS.Snapshot",
            "shortname": "DS.Snapshot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/snapshot.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "internalModel",
                    "description": "The model to create a snapshot from",
                    "type": "DS.Model"
                }
            ]
        },
        "DS.Store": {
            "name": "DS.Store",
            "shortname": "DS.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/system/store.js",
            "line": 97,
            "description": "The store contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `DS.Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nDefine your application's store like this:\n\n```app/services/store.js\nimport DS from 'ember-data';\n\nexport default DS.Store.extend({\n});\n```\n\nMost Ember.js applications will only have a single `DS.Store` that is\nautomatically created by their `Ember.Application`.\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use `DS.Store`'s `findRecord()` method:\n\n```javascript\nstore.findRecord('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n});\n```\n\nYou can learn more about writing a custom adapter by reading the `DS.Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](#method_createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend you will need to call `record.save()`.\n\n[push](#method_push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates (full or partial) that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](#method_pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `DS.RecordArray`s such as those returned by\n`store#peekAll()`, `store#findAll()` or `store#filter()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
            "extends": "Ember.Service"
        },
        "DS.BooleanTransform": {
            "name": "DS.BooleanTransform",
            "shortname": "DS.BooleanTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/transforms/boolean.js",
            "line": 7,
            "description": "The `DS.BooleanTransform` class is used to serialize and deserialize\nboolean attributes on Ember Data record objects. This transform is\nused when `boolean` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  isAdmin: DS.attr('boolean'),\n  name: DS.attr('string'),\n  email: DS.attr('string')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.DateTransform": {
            "name": "DS.DateTransform",
            "shortname": "DS.DateTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/transforms/date.js",
            "line": 3,
            "description": "The `DS.DateTransform` class is used to serialize and deserialize\ndate attributes on Ember Data record objects. This transform is used\nwhen `date` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\n```app/models/score.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  value: DS.attr('number'),\n  player: DS.belongsTo('player'),\n  date: DS.attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.NumberTransform": {
            "name": "DS.NumberTransform",
            "shortname": "DS.NumberTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/transforms/number.js",
            "line": 10,
            "description": "The `DS.NumberTransform` class is used to serialize and deserialize\nnumeric attributes on Ember Data record objects. This transform is\nused when `number` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```app/models/score.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  value: DS.attr('number'),\n  player: DS.belongsTo('player'),\n  date: DS.attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.StringTransform": {
            "name": "DS.StringTransform",
            "shortname": "DS.StringTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/-private/transforms/string.js",
            "line": 6,
            "description": "The `DS.StringTransform` class is used to serialize and deserialize\nstring attributes on Ember Data record objects. This transform is\nused when `string` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  isAdmin: DS.attr('boolean'),\n  name: DS.attr('string'),\n  email: DS.attr('string')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.AdapterError": {
            "name": "DS.AdapterError",
            "shortname": "DS.AdapterError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 11
        },
        "DS.InvalidError": {
            "name": "DS.InvalidError",
            "shortname": "DS.InvalidError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 58,
            "description": "A `DS.InvalidError` is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually this means a\nrecord failed some form of server side validation. When a promise\nfrom an adapter is rejected with a `DS.InvalidError` the record will\ntransition to the `invalid` state and the errors will be set to the\n`errors` property on the record.\n\nFor Ember Data to correctly map errors to their corresponding\nproperties on the model, Ember Data expects each error to be\na valid json-api error object with a `source/pointer` that matches\nthe property name. For example if you had a Post model that\nlooked like this.\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr('string'),\n  content: DS.attr('string')\n});\n```\n\nTo show an error from the server related to the `title` and\n`content` properties your adapter could return a promise that\nrejects with a `DS.InvalidError` object that looks like this:\n\n```app/adapters/post.js\nimport Ember from 'ember';\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  updateRecord: function() {\n    // Fictional adapter that always rejects\n    return Ember.RSVP.reject(new DS.InvalidError([\n      {\n        detail: 'Must be unique',\n        source: { pointer: '/data/attributes/title' }\n      },\n      {\n        detail: 'Must not be blank',\n        source: { pointer: '/data/attributes/content'}\n      }\n    ]));\n  }\n});\n```\n\nYour backend may use different property names for your records the\nstore will attempt extract and normalize the errors using the\nserializer's `extractErrors` method before the errors get added to\nthe the model. As a result, it is safe for the `InvalidError` to\nwrap the error payload unaltered."
        },
        "DS.TimeoutError": {
            "name": "DS.TimeoutError",
            "shortname": "DS.TimeoutError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 119
        },
        "DS.AbortError": {
            "name": "DS.AbortError",
            "shortname": "DS.AbortError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 126
        },
        "DS.UnauthorizedError": {
            "name": "DS.UnauthorizedError",
            "shortname": "DS.UnauthorizedError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 133
        },
        "DS.ForbiddenError": {
            "name": "DS.ForbiddenError",
            "shortname": "DS.ForbiddenError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 140
        },
        "DS.NotFoundError": {
            "name": "DS.NotFoundError",
            "shortname": "DS.NotFoundError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 147
        },
        "DS.ConflictError": {
            "name": "DS.ConflictError",
            "shortname": "DS.ConflictError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 154
        },
        "DS.ServerError": {
            "name": "DS.ServerError",
            "shortname": "DS.ServerError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/errors.js",
            "line": 161
        },
        "DS.JSONAPIAdapter": {
            "name": "DS.JSONAPIAdapter",
            "shortname": "DS.JSONAPIAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/json-api.js",
            "line": 10,
            "since": "1.13.0",
            "is_constructor": 1,
            "extends": "DS.RESTAdapter"
        },
        "DS.RESTAdapter": {
            "name": "DS.RESTAdapter",
            "shortname": "DS.RESTAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapters/rest.js",
            "line": 30,
            "description": "The REST adapter allows your store to communicate with an HTTP server by\ntransmitting JSON via XHR. Most Ember.js apps that consume a JSON API\nshould use the REST adapter.\n\nThis adapter is designed around the idea that the JSON exchanged with\nthe server should be conventional.\n\n## Success and failure\n\nThe REST adapter will consider a success any response with a status code\nof the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other\nstatus code will be considered a failure.\n\nOn success, the request promise will be resolved with the full response\npayload.\n\nFailed responses with status code 422 (\"Unprocessable Entity\") will be\nconsidered \"invalid\". The response will be discarded, except for the\n`errors` key. The request promise will be rejected with a `DS.InvalidError`.\nThis error object will encapsulate the saved `errors` value.\n\nAny other status codes will be treated as an \"adapter error\". The request\npromise will be rejected, similarly to the \"invalid\" case, but with\nan instance of `DS.AdapterError` instead.\n\n## JSON Structure\n\nThe REST adapter expects the JSON returned from your server to follow\nthese conventions.\n\n### Object Root\n\nThe JSON payload should be an object that contains the record inside a\nroot property. For example, in response to a `GET` request for\n`/posts/1`, the JSON should look like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\"\n  }\n}\n```\n\nSimilarly, in response to a `GET` request for `/posts`, the JSON should\nlook like this:\n\n```js\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C's Tag\",\n      \"author\": \"Yehuda Katz\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Rails is omakase\",\n      \"author\": \"D2H\"\n    }\n  ]\n}\n```\n\nNote that the object root can be pluralized for both a single-object response\nand an array response: the REST adapter is not strict on this. Further, if the\nHTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a\n`findRecord` query) with more than one object in the array, Ember Data will\nonly display the object with the matching ID.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the camelCased versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```app/models/person.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 5,\n    \"firstName\": \"Barack\",\n    \"lastName\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\n### Errors\n\nIf a response is considered a failure, the JSON payload is expected to include\na top-level key `errors`, detailing any specific issues. For example:\n\n```js\n{\n  \"errors\": {\n    \"msg\": \"Something went wrong\"\n  }\n}\n```\n\nThis adapter does not make any assumptions as to the format of the `errors`\nobject. It will simply be passed along as is, wrapped in an instance\nof `DS.InvalidError` or `DS.AdapterError`. The serializer can interpret it\nafterwards.\n\n## Customization\n\n### Endpoint path customization\n\nEndpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  namespace: 'api/1'\n});\n```\nRequests for the `Person` model would now target `/api/1/people/1`.\n\n### Host customization\n\nAn adapter can target other hosts by setting the `host` property.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n```\n\n### Headers customization\n\nSome APIs require HTTP headers, e.g. to provide an API key. Arbitrary\nheaders can be set as key/value pairs on the `RESTAdapter`'s `headers`\nobject and Ember Data will send them along with each ajax request.\n\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```\n\n`headers` can also be used as a computed property to support dynamic\nheaders. In the example below, the `session` object has been\ninjected into an adapter by Ember's container.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: Ember.computed('session.authToken', function() {\n    return {\n      \"API_KEY\": this.get(\"session.authToken\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  })\n});\n```\n\nIn some cases, your dynamic headers may require data from some\nobject outside of Ember's observer system (for example\n`document.cookie`). You can use the\n[volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)\nfunction to set the property into a non-cached mode causing the headers to\nbe recomputed with every request.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: Ember.computed(function() {\n    return {\n      \"API_KEY\": Ember.get(document.cookie.match(/apiKey\\=([^;]*)/), \"1\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }).volatile()\n});\n```",
            "is_constructor": 1,
            "extends": "DS.Adapter",
            "uses": [
                "DS.BuildURLMixin"
            ]
        },
        "DS.EmbeddedRecordsMixin": {
            "name": "DS.EmbeddedRecordsMixin",
            "shortname": "DS.EmbeddedRecordsMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 8,
            "description": "## Using Embedded Records\n\n`DS.EmbeddedRecordsMixin` supports serializing embedded records.\n\nTo set up embedded records, include the mixin when extending a serializer,\nthen define and configure embedded (model) relationships.\n\nBelow is an example of a per-type serializer (`post` type).\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' },\n    comments: { serialize: 'ids' }\n  }\n});\n```\nNote that this use of `{ embedded: 'always' }` is unrelated to\nthe `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of\ndefining a model while working with the `ActiveModelSerializer`.  Nevertheless,\nusing `{ embedded: 'always' }` as an option to `DS.attr` is not a valid way to setup\nembedded records.\n\nThe `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:\n\n```js\n{\n  serialize: 'records',\n  deserialize: 'records'\n}\n```\n\n### Configuring Attrs\n\nA resource's `attrs` option may be set to use `ids`, `records` or false for the\n`serialize`  and `deserialize` settings.\n\nThe `attrs` property can be set on the `ApplicationSerializer` or a per-type\nserializer.\n\nIn the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is `deserialize: 'records'`, there is no need to use `ids` when\nextracting as that is the default behavior without this mixin if you are using\nthe vanilla `EmbeddedRecordsMixin`. Likewise, to embed JSON in the payload while\nserializing `serialize: 'records'` is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\ndo not want the relationship sent at all, you can use `serialize: false`.\n\n\n### EmbeddedRecordsMixin defaults\nIf you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\nwill behave in the following way:\n\nBelongsTo: `{ serialize: 'id', deserialize: 'id' }`\nHasMany:   `{ serialize: false, deserialize: 'ids' }`\n\n### Model Relationships\n\nEmbedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as `belongsTo` and `hasMany`, you\nshould not both specify `async: true` and also indicate through the serializer's\n`attrs` attribute that the related model should be embedded for deserialization.\nIf a model is declared embedded for deserialization (`embedded: 'always'` or `deserialize: 'records'`),\nthen do not use `async: true`.\n\nTo successfully extract and serialize embedded records the model relationships\nmust be setup correcty. See the\n[defining relationships](/guides/models/defining-models/#toc_defining-relationships)\nsection of the **Defining Models** guide page.\n\nRecords without an `id` property are not considered embedded records, model\ninstances must have an `id` property to be used with Ember Data.\n\n### Example JSON payloads, Models and Serializers\n\n**When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.**\n\nFor example review the docs for each method of this mixin:\n* [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)\n* [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)\n* [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)"
        },
        "DS.JSONAPISerializer": {
            "name": "DS.JSONAPISerializer",
            "shortname": "DS.JSONAPISerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/serializers/json-api.js",
            "line": 14,
            "description": "Ember Data 2.0 Serializer:\n\nIn Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\n`JSONAPISerializer` supports the http://jsonapi.org/ spec and is the\nserializer recommended by Ember Data.\n\nThis serializer normalizes a JSON API payload that looks like:\n\n```js\n\n  // models/player.js\n  import DS from \"ember-data\";\n\n  export default DS.Model.extend({\n    name: DS.attr(),\n    skill: DS.attr(),\n    gamesPlayed: DS.attr(),\n    club: DS.belongsTo('club')\n  });\n\n  // models/club.js\n  import DS from \"ember-data\";\n\n  export default DS.Model.extend({\n    name: DS.attr(),\n    location: DS.attr(),\n    players: DS.hasMany('player')\n  });\n```\n\n```js\n\n  {\n    \"data\": [\n      {\n        \"attributes\": {\n          \"name\": \"Benfica\",\n          \"location\": \"Portugal\"\n        },\n        \"id\": \"1\",\n        \"relationships\": {\n          \"players\": {\n            \"data\": [\n              {\n                \"id\": \"3\",\n                \"type\": \"players\"\n              }\n            ]\n          }\n        },\n        \"type\": \"clubs\"\n      }\n    ],\n    \"included\": [\n      {\n        \"attributes\": {\n          \"name\": \"Eusebio Silva Ferreira\",\n          \"skill\": \"Rocket shot\",\n          \"games-played\": 431\n        },\n        \"id\": \"3\",\n        \"relationships\": {\n          \"club\": {\n            \"data\": {\n              \"id\": \"1\",\n              \"type\": \"clubs\"\n            }\n          }\n        },\n        \"type\": \"players\"\n      }\n    ]\n  }\n```\n\nto the format that the Ember Data store expects.",
            "since": "1.13.0",
            "extends": "DS.JSONSerializer"
        },
        "DS.JSONSerializer": {
            "name": "DS.JSONSerializer",
            "shortname": "DS.JSONSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/serializers/json.js",
            "line": 19,
            "description": "Ember Data 2.0 Serializer:\n\nIn Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\nBy default, Ember Data uses and recommends the `JSONAPISerializer`.\n\n`JSONSerializer` is useful for simpler or legacy backends that may\nnot support the http://jsonapi.org/ spec.\n\nFor example, given the following `User` model and JSON payload:\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  friends: DS.hasMany('user'),\n  house: DS.belongsTo('location'),\n\n  name: DS.attr('string')\n});\n```\n\n```js\n{\n  id: 1,\n  name: 'Sebastian',\n  friends: [3, 4],\n  links: {\n    house: '/houses/lefkada'\n  }\n}\n```\n\n`JSONSerializer` will normalize the JSON payload to the JSON API format that the\nEmber Data store expects.\n\nYou can customize how JSONSerializer processes its payload by passing options in\nthe `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:\n\n  - To customize how a single record is normalized, use the `normalize` hook.\n  - To customize how `JSONSerializer` normalizes the whole server response, use the\n    `normalizeResponse` hook.\n  - To customize how `JSONSerializer` normalizes a specific response from the server,\n    use one of the many specific `normalizeResponse` hooks.\n  - To customize how `JSONSerializer` normalizes your id, attributes or relationships,\n    use the `extractId`, `extractAttributes` and `extractRelationships` hooks.\n\nThe `JSONSerializer` normalization process follows these steps:\n\n  - `normalizeResponse` - entry method to the serializer.\n  - `normalizeCreateRecordResponse` - a `normalizeResponse` for a specific operation is called.\n  - `normalizeSingleResponse`|`normalizeArrayResponse` - for methods like `createRecord` we expect\n    a single record back, while for methods like `findAll` we expect multiple methods back.\n  - `normalize` - `normalizeArray` iterates and calls `normalize` for each of its records while `normalizeSingle`\n    calls it once. This is the method you most likely want to subclass.\n  - `extractId` | `extractAttributes` | `extractRelationships` - `normalize` delegates to these methods to\n    turn the record payload into the JSON API format.",
            "extends": "DS.Serializer"
        },
        "DS.RESTSerializer": {
            "name": "DS.RESTSerializer",
            "shortname": "DS.RESTSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/serializers/rest.js",
            "line": 16,
            "description": "Normally, applications will use the `RESTSerializer` by implementing\nthe `normalize` method.\n\nThis allows you to do whatever kind of munging you need, and is\nespecially useful if your server is inconsistent and you need to\ndo munging differently for many different kinds of responses.\n\nSee the `normalize` documentation for more information.\n\n## Across the Board Normalization\n\nThere are also a number of hooks that you might find useful to define\nacross-the-board rules for your payload. These rules will be useful\nif your server is consistent, or if you're building an adapter for\nan infrastructure service, like Firebase, and want to encode service\nconventions.\n\nFor example, if all of your keys are underscored and all-caps, but\notherwise consistent with the names you use in your models, you\ncan implement across-the-board rules for how to convert an attribute\nname in your model to a key in your JSON.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n```\n\nYou can also implement `keyForRelationship`, which takes the name\nof the relationship as the first parameter, the kind of\nrelationship (`hasMany` or `belongsTo`) as the second parameter, and\nthe method (`serialize` or `deserialize`) as the third parameter.",
            "extends": "DS.JSONSerializer"
        },
        "DS.Adapter": {
            "name": "DS.Adapter",
            "shortname": "DS.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/adapter.js",
            "line": 8,
            "description": "An adapter is an object that receives requests from a store and\ntranslates them into the appropriate action to take against your\npersistence layer. The persistence layer is usually an HTTP API, but\nmay be anything, such as the browser's local storage. Typically the\nadapter is not invoked directly instead its functionality is accessed\nthrough the `store`.\n\n### Creating an Adapter\n\nCreate a new subclass of `DS.Adapter` in the `app/adapters` folder:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  // ...your code here\n});\n```\n\nModel-specific adapters can be created by putting your adapter\nclass in an `app/adapters/` + `model-name` + `.js` file of the application.\n\n```app/adapters/post.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  // ...Post-specific adapter code goes here\n});\n```\n\n`DS.Adapter` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `findRecord()`\n  * `createRecord()`\n  * `updateRecord()`\n  * `deleteRecord()`\n  * `findAll()`\n  * `query()`\n\nTo improve the network performance of your application, you can optimize\nyour adapter by overriding these lower-level methods:\n\n  * `findMany()`\n\n\nFor an example implementation, see `DS.RESTAdapter`, the\nincluded REST adapter.",
            "extends": "Ember.Object"
        },
        "DS.Serializer": {
            "name": "DS.Serializer",
            "shortname": "DS.Serializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/serializer.js",
            "line": 7,
            "description": "`DS.Serializer` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `normalizeResponse()`\n  * `serialize()`\n\nAnd you can optionally override the following methods:\n\n  * `normalize()`\n\nFor an example implementation, see\n[DS.JSONSerializer](DS.JSONSerializer.html), the included JSON serializer.",
            "extends": "Ember.Object"
        },
        "DS.Transform": {
            "name": "DS.Transform",
            "shortname": "DS.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "addon/transform.js",
            "line": 3,
            "description": "The `DS.Transform` class is used to serialize and deserialize model\nattributes when they are saved or loaded from an\nadapter. Subclassing `DS.Transform` is useful for creating custom\nattributes. All subclasses of `DS.Transform` must implement a\n`serialize` and a `deserialize` method.\n\nExample\n\n```app/transforms/temperature.js\nimport DS from 'ember-data';\n\n// Converts centigrade in the JSON to fahrenheit in the app\nexport default DS.Transform.extend({\n  deserialize: function(serialized) {\n    return (serialized *  1.8) + 32;\n  },\n  serialize: function(deserialized) {\n    return (deserialized - 32) / 1.8;\n  }\n});\n```\n\nUsage\n\n```app/models/requirement.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  temperature: DS.attr('temperature')\n});\n```"
        },
        "DS.String": {
            "name": "DS.String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS"
        },
        "DS.Ember.HTMLBars.helpers": {
            "name": "DS.Ember.HTMLBars.helpers",
            "shortname": "Ember.HTMLBars.helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS"
        },
        "Ember.HTMLBars.helpers": {
            "name": "Ember.HTMLBars.helpers",
            "shortname": "Ember.HTMLBars.helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": ""
        },
        "Ember.Inflector": {
            "name": "Ember.Inflector",
            "shortname": "Ember.Inflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 32,
            "description": "Inflector.Ember provides a mechanism for supplying inflection rules for your\napplication. Ember includes a default set of inflection rules, and provides an\nAPI for providing additional rules.\n\nExamples:\n\nCreating an inflector with no rules.\n\n```js\nvar inflector = new Ember.Inflector();\n```\n\nCreating an inflector with the default ember ruleset.\n\n```js\nvar inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\ninflector.pluralize('cow'); //=> 'kine'\ninflector.singularize('kine'); //=> 'cow'\n```\n\nCreating an inflector and adding rules later.\n\n```javascript\nvar inflector = Ember.Inflector.inflector;\n\ninflector.pluralize('advice'); // => 'advices'\ninflector.uncountable('advice');\ninflector.pluralize('advice'); // => 'advice'\n\ninflector.pluralize('formula'); // => 'formulas'\ninflector.irregular('formula', 'formulae');\ninflector.pluralize('formula'); // => 'formulae'\n\n// you would not need to add these as they are the default rules\ninflector.plural(/$/, 's');\ninflector.singular(/s$/i, '');\n```\n\nCreating an inflector with a nondefault ruleset.\n\n```javascript\nvar rules = {\n  plurals:  [ /$/, 's' ],\n  singular: [ /\\s$/, '' ],\n  irregularPairs: [\n    [ 'cow', 'kine' ]\n  ],\n  uncountable: [ 'fish' ]\n};\n\nvar inflector = new Ember.Inflector(rules);\n```"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 33,
            "description": "Builds a URL for a given type and optional ID.\n\nBy default, it pluralizes the type's name (for example, 'post'\nbecomes 'posts' and 'person' becomes 'people'). To override the\npluralization see [pathForType](#method_pathForType).\n\nIf an ID is specified, it adds the ID to the path generated\nfor the type, separated by a `/`.\n\nWhen called by RESTAdapter.findMany() the `id` and `snapshot` parameters\nwill be arrays of ids and snapshots.",
            "itemtype": "method",
            "name": "buildURL",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "single id or array of ids or query",
                    "type": "(String|Array|Object)"
                },
                {
                    "name": "snapshot",
                    "description": "single snapshot or array of snapshots",
                    "type": "(DS.Snapshot|Array)"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "object of query parameters to send for query requests.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 81,
            "itemtype": "method",
            "name": "_buildURL",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 110,
            "itemtype": "method",
            "name": "urlForFindRecord",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 121,
            "itemtype": "method",
            "name": "urlForFindAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 131,
            "itemtype": "method",
            "name": "urlForQuery",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 141,
            "itemtype": "method",
            "name": "urlForQueryRecord",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 151,
            "itemtype": "method",
            "name": "urlForFindMany",
            "params": [
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 162,
            "itemtype": "method",
            "name": "urlForFindHasMany",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 173,
            "itemtype": "method",
            "name": "urlForFindBelongsTo",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 184,
            "itemtype": "method",
            "name": "urlForCreateRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 194,
            "itemtype": "method",
            "name": "urlForUpdateRecord",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 205,
            "itemtype": "method",
            "name": "urlForDeleteRecord",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 216,
            "itemtype": "method",
            "name": "urlPrefix",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parentURL",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "urlPrefix",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/adapters/build-url-mixin.js",
            "line": 253,
            "description": "Determines the pathname for a given type.\n\nBy default, it pluralizes the type's name (for example,\n'post' becomes 'posts' and 'person' becomes 'people').\n\n### Pathname customization\n\nFor example if you have an object LineItem with an\nendpoint of \"/line_items/\".\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  pathForType: function(modelName) {\n    var decamelized = Ember.String.decamelize(modelName);\n    return Ember.String.pluralize(decamelized);\n  }\n});\n```",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "DS.BuildURLMixin",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/debug/debug-info.js",
            "line": 5,
            "description": "Provides info about the model for debugging purposes\nby grouping the properties into more semantic groups.\n\nMeant to be used by debugging tools such as the Chrome Ember Extension.\n\n- Groups all attributes in \"Attributes\" group.\n- Groups all belongsTo relationships in \"Belongs To\" group.\n- Groups all hasMany relationships in \"Has Many\" group.\n- Groups all flags in \"Flags\" group.\n- Flags relationship CPs as expensive properties.",
            "itemtype": "method",
            "name": "_debugInfo",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data"
        },
        {
            "file": "addon/-private/system/model/attr.js",
            "line": 18,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are the meta object for the\nproperty.\n\nExample\n\n```app/models/person.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n```\n\n```javascript\nimport Ember from 'ember';\nimport Person from 'app/models/person';\n\nvar attributes = Ember.get(Person, 'attributes')\n\nattributes.forEach(function(meta, name) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "property",
            "name": "attributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/attr.js",
            "line": 71,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are type of transformation\napplied to each attribute. This map does not include any\nattributes that do not have an transformation type.\n\nExample\n\n```app/models/person.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n```\n\n```javascript\nimport Ember from 'ember';\nimport Person from 'app/models/person';\n\nvar transformedAttributes = Ember.get(Person, 'transformedAttributes')\n\ntransformedAttributes.forEach(function(field, type) {\n  console.log(field, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "property",
            "name": "transformedAttributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/attr.js",
            "line": 121,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport DS from 'ember-data';\n\nvar Person = DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nPerson.eachAttribute(function(name, meta) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n   ```",
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/attr.js",
            "line": 170,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\n  applied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport DS from 'ember-data';\n\nvar Person = DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nPerson.eachTransformedAttribute(function(name, type) {\n  console.log(name, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n   ```",
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 91,
            "description": "Register with target handler",
            "itemtype": "method",
            "name": "registerHandlers",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "becameInvalid",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "becameValid",
                    "description": "",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 111,
            "description": "Register with target handler",
            "itemtype": "method",
            "name": "_registerHandlers",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 123,
            "itemtype": "property",
            "name": "errorsByAttributeName",
            "type": "{Ember.MapWithDefault}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 136,
            "description": "Returns errors for a given attribute\n\n```javascript\nvar user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save().catch(function(){\n  user.get('errors').errorsFor('email'); // returns:\n  // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n});\n```",
            "itemtype": "method",
            "name": "errorsFor",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 158,
            "description": "An array containing all of the error messages for this\nrecord. This is useful for displaying all errors to the user.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "itemtype": "property",
            "name": "messages",
            "type": "{Array}",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 175,
            "itemtype": "property",
            "name": "content",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 184,
            "itemtype": "method",
            "name": "unknownProperty",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 194,
            "description": "Total number of errors.",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 202,
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 209,
            "description": "Adds error messages to a given attribute and sends\n`becameInvalid` event to the record.\n\nExample:\n\n```javascript\nif (!user.get('username') {\n  user.get('errors').add('username', 'This field is required');\n}\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "messages",
                    "description": "",
                    "type": "(Array|String)"
                }
            ],
            "deprecated": true,
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 241,
            "description": "Adds error messages to a given attribute without sending event.",
            "itemtype": "method",
            "name": "_add",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 255,
            "itemtype": "method",
            "name": "_findOrCreateMessages",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 280,
            "description": "Removes all error messages from the given attribute and sends\n`becameValid` event to the record if there no more errors left.\n\nExample:\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  email: DS.attr('string'),\n  twoFactorAuth: DS.attr('boolean'),\n  phone: DS.attr('string')\n});\n```\n\n```app/routes/user/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    save: function(user) {\n       if (!user.get('twoFactorAuth')) {\n         user.get('errors').remove('phone');\n       }\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "deprecated": true,
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 329,
            "description": "Removes all error messages from the given attribute without sending event.",
            "itemtype": "method",
            "name": "_remove",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 345,
            "description": "Removes all error messages and sends `becameValid` event\nto the record.\n\nExample:\n\n```app/routes/user/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    retrySave: function(user) {\n       user.get('errors').clear();\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "clear",
            "deprecated": true,
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 379,
            "description": "Removes all error messages.\nto the record.",
            "itemtype": "method",
            "name": "_clear",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/errors.js",
            "line": 405,
            "description": "Checks if there is error messages for the given attribute.\n\n```app/routes/user/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    save: function(user) {\n       if (user.get('errors').has('email')) {\n         return alert('Please update your email before attempting to save.');\n       }\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if there some errors on given attribute",
                "type": "Boolean"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 54,
            "description": "If this property is `true` the record is in the `empty`\nstate. Empty is the first state all records enter after they have\nbeen created. Most records created by the store will quickly\ntransition to the `loading` state if data needs to be fetched from\nthe server or the `created` state if the record is created on the\nclient. A record can also enter the empty state if the adapter is\nunable to locate the record.",
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 68,
            "description": "If this property is `true` the record is in the `loading` state. A\nrecord enters this state when the store asks the adapter for its\ndata. It remains in this state until the adapter provides the\nrequested data.",
            "itemtype": "property",
            "name": "isLoading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 79,
            "description": "If this property is `true` the record is in the `loaded` state. A\nrecord enters this state when its data is populated. Most of a\nrecord's lifecycle is spent inside substates of the `loaded`\nstate.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isLoaded'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('isLoaded'); // true\n});\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 101,
            "description": "If this property is `true` the record is in the `dirty` state. The\nrecord has local changes that have not yet been saved by the\nadapter. This includes records that have been created (but not yet\nsaved) or deleted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('hasDirtyAttributes'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('hasDirtyAttributes'); // false\n  model.set('foo', 'some value');\n  model.get('hasDirtyAttributes'); // true\n});\n```",
            "since": "1.13.0",
            "itemtype": "property",
            "name": "hasDirtyAttributes",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 128,
            "description": "If this property is `true` the record is in the `saving` state. A\nrecord enters the saving state when `save` is called, but the\nadapter has not yet acknowledged that the changes have been\npersisted to the backend.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isSaving'); // false\nvar promise = record.save();\nrecord.get('isSaving'); // true\npromise.then(function() {\n  record.get('isSaving'); // false\n});\n```",
            "itemtype": "property",
            "name": "isSaving",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 151,
            "description": "If this property is `true` the record is in the `deleted` state\nand has been marked for deletion. When `isDeleted` is true and\n`hasDirtyAttributes` is true, the record is deleted locally but the deletion\nwas not yet persisted. When `isSaving` is true, the change is\nin-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\nchange has persisted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isDeleted');    // false\nrecord.deleteRecord();\n\n// Locally deleted\nrecord.get('isDeleted');           // true\nrecord.get('hasDirtyAttributes');  // true\nrecord.get('isSaving');            // false\n\n// Persisting the deletion\nvar promise = record.save();\nrecord.get('isDeleted');    // true\nrecord.get('isSaving');     // true\n\n// Deletion Persisted\npromise.then(function() {\n  record.get('isDeleted');          // true\n  record.get('isSaving');           // false\n  record.get('hasDirtyAttributes'); // false\n});\n```",
            "itemtype": "property",
            "name": "isDeleted",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 189,
            "description": "If this property is `true` the record is in the `new` state. A\nrecord will be in the `new` state when it has been created on the\nclient and the adapter has not yet report that it was successfully\nsaved.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isNew'); // true\n\nrecord.save().then(function(model) {\n  model.get('isNew'); // false\n});\n```",
            "itemtype": "property",
            "name": "isNew",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 211,
            "description": "If this property is `true` the record is in the `valid` state.\n\nA record will be in the `valid` state when the adapter did not report any\nserver-side validation failures.",
            "itemtype": "property",
            "name": "isValid",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 222,
            "description": "If the record is in the dirty state this property will report what\nkind of change has caused it to move into the dirty\nstate. Possible values are:\n\n- `created` The record has been created by the client and not yet saved to the adapter.\n- `updated` The record has been updated by the client and not yet saved to the adapter.\n- `deleted` The record has been deleted by the client and not yet saved to the adapter.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('dirtyType'); // 'created'\n```",
            "itemtype": "property",
            "name": "dirtyType",
            "type": "{String}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 244,
            "description": "If `true` the adapter reported that it was unable to save local\nchanges to the backend for any reason other than a server-side\nvalidation error.\n\nExample\n\n```javascript\nrecord.get('isError'); // false\nrecord.set('foo', 'valid value');\nrecord.save().then(null, function() {\n  record.get('isError'); // true\n});\n```",
            "itemtype": "property",
            "name": "isError",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 265,
            "description": "If `true` the store is attempting to reload the record form the adapter.\n\nExample\n\n```javascript\nrecord.get('isReloading'); // false\nrecord.reload();\nrecord.get('isReloading'); // true\n```",
            "itemtype": "property",
            "name": "isReloading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 282,
            "description": "All ember models have an id property. This is an identifier\nmanaged by an external source. These are always coerced to be\nstrings before being used internally. Note when declaring the\nattributes for a model it is an error to declare an id\nattribute.\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('id'); // null\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('id'); // '1'\n});\n```",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 303,
            "itemtype": "property",
            "name": "currentState",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 309,
            "description": "When the record is in the `invalid` state this object will contain\nany errors returned by the adapter. When present the errors hash\ncontains keys corresponding to the invalid property names\nand values which are arrays of Javascript objects with two keys:\n\n- `message` A string containing the error message from the backend\n- `attribute` The name of the property associated with this error message\n\n```javascript\nrecord.get('errors.length'); // 0\nrecord.set('foo', 'invalid value');\nrecord.save().catch(function() {\n  record.get('errors').get('foo');\n  // [{message: 'foo should be a number.', attribute: 'foo'}]\n});\n```\n\nThe `errors` property us useful for displaying error messages to\nthe user.\n\n```handlebars\n<label>Username: {{input value=username}} </label>\n{{#each model.errors.username as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n<label>Email: {{input value=email}} </label>\n{{#each model.errors.email as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\n\nYou can also access the special `messages` property on the error\nobject to get an array of all the error strings.\n\n```handlebars\n{{#each model.errors.messages as |message|}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "itemtype": "property",
            "name": "errors",
            "type": "{DS.Errors}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 373,
            "description": "This property holds the `DS.AdapterError` object with which\nlast adapter operation was rejected.",
            "itemtype": "property",
            "name": "adapterError",
            "type": "{DS.AdapterError}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 382,
            "description": "Create a JSON representation of the record, using the serialization\nstrategy of the store's adapter.\n\n   `serialize` takes an optional hash as a parameter, currently\nsupported options are:\n\n   - `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an object whose values are primitive JSON values only",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 400,
            "description": "Use [DS.JSONSerializer](DS.JSONSerializer.html) to\nget the JSON representation of a record.\n\n`toJSON` takes an optional hash as a parameter, currently\nsupported options are:\n\n- `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A JSON representation of the object.",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 422,
            "description": "Fired when the record is ready to be interacted with,\nthat is either loaded from the server or created locally.",
            "itemtype": "event",
            "name": "ready",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 430,
            "description": "Fired when the record is loaded from the server.",
            "itemtype": "event",
            "name": "didLoad",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 437,
            "description": "Fired when the record is updated.",
            "itemtype": "event",
            "name": "didUpdate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 444,
            "description": "Fired when a new record is commited to the server.",
            "itemtype": "event",
            "name": "didCreate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 451,
            "description": "Fired when the record is deleted.",
            "itemtype": "event",
            "name": "didDelete",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 458,
            "description": "Fired when the record becomes invalid.",
            "itemtype": "event",
            "name": "becameInvalid",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 465,
            "description": "Fired when the record enters the error state.",
            "itemtype": "event",
            "name": "becameError",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 472,
            "description": "Fired when the record is rolled back.",
            "itemtype": "event",
            "name": "rolledBack",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 479,
            "itemtype": "property",
            "name": "data",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 487,
            "itemtype": "method",
            "name": "send",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 497,
            "itemtype": "method",
            "name": "transitionTo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 507,
            "description": "Marks the record as deleted but does not save it. You must call\n`save` afterwards if you want to persist it. You might use this\nmethod if you want to allow the user to still `rollbackAttributes()`\nafter a delete it was made.\n\nExample\n\n```app/routes/model/delete.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    softDelete: function() {\n      this.controller.get('model').deleteRecord();\n    },\n    confirm: function() {\n      this.controller.get('model').save();\n    },\n    undo: function() {\n      this.controller.get('model').rollbackAttributes();\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 539,
            "description": "Same as `deleteRecord`, but saves the record immediately.\n\nExample\n\n```app/routes/model/delete.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    delete: function() {\n      var controller = this.controller;\n      controller.get('model').destroyRecord().then(function() {\n        controller.transitionToRoute('model.index');\n      });\n    }\n  }\n});\n```\n\nIf you pass an object on the `adapterOptions` property of the options\nargument it will be passed to you adapter via the snapshot\n\n```js\nrecord.destroyRecord({ adapterOptions: { subscribe: false } });\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  deleteRecord: function(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```",
            "itemtype": "method",
            "name": "destroyRecord",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 589,
            "itemtype": "method",
            "name": "unloadRecord",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 598,
            "itemtype": "method",
            "name": "_notifyProperties",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 612,
            "description": "Returns an object, whose keys are changed properties, and value is\nan [oldProp, newProp] array.\n\nThe array represents the diff of the canonical state with the local state\nof the model. Note: if the model is created locally, the canonical state is\nempty since the adapter hasn't acknowledged the attributes yet:\n\nExample\n\n```app/models/mascot.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: attr('string'),\n  isAdmin: attr('boolean', {\n    defaultValue: false\n  })\n});\n```\n\n```javascript\nvar mascot = store.createRecord('mascot');\n\nmascot.changedAttributes(); // {}\n\nmascot.set('name', 'Tomster');\nmascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n\nmascot.set('isAdmin', true);\nmascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n\nmascot.save().then(function() {\n  mascot.changedAttributes(); // {}\n\n  mascot.set('isAdmin', false);\n  mascot.changedAttributes(); // { isAdmin: [true, false] }\n});\n```",
            "itemtype": "method",
            "name": "changedAttributes",
            "return": {
                "description": "an object, whose keys are changed properties,\n  and value is an [oldProp, newProp] array.",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 662,
            "itemtype": "method",
            "name": "adapterDidDirty",
            "access": "private",
            "tagname": "adapterDidDirty: function() {\nthis.send('becomeDirty');\nthis.updateRecordArraysLater();\n  },",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 678,
            "description": "If the model `hasDirtyAttributes` this function will discard any unsaved\nchanges. If the model `isNew` it will be removed from the store.\n\nExample\n\n```javascript\nrecord.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.rollbackAttributes();\nrecord.get('name'); // 'Untitled Document'\n```",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "rollbackAttributes",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 711,
            "description": "Save the record and persist any changes to the record to an\nexternal source via the adapter.\n\nExample\n\n```javascript\nrecord.set('name', 'Tomster');\nrecord.save().then(function() {\n  // Success callback\n}, function() {\n  // Error callback\n});\n```\n\n   If you pass an object on the `adapterOptions` property of the options\n   argument it will be passed to you adapter via the snapshot\n\n```js\nrecord.save({ adapterOptions: { subscribe: false } });\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  updateRecord: function(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 757,
            "description": "Reload the record from the adapter.\n\nThis will only work if the record has already finished loading.\n\nExample\n\n```app/routes/model/view.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    reload: function() {\n      this.controller.get('model').reload().then(function(model) {\n        // do something with the reloaded model\n      });\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "a promise that will be resolved with the record when the\nadapter returns successfully or rejected if the adapter returns\nwith an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 790,
            "description": "Override the default event firing from Ember.Evented to\nalso call methods with the given name.",
            "itemtype": "method",
            "name": "trigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 830,
            "description": "Get the reference for the specified belongsTo relationship.\n\nExample\n\n```javascript\n// models/blog.js\nexport default DS.Model.extend({\n  user: DS.belongsTo({ async: true })\n});\n\nvar blog = store.push({\n  type: 'blog',\n  id: 1,\n  relationships: {\n    user: { type: 'user', id: 1 }\n  }\n});\nvar userRef = blog.belongsTo('user');\n\n// check if the user relationship is loaded\nvar isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nvar user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n  var id = userRef.id();\n} else if (userRef.remoteType() === \"link\") {\n  var link = userRef.link();\n}\n\n// load user (via store.findRecord or store.findBelongsTo)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({\n  type: 'user',\n  id: 1,\n  attributes: {\n    username: \"@user\"\n  }\n}).then(function(user) {\n  userRef.value() === user;\n});\n```",
            "itemtype": "method",
            "name": "belongsTo",
            "params": [
                {
                    "name": "name",
                    "description": "of the relationship",
                    "type": "String"
                }
            ],
            "since": "2.5.0",
            "return": {
                "description": "reference for this relationship",
                "type": "BelongsToReference"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 890,
            "description": "Get the reference for the specified hasMany relationship.\n\nExample\n\n```javascript\n// models/blog.js\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n\nvar blog = store.push({\n  type: 'blog',\n  id: 1,\n  relationships: {\n    comments: {\n      data: [\n        { type: 'comment', id: 1 },\n        { type: 'comment', id: 2 }\n      ]\n    }\n  }\n});\nvar commentsRef = blog.hasMany('comments');\n\n// check if the comments are loaded already\nvar isLoaded = commentsRef.value() !== null;\n\n// get the records of the reference (null if not yet available)\nvar comments = commentsRef.value();\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  var ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  var link = commentsRef.link();\n}\n\n// load comments (via store.findMany or store.findHasMany)\ncommentsRef.load().then(...)\n\n// or trigger a reload\ncommentsRef.reload().then(...)\n\n// provide data for reference\ncommentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {\n  commentsRef.value() === comments;\n});\n```",
            "itemtype": "method",
            "name": "hasMany",
            "params": [
                {
                    "name": "name",
                    "description": "of the relationship",
                    "type": "String"
                }
            ],
            "since": "2.5.0",
            "return": {
                "description": "reference for this relationship",
                "type": "HasManyReference"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 955,
            "description": "Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model\ninstances from within the store, but if end users accidentally call `create()`\n(instead of `createRecord()`), we can raise an error.",
            "itemtype": "method",
            "name": "_create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 966,
            "description": "Override the class' `create()` method to raise an error. This\nprevents end users from inadvertently calling `create()` instead\nof `createRecord()`. The store is still able to create instances\nby calling the `_create()` method. To create an instance of a\n`DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 981,
            "description": "Represents the model's class name as a string. This can be used to look up the model through\nDS.Store's modelFor method.\n\n`modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.\nFor example:\n\n```javascript\nstore.modelFor('post').modelName; // 'post'\nstore.modelFor('blog-post').modelName; // 'blog-post'\n```\n\nThe most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload\nkeys to underscore (instead of dasherized), you might use the following code:\n\n```javascript\nexport default var PostSerializer = DS.RESTSerializer.extend({\n  payloadKeyFromModelName: function(modelName) {\n    return Ember.String.underscore(modelName);\n  }\n});\n```",
            "itemtype": "property",
            "name": "modelName",
            "type": "String",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/model/model.js",
            "line": 1031,
            "description": "Discards any unsaved changes to the given attribute.\n\nExample\n\n```javascript\nrecord.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.resetAttribute('name');\nrecord.get('name'); // 'Untitled Document'\n```",
            "itemtype": "method",
            "name": "resetAttribute",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/adapter-populated-record-array.js",
            "line": 38,
            "itemtype": "method",
            "name": "loadRecords",
            "params": [
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "payload",
                    "description": "normalized payload",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DS.AdapterPopulatedRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/filtered-record-array.js",
            "line": 21,
            "description": "The filterFunction is a function used to test records from the store to\ndetermine if they should be part of the record array.\n\nExample\n\n```javascript\nvar allPeople = store.peekAll('person');\nallPeople.mapBy('name'); // [\"Tom Dale\", \"Yehuda Katz\", \"Trek Glowacki\"]\n\nvar people = store.filter('person', function(person) {\n  if (person.get('name').match(/Katz$/)) { return true; }\n});\npeople.mapBy('name'); // [\"Yehuda Katz\"]\n\nvar notKatzFilter = function(person) {\n  return !person.get('name').match(/Katz$/);\n};\npeople.set('filterFunction', notKatzFilter);\npeople.mapBy('name'); // [\"Tom Dale\", \"Trek Glowacki\"]\n```",
            "itemtype": "method",
            "name": "filterFunction",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "`true` if the record should be in the array",
                "type": "Boolean"
            },
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/filtered-record-array.js",
            "line": 55,
            "itemtype": "method",
            "name": "updateFilter",
            "access": "private",
            "tagname": "",
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 26,
            "description": "The model type contained by this record array.",
            "itemtype": "property",
            "name": "type",
            "type": "DS.Model",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 34,
            "description": "The array of client ids backing the record array. When a\nrecord is requested from the record array, the record\nfor the client id at the same index is materialized, if\nnecessary, by the store.",
            "itemtype": "property",
            "name": "content",
            "access": "private",
            "tagname": "",
            "type": "Ember.Array",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 46,
            "description": "The flag to signal a `RecordArray` is finished loading data.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isLoaded'); // true\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 60,
            "description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
            "itemtype": "property",
            "name": "isUpdating",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 77,
            "description": "The store that created this record array.",
            "itemtype": "property",
            "name": "store",
            "access": "private",
            "tagname": "",
            "type": "DS.Store",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 86,
            "description": "Retrieves an object from the content by index.",
            "itemtype": "method",
            "name": "objectAtContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 100,
            "description": "Used to get the latest version of all of the records in this array\nfrom the adapter.\n\nExample\n\n```javascript\nvar people = store.peekAll('person');\npeople.get('isUpdating'); // false\n\npeople.update().then(function() {\n  people.get('isUpdating'); // false\n});\n\npeople.get('isUpdating'); // true\n```",
            "itemtype": "method",
            "name": "update",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 137,
            "description": "Adds an internal model to the `RecordArray` without duplicates",
            "itemtype": "method",
            "name": "addInternalModel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                },
                {
                    "name": "an",
                    "description": "optional index to insert at",
                    "type": "Number"
                }
            ],
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 154,
            "description": "Removes an internalModel to the `RecordArray`.",
            "itemtype": "method",
            "name": "removeInternalModel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                }
            ],
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 165,
            "description": "Saves all of the records in the `RecordArray`.\n\nExample\n\n```javascript\nvar messages = store.peekAll('message');\nmessages.forEach(function(message) {\n  message.set('hasBeenSeen', true);\n});\nmessages.save();\n```",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "promise",
                "type": "DS.PromiseArray"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-arrays/record-array.js",
            "line": 201,
            "itemtype": "method",
            "name": "_unregisterFromManager",
            "access": "private",
            "tagname": "",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/belongs-to.js",
            "line": 5,
            "description": "`DS.belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n\n`DS.belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`DS.belongsTo`:\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  profile: DS.belongsTo('profile')\n});\n```\n\n```app/models/profile.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  user: DS.belongsTo('user')\n});\n```\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the key name.\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo()\n});\n```\n\nwill lookup for a Post type.",
            "itemtype": "method",
            "name": "belongsTo",
            "params": [
                {
                    "name": "modelName",
                    "description": "(optional) type of the relationship",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "(optional) a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "relationship",
                "type": "Ember.computed"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 102,
            "description": "This Ember.js hook allows an object to be notified when a property\nis defined.\n\nIn this case, we use it to be notified when an Ember Data user defines a\nbelongs-to relationship. In that case, we need to set up observers for\neach one, allowing us to track relationship changes and automatically\nreflect changes in the inverse has-many array.\n\nThis hook passes the class being set up, as well as the key and value\nbeing defined. So, for example, when the user does this:\n\n```javascript\nDS.Model.extend({\n  parent: DS.belongsTo('user')\n});\n```\n\nThis hook would be called with \"parent\" as the key and the computed\nproperty returned by `DS.belongsTo` as the value.",
            "itemtype": "method",
            "name": "didDefineProperty",
            "params": [
                {
                    "name": "proto",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Ember.ComputedProperty"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 161,
            "description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n   ```\n\nCalling `App.Post.typeForRelationship('comments')` will return `App.Comment`.",
            "itemtype": "method",
            "name": "typeForRelationship",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the relationship",
                    "type": "String"
                },
                {
                    "name": "store",
                    "description": "an instance of DS.Store",
                    "type": "Store"
                }
            ],
            "return": {
                "description": "the type of the relationship, or undefined",
                "type": "DS.Model"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 191,
            "description": "Find the relationship which is the inverse of the one asked for.\n\nFor example, if you define models like this:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('message')\n});\n```\n\n```app/models/message.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  owner: DS.belongsTo('post')\n});\n```\n\nApp.Post.inverseFor('comments') -> { type: App.Message, name: 'owner', kind: 'belongsTo' }\nApp.Message.inverseFor('owner') -> { type: App.Post, name: 'comments', kind: 'hasMany' }",
            "itemtype": "method",
            "name": "inverseFor",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the relationship",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the inverse relationship, or null",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 325,
            "description": "The model's relationships as a map, keyed on the type of the\nrelationship. The value of each entry is an array containing a descriptor\nfor each relationship with that type, describing the name of the relationship\nas well as the type.\n\nFor example, given the following model definition:\n\n```app/models/blog.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n  posts: DS.hasMany('post')\n});\n```\n\nThis computed property would return a map describing these\nrelationships, like this:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationships = Ember.get(Blog, 'relationships');\nrelationships.get(App.User);\n//=> [ { name: 'users', kind: 'hasMany' },\n//     { name: 'owner', kind: 'belongsTo' } ]\nrelationships.get(App.Post);\n//=> [ { name: 'posts', kind: 'hasMany' } ]\n```",
            "itemtype": "property",
            "name": "relationships",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 366,
            "description": "A hash containing lists of the model's relationships, grouped\nby the relationship kind. For example, given a model with this\ndefinition:\n\n```app/models/blog.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationshipNames = Ember.get(Blog, 'relationshipNames');\nrelationshipNames.hasMany;\n//=> ['users', 'posts']\nrelationshipNames.belongsTo;\n//=> ['owner']\n```",
            "itemtype": "property",
            "name": "relationshipNames",
            "static": 1,
            "type": "Object",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 415,
            "description": "An array of types directly related to a model. Each type will be\nincluded once, regardless of the number of relationships it has with\nthe model.\n\nFor example, given a model with this definition:\n\n```app/models/blog.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relatedTypes = Ember.get(Blog, 'relatedTypes');\n//=> [ App.User, App.Post ]\n```",
            "itemtype": "property",
            "name": "relatedTypes",
            "static": 1,
            "type": "Ember.Array",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 450,
            "description": "A map whose keys are the relationships of a model and whose values are\nrelationship descriptors.\n\nFor example, given a model with this\ndefinition:\n\n```app/models/blog.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationshipsByName = Ember.get(Blog, 'relationshipsByName');\nrelationshipsByName.get('users');\n//=> { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }\nrelationshipsByName.get('owner');\n//=> { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }\n```",
            "itemtype": "property",
            "name": "relationshipsByName",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 488,
            "description": "A map whose keys are the fields of the model and whose values are strings\ndescribing the kind of the field. A model's fields are the union of all of its\nattributes and relationships.\n\nFor example:\n\n```app/models/blog.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post'),\n\n  title: DS.attr('string')\n});\n```\n\n```js\nimport Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar fields = Ember.get(Blog, 'fields');\nfields.forEach(function(kind, field) {\n  console.log(field, kind);\n});\n\n// prints:\n// users, hasMany\n// owner, belongsTo\n// posts, hasMany\n// title, attribute\n```",
            "itemtype": "property",
            "name": "fields",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 543,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 559,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "itemtype": "method",
            "name": "eachRelatedType",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/ext.js",
            "line": 603,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.\n\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, descriptor);\n```\n\n- `name` the name of the current property in the iteration\n- `descriptor` the meta object that describes this relationship\n\nThe relationship descriptor argument is an object with the following properties.\n\n   - **key** <span class=\"type\">String</span> the name of this relationship on the Model\n   - **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n   - **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n   - **parentType** <span class=\"type\">DS.Model</span> the type of the Model that owns this relationship\n   - **type** <span class=\"type\">String</span> the type name of the related Model\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(record, options) {\n    var json = {};\n\n    record.eachRelationship(function(name, descriptor) {\n      if (descriptor.kind === 'hasMany') {\n        var serializedHasManyName = name.toUpperCase() + '_IDS';\n        json[serializedHasManyName] = record.get(name).mapBy('id');\n      }\n    });\n\n    return json;\n  }\n});\n```",
            "itemtype": "method",
            "name": "eachRelationship",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/relationships/has-many.js",
            "line": 11,
            "description": "`DS.hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n`DS.hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a related model.\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`DS.hasMany`:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  tags: DS.hasMany('tag')\n});\n```\n\n```app/models/tag.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  posts: DS.hasMany('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the singularized key name.\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  tags: DS.hasMany()\n});\n```\n\nwill lookup for a Tag type.\n\n#### Explicit Inverses\n\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\n\nHowever, sometimes you may have multiple `belongsTo`/`hasManys` for the\nsame type. You can specify which property on the related model is\nthe inverse using `DS.hasMany`'s `inverse` option:\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  onePost: DS.belongsTo('post'),\n  twoPost: DS.belongsTo('post'),\n  redPost: DS.belongsTo('post'),\n  bluePost: DS.belongsTo('post')\n});\n```\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n```\n\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.",
            "itemtype": "method",
            "name": "hasMany",
            "params": [
                {
                    "name": "type",
                    "description": "(optional) type of the relationship",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "(optional) a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "relationship",
                "type": "Ember.computed"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 101,
            "description": "`true` if the relationship is polymorphic, `false` otherwise.",
            "itemtype": "property",
            "name": "isPolymorphic",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 109,
            "description": "The loading state of this array",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "Boolean",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 116,
            "description": "The relationship which manages this array.",
            "itemtype": "property",
            "name": "relationship",
            "type": "ManyRelationship",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 124,
            "description": "Metadata associated with the request for async hasMany relationships.\n\nExample\n\nGiven that the server returns the following JSON payload when fetching a\nhasMany relationship:\n\n```js\n{\n  \"comments\": [{\n    \"id\": 1,\n    \"comment\": \"This is the first comment\",\n  }, {\n    // ...\n  }],\n\n  \"meta\": {\n    \"page\": 1,\n    \"total\": 5\n  }\n}\n```\n\nYou can then access the metadata via the `meta` property:\n\n```js\npost.get('comments').then(function(comments) {\n  var meta = comments.get('meta');\n\n  // meta.page => 1\n  // meta.total => 5\n});\n```",
            "itemtype": "property",
            "name": "meta",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 206,
            "description": "Used for async `hasMany` arrays\nto keep track of when they will resolve.",
            "itemtype": "property",
            "name": "promise",
            "type": "Ember.RSVP.Promise",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 215,
            "itemtype": "method",
            "name": "loadingRecordsCount",
            "params": [
                {
                    "name": "count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 224,
            "itemtype": "method",
            "name": "loadedRecord",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 236,
            "itemtype": "method",
            "name": "reload",
            "access": "public",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 244,
            "description": "Saves all of the records in the `ManyArray`.\n\nExample\n\n```javascript\nstore.findRecord('inbox', 1).then(function(inbox) {\n  inbox.get('messages').then(function(messages) {\n    messages.forEach(function(message) {\n      message.set('isRead', true);\n    });\n    messages.save()\n  });\n});\n```",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "promise",
                "type": "DS.PromiseArray"
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/many-array.js",
            "line": 273,
            "description": "Create a child record within the owner",
            "itemtype": "method",
            "name": "createRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/normalize-model-name.js",
            "line": 3,
            "description": "All modelNames are dasherized internally. Changing this function may\nrequire changes to other normalization hooks (such as typeForRoot).",
            "itemtype": "method",
            "name": "normalizeModelName",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 48,
            "description": "This method is invoked whenever data is loaded into the store by the\nadapter or updated by the adapter, or when a record has changed.\n\nIt updates all record arrays that a record belongs to.\n\nTo avoid thrashing, it only runs at most once per run loop.",
            "itemtype": "method",
            "name": "updateRecordArrays",
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 108,
            "description": "Update an individual filter.",
            "itemtype": "method",
            "name": "updateFilterRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.FilteredRecordArray"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "InternalModel"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 150,
            "description": "This method is invoked if the `filterFunction` property is\nchanged on a `DS.FilteredRecordArray`.\n\nIt essentially re-runs the filter from scratch. This same\nmethod is invoked when the filter is created in th first place.",
            "itemtype": "method",
            "name": "updateFilter",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 176,
            "description": "Get the `DS.RecordArray` for a type, which contains all loaded records of\ngiven type.",
            "itemtype": "method",
            "name": "liveRecordArrayFor",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 188,
            "description": "Create a `DS.RecordArray` for a type.",
            "itemtype": "method",
            "name": "createRecordArray",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 207,
            "description": "Create a `DS.FilteredRecordArray` for a type and register it for updates.",
            "itemtype": "method",
            "name": "createFilteredRecordArray",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "query",
                    "description": "(optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.FilteredRecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 231,
            "description": "Create a `DS.AdapterPopulatedRecordArray` for a type with given query.",
            "itemtype": "method",
            "name": "createAdapterPopulatedRecordArray",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.AdapterPopulatedRecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 253,
            "description": "Register a RecordArray for a given type to be backed by\na filter function. This will cause the array to update\nautomatically when records of that type change attribute\nvalues or states.",
            "itemtype": "method",
            "name": "registerFilteredRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.RecordArray"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/record-array-manager.js",
            "line": 271,
            "description": "Unregister a RecordArray.\nSo manager will not update this array.",
            "itemtype": "method",
            "name": "unregisterRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.RecordArray"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 14,
            "description": "An array of snapshots",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_snapshots",
            "type": "{Array}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 21,
            "description": "An array of records",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_recordArray",
            "type": "{Array}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 28,
            "description": "Number of records in the array",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 34,
            "description": "The type of the underlying records for the snapshots in the array, as a DS.Model",
            "itemtype": "property",
            "name": "type",
            "type": "{DS.Model}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 40,
            "description": "Meta object",
            "itemtype": "property",
            "name": "meta",
            "type": "{Object}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 46,
            "description": "A hash of adapter options",
            "itemtype": "property",
            "name": "adapterOptions",
            "type": "{Object}",
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot-record-array.js",
            "line": 56,
            "description": "Get snapshots of the underlying record array",
            "itemtype": "method",
            "name": "snapshots",
            "return": {
                "description": "Array of snapshots",
                "type": "Array"
            },
            "class": "DS.SnapshotRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 33,
            "description": "A hash of adapter options",
            "itemtype": "property",
            "name": "adapterOptions",
            "type": "{Object}",
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 48,
            "description": "The id of the snapshot's underlying record\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.id; // => '1'\n```",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 63,
            "description": "The underlying record for this snapshot. Can be used to access methods and\nproperties defined on the record.\n\nExample\n\n```javascript\nvar json = snapshot.record.toJSON();\n```",
            "itemtype": "property",
            "name": "record",
            "type": "{DS.Model}",
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 78,
            "description": "The type of the underlying record for this snapshot, as a DS.Model.",
            "itemtype": "property",
            "name": "type",
            "type": "{DS.Model}",
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 86,
            "description": "The name of the type of the underlying record for this snapshot, as a string.",
            "itemtype": "property",
            "name": "modelName",
            "type": "{String}",
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 94,
            "description": "Returns the value of an attribute.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attr('author'); // => 'Tomster'\npostSnapshot.attr('title'); // => 'Ember.js rocks'\n```\n\nNote: Values are loaded eagerly and cached when the snapshot is created.",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The attribute value or undefined",
                "type": "Object"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 118,
            "description": "Returns all attributes and their corresponding values.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }\n```",
            "itemtype": "method",
            "name": "attributes",
            "return": {
                "description": "All attributes of the current snapshot",
                "type": "Object"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 135,
            "description": "Returns all changed attributes and their old and new values.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostModel.set('title', 'Ember.js rocks!');\npostSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n```",
            "itemtype": "method",
            "name": "changedAttributes",
            "return": {
                "description": "All changed attributes of the current snapshot",
                "type": "Object"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 161,
            "description": "Returns the current value of a belongsTo relationship.\n\n`belongsTo` takes an optional hash of options as a second parameter,\ncurrently supported options are:\n\n   - `id`: set to `true` if you only want the ID of the related record to be\n  returned.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, title: 'Hello World' });\n// store.createRecord('comment', { body: 'Lorem ipsum', post: post });\ncommentSnapshot.belongsTo('post'); // => DS.Snapshot\ncommentSnapshot.belongsTo('post', { id: true }); // => '1'\n\n// store.push('comment', { id: 1, body: 'Lorem ipsum' });\ncommentSnapshot.belongsTo('post'); // => undefined\n```\n\nCalling `belongsTo` will return a new Snapshot as long as there's any known\ndata for the relationship available, such as an ID. If the relationship is\nknown but unset, `belongsTo` will return `null`. If the contents of the\nrelationship is unknown `belongsTo` will return `undefined`.\n\nNote: Relationships are loaded lazily and cached upon first access.",
            "itemtype": "method",
            "name": "belongsTo",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A snapshot or ID of a known\n  relationship or null if the relationship is known but unset. undefined\n  will be returned if the contents of the relationship is unknown.",
                "type": "(DS.Snapshot|String|null|undefined)"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 238,
            "description": "Returns the current value of a hasMany relationship.\n\n`hasMany` takes an optional hash of options as a second parameter,\ncurrently supported options are:\n\n   - `ids`: set to `true` if you only want the IDs of the related records to be\n  returned.\n\nExample\n\n```javascript\n// store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\npostSnapshot.hasMany('comments'); // => [DS.Snapshot, DS.Snapshot]\npostSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']\n\n// store.push('post', { id: 1, title: 'Hello World' });\npostSnapshot.hasMany('comments'); // => undefined\n```\n\nNote: Relationships are loaded lazily and cached upon first access.",
            "itemtype": "method",
            "name": "hasMany",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of snapshots or IDs of a known\n  relationship or an empty array if the relationship is known but unset.\n  undefined will be returned if the contents of the relationship is unknown.",
                "type": "(Array|undefined)"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 310,
            "description": "Iterates through all the attributes of the model, calling the passed\nfunction on each attribute.\n\nExample\n\n```javascript\nsnapshot.eachAttribute(function(name, meta) {\n  // ...\n});\n```",
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 330,
            "description": "Iterates through all the relationships of the model, calling the passed\nfunction on each relationship.\n\nExample\n\n```javascript\nsnapshot.eachRelationship(function(name, relationship) {\n  // ...\n});\n```",
            "itemtype": "method",
            "name": "eachRelationship",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/snapshot.js",
            "line": 350,
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an object whose values are primitive JSON values only",
                "type": "Object"
            },
            "class": "DS.Snapshot",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 172,
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 190,
            "description": "The adapter to use to communicate to a backend server or other persistence layer.\n\nThis can be specified as an instance, class, or string.\n\nIf you want to specify `app/adapters/custom.js` as a string, do:\n\n```js\nadapter: 'custom'\n```",
            "itemtype": "property",
            "name": "adapter",
            "default": "DS.JSONAPIAdapter",
            "type": "{(DS.Adapter|String)}",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 207,
            "description": "Returns a JSON representation of the record using a custom\ntype-specific serializer, if one exists.\n\nThe available options are:\n\n* `includeId`: `true` if the record's ID should be included in\n  the JSON representation",
            "itemtype": "method",
            "name": "serialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "the record to serialize",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "an options hash",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 226,
            "description": "This property returns the adapter, after resolving a possible\nstring key.\n\nIf the supplied `adapter` was a class, or a String property\npath resolved to a class, this property will instantiate the\nclass.\n\nThis property is cacheable, so the same instance of a specified\nadapter class should be used for the lifetime of the store.",
            "itemtype": "property",
            "name": "defaultAdapter",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "DS.Adapter"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 255,
            "description": "Create a new record in the current store. The properties passed\nto this method are set on the newly created record.\n\nTo create a new instance of a `Post`:\n\n```js\nstore.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n```\n\nTo create a new instance of a `Post` that has a relationship with a `User` record:\n\n```js\nvar user = this.store.peekRecord('user', 1);\nstore.createRecord('post', {\n  title: \"Rails is omakase\",\n  user: user\n});\n```",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "inputProperties",
                    "description": "a hash of properties to set on the\n  newly created record.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 318,
            "description": "If possible, this method asks the adapter to generate an ID for\na newly created record.",
            "itemtype": "method",
            "name": "_generateId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "from the new record",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 342,
            "description": "For symmetry, a record can be deleted via the store.\n\nExample\n\n```javascript\nvar post = store.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n\nstore.deleteRecord(post);\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 362,
            "description": "For symmetry, a record can be unloaded via the store. Only\nnon-dirty records can be unloaded.\n\nExample\n\n```javascript\nstore.findRecord('post', 1).then(function(post) {\n  store.unloadRecord(post);\n});\n```",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 385,
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 417,
            "description": "This method returns a record for a given type and id combination.\n\nThe `findRecord` method will always resolve its promise with the same\nobject for a given type and `id`.\n\nThe `findRecord` method will always return a **promise** that will be\nresolved with the record.\n\nExample\n\n```app/routes/post.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n});\n```\n\nIf the record is not yet available, the store will ask the adapter's `find`\nmethod to find the necessary data. If the record is already present in the\nstore, it depends on the reload behavior _when_ the returned promise\nresolves.\n\n### Reloading\n\nThe reload behavior is configured either via the passed `options` hash or\nthe result of the adapter's `shouldReloadRecord`.\n\nIf `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\nto `true`, then the returned promise resolves once the adapter returns\ndata, regardless if the requested record is already in the store:\n\n```js\nstore.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\n// adapter#findRecord resolves with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\nstore.findRecord('post', 1, { reload: true }).then(function(post) {\n  post.get(\"revision\"); // 2\n});\n```\n\nIf no reload is indicated via the abovementioned ways, then the promise\nimmediately resolves with the cached version in the store.\n\n### Background Reloading\n\nOptionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\nthen a background reload is started, which updates the records' data, once\nit is available:\n\n```js\n// app/adapters/post.js\nimport ApplicationAdapter from \"./application\";\n\nexport default ApplicationAdapter.extend({\n  shouldReloadRecord(store, snapshot) {\n    return false;\n  },\n\n  shouldBackgroundReloadRecord(store, snapshot) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\nvar blogPost = store.findRecord('post', 1).then(function(post) {\n  post.get('revision'); // 1\n});\n\n// later, once adapter#findRecord resolved with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\n\nblogPost.get('revision'); // 2\n```\n\nIf you would like to force or prevent background reloading, you can set a\nboolean value for `backgroundReload` in the options object for\n`findRecord`.\n\n```app/routes/post/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n  }\n});\n```\n\n   If you pass an object on the `adapterOptions` property of the options\n   argument it will be passed to you adapter via the snapshot\n\n```app/routes/post/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id, {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findRecord: function(store, type, id, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```\n\nSee [peekRecord](#method_peekRecord) to get the cached version of a record.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "(String|Integer)"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 644,
            "description": "This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findByIds",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 666,
            "description": "This method is called by `findRecord` if it discovers that a particular\ntype/id pair hasn't been loaded yet to kick off a request to the\nadapter.",
            "itemtype": "method",
            "name": "fetchRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "model",
                    "type": "InternalModel"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 825,
            "description": "Get the reference for the specified record.\n\nExample\n\n```javascript\nvar userRef = store.getReference('user', 1);\n\n// check if the user is loaded\nvar isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nvar user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\nvar id = userRef.id();\n}\n\n// load user (via store.find)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({ id: 1, username: \"@user\" }).then(function(user) {\nuserRef.value() === user;\n});\n```",
            "itemtype": "method",
            "name": "getReference",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "since": "2.5.0",
            "return": {
                "description": "",
                "type": "RecordReference"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 866,
            "description": "Get a record by a given type and ID without triggering a fetch.\n\nThis method will synchronously return the record if it is available in the store,\notherwise it will return `null`. A record is available if it has been fetched earlier, or\npushed manually into the store.\n\n_Note: This is an synchronous method and does not return a promise._\n\n```js\nvar post = store.peekRecord('post', 1);\n\npost.get('id'); // 1\n```",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "peekRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model|null"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 897,
            "description": "This method is called by the record's `reload` method.\n\nThis method calls the adapter's `find` method, which returns a promise. When\n**that** promise resolves, `reloadRecord` will resolve the promise returned\nby the record's `reload`.",
            "itemtype": "method",
            "name": "reloadRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 921,
            "description": "Returns true if a record for a given type and ID is already loaded.",
            "itemtype": "method",
            "name": "hasRecordForId",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "(String|DS.Model)"
                },
                {
                    "name": "inputId",
                    "description": "",
                    "type": "(String|Integer)"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 938,
            "description": "Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.",
            "itemtype": "method",
            "name": "recordForId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "(String|Integer)"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 969,
            "itemtype": "method",
            "name": "findMany",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModels",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 986,
            "description": "If a relationship was originally populated by the adapter as a link\n(as opposed to a list of IDs), this method is called when the\nrelationship is fetched.\n\nThe link (which is usually a URL) is passed through unchanged, so the\nadapter can make whatever request it wants.\n\nThe usual use-case is for the server to register a URL as a link, and\nthen use that URL in the future to make a request for the relationship.",
            "itemtype": "method",
            "name": "findHasMany",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "(Relationship)"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1013,
            "itemtype": "method",
            "name": "findBelongsTo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Relationship"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1030,
            "description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { page: 1 });\n```\n\nThe call made to the server, using a Rails backend, will look something like this:\n\n```\nStarted GET \"/api/v1/person?page=1\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"page\"=>\"1\" }\n```\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { ids: [1, 2, 3] });\n```\n\nThe call to the server, using a Rails backend, will look something like this:\n\n```\nStarted GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"ids\" => [\"1\", \"2\", \"3\"] }\n```\n\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1099,
            "description": "This method makes a request for one record, where the `id` is not known\nbeforehand (if the `id` is known, use `findRecord` instead).\n\nThis method can be used when it is certain that the server will return a\nsingle object for the primary data.\n\nLet's assume our API provides an endpoint for the currently logged in user\nvia:\n\n```\n// GET /api/current_user\n{\n  user: {\n    id: 1234,\n    username: 'admin'\n  }\n}\n```\n\nSince the specific `id` of the `user` is not known beforehand, we can use\n`queryRecord` to get the user:\n\n```javascript\nstore.queryRecord('user', {}).then(function(user) {\n  let username = user.get('username');\n  console.log(`Currently logged in as ${username}`);\n});\n```\n\nThe request is made through the adapters' `queryRecord`:\n\n```javascript\n// app/adapters/user.js\nimport DS from \"ember-data\";\n\nexport default DS.Adapter.extend({\n  queryRecord(modelName, query) {\n    return Ember.$.getJSON(\"/api/current_user\");\n  }\n});\n```\n\nNote: the primary use case for `store.queryRecord` is when a single record\nis queried and the `id` is not known beforehand. In all other cases\n`store.query` and using the first item of the array is likely the preferred\nway:\n\n```\n// GET /users?username=unique\n{\n  data: [{\n    id: 1234,\n    type: 'user',\n    attributes: {\n      username: \"unique\"\n    }\n  }]\n}\n```\n\n```javascript\nstore.query('user', { username: 'unique' }).then(function(users) {\n  return users.get('firstObject');\n}).then(function(user) {\n  let id = user.get('id');\n});\n```\n\nThis method returns a promise, which resolves with the found record.\n\nIf the adapter returns no data for the primary data of the payload, then\n`queryRecord` resolves with `null`:\n\n```\n// GET /users?username=unique\n{\n  data: null\n}\n```\n\n```javascript\nstore.queryRecord('user', { username: 'unique' }).then(function(user) {\n  console.log(user); // null\n});\n```",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "promise which resolves with the found record or `null`",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1206,
            "description": "`findAll` asks the adapter's `findAll` method to find the records for the\ngiven type, and returns a promise which will resolve with all records of\nthis type present in the store, even if the adapter only returns a subset\nof them.\n\n```app/routes/authors.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findAll('author');\n  }\n});\n```\n\n_When_ the returned promise resolves depends on the reload behavior,\nconfigured via the passed `options` hash and the result of the adapter's\n`shouldReloadAll` method.\n\n### Reloading\n\nIf `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n`true`, then the returned promise resolves once the adapter returns data,\nregardless if there are already records in the store:\n\n```js\nstore.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\n// adapter#findAll resolves with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\nstore.findAll('author', { reload: true }).then(function(authors) {\n  authors.getEach(\"id\"); // ['first', 'second']\n});\n```\n\nIf no reload is indicated via the abovementioned ways, then the promise\nimmediately resolves with all the records currently loaded in the store.\n\n### Background Reloading\n\nOptionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\nthen a background reload is started. Once this resolves, the array with\nwhich the promise resolves, is updated automatically so it contains all the\nrecords in the store:\n\n```js\n// app/adapters/application.js\nexport default DS.Adapter.extend({\n  shouldReloadAll(store, snapshotsArray) {\n    return false;\n  },\n\n  shouldBackgroundReloadAll(store, snapshotsArray) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\nvar allAuthors;\nstore.findAll('author').then(function(authors) {\n  authors.getEach('id'); // ['first']\n\n  allAuthors = authors;\n});\n\n// later, once adapter#findAll resolved with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\n\nallAuthors.getEach('id'); // ['first', 'second']\n```\n\nIf you would like to force or prevent background reloading, you can set a\nboolean value for `backgroundReload` in the options object for\n`findAll`.\n\n```app/routes/post/edit.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function() {\n    return this.store.findAll('post', { backgroundReload: false });\n  }\n});\n```\n\nIf you pass an object on the `adapterOptions` property of the options\nargument it will be passed to you adapter via the `snapshotRecordArray`\n\n```app/routes/posts.js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findAll('post', {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n```\n\n```app/adapters/post.js\nimport MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findAll: function(store, type, sinceToken, snapshotRecordArray) {\n    if (snapshotRecordArray.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n```\n\n\nSee [peekAll](#method_peekAll) to get an array of current records in the\nstore, without waiting until a reload is finished.\n\nSee [query](#method_query) to only get a subset of records from the server.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1363,
            "itemtype": "method",
            "name": "_fetchAll",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.RecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1401,
            "itemtype": "method",
            "name": "didUpdateAll",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1411,
            "description": "This method returns a filtered array that contains all of the\nknown records for a given type in the store.\n\nNote that because it's just a filter, the result will contain any\nlocally created records of the type, however, it will not make a\nrequest to the backend to retrieve additional records. If you\nwould like to request all the records from the backend please use\n[store.findAll](#method_findAll).\n\nAlso note that multiple calls to `peekAll` for a given type will always\nreturn the same `RecordArray`.\n\nExample\n\n```javascript\nvar localPosts = store.peekAll('post');\n```",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "peekAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1446,
            "description": "This method unloads all records in the store.\n\nOptionally you can pass a type which unload all records for a given type.\n\n```javascript\nstore.unloadAll();\nstore.unloadAll('post');\n```",
            "itemtype": "method",
            "name": "unloadAll",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String="
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1487,
            "description": "Takes a type and filter function, and returns a live RecordArray that\nremains up to date as new records are loaded into the store or created\nlocally.\n\nThe filter function takes a materialized record, and returns true\nif the record should be included in the filter and false if it should\nnot.\n\nExample\n\n```javascript\nstore.filter('post', function(post) {\n  return post.get('unread');\n});\n```\n\nThe filter function is called once on all records for the type when\nit is created, and then once on each newly loaded or created record.\n\nIf any of a record's properties change, or if it changes state, the\nfilter function will be invoked again to determine whether it should\nstill be in the array.\n\nOptionally you can pass a query, which is the equivalent of calling\n[query](#method_query) with that same query, to fetch additional records\nfrom the server. The results returned by the server could then appear\nin the filter if they match the filter function.\n\nThe query itself is not used to filter records, it's only sent to your\nserver for you to be able to do server-side filtering. The filter\nfunction will be applied on the returned results regardless.\n\nExample\n\n```javascript\nstore.filter('post', { unread: true }, function(post) {\n  return post.get('unread');\n}).then(function(unreadPosts) {\n  unreadPosts.get('length'); // 5\n  var unreadPost = unreadPosts.objectAt(0);\n  unreadPost.set('unread', false);\n  unreadPosts.get('length'); // 4\n});\n```",
            "itemtype": "method",
            "name": "filter",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "optional query",
                    "type": "Object"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.PromiseArray"
            },
            "deprecated": true,
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1574,
            "description": "This method returns if a certain record is already loaded\nin the store. Use this function to know beforehand if a findRecord()\nwill result in a request or that it will be a cache hit.\n\n Example\n\n```javascript\nstore.recordIsLoaded('post', 1); // false\nstore.findRecord('post', 1).then(function() {\n  store.recordIsLoaded('post', 1); // true\n});\n```",
            "itemtype": "method",
            "name": "recordIsLoaded",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1603,
            "description": "If the adapter updates attributes the record will notify\nthe store to update its  membership in any filters.\nTo avoid thrashing, this method is invoked only once per\nrun loop per record.",
            "itemtype": "method",
            "name": "dataWasUpdated",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1622,
            "description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
            "itemtype": "method",
            "name": "scheduleSave",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                },
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Resolver"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1645,
            "description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
            "itemtype": "method",
            "name": "flushPendingSave",
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1677,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\n\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.",
            "itemtype": "method",
            "name": "didSaveRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "the in-flight internal model",
                    "type": "InternalModel"
                },
                {
                    "name": "data",
                    "description": "optional data (see above)",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1706,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected with a `DS.InvalidError`.",
            "itemtype": "method",
            "name": "recordWasInvalid",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                },
                {
                    "name": "errors",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1720,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected (with anything other than a `DS.InvalidError`).",
            "itemtype": "method",
            "name": "recordWasError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                },
                {
                    "name": "error",
                    "description": "",
                    "type": "Error"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1734,
            "description": "When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\nresolves with data, this method extracts the ID from the supplied\ndata.",
            "itemtype": "method",
            "name": "updateId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1755,
            "description": "Returns a map of IDs to client IDs for a given type.",
            "itemtype": "method",
            "name": "typeMapFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "typeMap",
                "type": "Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1786,
            "description": "This internal method is used by `push`.",
            "itemtype": "method",
            "name": "_load",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "(String|DS.Model)"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1841,
            "description": "Returns a model class for a particular key. Used by\nmethods that take a type key (like `find`, `createRecord`,\netc.)",
            "itemtype": "method",
            "name": "modelFor",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 1877,
            "description": "Push some data for a given type into the store.\n\nThis method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n- record's `type` should always be in singular, dasherized form\n- members (properties) should be camelCased\n\n[Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n\n```js\nstore.push({\n  data: {\n    // primary data for single record of type `Person`\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Daniel',\n      lastName: 'Kmak'\n    }\n  }\n});\n```\n\n[Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n\n`data` property can also hold an array (of records):\n\n```js\nstore.push({\n  data: [\n    // an array of records\n    {\n      id: '1',\n      type: 'person',\n      attributes: {\n        firstName: 'Daniel',\n        lastName: 'Kmak'\n      }\n    },\n    {\n      id: '2',\n      type: 'person',\n      attributes: {\n        firstName: 'Tom',\n        lastName: 'Dale'\n      }\n    }\n  ]\n});\n```\n\n[Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n\nThere are some typical properties for `JSONAPI` payload:\n* `id` - mandatory, unique record's key\n* `type` - mandatory string which matches `model`'s dasherized name in singular form\n* `attributes` - object which holds data for record attributes - `DS.attr`'s declared in model\n* `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n  - [`links`](http://jsonapi.org/format/#document-links)\n  - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n  - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n\nFor this model:\n\n```app/models/person.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n\n  children: DS.hasMany('person')\n});\n```\n\nTo represent the children as IDs:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        data: [\n          {\n            id: '2',\n            type: 'person'\n          },\n          {\n            id: '3',\n            type: 'person'\n          },\n          {\n            id: '4',\n            type: 'person'\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n[Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n\nTo represent the children relationship as a URL:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        links: {\n          related: '/people/1/children'\n        }\n      }\n    }\n  }\n}\n```\n\nIf you're streaming data or implementing an adapter, make sure\nthat you have converted the incoming data into this form. The\nstore's [normalize](#method_normalize) method is a convenience\nhelper for converting a json payload into the form Ember Data\nexpects.\n\n```js\nstore.push(store.normalize('person', data));\n```\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the record(s) that was created or\n  updated.",
                "type": "DS.Model|Array"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2105,
            "description": "Push some raw data into the store.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n```\n\n```js\nvar pushData = {\n  posts: [\n    { id: 1, post_title: \"Great post\", comment_ids: [2] }\n  ],\n  comments: [\n    { id: 2, comment_body: \"Insightful comment\" }\n  ]\n}\n\nstore.pushPayload(pushData);\n```\n\nBy default, the data will be deserialized using a default\nserializer (the application serializer if it exists).\n\nAlternatively, `pushPayload` will accept a model type which\nwill determine which serializer will process the payload.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n```\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer;\n```\n\n```js\nstore.pushPayload('comment', pushData); // Will use the application serializer\nstore.pushPayload('post', pushData); // Will use the post serializer\n```",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "modelName",
                    "description": "Optionally, a model type used to determine which serializer will be used",
                    "type": "String"
                },
                {
                    "name": "inputPayload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2179,
            "description": "`normalize` converts a json payload into the normalized form that\n[push](#method_push) expects.\n\nExample\n\n```js\nsocket.on('message', function(message) {\n  var modelName = message.model;\n  var data = message.data;\n  store.push(store.normalize(modelName, data));\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "modelName",
                    "description": "The name of the model type for this payload",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The normalized payload",
                "type": "Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2206,
            "description": "Build a brand new record for a given type, ID, and\ninitial data.",
            "itemtype": "method",
            "name": "buildRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "internal model",
                "type": "InternalModel"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2248,
            "description": "When a record is destroyed, this un-indexes it and\nremoves it from any record arrays so it can be GCed.",
            "itemtype": "method",
            "name": "_dematerializeRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "internalModel",
                    "description": "",
                    "type": "InternalModel"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2275,
            "description": "Returns an instance of the adapter for a given type. For\nexample, `adapterFor('person')` will return an instance of\n`App.PersonAdapter`.\n\nIf no `App.PersonAdapter` is found, this method will look\nfor an `App.ApplicationAdapter` (the default adapter for\nyour entire application).\n\nIf no `App.ApplicationAdapter` is found, it will return\nthe value of the `defaultAdapter`.",
            "itemtype": "method",
            "name": "adapterFor",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DS.Adapter"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2307,
            "description": "Returns an instance of the serializer for a given type. For\nexample, `serializerFor('person')` will return an instance of\n`App.PersonSerializer`.\n\nIf no `App.PersonSerializer` is found, this method will look\nfor an `App.ApplicationSerializer` (the default serializer for\nyour entire application).\n\nif no `App.ApplicationSerializer` is found, it will attempt\nto get the `defaultSerializer` from the `PersonAdapter`\n(`adapterFor('person')`).\n\nIf a serializer cannot be found on the adapter, it will fall back\nto an instance of `DS.JSONSerializer`.",
            "itemtype": "method",
            "name": "serializerFor",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "the record to serialize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.Serializer"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/system/store.js",
            "line": 2342,
            "description": "Retrieve a particular instance from the\ncontainer cache. If not found, creates it and\nplacing it in the cache.\n\nEnabled a store to manage local instances of\nadapters and serializers.",
            "itemtype": "method",
            "name": "retrieveManagedInstance",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "modelName",
                    "description": "the object modelName",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the object name",
                    "type": "String"
                },
                {
                    "name": "fallbacks",
                    "description": "the fallback objects to lookup if the lookup for modelName or 'application' fails",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/-private/core.js",
            "line": 15,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "addon/adapters/errors.js",
            "line": 168,
            "itemtype": "method",
            "name": "errorsHashToArray",
            "access": "private",
            "tagname": "",
            "class": "DS.ServerError",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/errors.js",
            "line": 199,
            "itemtype": "method",
            "name": "errorsArrayToHash",
            "access": "private",
            "tagname": "",
            "class": "DS.ServerError",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/json-api.js",
            "line": 20,
            "itemtype": "method",
            "name": "ajaxOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONAPIAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/json-api.js",
            "line": 46,
            "description": "By default the JSONAPIAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of:\n\n```javascript\n{\n  post: {\n    id: 1,\n    comments: [1, 2]\n  }\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?filter[id]=1,2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n```\n\nwill also send a request to: `GET /comments?filter[id]=1,2`\n\nNote: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n`groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.JSONAPIAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/json-api.js",
            "line": 95,
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.JSONAPIAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/json-api.js",
            "line": 112,
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "DS.JSONAPIAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/json-api.js",
            "line": 123,
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.JSONAPIAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 243,
            "description": "By default, the RESTAdapter will send the query params sorted alphabetically to the\nserver.\n\nFor example:\n\n```js\n  store.query('posts', { sort: 'price', category: 'pets' });\n```\n\nwill generate a requests like this `/posts?category=pets&sort=price`, even if the\nparameters were specified in a different order.\n\nThat way the generated URL will be deterministic and that simplifies caching mechanisms\nin the backend.\n\nSetting `sortQueryParams` to a falsey value will respect the original order.\n\nIn case you want to sort the query parameters with a different criteria, set\n`sortQueryParams` to your custom sort function.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  sortQueryParams: function(params) {\n    var sortedKeys = Object.keys(params).sort().reverse();\n    var len = sortedKeys.length, newParams = {};\n\n    for (var i = 0; i < len; i++) {\n      newParams[sortedKeys[i]] = params[sortedKeys[i]];\n    }\n    return newParams;\n  }\n});\n```",
            "itemtype": "method",
            "name": "sortQueryParams",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 299,
            "description": "By default the RESTAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of:\n\n```javascript\n{\n  post: {\n    id: 1,\n    comments: [1, 2]\n  }\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?ids[]=1&ids[]=2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n```\n\nwill also send a request to: `GET /comments?ids[]=1&ids[]=2`\n\nNote: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n`groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 348,
            "description": "Endpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  namespace: 'api/1'\n});\n```\n\nRequests for the `Post` model would now target `/api/1/post/`.",
            "itemtype": "property",
            "name": "namespace",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 366,
            "description": "An adapter can target other hosts by setting the `host` property.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n```\n\nRequests for the `Post` model would now target `https://api.example.com/post/`.",
            "itemtype": "property",
            "name": "host",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 383,
            "description": "Some APIs require HTTP headers, e.g. to provide an API\nkey. Arbitrary headers can be set as key/value pairs on the\n`RESTAdapter`'s `headers` object and Ember Data will send them\nalong with each ajax request. For dynamic headers see [headers\ncustomization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```",
            "itemtype": "property",
            "name": "headers",
            "type": "{Object}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 405,
            "description": "Called by the store in order to fetch the JSON for a given\ntype and ID.\n\nThe `findRecord` method makes an Ajax request to a URL computed by\n`buildURL`, and returns a promise for the resulting payload.\n\nThis method performs an HTTP `GET` request with the id provided as part of the query string.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 438,
            "description": "Called by the store in order to fetch a JSON array for all\nof the records for a given type.\n\nThe `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshotRecordArray",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 474,
            "description": "Called by the store in order to fetch a JSON array for\nthe records that match a particular query.\n\nThe `query` method makes an Ajax (HTTP GET) request to a URL\ncomputed by `buildURL`, and returns a promise for the resulting\npayload.\n\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 510,
            "description": "Called by the store in order to fetch a JSON object for\nthe record that matches a particular query.\n\nThe `queryRecord` method makes an Ajax (HTTP GET) request to a URL\ncomputed by `buildURL`, and returns a promise for the resulting\npayload.\n\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 547,
            "description": "Called by the store in order to fetch several records together if `coalesceFindRequests` is true\n\nFor example, if the original payload looks like:\n\n```js\n{\n  \"id\": 1,\n  \"title\": \"Rails is omakase\",\n  \"comments\": [ 1, 2, 3 ]\n}\n```\n\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n\n```\nids[]=1&ids[]=2&ids[]=3\n```\n\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\n\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 594,
            "description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"comments\": \"/posts/1/comments\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/posts/1/comments`.\n\nThe `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\n\nThe format of your `links` value will influence the final request URL via the `urlPrefix` method:\n\n* Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n\n* Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n\n* Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.",
            "itemtype": "method",
            "name": "findHasMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 647,
            "description": "Called by the store in order to fetch the JSON for the unloaded record in a\nbelongs-to relationship that was originally specified as a URL (inside of\n`links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 1,\n    \"name\": \"Tom Dale\",\n    \"links\": { \"group\": \"/people/1/group\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/people/1/group`.\n\nThe `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.\n\nThe format of your `links` value will influence the final request URL via the `urlPrefix` method:\n\n* Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n\n* Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n\n* Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.",
            "itemtype": "method",
            "name": "findBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 699,
            "description": "Called by the store when a newly created record is\nsaved via the `save` method on a model record instance.\n\nThe `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 734,
            "description": "Called by the store when an existing record is saved\nvia the `save` method on a model record instance.\n\nThe `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 771,
            "description": "Called by the store when a record is deleted.\n\nThe `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 821,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nThis implementation groups together records that have the same base URL but\ndiffering ids. For example `/comments/1` and `/comments/2` will be grouped together\nbecause we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\n\nIt also supports urls where ids are passed as a query param, such as `/comments?id=1`\nbut not those where there is more than 1 query param such as `/comments?id=2&name=David`\nCurrently only the query param of `id` is supported. If you need to support others, please\noverride this or the `_stripIDFromURL` method.\n\nIt does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\nand `/posts/2/comments/3`",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
                "type": "Array"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 885,
            "description": "Takes an ajax response, and returns the json payload or an error.\n\nBy default this hook just returns the json payload passed to it.\nYou might want to override it in two cases:\n\n1. Your API might return useful results in the response headers.\nResponse headers are passed in as the second argument.\n\n2. Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a `DS.InvalidError` or a\n`DS.AdapterError` (or a sub class) from this hook and it will automatically\nreject the promise and put your record into the invalid or error state.\n\nReturning a `DS.InvalidError` from this method will cause the\nrecord to transition into the `invalid` state and make the\n`errors` object available on the record. When returning an\n`DS.InvalidError` the store will attempt to normalize the error data\nreturned from the server using the serializer's `extractErrors`\nmethod.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "handleResponse",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "requestData",
                    "description": "- the original request information",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "response",
                "type": "Object | DS.AdapterError"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 944,
            "description": "Default `handleResponse` implementation uses this hook to decide if the\nresponse is a success.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "isSuccess",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 959,
            "description": "Default `handleResponse` implementation uses this hook to decide if the\nresponse is a an invalid error.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "isInvalid",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 974,
            "description": "Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\n\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\n\nBy default, `ajax` method has the following behavior:\n\n* It sets the response `dataType` to `\"json\"`\n* If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n  `application/json; charset=utf-8`\n* If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n  data is the serialized record in the case of a save.\n* Registers success and failure handlers.",
            "itemtype": "method",
            "name": "ajax",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1035,
            "itemtype": "method",
            "name": "_ajaxRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "jQuery ajax options to be used for the ajax request",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1044,
            "itemtype": "method",
            "name": "ajaxOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1074,
            "itemtype": "method",
            "name": "parseErrorResponse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "responseText",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1092,
            "itemtype": "method",
            "name": "normalizeErrorResponse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "errors payload",
                "type": "Array"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1114,
            "description": "Generates a detailed (\"friendly\") error message, with plenty\nof information for debugging (good luck!)",
            "itemtype": "method",
            "name": "generatedDetailedMessage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "requestData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "detailed error message",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1184,
            "description": "Get the data (body or query params) for a request.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "dataForRequest",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1242,
            "description": "Get the HTTP method for a request.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "methodForRequest",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTTP method",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1262,
            "description": "Get the URL for a request.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "urlForRequest",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "URL",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1299,
            "description": "Get the headers for a request.\n\nBy default the value of the `headers` property of the adapter is\nreturned.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "headersForRequest",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "headers",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1314,
            "description": "Get an object which contains all properties for a request which should\nbe made.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_requestFor",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "request object",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1332,
            "description": "Convert a request object into a hash which can be passed to `jQuery.ajax`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_requestToJQueryAjaxHash",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jQuery ajax hash",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapters/rest.js",
            "line": 1367,
            "description": "Make a request using `jQuery.ajax`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_makeRequest",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 100,
            "description": "Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered\n\nA payload with an attr configured for embedded records needs to be extracted:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "hash",
                    "description": "to be normalized",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "the hash has been referenced by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the normalized hash",
                "type": "Object"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 141,
            "description": "Serialize `belongsTo` relationship when it is configured as an embedded object.\n\nThis example of an author model belongs to a post model:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  author:   DS.belongsTo('author')\n});\n\nAuthor = DS.Model.extend({\n  name:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded author\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' }\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"author\": {\n      \"id\": \"2\"\n      \"name\": \"dhh\"\n    }\n  }\n}\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 240,
            "description": "Serializes `hasMany` relationships when it is configured as embedded objects.\n\nThis example of a post model has many comments:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  comments: DS.hasMany('comment')\n});\n\nComment = DS.Model.extend({\n  body:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded comments\n\n```app/serializers/post.js\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { embedded: 'always' }\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```\n\nThe attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.\nWhen extracting the only option is `records`.\n\nSo `{ embedded: 'always' }` is shorthand for:\n`{ serialize: 'records', deserialize: 'records' }`\n\nTo embed the `ids` for a related object (using a hasMany relationship):\n\n```app/serializers/post.js\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { serialize: 'ids', deserialize: 'records' }\n  }\n})\n```\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [\"1\", \"2\"]\n  }\n}\n```\n\nTo embed the relationship as a collection of objects with `id` and `type` keys, set\n`ids-and-types` for the related object.\n\nThis is particularly useful for polymorphic relationships where records don't share\nthe same table and the `id` is not enough information.\n\nBy example having a user that has many pets:\n\n```js\nUser = DS.Model.extend({\n  name:    DS.attr('string'),\n  pets: DS.hasMany('pet', { polymorphic: true })\n});\n\nPet = DS.Model.extend({\n  name: DS.attr('string'),\n});\n\nCat = Pet.extend({\n  // ...\n});\n\nParrot = Pet.extend({\n  // ...\n});\n```\n\n```app/serializers/user.js\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    pets: { serialize: 'ids-and-types', deserialize: 'records' }\n  }\n});\n```\n\n```js\n{\n  \"user\": {\n    \"id\": \"1\"\n    \"name\": \"Bertin Osborne\",\n    \"pets\": [\n      { \"id\": \"1\", \"type\": \"Cat\" },\n      { \"id\": \"1\", \"type\": \"Parrot\"}\n    ]\n  }\n}\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 398,
            "description": "Serializes a hasMany relationship as an array of objects containing only `id` and `type`\nkeys.\nThis has its use case on polymorphic hasMany relationships where the server is not storing\nall records in the same table using STI, and therefore the `id` is not enough information\n\nTODO: Make the default in Ember-data 3.0??",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 453,
            "description": "When serializing an embedded record, modify the property (in the json payload)\nthat refers to the parent record (foreign key for relationship).\n\nSerializing a `belongsTo` relationship removes the property that refers to the\nparent record\n\nSerializing a `hasMany` relationship does not remove the property that refers to\nthe parent record.",
            "itemtype": "method",
            "name": "removeEmbeddedForeignKey",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "embeddedSnapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 530,
            "itemtype": "method",
            "name": "_extractEmbeddedRecords",
            "access": "private",
            "tagname": "",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 548,
            "itemtype": "method",
            "name": "_extractEmbeddedHasMany",
            "access": "private",
            "tagname": "",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 577,
            "itemtype": "method",
            "name": "_extractEmbeddedBelongsTo",
            "access": "private",
            "tagname": "",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/embedded-records-mixin.js",
            "line": 600,
            "itemtype": "method",
            "name": "_normalizeEmbeddedRelationship",
            "access": "private",
            "tagname": "",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 103,
            "itemtype": "method",
            "name": "_normalizeDocumentHelper",
            "params": [
                {
                    "name": "documentHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 138,
            "itemtype": "method",
            "name": "_normalizeRelationshipDataHelper",
            "params": [
                {
                    "name": "relationshipDataHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 167,
            "itemtype": "method",
            "name": "_normalizeResourceHelper",
            "params": [
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 213,
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 227,
            "itemtype": "method",
            "name": "_normalizeResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isSingle",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 253,
            "itemtype": "method",
            "name": "extractAttributes",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 274,
            "itemtype": "method",
            "name": "extractRelationship",
            "params": [
                {
                    "name": "relationshipHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 299,
            "itemtype": "method",
            "name": "extractRelationships",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 323,
            "itemtype": "method",
            "name": "_extractType",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 350,
            "itemtype": "method",
            "name": "modelNameFromPayloadKey",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model's modelName",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 360,
            "itemtype": "method",
            "name": "payloadKeyFromModelName",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 370,
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "resourceHash",
                    "description": "the resource hash from the adapter",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the normalized resource hash",
                "type": "Object"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 397,
            "description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\nBy default `JSONAPISerializer` follows the format used on the examples of\nhttp://jsonapi.org/format and uses dashes as the word separator in the JSON\nattribute keys.\n\nThis behaviour can be easily customized by extending this method.\n\nExample\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONAPISerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.dasherize(attr).toUpperCase();\n  }\n});\n```",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 427,
            "description": "`keyForRelationship` can be used to define a custom key when\nserializing and deserializing relationship properties.\nBy default `JSONAPISerializer` follows the format used on the examples of\nhttp://jsonapi.org/format and uses dashes as word separators in\nrelationship properties.\n\nThis behaviour can be easily customized by extending this method.\n\nExample\n\n ```app/serializers/post.js\n import DS from 'ember-data';\n\n export default DS.JSONAPISerializer.extend({\n   keyForRelationship: function(key, relationship, method) {\n     return Ember.String.underscore(key);\n   }\n });\n ```",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 457,
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 487,
            "itemtype": "method",
            "name": "serializeAttribute",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 516,
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 567,
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 630,
            "description": "`modelNameFromPayloadType` can be used to change the mapping for a DS model\nname, taken from the value in the payload.\n\nSay your API namespaces the type of a model and returns the following\npayload for the `post` model:\n\n```javascript\n// GET /api/posts/1\n{\n  \"data\": {\n    \"id\": 1,\n    \"type: \"api::v1::post\"\n  }\n}\n```\n\nBy overwriting `modelNameFromPayloadType` you can specify that the\n`posr` model should be used:\n\n```app/serializers/application.js\nimport DS from \"ember-data\";\n\nexport default DS.JSONAPISerializer.extend({\n  modelNameFromPayloadType(payloadType) {\n    return payloadType.replace('api::v1::', '');\n  }\n});\n```\n\nBy default the modelName for a model is its singularized name in dasherized\nform.  Usually, Ember Data can use the correct inflection to do this for\nyou. Most of the time, you won't need to override\n`modelNameFromPayloadType` for this purpose.\n\nAlso take a look at\n[payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize\nhow the type of a record should be serialized.",
            "itemtype": "method",
            "name": "modelNameFromPayloadType",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "payloadType",
                    "description": "type from payload",
                    "type": "String"
                }
            ],
            "return": {
                "description": "modelName",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json-api.js",
            "line": 678,
            "description": "`payloadTypeFromModelName` can be used to change the mapping for the type in\nthe payload, taken from the model name.\n\nSay your API namespaces the type of a model and expects the following\npayload when you update the `post` model:\n\n```javascript\n// POST /api/posts/1\n{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"api::v1::post\"\n  }\n}\n```\n\nBy overwriting `payloadTypeFromModelName` you can specify that the\nnamespaces model name for the `post` should be used:\n\n```app/serializers/application.js\nimport DS from \"ember-data\";\n\nexport default JSONAPISerializer.extend({\n  payloadTypeFromModelName(modelName) {\n    return \"api::v1::\" + modelName;\n  }\n});\n```\n\nBy default the payload type is the pluralized model name. Usually, Ember\nData can use the correct inflection to do this for you. Most of the time,\nyou won't need to override `payloadTypeFromModelName` for this purpose.\n\nAlso take a look at\n[modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize\nhow the model name from should be mapped from the payload.",
            "itemtype": "method",
            "name": "payloadTypeFromModelName",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelname",
                    "description": "modelName from the record",
                    "type": "String"
                }
            ],
            "return": {
                "description": "payloadType",
                "type": "String"
            },
            "class": "DS.JSONAPISerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 87,
            "description": "The `primaryKey` is used when serializing and deserializing\ndata. Ember Data always uses the `id` property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\n`primaryKey` property to match the `primaryKey` of your external\nstore.\n\nExample\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  primaryKey: '_id'\n});\n```",
            "itemtype": "property",
            "name": "primaryKey",
            "type": "{String}",
            "default": "'id'",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 111,
            "description": "The `attrs` object can be used to declare a simple mapping between\nproperty names on `DS.Model` records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty `key` can also be used to designate the attribute's key on\nthe response payload.\n\nExample\n\n```app/models/person.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string'),\n  admin: DS.attr('boolean')\n});\n```\n\n```app/serializers/person.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: { key: 'career' }\n  }\n});\n```\n\nYou can also remove attributes by setting the `serialize` key to\n`false` in your mapping object.\n\nExample\n\n```app/serializers/person.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: { serialize: false },\n    occupation: { key: 'career' }\n  }\n});\n```\n\nWhen serialized:\n\n```javascript\n{\n  \"firstName\": \"Harry\",\n  \"lastName\": \"Houdini\",\n  \"career\": \"magician\"\n}\n```\n\nNote that the `admin` is now not included in the payload.",
            "itemtype": "property",
            "name": "attrs",
            "type": "{Object}",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 175,
            "description": "Given a subclass of `DS.Model` and a JSON object this method will\niterate through each attribute of the `DS.Model` and invoke the\n`DS.Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.",
            "itemtype": "method",
            "name": "applyTransforms",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "data",
                    "description": "The data to transform",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data The transformed data object",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 202,
            "description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure\n\nThis method delegates to a more specific normalize method based on\nthe `requestType`.\n\nTo override this method with a custom one, make sure to call\n`return this._super(store, primaryModelClass, payload, id, requestType)` with your\npre-processed data.\n\nHere's an example of using `normalizeResponse` manually:\n\n```javascript\nsocket.on('message', function(message) {\n  var data = message.data;\n  var modelClass = store.modelFor(data.modelName);\n  var serializer = store.serializerFor(data.modelName);\n  var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n\n  store.push(normalized);\n});\n```",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 262,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeFindRecordResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 276,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeQueryRecordResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 290,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeFindAllResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 304,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeFindBelongsToResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 318,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeFindHasManyResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 332,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeFindManyResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 346,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeQueryResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 360,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeCreateRecordResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 374,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeDeleteRecordResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 388,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeUpdateRecordResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 402,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeSaveResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 416,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeSingleResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 430,
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeArrayResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 444,
            "itemtype": "method",
            "name": "_normalizeResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isSingle",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 491,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\n\nExample\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  normalize: function(typeClass, hash) {\n    var fields = Ember.get(typeClass, 'fields');\n    fields.forEach(function(field) {\n      var payloadField = Ember.String.underscore(field);\n      if (field === payloadField) { return; }\n\n      hash[field] = hash[payloadField];\n      delete hash[payloadField];\n    });\n    return this._super.apply(this, arguments);\n  }\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 550,
            "description": "Returns the resource's ID.",
            "itemtype": "method",
            "name": "extractId",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 564,
            "description": "Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n\nhttp://jsonapi.org/format/#document-resource-object-attributes",
            "itemtype": "method",
            "name": "extractAttributes",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 588,
            "description": "Returns a relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
            "itemtype": "method",
            "name": "extractRelationship",
            "params": [
                {
                    "name": "relationshipModelName",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationshipHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 637,
            "description": "Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships\n\n`relationshipOptions` is a hash which contains more information about the\npolymorphic relationship which should be extracted:\n  - `resourceHash` complete hash of the resource the relationship should be\n    extracted from\n  - `relationshipKey` key under which the value for the relationship is\n    extracted from the resourceHash\n  - `relationshipMeta` meta information about the relationship",
            "itemtype": "method",
            "name": "extractPolymorphicRelationship",
            "params": [
                {
                    "name": "relationshipModelName",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationshipHash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationshipOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 660,
            "description": "Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
            "itemtype": "method",
            "name": "extractRelationships",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 716,
            "itemtype": "method",
            "name": "modelNameFromPayloadKey",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model's modelName",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 727,
            "itemtype": "method",
            "name": "normalizeAttributes",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 746,
            "itemtype": "method",
            "name": "normalizeRelationships",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 765,
            "itemtype": "method",
            "name": "normalizeUsingDeclaredMapping",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 795,
            "description": "Looks up the property key that was set by the custom `attr` mapping\npassed to the serializer.",
            "itemtype": "method",
            "name": "_getMappedKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 826,
            "description": "Check attrs.key.serialize property to inform if the `key`\ncan be serialized",
            "itemtype": "method",
            "name": "_canSerialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the key can be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 841,
            "description": "When attrs.key.serialize is set to true then\nit takes priority over the other checks and the related\nattribute/relationship will be serialized",
            "itemtype": "method",
            "name": "_mustSerialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the key must be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 857,
            "description": "Check if the given hasMany relationship should be serialized",
            "itemtype": "method",
            "name": "shouldSerializeHasMany",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationshipType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the hasMany relationship should be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 878,
            "description": "Check if the given hasMany relationship should be serialized",
            "itemtype": "method",
            "name": "_shouldSerializeHasMany",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationshipType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the hasMany relationship should be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 898,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```javascript\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    })\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```javascript\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = this._super.apply(this, arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1075,
            "description": "You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\nThe hash property should be modified by reference.\n\nFor example, your server may expect underscored root objects.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, snapshot, options) {\n    var root = Ember.String.decamelize(type.modelName);\n    data[root] = this.serialize(snapshot, options);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1106,
            "description": "`serializeAttribute` can be used to customize how `DS.attr`\nproperties are serialized\n\nFor example if you wanted to ensure all your attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeAttribute: function(snapshot, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    this._super(snapshot, json.attributes, key, attributes);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeAttribute",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1153,
            "description": "`serializeBelongsTo` can be used to customize how `DS.belongsTo`\nproperties are serialized.\n\nExample\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeBelongsTo: function(snapshot, json, relationship) {\n    var key = relationship.key;\n\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n\n    json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1206,
            "description": "`serializeHasMany` can be used to customize how `DS.hasMany`\nproperties are serialized.\n\nExample\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeHasMany: function(snapshot, json, relationship) {\n    var key = relationship.key;\n    if (key === 'comments') {\n      return;\n    } else {\n      this._super.apply(this, arguments);\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1255,
            "description": "You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n`{ polymorphic: true }` is pass as the second argument to the\n`DS.belongsTo` function.\n\nExample\n\n```app/serializers/comment.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializePolymorphicType: function(snapshot, json, relationship) {\n    var key = relationship.key,\n        belongsTo = snapshot.belongsTo(key);\n    key = this.keyForAttribute ? this.keyForAttribute(key, \"serialize\") : key;\n\n    if (Ember.isNone(belongsTo)) {\n      json[key + \"_type\"] = null;\n    } else {\n      json[key + \"_type\"] = belongsTo.modelName;\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1288,
            "description": "`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\n\nExample\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractMeta: function(store, typeClass, payload) {\n    if (payload && payload.hasOwnProperty('_pagination')) {\n      let meta = payload._pagination;\n      delete payload._pagination;\n      return meta;\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "extractMeta",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1322,
            "description": "`extractErrors` is used to extract model errors when a call\nto `DS.Model#save` fails with an `InvalidError`. By default\nEmber Data expects error information to be located on the `errors`\nproperty of the payload object.\n\nThis serializer expects this `errors` object to be an Array similar\nto the following, compliant with the JSON-API specification:\n\n```js\n{\n  \"errors\": [\n    {\n      \"detail\": \"This username is already taken!\",\n      \"source\": {\n        \"pointer\": \"data/attributes/username\"\n      }\n    }, {\n      \"detail\": \"Doesn't look like a valid email.\",\n      \"source\": {\n        \"pointer\": \"data/attributes/email\"\n      }\n    }\n  ]\n}\n```\n\nThe key `detail` provides a textual description of the problem.\nAlternatively, the key `title` can be used for the same purpose.\n\nThe nested keys `source.pointer` detail which specific element\nof the request data was invalid.\n\nNote that JSON-API also allows for object-level errors to be placed\nin an object with pointer `data`, signifying that the problem\ncannot be traced to a specific attribute:\n\n```javascript\n{\n  \"errors\": [\n    {\n      \"detail\": \"Some generic non property error message\",\n      \"source\": {\n        \"pointer\": \"data\"\n      }\n    }\n  ]\n}\n```\n\nWhen turn into a `DS.Errors` object, you can read these errors\nthrough the property `base`:\n\n```handlebars\n{{#each model.errors.base as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\nExample of alternative implementation, overriding the default\nbehavior to deal with a different format of errors:\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractErrors: function(store, typeClass, payload, id) {\n    if (payload && typeof payload === 'object' && payload._problems) {\n      payload = payload._problems;\n      this.normalizeErrors(typeClass, payload);\n    }\n    return payload;\n  }\n});\n```",
            "itemtype": "method",
            "name": "extractErrors",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "(String|Number)"
                }
            ],
            "return": {
                "description": "json The deserialized errors",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1433,
            "description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\n\nExample\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n```",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1458,
            "description": "`keyForRelationship` can be used to define a custom key when\nserializing and deserializing relationship properties. By default\n`JSONSerializer` does not provide an implementation of this method.\n\nExample\n\n ```app/serializers/post.js\n import DS from 'ember-data';\n\n export default DS.JSONSerializer.extend({\n   keyForRelationship: function(key, relationship, method) {\n     return 'rel_' + Ember.String.underscore(key);\n   }\n });\n ```",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1485,
            "description": "`keyForLink` can be used to define a custom key when deserializing link\nproperties.",
            "itemtype": "method",
            "name": "keyForLink",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "kind",
                    "description": "`belongsTo` or `hasMany`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1500,
            "itemtype": "method",
            "name": "transformFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attributeType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skipAssertion",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "transform",
                "type": "DS.Transform"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/json.js",
            "line": 1520,
            "itemtype": "method",
            "name": "modelNameFromPayloadType",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model's modelName",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 60,
            "description": "`keyForPolymorphicType` can be used to define a custom key when\nserializing and deserializing a polymorphic type. By default, the\nreturned key is `${key}Type`.\n\nExample\n\n ```app/serializers/post.js\n import DS from 'ember-data';\n\n export default DS.RESTSerializer.extend({\n   keyForPolymorphicType: function(key, relationship) {\n     var relationshipKey = this.keyForRelationship(key);\n\n     return 'type-' + relationshipKey;\n   }\n });\n ```",
            "itemtype": "method",
            "name": "keyForPolymorphicType",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 91,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nFor example, if you have a payload that looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nThe `normalize` method will be called three times:\n\n* With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n* With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n* With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations. You will only need to implement\n`normalize` and manipulate the payload as desired.\n\nFor example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n`id`, you can specify how to normalize just the comments:\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  normalize(model, hash, prop) {\n    if (prop === 'comments') {\n      hash.id = hash._id;\n      delete hash._id;\n    }\n\n    return this._super(...arguments);\n  }\n});\n```\n\nOn each call to the `normalize` method, the third parameter (`prop`) is always\none of the keys that were in the original payload or in the result of another\nnormalization as `normalizeResponse`.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "modelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "resourceHash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 168,
            "description": "Normalizes an array of resource payloads and returns a JSON-API Document\nwith primary data and, if any, included data as `{ data, included }`.",
            "itemtype": "method",
            "name": "_normalizeArray",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "arrayHash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 380,
            "description": "This method allows you to push a payload containing top-level\ncollections of records organized per type.\n\n```js\n{\n  \"posts\": [{\n    \"id\": \"1\",\n    \"title\": \"Rails is omakase\",\n    \"author\", \"1\",\n    \"comments\": [ \"1\" ]\n  }],\n  \"comments\": [{\n    \"id\": \"1\",\n    \"body\": \"FIRST\"\n  }],\n  \"users\": [{\n    \"id\": \"1\",\n    \"name\": \"@d2h\"\n  }]\n}\n```\n\nIt will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 444,
            "description": "This method is used to convert each JSON root key in the payload\ninto a modelName that it can use to look up the appropriate model for\nthat part of the payload.\n\nFor example, your server may send a model name that does not correspond with\nthe name of the model in your app. Let's take a look at an example model,\nand an example payload:\n\n```app/models/post.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n});\n```\n\n```javascript\n  {\n    \"blog/post\": {\n      \"id\": \"1\n    }\n  }\n```\n\nEmber Data is going to normalize the payload's root key for the modelName. As a result,\nit will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n(or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\nbecause it cannot find the \"blog/post\" model.\n\nSince we want to remove this namespace, we can define a serializer for the application that will\nremove \"blog/\" from the payload key whenver it's encountered by Ember Data:\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadKey: function(payloadKey) {\n    if (payloadKey === 'blog/post') {\n      return this._super(payloadKey.replace('blog/', ''));\n    } else {\n     return this._super(payloadKey);\n    }\n  }\n});\n```\n\nAfter refreshing, Ember Data will appropriately look up the \"post\" model.\n\nBy default the modelName for a model is its\nname in dasherized form. This means that a payload key like \"blogPost\" would be\nnormalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\ncan use the correct inflection to do this for you. Most of the time, you won't\nneed to override `modelNameFromPayloadKey` for this purpose.",
            "itemtype": "method",
            "name": "modelNameFromPayloadKey",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model's modelName",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 508,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```app/models/comment.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```js\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    })\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```js\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```app/serializers/post.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = this._super(snapshot, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 663,
            "description": "You can use this method to customize the root keys serialized into the JSON.\nThe hash property should be modified by reference (possibly using something like _.extend)\nBy default the REST Serializer sends the modelName of a model, which is a camelized\nversion of the name.\n\nFor example, your server may expect underscored root objects.\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, record, options) {\n    var root = Ember.String.decamelize(type.modelName);\n    data[root] = this.serialize(record, options);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 693,
            "description": "You can use `payloadKeyFromModelName` to override the root key for an outgoing\nrequest. By default, the RESTSerializer returns a camelized version of the\nmodel's name.\n\nFor a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer\nwill send it to the server with `tacoParty` as the root key in the JSON payload:\n\n```js\n{\n  \"tacoParty\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```\n\nFor example, your server may expect dasherized root objects:\n\n```app/serializers/application.js\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  payloadKeyFromModelName: function(modelName) {\n    return Ember.String.dasherize(modelName);\n  }\n});\n```\n\nGiven a `TacoParty` model, calling `save` on it would produce an outgoing\nrequest like:\n\n```js\n{\n  \"taco-party\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```",
            "itemtype": "method",
            "name": "payloadKeyFromModelName",
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 742,
            "description": "You can use this method to customize how polymorphic objects are serialized.\nBy default the REST Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 786,
            "description": "You can use this method to customize how a polymorphic relationship should\nbe extracted.",
            "itemtype": "method",
            "name": "extractPolymorphicRelationship",
            "params": [
                {
                    "name": "relationshipType",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationshipHash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationshipOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 861,
            "description": "`modelNameFromPayloadType` can be used to change the mapping for a DS model\nname, taken from the value in the payload.\n\nSay your API namespaces the type of a model and returns the following\npayload for the `post` model, which has a polymorphic `user` relationship:\n\n```javascript\n// GET /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType: \"api::v1::administrator\"\n  }\n}\n```\n\nBy overwriting `modelNameFromPayloadType` you can specify that the\n`administrator` model should be used:\n\n```app/serializers/application.js\nimport DS from \"ember-data\";\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadType(payloadType) {\n    return payloadType.replace('api::v1::', '');\n  }\n});\n```\n\nBy default the modelName for a model is its name in dasherized form.\nUsually, Ember Data can use the correct inflection to do this for you. Most\nof the time, you won't need to override `modelNameFromPayloadType` for this\npurpose.\n\nAlso take a look at\n[payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize\nhow the type of a record should be serialized.",
            "itemtype": "method",
            "name": "modelNameFromPayloadType",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "payloadType",
                    "description": "type from payload",
                    "type": "String"
                }
            ],
            "return": {
                "description": "modelName",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializers/rest.js",
            "line": 910,
            "description": "`payloadTypeFromModelName` can be used to change the mapping for the type in\nthe payload, taken from the model name.\n\nSay your API namespaces the type of a model and expects the following\npayload when you update the `post` model, which has a polymorphic `user`\nrelationship:\n\n```javascript\n// POST /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType\": \"api::v1::administrator\"\n  }\n}\n```\n\nBy overwriting `payloadTypeFromModelName` you can specify that the\nnamespaces model name for the `administrator` should be used:\n\n```app/serializers/application.js\nimport DS from \"ember-data\";\n\nexport default DS.RESTSerializer.extend({\n  payloadTypeFromModelName(modelName) {\n    return \"api::v1::\" + modelName;\n  }\n});\n```\n\nBy default the payload type is the camelized model name. Usually, Ember\nData can use the correct inflection to do this for you. Most of the time,\nyou won't need to override `payloadTypeFromModelName` for this purpose.\n\nAlso take a look at\n[modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize\nhow the model name from should be mapped from the payload.",
            "itemtype": "method",
            "name": "payloadTypeFromModelName",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modelname",
                    "description": "modelName from the record",
                    "type": "String"
                }
            ],
            "return": {
                "description": "payloadType",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 66,
            "description": "If you would like your adapter to use a custom serializer you can\nset the `defaultSerializer` property to be the name of the custom\nserializer.\n\nNote the `defaultSerializer` serializer has a lower priority than\na model specific serializer (i.e. `PostSerializer`) or the\n`application` serializer.\n\n```app/adapters/django.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  defaultSerializer: 'django'\n});\n```",
            "itemtype": "property",
            "name": "defaultSerializer",
            "type": "{String}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 88,
            "description": "The `findRecord()` method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to `findRecord()` being called, you\nshould query your persistence layer for a record with the given ID. The `findRecord`\nmethod should return a promise that will resolve to a JavaScript object that will be\nnormalized by the serializer.\n\nHere is an example `findRecord` implementation:\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  findRecord: function(store, type, id, snapshot) {\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(`/${type.modelName}/${id}`).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "findRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 123,
            "description": "The `findAll()` method is used to retrieve all records for a given type.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  findAll: function(store, type, sinceToken) {\n    var query = { since: sinceToken };\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "snapshotRecordArray",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 154,
            "description": "This method is called when you call `query` on the store.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  query: function(store, type, query) {\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "recordArray",
                    "description": "",
                    "type": "DS.AdapterPopulatedRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 184,
            "description": "The `queryRecord()` method is invoked when the store is asked for a single\nrecord through a query object.\n\nIn response to `queryRecord()` being called, you should always fetch fresh\ndata. Once found, you can asynchronously call the store's `push()` method\nto push the record into the store.\n\nHere is an example `queryRecord` implementation:\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\nimport Ember from 'ember';\n\nexport default DS.Adapter.extend(DS.BuildURLMixin, {\n  queryRecord: function(store, type, query) {\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {\n        resolve(data);\n      }, function(jqXHR) {\n        reject(jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "queryRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 221,
            "description": "If the globally unique IDs for your records should be generated on the client,\nimplement the `generateIdForRecord()` method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record's `primaryKey`.\n\nMost traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls `didCreateRecord()`. Only implement this method if\nyou intend to generate record IDs on the client-side.\n\nThe `generateIdForRecord()` method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:\n\n```javascript\nimport DS from 'ember-data';\nimport { v4 } from 'uuid';\n\nexport default DS.Adapter.extend({\n  generateIdForRecord: function(store, inputProperties) {\n    return v4();\n  }\n});\n```",
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "DS.Model"
                },
                {
                    "name": "inputProperties",
                    "description": "a hash of properties to set on the\n  newly created record.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "id",
                "type": "(String|Number)"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 255,
            "description": "Proxies to the serializer's `serialize` method.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  createRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var url = `/${type.modelName}`;\n\n    // ...\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "serialized snapshot",
                "type": "Object"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 282,
            "description": "Implement this method in a subclass to handle the creation of\nnew records.\n\nSerializes the record and sends it to the server.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  createRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'POST',\n        url: `/${type.modelName}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 322,
            "description": "Implement this method in a subclass to handle the updating of\na record.\n\nSerializes the record update and sends it to the server.\n\nThe updateRecord method is expected to return a promise that will\nresolve with the serialized record. This allows the backend to\ninform the Ember Data store the current state of this record after\nthe update. If it is not possible to return a serialized record\nthe updateRecord promise can also resolve with `undefined` and the\nEmber Data store will assume all of the updates were successfully\napplied on the backend.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  updateRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var id = snapshot.id;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'PUT',\n        url: `/${type.modelName}/${id}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 371,
            "description": "Implement this method in a subclass to handle the deletion of\na record.\n\nSends a delete request for the record to the server.\n\nExample\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  deleteRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var id = snapshot.id;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'DELETE',\n        url: `/${type.modelName}/${id}`,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 412,
            "description": "By default the store will try to coalesce all `fetchRecord` calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false.",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 423,
            "description": "The store will call `findMany` instead of multiple `findRecord`\nrequests to find multiple records at once if coalesceFindRequests\nis true.\n\n```app/adapters/application.js\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  findMany(store, type, ids, snapshots) {\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'GET',\n        url: `/${type.modelName}/`,\n        dataType: 'json',\n        data: { filter: { id: ids.join(',') } }\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the records",
                    "type": "DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 459,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nFor example, if your api has nested URLs that depend on the parent, you will\nwant to group records by their parent.\n\nThe default implementation returns the records as a single group.",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshots",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
                "type": "Array"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 479,
            "description": "This method is used by the store to determine if the store should\nreload a record from the adapter when a record is requested by\n`store.findRecord`.\n\nIf this method returns `true`, the store will re-fetch a record from\nthe adapter. If this method returns `false`, the store will resolve\nimmediately using the cached record.\n\nFor example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:\n\n```javascript\nshouldReloadRecord: function(store, ticketSnapshot) {\n  var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt')).minutes();\n  if (timeDiff > 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\nThis method would ensure that whenever you do `store.findRecord('ticket',\nid)` you will always get a ticket that is no more than 20 minutes old. In\ncase the cached version is more than 20 minutes old, `findRecord` will not\nresolve until you fetched the latest version.\n\nBy default this hook returns `false`, as most UIs should not block user\ninteractions while waiting on data update.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "shouldReloadRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 522,
            "description": "This method is used by the store to determine if the store should\nreload all records from the adapter when records are requested by\n`store.findAll`.\n\nIf this method returns `true`, the store will re-fetch all records from\nthe adapter. If this method returns `false`, the store will resolve\nimmediately using the cached records.\n\nFor example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:\n\n```javascript\nshouldReloadAll: function(store, snapshotArray) {\n  var snapshots = snapshotArray.snapshots();\n\n  return snapshots.any(function(ticketSnapshot) {\n    var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt')).minutes();\n    if (timeDiff > 20) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n```\n\nThis method would ensure that whenever you do `store.findAll('ticket')` you\nwill always get a list of tickets that are no more than 20 minutes old. In\ncase a cached version is more than 20 minutes old, `findAll` will not\nresolve until you fetched the latest versions.\n\nBy default this methods returns `true` if the passed `snapshotRecordArray`\nis empty (meaning that there are no records locally available yet),\notherwise it returns `false`.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "shouldReloadAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshotRecordArray",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 570,
            "description": "This method is used by the store to determine if the store should\nreload a record after the `store.findRecord` method resolves a\ncached record.\n\nThis method is *only* checked by the store when the store is\nreturning a cached record.\n\nIf this method returns `true` the store will re-fetch a record from\nthe adapter.\n\nFor example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n`shouldBackgroundReloadRecord` as follows:\n\n```javascript\nshouldBackgroundReloadRecord: function(store, snapshot) {\n  var connection = window.navigator.connection;\n  if (connection === 'cellular' || connection === 'none') {\n    return false;\n  } else {\n    return true;\n  }\n}\n```\n\nBy default this hook returns `true` so the data for the record is updated\nin the background.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "shouldBackgroundReloadRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshot",
                    "description": "",
                    "type": "DS.Snapshot"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/adapter.js",
            "line": 609,
            "description": "This method is used by the store to determine if the store should\nreload a record array after the `store.findAll` method resolves\nwith a cached record array.\n\nThis method is *only* checked by the store when the store is\nreturning a cached record array.\n\nIf this method returns `true` the store will re-fetch all records\nfrom the adapter.\n\nFor example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n`shouldBackgroundReloadAll` as follows:\n\n```javascript\nshouldBackgroundReloadAll: function(store, snapshotArray) {\n  var connection = window.navigator.connection;\n  if (connection === 'cellular' || connection === 'none') {\n    return false;\n  } else {\n    return true;\n  }\n}\n```\n\nBy default this method returns `true`, indicating that a background reload\nshould always be triggered.",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "shouldBackgroundReloadAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "snapshotRecordArray",
                    "description": "",
                    "type": "DS.SnapshotRecordArray"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/attr.js",
            "line": 38,
            "description": "`DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[DS.Transform](/api/data/classes/DS.Transform.html).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`DS.attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\n                  to a default value if none is supplied.\n\nExample\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: DS.attr('string'),\n  email: DS.attr('string'),\n  verified: DS.attr('boolean', { defaultValue: false })\n});\n```\n\nDefault value can also be a function. This is useful it you want to return\na new object for each attribute.\n\n```app/models/user.js\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  settings: attr({defaultValue: function() {\n    return {};\n  }})\n});\n```\n\nThe `options` hash is passed as second argument to a transforms'\n`serialize` and `deserialize` method. This allows to configure a\ntransformation and adapt the corresponding value, based on the config:\n\n```app/models/post.js\nexport default DS.Model.extend({\n  text: DS.attr('text', {\n    uppercase: true\n  })\n});\n```\n\n```app/transforms/text.js\nexport default DS.Transform.extend({\n  serialize: function(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  },\n\n  deserialize: function(value) {\n    return value;\n  }\n})\n```",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "type",
                    "description": "the attribute type",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Attribute"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "addon/serializer.js",
            "line": 29,
            "description": "The `store` property is the application's `store` that contains all records.\nIt's injected as a service.\nIt can be used to push records from a non flat data structure server\nresponse.",
            "itemtype": "property",
            "name": "store",
            "type": "{DS.Store}",
            "access": "public",
            "tagname": "",
            "class": "DS.Serializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializer.js",
            "line": 40,
            "description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure",
            "since": "1.13.0",
            "itemtype": "method",
            "name": "normalizeResponse",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryModelClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "JSON-API Document",
                "type": "Object"
            },
            "class": "DS.Serializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializer.js",
            "line": 57,
            "description": "The `serialize` method is used when a record is saved in order to convert\nthe record into the form that your external data source expects.\n\n`serialize` takes an optional `options` hash with a single option:\n\n- `includeId`: If this is `true`, `serialize` should include the ID\n  in the serialized object it builds.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.Serializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/serializer.js",
            "line": 73,
            "description": "The `normalize` method is used to convert a payload received from your\nexternal data source into the normalized form `store.push()` expects. You\nshould override this method, munge the hash and return the normalized\npayload.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "typeClass",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.Serializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/transform.js",
            "line": 41,
            "description": "When given a deserialized value from a record attribute this\nmethod must return the serialized value.\n\nExample\n\n```javascript\nserialize: function(deserialized, options) {\n  return Ember.isEmpty(deserialized) ? null : Number(deserialized);\n}\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": "The deserialized value"
                },
                {
                    "name": "options",
                    "description": "hash of options passed to `DS.attr`"
                }
            ],
            "return": {
                "description": "The serialized value"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "addon/transform.js",
            "line": 60,
            "description": "When given a serialize value from a JSON object this method must\nreturn the deserialized value for the record attribute.\n\nExample\n\n```javascript\ndeserialize: function(serialized, options) {\n  return empty(serialized) ? null : Number(serialized);\n}\n```",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": "The serialized value"
                },
                {
                    "name": "options",
                    "description": "hash of options passed to `DS.attr`"
                }
            ],
            "return": {
                "description": "The deserialized value"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/ext/string.js",
            "line": 8,
            "description": "See {{#crossLink \"Ember.String/pluralize\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "pluralize",
            "class": "DS.String",
            "module": "ember-data"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/ext/string.js",
            "line": 18,
            "description": "See {{#crossLink \"Ember.String/singularize\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "singularize",
            "class": "DS.String",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/helpers/pluralize.js",
            "line": 4,
            "description": "If you have Ember Inflector (such as if Ember Data is present),\n pluralize a word. For example, turn \"ox\" into \"oxen\".\nExample:\n{{pluralize count myProperty}}\n {{pluralize 1 \"oxen\"}}\n {{pluralize myProperty}}\n {{pluralize \"ox\"}}",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "count",
                    "description": "count of objects",
                    "type": "Number|Property",
                    "optional": true
                },
                {
                    "name": "word",
                    "description": "word to pluralize",
                    "type": "String|Property"
                }
            ],
            "class": "DS.Ember.HTMLBars.helpers",
            "module": "ember-data"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/helpers/singularize.js",
            "line": 4,
            "description": "If you have Ember Inflector (such as if Ember Data is present),\n singularize a word. For example, turn \"oxen\" into \"ox\".\nExample:\n{{singularize myProperty}}\n {{singularize \"oxen\"}}",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": "word to singularize",
                    "type": "String|Property"
                }
            ],
            "class": "Ember.HTMLBars.helpers",
            "module": "ember-data"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 121,
            "access": "public",
            "tagname": "As inflections can be costly, and commonly the same subset of words are repeatedly\ninflected an optional cache is provided.",
            "itemtype": "method",
            "name": "enableCache",
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 143,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "purgedCache",
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 154,
            "access": "public",
            "tagname": "disable caching",
            "itemtype": "method",
            "name": "disableCache;",
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 172,
            "itemtype": "method",
            "name": "plural",
            "params": [
                {
                    "name": "regex",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 182,
            "itemtype": "method",
            "name": "singular",
            "params": [
                {
                    "name": "regex",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 192,
            "itemtype": "method",
            "name": "uncountable",
            "params": [
                {
                    "name": "regex",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 201,
            "itemtype": "method",
            "name": "irregular",
            "params": [
                {
                    "name": "singular",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "plural",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 211,
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 222,
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "node_modules/ember-inflector/addon/lib/system/inflector.js",
            "line": 234,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "inflect",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "typeRules",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "irregular",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSerializes a hasMany relationship as an array of objects containing only `id` and `type`\nkeys.\nThis has its use case on polymorphic hasMany relationships where the server is not storing\nall records in the same table using STI, and therefore the `id` is not enough information\n\nTODO: Make the default in Ember-data 3.0??",
            "line": " addon/serializers/embedded-records-mixin.js:398"
        }
    ]
}