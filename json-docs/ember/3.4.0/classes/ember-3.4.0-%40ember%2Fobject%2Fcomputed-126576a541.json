{
  "data": {
    "id": "ember-3.4.0-@ember/object/computed",
    "type": "class",
    "attributes": {
      "name": "@ember/object/computed",
      "shortname": "@ember/object/computed",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 61,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { empty } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet ToDoList = EmberObject.extend({\n  isDone: empty(<span class=\"string\">&apos;todos&apos;</span>)\n});\n\nlet todoList = ToDoList.<span class=\"keyword\">create</span>({\n  todos: [<span class=\"string\">&apos;Unit Test&apos;</span>, <span class=\"string\">&apos;Documentation&apos;</span>, <span class=\"string\">&apos;Release&apos;</span>]\n});\n\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isDone&apos;</span>); // <span class=\"keyword\">false</span>\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;todos&apos;</span>).clear();\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isDone&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.6.0",
          "itemtype": "method",
          "name": "empty",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe value of the dependent property is null, an empty string, empty array,\nor empty function and false if the underlying value is not empty.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 101,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import { notEmpty } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\nimport EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Hamster = EmberObject.extend({\n  hasStuff: notEmpty(<span class=\"string\">&apos;backpack&apos;</span>)\n});\n\n<span class=\"keyword\">let</span> hamster = Hamster.create({ backpack: [<span class=\"string\">&apos;Food&apos;</span>, <span class=\"string\">&apos;Sleeping Bag&apos;</span>, <span class=\"string\">&apos;Tent&apos;</span>] });\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>);         <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;backpack&apos;</span>).clear(); <span class=\"comment\">// []</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>);         <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "notEmpty",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if\noriginal value for property is not empty.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 136,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">none</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  isHungry: <span class=\"keyword\">none</span>(<span class=\"string\">&apos;food&apos;</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); // <span class=\"keyword\">true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"string\">&apos;Banana&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "none",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which\nreturns true if original value for property is null or undefined.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 174,
          "description": "<html><head></head><body><p>A computed property that returns the inverse boolean value\nof the original value for the dependent property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">not</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet <span class=\"keyword\">User</span> = EmberObject.extend({\n  isAnonymous: <span class=\"keyword\">not</span>(<span class=\"string\">&apos;loggedIn&apos;</span>)\n});\n\nlet <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">true</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;loggedIn&apos;</span>, <span class=\"keyword\">true</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "not",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns\ninverse of the original value for property",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 209,
          "description": "<html><head></head><body><p>A computed property that converts the provided dependent property\ninto a boolean value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"type\">bool</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  hasBananas: <span class=\"type\">bool</span>(<span class=\"string\">&apos;numBananas&apos;</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">0</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">1</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); // <span class=\"keyword\">true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "bool",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which converts\nto boolean the original value for property",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 246,
          "description": "<html><head></head><body><p>A computed property which matches the original value for the\ndependent property against a given RegExp, returning <code>true</code>\nif the value matches the RegExp and <code>false</code> if it does not.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { match } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet <span class=\"keyword\">User</span> = EmberObject.extend({\n  hasValidEmail: match(<span class=\"string\">&apos;email&apos;</span>, /^.+@.+\\..+$/)\n});\n\nlet <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;ember_hamster@example.com&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "match",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "regexp",
              "description": "",
              "type": "RegExp"
            }
          ],
          "return": {
            "description": "computed property which match\nthe original value for property against a given RegExp",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 286,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis equal to the given value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { equal } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  satisfied: equal(<span class=\"string\">&apos;percentCarrotsEaten&apos;</span>, <span class=\"number\">100</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;satisfied&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;percentCarrotsEaten&apos;</span>, <span class=\"number\">100</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;satisfied&apos;</span>); // <span class=\"keyword\">true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;percentCarrotsEaten&apos;</span>, <span class=\"number\">50</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;satisfied&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "equal",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "String|Number|Object"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 324,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis greater than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { gt } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">11</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "gt",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater than given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 362,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { gte } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "gte",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 400,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { lt } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">2</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lt",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less then given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 438,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { lte } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">5</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lte",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less or equal than given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 476,
          "description": "<html><head></head><body><p>A computed property that performs a logical <code>and</code> on the\noriginal values for the provided dependent properties.</p>\n<p>You may pass in more than two properties and even use\nproperty brace expansion.  The computed property will\nreturn the first falsy value or last truthy value\njust like JavaScript&apos;s <code>&amp;&amp;</code> operator.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">and</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  readyForCamp: <span class=\"keyword\">and</span>(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"string\">&apos;hasBackpack&apos;</span>),\n  readyForHike: <span class=\"keyword\">and</span>(<span class=\"string\">&apos;hasWalkingStick&apos;</span>, <span class=\"string\">&apos;hasBackpack&apos;</span>)\n});\n\nlet tomster = Hamster.<span class=\"keyword\">create</span>();\n\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); // <span class=\"keyword\">false</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"keyword\">true</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); // <span class=\"keyword\">false</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasBackpack&apos;</span>, <span class=\"keyword\">true</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); // <span class=\"keyword\">true</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasBackpack&apos;</span>, <span class=\"string\">&apos;Yes&apos;</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); // <span class=\"string\">&apos;Yes&apos;</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasWalkingStick&apos;</span>, <span class=\"keyword\">null</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForHike&apos;</span>); // <span class=\"keyword\">null</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "and",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 519,
          "description": "<html><head></head><body><p>A computed property which performs a logical <code>or</code> on the\noriginal values for the provided dependent properties.</p>\n<p>You may pass in more than two properties and even use\nproperty brace expansion.  The computed property will\nreturn the first truthy value or last falsy value just\nlike JavaScript&apos;s <code>||</code> operator.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">or</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  readyForRain: <span class=\"keyword\">or</span>(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"string\">&apos;hasUmbrella&apos;</span>),\n  readyForBeach: <span class=\"keyword\">or</span>(<span class=\"string\">&apos;{hasSunscreen,hasUmbrella}&apos;</span>)\n});\n\nlet tomster = Hamster.<span class=\"keyword\">create</span>();\n\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); // undefined\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasUmbrella&apos;</span>, <span class=\"keyword\">true</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); // <span class=\"keyword\">true</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"string\">&apos;Yes&apos;</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); // <span class=\"string\">&apos;Yes&apos;</span>\ntomster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasSunscreen&apos;</span>, <span class=\"string\">&apos;Check&apos;</span>);\ntomster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForBeach&apos;</span>); // <span class=\"string\">&apos;Check&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "or",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 560,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">alias</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Person = EmberObject.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Alex Matchneer&apos;</span>,\n  nomen: <span class=\"keyword\">alias</span>(<span class=\"string\">&apos;name&apos;</span>)\n});\n\nlet alex = Person.<span class=\"keyword\">create</span>();\n\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nomen&apos;</span>); // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\n\nalex.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nomen&apos;</span>, <span class=\"string\">&apos;@machty&apos;</span>);\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;@machty&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "alias",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates an\nalias to the original value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 592,
          "description": "<html><head></head><body><p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { oneWay } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet <span class=\"keyword\">User</span> = EmberObject.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: oneWay(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\nlet teddy = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName: <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);              // <span class=\"string\">&apos;Teddy&apos;</span>\nteddy.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>); // <span class=\"string\">&apos;TeddyBear&apos;</span>\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);             // <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "oneWay",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 633,
          "description": "<html><head></head><body><p>This is a more semantically meaningful alias of <code>computed.oneWay</code>,\nwhose name is somewhat ambiguous as to which direction the data flows.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reads",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\n  one way computed property to the original value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 646,
          "description": "<html><head></head><body><p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propagate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { readOnly } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet <span class=\"keyword\">User</span> = EmberObject.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: readOnly(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\nlet teddy = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName:  <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);              // <span class=\"string\">&apos;Teddy&apos;</span>\nteddy.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>); // throws <span class=\"keyword\">Exception</span>\n// throw <span class=\"built_in\">new</span> EmberError(<span class=\"string\">&apos;Cannot Set: nickName on: &lt;User:ember27288&gt;&apos;</span> );`\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);             // <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readOnly",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "ComputedProperty"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 689,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { deprecatingAlias } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Hamster = EmberObject.extend({\n  bananaCount: deprecatingAlias(<span class=\"string\">&apos;cavendishCount&apos;</span>, {\n    id: <span class=\"string\">&apos;hamster.deprecate-banana&apos;</span>,\n    until: <span class=\"string\">&apos;3.0.0&apos;</span>\n  })\n});\n\n<span class=\"keyword\">let</span> hamster = Hamster.create();\n\nhamster.set(<span class=\"string\">&apos;bananaCount&apos;</span>, <span class=\"number\">5</span>); <span class=\"comment\">// Prints a deprecation warning.</span>\nhamster.get(<span class=\"string\">&apos;cavendishCount&apos;</span>); <span class=\"comment\">// 5</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deprecatingAlias",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "Options for `deprecate`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "computed property which creates an\nalias with a deprecation to the original value for property.",
            "type": "ComputedProperty"
          },
          "since": "1.7.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 72,
          "description": "<html><head></head><body><p>A computed property that returns the sum of the values\nin the dependent array.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sum",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the sum of all values in the dependentKey's array",
            "type": "ComputedProperty"
          },
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 88,
          "description": "<html><head></head><body><p>A computed property that calculates the maximum value in the\ndependent array. This will return <code>-Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { mapBy, max } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Person = EmberObject.extend({\n  childAges: mapBy(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  maxChildAge: max(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\nlet lordByron = Person.<span class=\"keyword\">create</span>({ children: [] });\n\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); // -<span class=\"keyword\">Infinity</span>\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObject({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, age: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); // <span class=\"number\">7</span>\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObjects([{\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  age: <span class=\"number\">5</span>\n}, {\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  age: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); // <span class=\"number\">8</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the types of the arguments are not numbers,\nthey will be converted to numbers and the type\nof the return value will always be <code>Number</code>.\nFor example, the max of a list of Date objects will be\nthe highest timestamp as a <code>Number</code>.\nThis behavior is consistent with <code>Math.max</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "max",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the largest value in the dependentKey's array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 137,
          "description": "<html><head></head><body><p>A computed property that calculates the minimum value in the\ndependent array. This will return <code>Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { mapBy, min } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Person = EmberObject.extend({\n  childAges: mapBy(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  minChildAge: min(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\nlet lordByron = Person.<span class=\"keyword\">create</span>({ children: [] });\n\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); // <span class=\"keyword\">Infinity</span>\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObject({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, age: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); // <span class=\"number\">7</span>\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObjects([{\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  age: <span class=\"number\">5</span>\n}, {\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  age: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); // <span class=\"number\">5</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the types of the arguments are not numbers,\nthey will be converted to numbers and the type\nof the return value will always be <code>Number</code>.\nFor example, the min of a list of Date objects will be\nthe lowest timestamp as a <code>Number</code>.\nThis behavior is consistent with <code>Math.min</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "min",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the smallest value in the dependentKey's array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 186,
          "description": "<html><head></head><body><p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { map } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Hamster = EmberObject.extend({\n  <span class=\"attr\">excitingChores</span>: map(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chore, index</span>) </span>{\n    <span class=\"keyword\">return</span> chore.toUpperCase() + <span class=\"string\">&apos;!&apos;</span>;\n  })\n});\n\n<span class=\"keyword\">let</span> hamster = Hamster.create({\n  <span class=\"attr\">chores</span>: [<span class=\"string\">&apos;clean&apos;</span>, <span class=\"string\">&apos;write more unit tests&apos;</span>]\n});\n\nhamster.get(<span class=\"string\">&apos;excitingChores&apos;</span>); <span class=\"comment\">// [&apos;CLEAN!&apos;, &apos;WRITE MORE UNIT TESTS!&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "map",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "an array mapped via the callback",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 230,
          "description": "<html><head></head><body><p>Returns an array mapped to the specified key.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { mapBy } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Person = EmberObject.extend({\n  childAges: mapBy(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>)\n});\n\nlet lordByron = Person.<span class=\"keyword\">create</span>({ children: [] });\n\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); // []\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObject({ <span class=\"type\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, age: <span class=\"number\">7</span> });\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); // [<span class=\"number\">7</span>]\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;children&apos;</span>).pushObjects([{\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  age: <span class=\"number\">5</span>\n}, {\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  age: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); // [<span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "an array mapped to the specified key",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 278,
          "description": "<html><head></head><body><p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.\n<code>array</code> is the dependant array itself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">filter</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  remainingChores: <span class=\"keyword\">filter</span>(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"keyword\">function</span>(chore, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>) {\n    <span class=\"keyword\">return</span> !chore.done;\n  })\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>({\n  chores: [\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span> }\n  ]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // [{<span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use <code>@each.property</code> in your dependent key, the callback will still use the underlying array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { A } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/array&apos;</span>;\n<span class=\"keyword\">import</span> { <span class=\"keyword\">filter</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  remainingChores: <span class=\"keyword\">filter</span>(<span class=\"string\">&apos;chores.@each.done&apos;</span>, <span class=\"keyword\">function</span>(chore, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>) {\n    <span class=\"keyword\">return</span> !chore.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;done&apos;</span>);\n  })\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>({\n  chores: A([\n    EmberObject.<span class=\"keyword\">create</span>({ <span class=\"type\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, done: <span class=\"keyword\">true</span> }),\n    EmberObject.<span class=\"keyword\">create</span>({ <span class=\"type\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, done: <span class=\"keyword\">true</span> }),\n    EmberObject.<span class=\"keyword\">create</span>({ <span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span> })\n  ])\n});\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // [{<span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span>}]\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;chores&apos;</span>).objectAt(<span class=\"number\">2</span>).<span class=\"keyword\">set</span>(<span class=\"string\">&apos;done&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // []</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 351,
          "description": "<html><head></head><body><p>Filters the array by the property and value</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { filterBy } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  remainingChores: filterBy(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"string\">&apos;done&apos;</span>, <span class=\"keyword\">false</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>({\n  chores: [\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span> }\n  ]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // [{ <span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "*"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 398,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { uniq } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: uniq(<span class=\"string\">&apos;fruits&apos;</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>({\n  fruits: [\n    <span class=\"string\">&apos;banana&apos;</span>,\n    <span class=\"string\">&apos;grape&apos;</span>,\n    <span class=\"string\">&apos;kale&apos;</span>,\n    <span class=\"string\">&apos;banana&apos;</span>\n  ]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;uniqueFruits&apos;</span>); // [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 457,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique\nelements from an array, with uniqueness determined by specific key.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { uniqBy } from <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Hamster = EmberObject.extend({\n  uniqueFruits: uniqBy(<span class=\"string\">&apos;fruits&apos;</span>, <span class=\"string\">&apos;id&apos;</span>)\n});\n<span class=\"keyword\">let</span> hamster = Hamster.create({\n  fruits: [\n    {<span class=\"built_in\"> id</span>: <span class=\"number\">1</span>, <span class=\"string\">&apos;banana&apos;</span> },\n    {<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>, <span class=\"string\">&apos;grape&apos;</span> },\n    {<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>, <span class=\"string\">&apos;peach&apos;</span> },\n    {<span class=\"built_in\"> id</span>: <span class=\"number\">1</span>, <span class=\"string\">&apos;banana&apos;</span> }\n  ]\n});\nhamster.get(<span class=\"string\">&apos;uniqueFruits&apos;</span>); // [ {<span class=\"built_in\"> id</span>: <span class=\"number\">1</span>, <span class=\"string\">&apos;banana&apos;</span> }, {<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>, <span class=\"string\">&apos;grape&apos;</span> }, {<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>, <span class=\"string\">&apos;peach&apos;</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniqBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 507,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">union</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: <span class=\"keyword\">union</span>(<span class=\"string\">&apos;fruits&apos;</span>, <span class=\"string\">&apos;vegetables&apos;</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>({\n  fruits: [\n    <span class=\"string\">&apos;banana&apos;</span>,\n    <span class=\"string\">&apos;grape&apos;</span>,\n    <span class=\"string\">&apos;kale&apos;</span>,\n    <span class=\"string\">&apos;banana&apos;</span>,\n    <span class=\"string\">&apos;tomato&apos;</span>\n  ],\n  vegetables: [\n    <span class=\"string\">&apos;tomato&apos;</span>,\n    <span class=\"string\">&apos;carrot&apos;</span>,\n    <span class=\"string\">&apos;lettuce&apos;</span>\n  ]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;uniqueFruits&apos;</span>); // [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>, <span class=\"string\">&apos;tomato&apos;</span>, <span class=\"string\">&apos;carrot&apos;</span>, <span class=\"string\">&apos;lettuce&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "union",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 549,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the elements\ntwo or more dependent arrays have in common.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">intersect</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet obj = EmberObject.extend({\n  friendsInCommon: <span class=\"keyword\">intersect</span>(<span class=\"string\">&apos;adaFriends&apos;</span>, <span class=\"string\">&apos;charlesFriends&apos;</span>)\n}).<span class=\"keyword\">create</span>({\n  adaFriends: [<span class=\"string\">&apos;Charles Babbage&apos;</span>, <span class=\"string\">&apos;John Hobhouse&apos;</span>, <span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>],\n  charlesFriends: [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>, <span class=\"string\">&apos;Ada Lovelace&apos;</span>, <span class=\"string\">&apos;George Peacock&apos;</span>]\n});\n\nobj.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;friendsInCommon&apos;</span>); // [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "intersect",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nduplicated elements from the dependent arrays",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 607,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { setDiff } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Hamster = EmberObject.extend({\n  likes: [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>],\n  wants: setDiff(<span class=\"string\">&apos;likes&apos;</span>, <span class=\"string\">&apos;fruits&apos;</span>)\n});\n\n<span class=\"keyword\">let</span> hamster = Hamster.create({\n  fruits: [\n    <span class=\"string\">&apos;grape&apos;</span>,\n    <span class=\"string\">&apos;kale&apos;</span>,\n  ]\n});\n\nhamster.get(<span class=\"string\">&apos;wants&apos;</span>); <span class=\"comment\">// [&apos;banana&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setDiff",
          "static": 1,
          "params": [
            {
              "name": "setAProperty",
              "description": "",
              "type": "String"
            },
            {
              "name": "setBProperty",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the\nitems from the first dependent array that are not in the second\ndependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 673,
          "description": "<html><head></head><body><p>A computed property that returns the array of values\nfor the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { collect } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Hamster = EmberObject.extend({\n  clothes: collect(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;shirt&apos;</span>)\n});\n\nlet hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>]\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;Camp Hat&apos;</span>);\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;shirt&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"string\">&apos;Camp Hat&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "collect",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which maps\nvalues of all passed in properties to an array.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 724,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.</p>\n<p>The callback method you provide should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(itemA, itemB)</span></span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should come before\n<code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code> should come after\n<code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p>\n<p>Therefore, if this function is comparing some numeric values, simple <code>itemA - itemB</code> or\n<code>itemA.get( &apos;foo&apos; ) - itemB.get( &apos;foo&apos; )</code> can be used instead of series of <code>if</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { sort } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet ToDoList = EmberObject.extend({\n  // <span class=\"keyword\">using</span> standard ascending sort\n  todosSorting: <span class=\"keyword\">Object</span>.<span class=\"keyword\">freeze</span>([<span class=\"string\">&apos;name&apos;</span>]),\n  sortedTodos: sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"string\">&apos;todosSorting&apos;</span>),\n\n  // <span class=\"keyword\">using</span> descending sort\n  todosSortingDesc: <span class=\"keyword\">Object</span>.<span class=\"keyword\">freeze</span>([<span class=\"string\">&apos;name:desc&apos;</span>]),\n  sortedTodosDesc: sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"string\">&apos;todosSortingDesc&apos;</span>),\n\n  // <span class=\"keyword\">using</span> a custom sort <span class=\"keyword\">function</span>\n  priorityTodos: sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"keyword\">function</span>(a, b){\n    <span class=\"keyword\">if</span> (a.priority &gt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.priority &lt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  })\n});\n\nlet todoList = ToDoList.<span class=\"keyword\">create</span>({todos: [\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Unit Test&apos;</span>, priority: <span class=\"number\">2</span> },\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Documentation&apos;</span>, priority: <span class=\"number\">3</span> },\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Release&apos;</span>, priority: <span class=\"number\">1</span> }\n]});\n\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;sortedTodos&apos;</span>);      // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }]\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;sortedTodosDesc&apos;</span>);  // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }]\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;priorityTodos&apos;</span>);    // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "sort",
          "static": 1,
          "params": [
            {
              "name": "itemsKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "sortDefinition",
              "description": "a dependent key to an\narray of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting",
              "type": "String or Function"
            }
          ],
          "return": {
            "description": "computes a new sorted array based\non the sort property array or callback function",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/ember-metal/lib/expand_properties.ts",
          "line": 9,
          "description": "<html><head></head><body><p>Expands <code>pattern</code>, invoking <code>callback</code> for each expansion.</p>\n<p>The only pattern supported is brace-expansion, anything else will be passed\nonce to <code>callback</code> directly.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>import { expandProperties } from &apos;@ember/object/computed&apos;;\n\n<span class=\"keyword\">function</span> echo(arg){ console.log(arg); }\n\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.<span class=\"params\">bar</span>&apos;, <span class=\"params\">echo</span>)</span>;              <span class=\"comment\">//=&gt; &apos;foo.bar&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}&apos;, <span class=\"params\">echo</span>)</span>;            <span class=\"comment\">//=&gt; &apos;foo&apos;, &apos;bar&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.{<span class=\"params\">bar</span>,<span class=\"params\">baz</span>}&apos;, <span class=\"params\">echo</span>)</span>;        <span class=\"comment\">//=&gt; &apos;foo.bar&apos;, &apos;foo.baz&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}.<span class=\"params\">baz</span>&apos;, <span class=\"params\">echo</span>)</span>;        <span class=\"comment\">//=&gt; &apos;foo.baz&apos;, &apos;bar.baz&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.{<span class=\"params\">bar</span>,<span class=\"params\">baz</span>}.[]&apos;, <span class=\"params\">echo</span>)</span>      <span class=\"comment\">//=&gt; &apos;foo.bar.[]&apos;, &apos;foo.baz.[]&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}.{<span class=\"params\">spam</span>,<span class=\"params\">eggs</span>}&apos;, <span class=\"params\">echo</span>)</span> <span class=\"comment\">//=&gt; &apos;foo.spam&apos;, &apos;foo.eggs&apos;, &apos;bar.spam&apos;, &apos;bar.eggs&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>}.<span class=\"params\">bar</span>.{<span class=\"params\">baz</span>}&apos;)</span>             <span class=\"comment\">//=&gt; &apos;foo.bar.baz&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "expandProperties",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "pattern",
              "description": "The property pattern to expand.",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
              "type": "Function"
            }
          ],
          "class": "@ember/object/computed",
          "module": "@ember/object"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.4.0-@ember/object",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.4.0",
          "type": "project-version"
        }
      }
    }
  }
}