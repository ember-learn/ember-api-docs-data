{
  "data": {
    "id": "ember-4.10.0-RegistryProxy",
    "type": "class",
    "attributes": {
      "name": "RegistryProxy",
      "shortname": "RegistryProxy",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/owner",
      "namespace": "",
      "file": "packages/@ember/-internals/owner/index.ts",
      "line": 590,
      "extends": "BasicRegistry",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/owner/index.ts",
          "line": 98,
          "description": "<html><head></head><body><p>Registers a factory that can be used for dependency injection (with\n<code>inject</code>) or for service lookup. Each factory is registered with\na full name including two parts: <code>type:name</code>.</p>\n<p>A simple example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, App.Orange);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Ember will resolve factories from the <code>App</code> namespace automatically.\nFor example <code>App.CarsController</code> will be discovered and returned if\nan application requests <code>controller:cars</code>.</p>\n<p>An example of registering a controller with a non-standard name:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n<span class=\"keyword\">let</span> Session = Controller.extend();\n\nApp.register(<span class=\"string\">&apos;controller:session&apos;</span>, Session);\n\n<span class=\"comment\">// The Session controller can now be treated like a normal controller,</span>\n<span class=\"comment\">// despite its non-standard name.</span>\nApp.ApplicationController = Controller.extend({\n  needs: [<span class=\"string\">&apos;session&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Registered factories are <strong>instantiated</strong> by having <code>create</code>\ncalled on them. Additionally they are <strong>singletons</strong>, each time\nthey are looked up they return the same instance.</p>\n<p>Some examples modifying that default behavior:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet App = Application.<span class=\"keyword\">create</span>();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.<span class=\"keyword\">session</span> = EmberObject.<span class=\"keyword\">create</span>();\n\nApp.register(<span class=\"string\">&apos;model:user&apos;</span>, App.Person, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, App.Orange);\nApp.register(<span class=\"string\">&apos;communication:main&apos;</span>, App.Email, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">&apos;session&apos;</span>, App.<span class=\"keyword\">session</span>, { instantiate: <span class=\"keyword\">false</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "type:name (e.g., 'model:user')",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "(e.g., App.Person)",
              "type": "Factory|object"
            },
            {
              "name": "options",
              "description": "(optional) disable instantiation or singleton usage",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RegistryProxy",
          "module": "@ember/owner",
          "inherited": true,
          "inheritedFrom": "BasicRegistry"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-4.10.0-BasicRegistry",
          "type": "class"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-4.10.0-RegistryProxyMixin"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-4.10.0-@ember/owner",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.10.0",
          "type": "project-version"
        }
      }
    }
  }
}