{
  "data": {
    "id": "ember-1.2.2-Ember.Controller",
    "type": "class",
    "attributes": {
      "name": "Ember.Controller",
      "shortname": "Ember.Controller",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "../packages/ember-runtime/lib/controllers/controller.js",
      "line": 59,
      "extends": "Ember.Object",
      "uses": [
        "Ember.ControllerMixin"
      ],
      "methods": [
        {
          "file": "../packages/container/lib/main.js",
          "line": 45,
          "description": "Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 66,
          "description": "Set the given value for the given key, at the current level.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Any"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 77,
          "description": "Delete the given key",
          "itemtype": "method",
          "name": "remove",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 87,
          "description": "Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 110,
          "description": "Iterate and invoke a callback for each local key-value pair.",
          "itemtype": "method",
          "name": "eachLocal",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 216,
          "description": "Returns a new child of the current container. These children are configured\nto correctly inherit from the current container.",
          "itemtype": "method",
          "name": "child",
          "return": {
            "description": "",
            "type": "Container"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 229,
          "description": "Sets a key-value pair on the current container. If a parent container,\nhas the same key, once set on a child, the parent and child will diverge\nas expected.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "object",
              "description": "",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Any"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 243,
          "description": "Registers a factory for later injection.\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('model:user', Person, {singleton: false });\ncontainer.register('fruit:favorite', Orange);\ncontainer.register('communication:main', Email, {singleton: false});\n```",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 278,
          "description": "Unregister a fullName\n\n```javascript\nvar container = new Container();\ncontainer.register('model:user', User);\n\ncontainer.lookup('model:user') instanceof User //=> true\n\ncontainer.unregister('model:user')\ncontainer.lookup('model:user') === undefined //=> true\n```",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 306,
          "description": "Given a fullName return the corresponding factory.\n\nBy default `resolve` will retrieve the factory from\nits container's registry.\n\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\n\ncontainer.resolve('api:twitter') // => Twitter\n```\n\nOptionally the container can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe oppertunity to resolve the fullName, otherwise it will fallback\nto the registry.\n\n```javascript\nvar container = new Container();\ncontainer.resolver = function(fullName) {\n  // lookup via the module system of choice\n};\n\n// the twitter factory is added to the module system\ncontainer.resolve('api:twitter') // => Twitter\n```",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 353,
          "description": "A hook that can be used to describe how the resolver will\nattempt to find the factory.\n\nFor example, the default Ember `.describe` returns the full\nclass name (including namespace) where Ember's resolver expects\nto find the `fullName`.",
          "itemtype": "method",
          "name": "describe",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "described fullName",
            "type": "String"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 369,
          "description": "A hook to enable custom fullName normalization behaviour",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized fullName",
            "type": "String"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 380,
          "itemtype": "method",
          "name": "makeToString",
          "params": [
            {
              "name": "factory",
              "description": "",
              "type": "Any"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "toString function",
            "type": "Function"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 391,
          "description": "Given a fullName return a corresponding instance.\n\nThe default behaviour is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\n\nvar twitter = container.lookup('api:twitter');\n\ntwitter instanceof Twitter; // => true\n\n// by default the container will return singletons\nvar twitter2 = container.lookup('api:twitter');\ntwitter instanceof Twitter; // => true\n\ntwitter === twitter2; //=> true\n```\n\nIf singletons are not wanted an optional flag can be provided at lookup.\n\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\n\nvar twitter = container.lookup('api:twitter', { singleton: false });\nvar twitter2 = container.lookup('api:twitter', { singleton: false });\n\ntwitter === twitter2; //=> false\n```",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 435,
          "description": "Given a fullName return the corresponding factory.",
          "itemtype": "method",
          "name": "lookupFactory",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 447,
          "description": "Given a fullName check if the container is aware of its factory\nor singleton instance.",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 460,
          "description": "Allow registering options for all factories of a type.\n\n```javascript\nvar container = new Container();\n\n// if all of type `connection` must not be singletons\ncontainer.optionsForType('connection', { singleton: false });\n\ncontainer.register('connection:twitter', TwitterConnection);\ncontainer.register('connection:facebook', FacebookConnection);\n\nvar twitter = container.lookup('connection:twitter');\nvar twitter2 = container.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nvar facebook = container.lookup('connection:facebook');\nvar facebook2 = container.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
          "itemtype": "method",
          "name": "optionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 493,
          "itemtype": "method",
          "name": "options",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 502,
          "description": "Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('router:main', Router);\ncontainer.register('controller:user', UserController);\ncontainer.register('controller:post', PostController);\n\ncontainer.typeInjection('controller', 'router', 'router:main');\n\nvar user = container.lookup('controller:user');\nvar post = container.lookup('controller:post');\n\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "typeInjection",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 544,
          "description": "Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\n* Injecting one fullName on another fullName\n* Injecting one fullName on a type\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('source:main', Source);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n\n// injecting one fullName on another fullName\n// eg. each user model gets a post model\ncontainer.injection('model:user', 'post', 'model:post');\n\n// injecting one fullName on another type\ncontainer.injection('model', 'source', 'source:main');\n\nvar user = container.lookup('model:user');\nvar post = container.lookup('model:post');\n\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\n\nuser.post instanceof Post; //=> true\n\n// and both models share the same source\nuser.source === post.source; //=> true\n```",
          "itemtype": "method",
          "name": "injection",
          "params": [
            {
              "name": "factoryName",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 605,
          "description": "Used only via `factoryInjection`.\n\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\n\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('store:main', SomeStore);\n\ncontainer.factoryTypeInjection('model', 'store', 'store:main');\n\nvar store = container.lookup('store:main');\nvar UserFactory = container.lookupFactory('model:user');\n\nUserFactory.store instanceof SomeStore; //=> true\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "factoryTypeInjection",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 640,
          "description": "Defines factory injection rules.\n\nSimilar to regular injection rules, but are run against factories, via\n`Container#lookupFactory`.\n\nThese rules are used to inject objects onto factories when they\nare looked up.\n\nTwo forms of injections are possible:\n\n      * Injecting one fullName on another fullName\n      * Injecting one fullName on a type\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('store:main', Store);\ncontainer.register('store:secondary', OtherStore);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n\n// injecting one fullName on another type\ncontainer.factoryInjection('model', 'store', 'store:main');\n\n// injecting one fullName on another fullName\ncontainer.factoryInjection('model:post', 'secondaryStore', 'store:secondary');\n\nvar UserFactory = container.lookupFactory('model:user');\nvar PostFactory = container.lookupFactory('model:post');\nvar store = container.lookup('store:main');\n\nUserFactory.store instanceof Store; //=> true\nUserFactory.secondaryStore instanceof OtherStore; //=> false\n\nPostFactory.store instanceof Store; //=> true\nPostFactory.secondaryStore instanceof OtherStore; //=> true\n\n// and both models share the same source instance\nUserFactory.store === PostFactory.store; //=> true\n```",
          "itemtype": "method",
          "name": "factoryInjection",
          "params": [
            {
              "name": "factoryName",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 706,
          "description": "A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.",
          "itemtype": "method",
          "name": "destroy",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 727,
          "itemtype": "method",
          "name": "reset",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 132,
          "itemtype": "method",
          "name": "controllerFor",
          "see": [
            "{Ember.Route#controllerFor}"
          ],
          "deprecated": true,
          "deprecationMessage": "Use `needs` instead",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 12,
          "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\naController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.transitionToRoute('blogPost', aPost);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nthis.resource('blogPost', {path:':blogPostId'}, function(){\n  this.resource('blogComment', {path: ':blogCommentId'});\n});\n\naController.transitionToRoute('blogComment', aPost, aComment);\n```\n\nSee also 'replaceRoute'.",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) to be used while transitioning\nto the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "transitionToRoute",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 55,
          "deprecated": true,
          "itemtype": "method",
          "name": "transitionTo",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 65,
          "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nthis.resource('blogPost', {path:':blogPostId'}, function(){\n  this.resource('blogComment', {path: ':blogCommentId'});\n});\n\naController.replaceRoute('blogComment', aPost, aComment);\n```",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) to be used while transitioning\nto the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "replaceRoute",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 107,
          "deprecated": true,
          "itemtype": "method",
          "name": "replaceWith",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 183,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  init: function() {\n    alert('Name is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name: \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super()` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 303,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 325,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 332,
          "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 351,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nApp.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=> \"<App.Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n   ```javascript\nStudent = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=> \"<(subclass of App.Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nApp.Teacher = App.Person.extend({\n  toStringExtension: function() {\n    return this.get('fullName');\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 418,
          "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Ember.Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Ember.Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Ember.Mixin classes",
              "type": "Ember.Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 520,
          "description": "Equivalent to doing `extend(arguments).create()`.\nIf possible use the normal `create` method instead.",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 534,
          "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend` or use the `createWithMixins` shorthand.",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 577,
          "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say: function(msg){\n    console.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\n\no.say(\"goodbye\"); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 612,
          "description": "Augments a constructor's own properties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name : \"\",\n  sayHello : function(){\n    alert(\"Hello. My name is \" + this.get('name'));\n  }\n});\n\nApp.Person.reopenClass({\n  species : \"Homo sapiens\",\n  createPerson: function(newPersonsName){\n    return App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\nvar tom = App.Person.create({\n  name : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `App.Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 686,
          "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 721,
          "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 78,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nfullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 120,
          "description": "To get multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Hash"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 142,
          "description": "Sets the provided key or path to the value.\n\nThis method is generally very similar to calling `object[key] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.\n\n### Chaining\n\nIn addition to property changes, `set()` returns the value of the object\nitself so you can do chaining like this:\n\n```javascript\nrecord.set('firstName', 'Charles').set('lastName', 'Jolley');\n```",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 196,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 213,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 232,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 250,
          "description": "Notify the observer system that a property is about to change.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyDidChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 273,
          "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyWillChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 296,
          "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 314,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nYou can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.\n\n### Observer Methods\n\nObserver methods you pass should generally have the following signature if\nyou do not pass a `context` parameter:\n\n```javascript\nfooDidChange: function(sender, key, value, rev) { };\n```\n\nThe sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nIf you pass a `context` parameter, the context will be passed before the\nrevision like so:\n\n```javascript\nfooDidChange: function(sender, key, value, context, rev) { };\n```\n\nUsually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "self",
            "type": "Ember.Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 366,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 381,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 395,
          "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 412,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 432,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 452,
          "description": "Set the value of a boolean property to the opposite of it's\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 469,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 142,
          "description": "Moves `actions` to `_actions` at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "willMergeMixin",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 171,
          "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```js\nApp.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: function() {\n       this.send('playMusic', 'theme.mp3');\n    },\n    playMusic: function(track) {\n      // ...\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "actionName",
              "description": "The action to trigger",
              "type": "String"
            },
            {
              "name": "context",
              "description": "a context to send with the action",
              "type": "*"
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/container/lib/main.js",
          "line": 28,
          "itemtype": "property",
          "name": "parent",
          "type": "InheritingDict",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 36,
          "description": "Object used to store the current nodes data.",
          "itemtype": "property",
          "name": "dict",
          "type": "Object",
          "default": "Object",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 154,
          "itemtype": "property",
          "name": "parent",
          "type": "Container",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 161,
          "itemtype": "property",
          "name": "children",
          "type": "Array",
          "default": "[]",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 168,
          "itemtype": "property",
          "name": "resolver",
          "type": "function",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 174,
          "itemtype": "property",
          "name": "registry",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 180,
          "itemtype": "property",
          "name": "cache",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 186,
          "itemtype": "property",
          "name": "typeInjections",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 192,
          "itemtype": "property",
          "name": "injections",
          "type": "Object",
          "default": "{}",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 199,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_options",
          "type": "InheritingDict",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 208,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_typeOptions",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 62,
          "description": "An array of other controller objects available inside\ninstances of this controller via the `controllers`\nproperty:\n\nFor example, when you define a controller:\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post']\n});\n```\n\nThe application's single instance of these other\ncontrollers are accessible by name through the\n`controllers` property:\n\n```javascript\nthis.get('controllers.post'); // instance of App.PostController\n```\n\nGiven that you have a nested controller (nested resource):\n\n```javascript\nApp.CommentsNewController = Ember.ObjectController.extend({\n});\n```\n\nWhen you define a controller that requires access to a nested one:\n\n```javascript\nApp.IndexController = Ember.ObjectController.extend({\n  needs: ['commentsNew']\n});\n```\n\nYou will be able to get access to it:\n\n```javascript\nthis.get('controllers.commentsNew'); // instance of App.CommentsNewController\n```\n\nThis is only available for singleton controllers.",
          "itemtype": "property",
          "name": "needs",
          "type": "Array",
          "default": "[]",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 142,
          "description": "Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the `needs`\nproperty will be accessible by name through this property.\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post'],\n  postTitle: function(){\n    var currentPost = this.get('controllers.post'); // instance of App.PostController\n    return currentPost.get('title');\n  }.property('controllers.post.title')\n});\n```",
          "see": [
            "{Ember.ControllerMixin#needs}"
          ],
          "itemtype": "property",
          "name": "controllers",
          "type": "Object",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/controllers/controller.js",
          "line": 24,
          "description": "The object to which actions from the view should be sent.\n\nFor example, when a Handlebars template uses the `{{action}}` helper,\nit will attempt to send the action to the view's controller's `target`.\n\nBy default, a controller's `target` is set to the router after it is\ninstantiated by `Ember.Application#initialize`.",
          "itemtype": "property",
          "name": "target",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 213,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo'],\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell to Ember that mix\nthe content of the properties.\n\nIn `Ember.View` the `classNameBindings` and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 281,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 292,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 22,
          "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js\nApp.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: function(msg) {\n      // ...\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: function() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route, View or Component's action handler,\nthe value of the `this` context is the Controller, Route, View or\nComponent object:\n\n```js\nApp.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: function() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super()` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js\nApp.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: function() {\n      console.debug(\"trololo\");\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: function() {\n      // also call the debugRouteInformation of mixed in App.DebugRoute\n      this._super();\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js\nApp.Router.map(function() {\n  this.resource(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
          "itemtype": "property",
          "name": "actions",
          "type": "Hash",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.2.2-Ember.Object",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.2.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.2.2",
          "type": "project-version"
        }
      }
    }
  }
}