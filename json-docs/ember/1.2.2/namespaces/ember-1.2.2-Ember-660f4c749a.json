{
  "data": {
    "id": "ember-1.2.2-Ember",
    "type": "namespace",
    "attributes": {
      "name": "Ember",
      "shortname": "Ember",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-metal",
      "namespace": "",
      "file": "../packages/ember-metal/lib/core.js",
      "line": 8,
      "description": "<html><head></head><body><p>All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.</p>\n<p>You can also use the shorthand <code>Em</code> instead of <code>Ember</code>.</p>\n<p>Ember-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.</p>\n<p>The core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.</p>\n</body></html>",
      "static": 1,
      "version": "VERSION_STRING_PLACEHOLDER",
      "methods": [
        {
          "file": "../packages/ember-debug/lib/main.js",
          "line": 41,
          "description": "<html><head></head><body><p>Define an assertion that will throw an exception if the condition is not\nmet. Ember build tools will remove any calls to <code>Ember.assert()</code> when\ndoing a production build. Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Test for truthiness</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">assert</span>(&apos;Must pass a valid <span class=\"keyword\">object</span>&apos;, obj);\n<span class=\"comment\">// Fail unconditionally</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">assert</span>(&apos;This code path should never be run&apos;)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "assert",
          "params": [
            {
              "name": "desc",
              "description": "A description of the assertion. This will become\n  the text of the Error thrown if the assertion fails.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
              "type": "Boolean"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "../packages/ember-debug/lib/main.js",
          "line": 66,
          "description": "<html><head></head><body><p>Display a warning with the provided message. Ember build tools will\nremove any calls to <code>Ember.warn()</code> when doing a production build.</p>\n</body></html>",
          "itemtype": "method",
          "name": "warn",
          "params": [
            {
              "name": "message",
              "description": "A warning to display.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
              "type": "Boolean"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "../packages/ember-debug/lib/main.js",
          "line": 82,
          "description": "<html><head></head><body><p>Display a debug notice. Ember build tools will remove any calls to\n<code>Ember.debug()</code> when doing a production build.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>Ember.<span class=\"built_in\">debug</span>(<span class=\"string\">&quot;I&apos;m a debug notice!&quot;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "debug",
          "params": [
            {
              "name": "message",
              "description": "A debug message to display.",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "../packages/ember-debug/lib/main.js",
          "line": 97,
          "description": "<html><head></head><body><p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only). Ember build tools will remove any calls to\n<code>Ember.deprecate()</code> when doing a production build.</p>\n</body></html>",
          "itemtype": "method",
          "name": "deprecate",
          "params": [
            {
              "name": "message",
              "description": "A description of the deprecation.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "An optional boolean. If falsy, the deprecation\n  will be displayed.",
              "type": "Boolean"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "../packages/ember-debug/lib/main.js",
          "line": 143,
          "description": "<html><head></head><body><p>Alias an old, deprecated method with its new counterpart.</p>\n<p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.</p>\n<p>Ember build tools will not remove calls to <code>Ember.deprecateFunc()</code>, though\nno warnings will be shown in production.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>oldMethod = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>deprecate<span class=\"constructor\">Func(<span class=\"string\">&quot;Please use the new, updated method&quot;</span>, Ember.<span class=\"params\">newMethod</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deprecateFunc",
          "params": [
            {
              "name": "message",
              "description": "A description of the deprecation.",
              "type": "String"
            },
            {
              "name": "func",
              "description": "The new function called to replace its deprecated counterpart.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "a new function that wrapped the original function with a deprecation warning",
            "type": "Function"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 6,
          "description": "<html><head></head><body><p>If a path starts with a reserved keyword, returns the root\nthat should be used.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "normalizePath",
          "params": [
            {
              "name": "root",
              "description": "",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "",
              "type": "String"
            },
            {
              "name": "data",
              "description": "",
              "type": "Hash"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "../packages/ember-metal/lib/binding.js",
          "line": 34,
          "description": "<html><head></head><body><p>Returns true if the provided path is global (e.g., <code>MyApp.fooController.bar</code>)\ninstead of local (<code>foo.bar.baz</code>).</p>\n</body></html>",
          "itemtype": "method",
          "name": "isGlobalPath",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "path",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "Boolean"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/binding.js",
          "line": 445,
          "description": "<html><head></head><body><p>Global helper method to create a new binding. Just pass the root object\nalong with a <code>to</code> and <code>from</code> path to create and connect the binding.</p>\n</body></html>",
          "itemtype": "method",
          "name": "bind",
          "params": [
            {
              "name": "obj",
              "description": "The root object of the transform.",
              "type": "Object"
            },
            {
              "name": "to",
              "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
              "type": "String"
            },
            {
              "name": "from",
              "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
              "type": "String"
            }
          ],
          "return": {
            "description": "binding instance",
            "type": "Ember.Binding"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/binding.js",
          "line": 462,
          "itemtype": "method",
          "name": "oneWay",
          "params": [
            {
              "name": "obj",
              "description": "The root object of the transform.",
              "type": "Object"
            },
            {
              "name": "to",
              "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
              "type": "String"
            },
            {
              "name": "from",
              "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
              "type": "String"
            }
          ],
          "return": {
            "description": "binding instance",
            "type": "Ember.Binding"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 523,
          "description": "<html><head></head><body><p>This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via <code>Ember.defineProperty()</code>.</p>\n<p>The function you pass will be used to both get and set property values.\nThe function should accept two parameters, key and value. If value is not\nundefined you should set the value first. In either case return the\ncurrent value of the property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "computed",
          "params": [
            {
              "name": "func",
              "description": "The computed property function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "property descriptor instance",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 558,
          "description": "<html><head></head><body><p>Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "obj",
              "description": "the object whose property you want to check",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "the name of the property whose cached value you want\n  to return",
              "type": "String"
            }
          ],
          "return": {
            "description": "the cached value",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 692,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Note: When using <code>Ember.computed.empty</code> to watch an array make sure to\nuse the <code>array.[]</code> syntax so the computed can subscribe to transitions\nfrom empty to non-empty states.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> ToDoList = Ember.<span class=\"built_in\">Object</span>.extend({\n  done: Ember.computed.empty(<span class=\"string\">&apos;todos.[]&apos;</span>) <span class=\"comment\">// detect array changes</span>\n});\n<span class=\"keyword\">var</span> todoList = ToDoList.create({todos: [<span class=\"string\">&apos;Unit Test&apos;</span>, <span class=\"string\">&apos;Documentation&apos;</span>, <span class=\"string\">&apos;Release&apos;</span>]});\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;done&apos;</span>); <span class=\"comment\">// false</span>\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;todos&apos;</span>).clear(); <span class=\"comment\">// []</span>\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;done&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.empty",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which negate\nthe original value for property",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 722,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.</p>\n<p>Note: When using <code>Ember.computed.notEmpty</code> to watch an array make sure to\nuse the <code>array.[]</code> syntax so the computed can subscribe to transitions\nfrom empty to non-empty states.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasStuff: Ember.computed.notEmpty(<span class=\"string\">&apos;backpack.[]&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create({backpack: [<span class=\"string\">&apos;Food&apos;</span>, <span class=\"string\">&apos;Sleeping Bag&apos;</span>, <span class=\"string\">&apos;Tent&apos;</span>]});\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;backpack&apos;</span>).clear(); <span class=\"comment\">// []</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.notEmpty",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if\noriginal value for property is not empty.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 752,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  isHungry: Ember.computed.none(<span class=\"string\">&apos;food&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"string\">&apos;Banana&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.none",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which\nreturns true if original value for property is null or undefined.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 781,
          "description": "<html><head></head><body><p>A computed property that returns the inverse boolean value\nof the original value for the dependent property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  isAnonymous: Ember.computed.<span class=\"keyword\">not</span>(<span class=\"string\">&apos;loggedIn&apos;</span>)\n});\nvar <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">true</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;loggedIn&apos;</span>, <span class=\"keyword\">true</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.not",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns\ninverse of the original value for property",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 807,
          "description": "<html><head></head><body><p>A computed property that converts the provided dependent property\ninto a boolean value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasBananas: Ember.computed.<span class=\"built_in\">bool</span>(<span class=\"string\">&apos;numBananas&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">0</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">1</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.bool",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which converts\nto boolean the original value for property",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 835,
          "description": "<html><head></head><body><p>A computed property which matches the original value for the\ndependent property against a given RegExp, returning <code>true</code>\nif they values matches the RegExp and <code>false</code> if it does not.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  hasValidEmail: Ember.computed.match(<span class=\"string\">&apos;email&apos;</span>, /^.+@.+\\..+$/)\n});\nvar <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;ember_hamster@example.com&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.match",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "regexp",
              "description": "",
              "type": "RegExp"
            }
          ],
          "return": {
            "description": "computed property which match\nthe original value for property against a given RegExp",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 866,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis equal to the given value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  napTime: Ember.computed.equal(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;sleepy&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;sleepy&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;hungry&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.equal",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "String|Number|Object"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 895,
          "description": "<html><head></head><body><p>A computed property that returns true if the provied dependent property\nis greater than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasTooManyBananas: Ember.computed.gt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">11</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.gt",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater then given value.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 924,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasTooManyBananas: Ember.computed.gte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.gte",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 953,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  needsMoreBananas: Ember.computed.lt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">2</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.lt",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less then given value.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 982,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  needsMoreBananas: Ember.computed.lte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">5</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.lte",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less or equal then given value.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1011,
          "description": "<html><head></head><body><p>A computed property that performs a logical <code>and</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  readyForCamp: Ember.computed.and(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"string\">&apos;hasBackpack&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasBackpack&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.and",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1044,
          "description": "<html><head></head><body><p>A computed property which performs a logical <code>or</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  readyForRain: Ember.computed.or(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"string\">&apos;hasUmbrella&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.or",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1075,
          "description": "<html><head></head><body><p>A computed property that returns the first truthy value\nfrom a list of dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasClothes: Ember.computed.any(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;shirt&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasClothes&apos;</span>); <span class=\"comment\">// null</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;shirt&apos;</span>, <span class=\"string\">&apos;Hawaiian Shirt&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasClothes&apos;</span>); <span class=\"comment\">// &apos;Hawaiian Shirt&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.any",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which returns\nthe first truthy value of given list of properties.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1106,
          "description": "<html><head></head><body><p>A computed property that returns the array of values\nfor the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>var Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  clothes: Ember.computed.collect(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;shirt&apos;</span>)\n});\nvar hamster = Hamster.<span class=\"keyword\">create</span>();\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>]\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;Camp Hat&apos;</span>);\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;shirt&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"string\">&apos;Camp Hat&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.collect",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which maps\nvalues of all passed properties in to an array.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1143,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>Person = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Alex Matchneer&apos;</span>,\n  nomen: Ember.computed.<span class=\"keyword\">alias</span>(<span class=\"string\">&apos;name&apos;</span>)\n});\n\nalex = Person.<span class=\"keyword\">create</span>();\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nomen&apos;</span>); // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\n\nalex.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nomen&apos;</span>, <span class=\"string\">&apos;@machty&apos;</span>);\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;@machty&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.alias",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates an\nalias to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1178,
          "description": "<html><head></head><body><p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permentantly\ndiverge from the upstream property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: Ember.computed.oneWay(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\n<span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName:  <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);\n# <span class=\"string\">&apos;Teddy&apos;</span>\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>);\n# <span class=\"string\">&apos;TeddyBear&apos;</span>\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);\n# <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.oneWay",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1222,
          "description": "<html><head></head><body><p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propogate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: Ember.computed.readOnly(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\n<span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName:  <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);\n# <span class=\"string\">&apos;Teddy&apos;</span>\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>);\n# throws <span class=\"keyword\">Exception</span>\n# throw <span class=\"built_in\">new</span> Ember.Error(<span class=\"string\">&apos;Cannot Set: nickName on: &lt;User:ember27288&gt;&apos;</span> );`\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);\n# <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.readOnly",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 1266,
          "description": "<html><head></head><body><p>A computed property that acts like a standard getter and setter,\nbut returns the value at the provided <code>defaultPath</code> if the\nproperty itself has not been set to a value</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  wishList: Ember.computed.defaultTo(<span class=\"string\">&apos;favoriteFood&apos;</span>)\n});\n<span class=\"keyword\">var</span> hamster = Hamster.create({favoriteFood: <span class=\"string\">&apos;Banana&apos;</span>});\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;wishList&apos;</span>); <span class=\"comment\">// &apos;Banana&apos;</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;wishList&apos;</span>, <span class=\"string\">&apos;More Unit Tests&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;wishList&apos;</span>); <span class=\"comment\">// &apos;More Unit Tests&apos;</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;favoriteFood&apos;</span>); <span class=\"comment\">// &apos;Banana&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.defaultTo",
          "params": [
            {
              "name": "defaultPath",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which acts like\na standard getter and setter, but defaults to the value from `defaultPath`.",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 104,
          "description": "<html><head></head><body><p>Test that a feature is enabled. Parsed by Ember&apos;s build tools to leave\nexperimental features out of beta/stable builds.</p>\n<p>You can define the following configuration options:</p>\n<ul>\n<li><code>ENV.ENABLE_ALL_FEATURES</code> - force all features to be enabled.</li>\n<li><code>ENV.ENABLE_OPTIONAL_FEATURES</code> - enable any features that have not been explicitly\nenabled/disabled.</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "isEnabled",
          "params": [
            {
              "name": "feature",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 183,
          "description": "<html><head></head><body><p>Empty function. Useful for some operations. Always returns <code>this</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "K",
          "access": "private",
          "tagname": "",
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 213,
          "description": "<html><head></head><body><p>Merge the contents of two objects together into the first object.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Ember.merge({first: <span class=\"string\">&apos;Tom&apos;</span>}, {<span class=\"keyword\">last</span>: <span class=\"string\">&apos;Dale&apos;</span>}); <span class=\"regexp\">//</span> {first: <span class=\"string\">&apos;Tom&apos;</span>, <span class=\"keyword\">last</span>: <span class=\"string\">&apos;Dale&apos;</span>}\nvar a = {first: <span class=\"string\">&apos;Yehuda&apos;</span>}, b = {<span class=\"keyword\">last</span>: <span class=\"string\">&apos;Katz&apos;</span>};\nEmber.merge(a, b); <span class=\"regexp\">//</span> a == {first: <span class=\"string\">&apos;Yehuda&apos;</span>, <span class=\"keyword\">last</span>: <span class=\"string\">&apos;Katz&apos;</span>}, b == {<span class=\"keyword\">last</span>: <span class=\"string\">&apos;Katz&apos;</span>}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "merge",
          "params": [
            {
              "name": "original",
              "description": "The object to merge into",
              "type": "Object"
            },
            {
              "name": "updates",
              "description": "The object to copy properties from",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 236,
          "description": "<html><head></head><body><p>Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None()</span>;              <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None(<span class=\"params\">null</span>)</span>;          <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None(<span class=\"params\">undefined</span>)</span>;     <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None(&apos;&apos;)</span>;            <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None([])</span>;            <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">None(<span class=\"params\">function</span>()</span> {});  <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isNone",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 260,
          "description": "<html><head></head><body><p>Verifies that a value is <code>null</code> or an empty string, empty array,\nor empty function.</p>\n<p>Constrains the rules on <code>Ember.isNone</code> by returning false for empty\nstring and empty arrays.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty()</span>;                <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty(<span class=\"params\">null</span>)</span>;            <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty(<span class=\"params\">undefined</span>)</span>;       <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty(&apos;&apos;)</span>;              <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty([])</span>;              <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty(&apos;Adam Hawkins&apos;)</span>;  <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Empty([0,1,2])</span>;         <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEmpty",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/error.js",
          "line": 59,
          "description": "<html><head></head><body><p>Wrap code block in a try/catch if <code>Ember.onerror</code> is set.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "handleErrors",
          "params": [
            {
              "name": "func",
              "description": "",
              "type": "Function"
            },
            {
              "name": "context",
              "description": "",
              "optional": true
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 103,
          "description": "<html><head></head><body><p>Add an event listener</p>\n</body></html>",
          "itemtype": "method",
          "name": "addListener",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "targetOrMethod",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "once",
              "description": "A flag whether a function should only be called once",
              "type": "Boolean"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 137,
          "description": "<html><head></head><body><p>Remove an event listener</p>\n<p>Arguments should match those passed to <code>Ember.addListener</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeListener",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "targetOrMethod",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 184,
          "description": "<html><head></head><body><p>Suspend listener during callback.</p>\n<p>This should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "suspendListener",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "targetOrMethod",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 220,
          "description": "<html><head></head><body><p>Suspends multiple listeners during a callback.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "suspendListeners",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "Array of event names",
              "type": "Array"
            },
            {
              "name": "targetOrMethod",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 266,
          "description": "<html><head></head><body><p>Return a list of currently watched events</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watchedEvents",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 285,
          "description": "<html><head></head><body><p>Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sendEvent",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "params",
              "description": "Optional parameters for each listener.",
              "type": "Array"
            },
            {
              "name": "actions",
              "description": "Optional array of actions (listeners).",
              "type": "Array"
            }
          ],
          "return": {
            "description": "true"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 328,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "hasListeners",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 342,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "listenersFor",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/events.js",
          "line": 365,
          "description": "<html><head></head><body><p>Define a property as a function that should be executed when\na specified event or events are triggered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Job = Ember.Object.extend({\n  <span class=\"attr\">logCompleted</span>: Ember.on(<span class=\"string\">&apos;completed&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>){\n    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"string\">&apos;Job completed!&apos;</span>);\n  })\n});\n<span class=\"keyword\">var</span> job = Job.create();\nEmber.sendEvent(job, <span class=\"string\">&apos;completed&apos;</span>); <span class=\"comment\">// Logs &quot;Job completed!&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "eventNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 363,
          "itemtype": "method",
          "name": "mixin",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "mixins",
              "description": "",
              "multiple": true
            }
          ],
          "return": {
            "description": "obj"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 592,
          "description": "<html><head></head><body><p>Denotes a required property for a mixin</p>\n</body></html>",
          "itemtype": "method",
          "name": "required",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 607,
          "description": "<html><head></head><body><p>Makes a method available via an additional name.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"string\">&apos;Tomhuda Katzdale&apos;</span>;\n  },\n  moniker: Ember.aliasMethod(<span class=\"string\">&apos;name&apos;</span>)\n});\n\nvar goodGuy = App.Person.<span class=\"keyword\">create</span>()</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "aliasMethod",
          "params": [
            {
              "name": "methodName",
              "description": "name of the method to alias",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Descriptor"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 634,
          "description": "<html><head></head><body><p>Specify a method that observes property changes.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>Ember.Object.extend({\n  valueObserver: Ember.observer(<span class=\"string\">&apos;value&apos;</span>, <span class=\"keyword\">function</span><span class=\"params\">()</span> {\n    <span class=\"comment\">// Executes whenever the &quot;value&quot; property changes</span>\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use <code>immediateObserver</code>.</p>\n<p>Also available as <code>Function.prototype.observes</code> if prototype extensions are\nenabled.</p>\n</body></html>",
          "itemtype": "method",
          "name": "observer",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 696,
          "description": "<html><head></head><body><p>Specify a method that observes property changes.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend({\n  valueObserver: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>immediate<span class=\"constructor\">Observer(&apos;<span class=\"params\">value</span>&apos;, <span class=\"params\">function</span>()</span> {\n    <span class=\"comment\">// Executes whenever the &quot;value&quot; property changes</span>\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In the future, <code>Ember.observer</code> may become asynchronous. In this event,\n<code>Ember.immediateObserver</code> will maintain the synchronous behavior.</p>\n<p>Also available as <code>Function.prototype.observesImmediately</code> if prototype extensions are\nenabled.</p>\n</body></html>",
          "itemtype": "method",
          "name": "immediateObserver",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/mixin.js",
          "line": 728,
          "description": "<html><head></head><body><p>When observers fire, they are called with the arguments <code>obj</code>, <code>keyName</code>.</p>\n<p>Note, <code>@each.property</code> observer is called per each add or replace of an element\nand it&apos;s not called with a specific enumeration item.</p>\n<p>A <code>beforeObserver</code> fires before a property changes.</p>\n<p>A <code>beforeObserver</code> is an alternative form of <code>.observesBefore()</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.PersonView = Ember.View.extend({\n\n  <span class=\"attribute\">friends</span>: [{ <span class=\"attribute\">name</span>: <span class=\"string\">&apos;Tom&apos;</span> }, { <span class=\"attribute\">name</span>: <span class=\"string\">&apos;Stefan&apos;</span> }, { <span class=\"attribute\">name</span>: <span class=\"string\">&apos;Kris&apos;</span> }],\n\n  <span class=\"attribute\">valueWillChange</span>: Ember.beforeObserver(<span class=\"string\">&apos;content.value&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, keyName</span>) </span>{\n    <span class=\"keyword\">this</span>.changingFrom = obj.get(keyName);\n  }),\n\n  <span class=\"attribute\">valueDidChange</span>: Ember.observer(<span class=\"string\">&apos;content.value&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, keyName</span>) </span>{\n      <span class=\"comment\">// only run if updating a value already in the DOM</span>\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;state&apos;</span>) === <span class=\"string\">&apos;inDOM&apos;</span>) {\n        <span class=\"keyword\">var</span> <span class=\"built_in\">color</span> = obj.get(keyName) &gt; <span class=\"keyword\">this</span>.changingFrom ? <span class=\"string\">&apos;green&apos;</span> : <span class=\"string\">&apos;red&apos;</span>;\n        <span class=\"comment\">// logic</span>\n      }\n  }),\n\n  <span class=\"attribute\">friendsDidChange</span>: Ember.observer(<span class=\"string\">&apos;friends.@each.name&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, keyName</span>) </span>{\n    <span class=\"comment\">// some logic</span>\n    <span class=\"comment\">// obj.get(keyName) returns friends array</span>\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Also available as <code>Function.prototype.observesBefore</code> if prototype extensions are\nenabled.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beforeObserver",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/platform.js",
          "line": 19,
          "description": "<html><head></head><body><p>Identical to <code>Object.create()</code>. Implements if not available natively.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/properties.js",
          "line": 48,
          "description": "<html><head></head><body><p>NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n<code>Ember.mixin()</code> to define new properties.</p>\n<p>Defines a property on an object. This method works much like the ES5\n<code>Object.defineProperty()</code> method except that it can also accept computed\nproperties and other special descriptors.</p>\n<p>Normally this method takes only three parameters. However if you pass an\ninstance of <code>Ember.Descriptor</code> as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.</p>\n<h2 id=\"examples\">Examples</h2>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// ES5 compatible mode</span>\nEmber.defineProperty(contact, <span class=\"string\">&apos;firstName&apos;</span>, {\n  writable: <span class=\"literal\">true</span>,\n  configurable: <span class=\"literal\">false</span>,\n  enumerable: <span class=\"literal\">true</span>,\n  value: <span class=\"string\">&apos;Charles&apos;</span>\n});\n\n<span class=\"comment\">// define a simple property</span>\nEmber.defineProperty(contact, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">&apos;Jolley&apos;</span>);\n\n<span class=\"comment\">// define a computed property</span>\nEmber.defineProperty(contact, <span class=\"string\">&apos;fullName&apos;</span>, Ember.computed(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName+<span class=\"string\">&apos; &apos;</span>+<span class=\"keyword\">this</span>.lastName;\n}).property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "defineProperty",
          "params": [
            {
              "name": "obj",
              "description": "the object to define this property on. This may be a prototype.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "the name of the property",
              "type": "String"
            },
            {
              "name": "desc",
              "description": "an instance of `Ember.Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
              "type": "Ember.Descriptor",
              "optional": true
            },
            {
              "name": "data",
              "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
              "type": "*",
              "optional": true
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_events.js",
          "line": 20,
          "description": "<html><head></head><body><p>This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.</p>\n<p>Normally you will not need to call this method directly but if for some\nreason you can&apos;t directly watch a property you can invoke this method\nmanually along with <code>Ember.propertyDidChange()</code> which you should call just\nafter the property value changes.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_events.js",
          "line": 50,
          "description": "<html><head></head><body><p>This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.</p>\n<p>Normally you will not need to call this method directly but if for some\nreason you can&apos;t directly watch a property you can invoke this method\nmanually along with <code>Ember.propertyWillChange()</code> which you should call just\nbefore the property value changes.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_events.js",
          "line": 168,
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_events.js",
          "line": 179,
          "itemtype": "method",
          "name": "endPropertyChanges",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_events.js",
          "line": 193,
          "description": "<html><head></head><body><p>Make a series of property changes together in an\nexception-safe way.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>Ember.changeProperties(function() {\n  obj1.<span class=\"built_in\">set</span>(<span class=\"string\">&apos;foo&apos;</span>, mayBlowUpWhenSet);\n  obj2.<span class=\"built_in\">set</span>(<span class=\"string\">&apos;bar&apos;</span>, baz);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "changeProperties",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "optional": true
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_get.js",
          "line": 24,
          "description": "<html><head></head><body><p>Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the <code>unknownProperty</code> method then that will be invoked.</p>\n<p>If you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don&apos;t\nknow for sure is private. (Properties beginning with an underscore &apos;_&apos;\nare considered private.)</p>\n<p>On all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the <code>unknownProperty</code> handler. Otherwise you can ignore this\nmethod.</p>\n<p>Note that if the object itself is <code>undefined</code>, this method will throw\nan error.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve from.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "the property value or `null`.",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_get.js",
          "line": 92,
          "description": "<html><head></head><body><p>Normalizes a target/path pair to reflect that actual target/path that should\nbe observed, etc. This takes into account passing in global property\npaths (i.e. a path beginning with a captial letter not defined on the\ntarget) and * separators.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "normalizeTuple",
          "params": [
            {
              "name": "target",
              "description": "The current target. May be `null`.",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "A path on the target or a global property path.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a temporary array with the normalized target/path pair.",
            "type": "Array"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_set.js",
          "line": 10,
          "description": "<html><head></head><body><p>Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the <code>setUnknownProperty</code>\nmethod then that will be invoked as well.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "obj",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed value.",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/property_set.js",
          "line": 115,
          "description": "<html><head></head><body><p>Error-tolerant form of <code>Ember.set</code>. Will not blow up if any part of the\nchain is <code>undefined</code>, <code>null</code>, or destroyed.</p>\n<p>This is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.</p>\n</body></html>",
          "itemtype": "method",
          "name": "trySet",
          "params": [
            {
              "name": "obj",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The property path to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/set_properties.js",
          "line": 7,
          "description": "<html><head></head><body><p>Set a list of properties on an object. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>anObject.setProperties(<span class=\"punctuation\">{</span>\n<span class=\"symbol\">  firstName:</span> <span class=\"string\">&quot;Stanley&quot;</span>,\n<span class=\"symbol\">  lastName:</span> <span class=\"string\">&quot;Stuart&quot;</span>,\n<span class=\"symbol\">  age:</span> <span class=\"string\">&quot;21&quot;</span>\n<span class=\"punctuation\">}</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "self",
              "description": ""
            },
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "self"
          },
          "class": "Ember",
          "module": "ember-metal",
          "namespace": "Ember.run"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 50,
          "description": "<html><head></head><body><p>Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall <code>Ember.guidFor(obj)</code>, which return an existing guid if available.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "generateGuid",
          "params": [
            {
              "name": "obj",
              "description": "Object the guid will be used for. If passed in, the guid will\n  be saved on the object and reused whenever you pass the same object\n  again.\n\n  If no object is passed, just generate a new guid.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "prefix",
              "description": "Prefix to place in front of the guid. Useful when you want to\n  separate the guid into separate namespaces.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the guid",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 77,
          "description": "<html><head></head><body><p>Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n<code>Ember.Object</code>-based or not, but be aware that it will add a <code>_guid</code>\nproperty.</p>\n<p>You can also use this method on DOM Element objects.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "guidFor",
          "params": [
            {
              "name": "obj",
              "description": "any object, string, number, Element, or primitive",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the unique guid for this instance.",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 193,
          "description": "<html><head></head><body><p>Retrieves the meta hash for an object. If <code>writable</code> is true ensures the\nhash is writable for this object as well.</p>\n<p>The meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.</p>\n</body></html>",
          "itemtype": "method",
          "name": "meta",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve meta for",
              "type": "Object"
            },
            {
              "name": "writable",
              "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
              "type": "Boolean",
              "optional": true,
              "optdefault": "true"
            }
          ],
          "return": {
            "description": "the meta hash for an object",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 255,
          "deprecated": true,
          "access": "private",
          "tagname": "In order to store defaults for a class, a prototype may need to create\na default meta object, which will be inherited by any objects instantiated\nfrom the class's constructor.\n\nHowever, the properties of that meta object are only shallow-cloned,\nso if a property is a hash (like the event system's `listeners` hash),\nit will by default be shared across all instances of that class.\n\nThis method allows extensions to deeply clone a series of nested hashes or\nother complex objects. For instance, the event system might pass\n`['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`, which will\nwalk down the keys provided.\n\nFor each key, if the key does not exist, it is created. If it already\nexists and it was inherited from its constructor, the constructor's\nkey is cloned.\n\nYou can also pass false for `writable`, which will simply return\nundefined if `prepareMetaPath` discovers any part of the path that\nshared or undefined.",
          "itemtype": "method",
          "name": "metaPath",
          "params": [
            {
              "name": "obj",
              "description": "The object whose meta we are examining",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "An array of keys to walk down",
              "type": "Array"
            },
            {
              "name": "writable",
              "description": "whether or not to create a new meta\n  (or meta property) if one does not already exist or if it's\n  shared with its constructor",
              "type": "Boolean"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 311,
          "description": "<html><head></head><body><p>Wraps the passed function so that <code>this._super</code> will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrap",
          "params": [
            {
              "name": "func",
              "description": "The function to call",
              "type": "Function"
            },
            {
              "name": "superFunc",
              "description": "The super function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "wrapped function.",
            "type": "Function"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 342,
          "description": "<html><head></head><body><p>Returns true if the passed object is an array or Array-like.</p>\n<p>Ember Array Protocol:</p>\n<ul>\n<li>the object has an objectAt property</li>\n<li>the object is a native Array</li>\n<li>the object is an Object, and has a length property</li>\n</ul>\n<p>Unlike <code>Ember.typeOf</code> this method returns true even if the passed object is\nnot formally array but appears to be array-like (i.e. implements <code>Ember.Array</code>)</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Array()</span>;                                            <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Array([])</span>;                                          <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Array( Ember.ArrayProxy.<span class=\"params\">create</span>({ <span class=\"params\">content</span>: [] })</span> );  <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isArray",
          "params": [
            {
              "name": "obj",
              "description": "The object to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "true if the passed object is an array or Array-like",
            "type": "Boolean"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 373,
          "description": "<html><head></head><body><p>Forces the passed object to be part of an array. If the object is already\nan array or array-like, returns the object. Otherwise adds the object to\nan array. If obj is <code>null</code> or <code>undefined</code>, returns an empty array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array()</span>;                           <span class=\"comment\">// []</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array(<span class=\"params\">null</span>)</span>;                       <span class=\"comment\">// []</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array(<span class=\"params\">undefined</span>)</span>;                  <span class=\"comment\">// []</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array(&apos;<span class=\"params\">lindsay</span>&apos;)</span>;                  <span class=\"comment\">// [&apos;lindsay&apos;]</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array([1,2,42])</span>;                   <span class=\"comment\">// [1,2,42]</span>\n\nvar controller = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ArrayProxy</span>.</span></span>create({ content: <span class=\"literal\">[]</span> });\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>make<span class=\"constructor\">Array(<span class=\"params\">controller</span>)</span><span class=\"operator\"> === </span>controller;  <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "makeArray",
          "params": [
            {
              "name": "obj",
              "description": "the object",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 403,
          "description": "<html><head></head><body><p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var foo = {bar: Ember.K, baz: null};\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">bar</span>&apos;)</span>; <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">baz</span>&apos;)</span>; <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">bat</span>&apos;)</span>; <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "canInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 421,
          "description": "<html><head></head><body><p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>,\nand if it does, invokes it with the arguments passed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var d = <span class=\"keyword\">new</span> <span class=\"constructor\">Date(&apos;03<span class=\"operator\">/</span>15<span class=\"operator\">/</span>2013&apos;)</span>;\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">try</span><span class=\"constructor\">Invoke(<span class=\"params\">d</span>, &apos;<span class=\"params\">getTime</span>&apos;)</span>; <span class=\"comment\">// 1363320000000</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">try</span><span class=\"constructor\">Invoke(<span class=\"params\">d</span>, &apos;<span class=\"params\">setFullYear</span>&apos;, [2014])</span>; <span class=\"comment\">// 1394856000000</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">try</span><span class=\"constructor\">Invoke(<span class=\"params\">d</span>, &apos;<span class=\"params\">noSuchMethod</span>&apos;, [2014])</span>; <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "tryInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            },
            {
              "name": "args",
              "description": "The arguments to pass to the method",
              "type": "Array",
              "optional": true
            }
          ],
          "return": {
            "description": "the return value of the invoked method or undefined if it cannot be invoked",
            "type": "*"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 459,
          "description": "<html><head></head><body><p>Provides try { } finally { } functionality, while working\naround Safari&apos;s double finally bug.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>var tryable = <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n  someResource.lock<span class=\"literal\">()</span>;\n  run<span class=\"constructor\">Callback()</span>; <span class=\"comment\">// May throw error.</span>\n};\nvar finalizer = <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n  someResource.unlock<span class=\"literal\">()</span>;\n};\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">try</span><span class=\"constructor\">Finally(<span class=\"params\">tryable</span>, <span class=\"params\">finalizer</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "tryFinally",
          "params": [
            {
              "name": "tryable",
              "description": "The function to run the try callback",
              "type": "Function"
            },
            {
              "name": "finalizer",
              "description": "The function to run the finally callback",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "The optional calling object. Defaults to 'this'",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable",
            "type": "*"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 520,
          "description": "<html><head></head><body><p>Provides try { } catch finally { } functionality, while working\naround Safari&apos;s double finally bug.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> tryable = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>, l=listeners.<span class=\"built_in\">length</span>; i&lt;l; i++) {\n    listener = listeners[i];\n    beforeValues[i] = listener.before(name, time(), payload);\n  }\n\n  <span class=\"keyword\">return</span> callback.call(binding);\n};\n\n<span class=\"keyword\">var</span> catchable = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) {\n  payload = payload || {};\n  payload.exception = e;\n};\n\n<span class=\"keyword\">var</span> finalizer = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>, l=listeners.<span class=\"built_in\">length</span>; i&lt;l; i++) {\n    listener = listeners[i];\n    listener.after(name, time(), payload, beforeValues[i]);\n  }\n};\nEmber.tryCatchFinally(tryable, catchable, finalizer);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "tryCatchFinally",
          "params": [
            {
              "name": "tryable",
              "description": "The function to run the try callback",
              "type": "Function"
            },
            {
              "name": "catchable",
              "description": "The function to run the catchable callback",
              "type": "Function"
            },
            {
              "name": "finalizer",
              "description": "The function to run the finally callback",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "The optional calling object. Defaults to 'this'",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable.",
            "type": "*"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 610,
          "description": "<html><head></head><body><p>Returns a consistent type for the passed item.</p>\n<p>Use this instead of the built-in <code>typeof</code> to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| &apos;string&apos;      | String primitive<span class=\"built_in\"> or </span>String object.                   |\n| &apos;number&apos;      | Number primitive<span class=\"built_in\"> or </span>Number object.                   |\n| &apos;boolean&apos;     | Boolean primitive<span class=\"built_in\"> or </span>Boolean object.                 |\n| &apos;null&apos;        | Null value                                           |\n| &apos;undefined&apos;   | Undefined value                                      |\n| &apos;function&apos;    | A function                                           |\n| &apos;array&apos;       | An<span class=\"built_in\"> instance </span>of Array                                 |\n| &apos;regexp&apos;      | An<span class=\"built_in\"> instance </span>of RegExp                                |\n| &apos;date&apos;        | An<span class=\"built_in\"> instance </span>of Date                                  |\n| &apos;class&apos;       | An Ember class (created using Ember.Object.extend()) |\n| &apos;instance&apos;    | An Ember object<span class=\"built_in\"> instance </span>                            |\n| &apos;error&apos;       | An<span class=\"built_in\"> instance </span>of the Error object                      |\n| &apos;object&apos;      | A JavaScript object<span class=\"built_in\"> not </span>inheriting from Ember.Object |</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Examples:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of()</span>;                       <span class=\"comment\">// &apos;undefined&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">null</span>)</span>;                   <span class=\"comment\">// &apos;null&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">undefined</span>)</span>;              <span class=\"comment\">// &apos;undefined&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(&apos;<span class=\"params\">michael</span>&apos;)</span>;              <span class=\"comment\">// &apos;string&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">new</span> String(&apos;<span class=\"params\">michael</span>&apos;)</span>);  <span class=\"comment\">// &apos;string&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(101)</span>;                    <span class=\"comment\">// &apos;number&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">new</span> Number(101)</span>);        <span class=\"comment\">// &apos;number&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">true</span>)</span>;                   <span class=\"comment\">// &apos;boolean&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">new</span> Boolean(<span class=\"params\">true</span>)</span>);      <span class=\"comment\">// &apos;boolean&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(Ember.<span class=\"params\">makeArray</span>)</span>;        <span class=\"comment\">// &apos;function&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of([1,2,90])</span>;               <span class=\"comment\">// &apos;array&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"operator\">/</span><span class=\"params\">abc</span><span class=\"operator\">/</span>)</span>;                  <span class=\"comment\">// &apos;regexp&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">new</span> Date()</span>);             <span class=\"comment\">// &apos;date&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(Ember.Object.<span class=\"params\">extend</span>()</span>);  <span class=\"comment\">// &apos;class&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(Ember.Object.<span class=\"params\">create</span>()</span>);  <span class=\"comment\">// &apos;instance&apos;</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of(<span class=\"params\">new</span> Error(&apos;<span class=\"params\">teamocil</span>&apos;)</span>);  <span class=\"comment\">// &apos;error&apos;</span>\n\n<span class=\"comment\">// &quot;normal&quot; JavaScript object</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"keyword\">type</span><span class=\"constructor\">Of({<span class=\"params\">a</span>: &apos;<span class=\"params\">b</span>&apos;})</span>;              <span class=\"comment\">// &apos;object&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "typeOf",
          "params": [
            {
              "name": "item",
              "description": "the item to check",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the type",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 678,
          "description": "<html><head></head><body><p>Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.</p>\n<p>It is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: <a href=\"https://github.com/NV/jsDump\">https://github.com/NV/jsDump</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "inspect",
          "params": [
            {
              "name": "obj",
              "description": "The object you want to inspect.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A description of the object",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/watching.js",
          "line": 30,
          "description": "<html><head></head><body><p>Starts watching a property on an object. Whenever the property changes,\ninvokes <code>Ember.propertyWillChange</code> and <code>Ember.propertyDidChange</code>. This is the\nprimitive used by observers and dependent keys; usually you will never call\nthis method directly but instead use higher level methods like\n<code>Ember.addObserver()</code></p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/watching.js",
          "line": 72,
          "description": "<html><head></head><body><p>Call on an object when you first beget it from another object. This will\nsetup any chained watchers on the object instance as needed. This method is\nsafe to call multiple times.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "rewatch",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/watching.js",
          "line": 98,
          "description": "<html><head></head><body><p>Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "params": [
            {
              "name": "obj",
              "description": "the object to destroy",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-routing/lib/system/controller_for.js",
          "line": 8,
          "description": "<html><head></head><body><p>Finds a controller instance.</p>\n</body></html>",
          "itemtype": "method",
          "name": "controllerFor",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/system/controller_for.js",
          "line": 20,
          "description": "<html><head></head><body><p>Generates a controller factory</p>\n<p>The type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.</p>\n<p>You can customize your generated controllers by defining\n<code>App.ObjectController</code> or <code>App.ArrayController</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "generateControllerFactory",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/system/controller_for.js",
          "line": 62,
          "description": "<html><head></head><body><p>Generates and instantiates a controller.</p>\n<p>The type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.</p>\n</body></html>",
          "itemtype": "method",
          "name": "generateController",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/array_computed.js",
          "line": 49,
          "description": "<html><head></head><body><p>Creates a computed property which operates on dependent arrays and\nis updated with &quot;one at a time&quot; semantics. When items are added or\nremoved from the dependent array(s) an array computed only operates\non the change instead of re-evaluating the entire array. This should\nreturn an array, if you&apos;d like to use &quot;one at a time&quot; semantics and\ncompute some value other then an array look at\n<code>Ember.reduceComputed</code>.</p>\n<p>If there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing three properties.</p>\n<p><code>initialize</code> - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.</p>\n<p><code>removedItem</code> - A function that is called each time an element is\nremoved from the array.</p>\n<p><code>addedItem</code> - A function that is called each time an element is\nadded to the array.</p>\n<p>The <code>initialize</code> function has the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(<span class=\"keyword\">array</span>, changeMeta, instanceMeta)</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>array</code> - The initial value of the arrayComputed, an empty array.</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\ncomputed. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n</ul>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions both have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"params\">(accumulatedValue, item, changeMeta, instanceMeta)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>accumulatedValue</code> - The value returned from the last time\n<code>removedItem</code> or <code>addedItem</code> was called or an empty array.</p>\n<p><code>item</code> - the element added or removed from the array</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\nchange. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n<li><code>index</code> the index of the added or removed item</li>\n<li><code>item</code> the added or removed item: this is exactly the same as\nthe second arg</li>\n<li><code>arrayChanged</code> the array that triggered the change. Can be\nuseful when depending on multiple arrays.</li>\n</ul>\n<p>For property changes triggered on an item property change (when\ndepKey is something like <code>someArray.@each.someProperty</code>),\n<code>changeMeta</code> will also contain the following property:</p>\n<ul>\n<li><code>previousValues</code> an object whose keys are the properties that changed on\n  the item, and whose values are the item&apos;s previous values.</li>\n</ul>\n<p><code>previousValues</code> is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &amp;\nfiltering).</p>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it&apos;s used in eg max and min.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>computed.map = <span class=\"keyword\">function</span>(dependentKey, callback) {\n  var options = {\n    addedItem: <span class=\"keyword\">function</span>(<span class=\"built_in\">array</span>, item, changeMeta, instanceMeta) {\n      var mapped = callback(item);\n      <span class=\"built_in\">array</span>.insert<span class=\"constructor\">At(<span class=\"params\">changeMeta</span>.<span class=\"params\">index</span>, <span class=\"params\">mapped</span>)</span>;\n      return <span class=\"built_in\">array</span>;\n    },\n    removedItem: <span class=\"keyword\">function</span>(<span class=\"built_in\">array</span>, item, changeMeta, instanceMeta) {\n      <span class=\"built_in\">array</span>.remove<span class=\"constructor\">At(<span class=\"params\">changeMeta</span>.<span class=\"params\">index</span>, 1)</span>;\n      return <span class=\"built_in\">array</span>;\n    }\n  };\n\n  return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"built_in\">array</span><span class=\"constructor\">Computed(<span class=\"params\">dependentKey</span>, <span class=\"params\">options</span>)</span>;\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "arrayComputed",
          "params": [
            {
              "name": "dependentKeys*",
              "description": "",
              "type": "String",
              "optional": true
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed.js",
          "line": 633,
          "description": "<html><head></head><body><p>Creates a computed property which operates on dependent arrays and\nis updated with &quot;one at a time&quot; semantics. When items are added or\nremoved from the dependent array(s) a reduce computed only operates\non the change instead of re-evaluating the entire array.</p>\n<p>If there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing four properties:</p>\n<p><code>initialValue</code> - A value or function that will be used as the initial\nvalue for the computed. If this property is a function the result of calling\nthe function will be used as the initial value. This property is required.</p>\n<p><code>initialize</code> - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.</p>\n<p><code>removedItem</code> - A function that is called each time an element is removed\nfrom the array.</p>\n<p><code>addedItem</code> - A function that is called each time an element is added to\nthe array.</p>\n<p>The <code>initialize</code> function has the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">function</span> <span class=\"params\">(initialValue, changeMeta, instanceMeta)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>initialValue</code> - The value of the <code>initialValue</code> property from the\noptions object.</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\ncomputed. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n</ul>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions both have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"params\">(accumulatedValue, item, changeMeta, instanceMeta)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>accumulatedValue</code> - The value returned from the last time\n<code>removedItem</code> or <code>addedItem</code> was called or <code>initialValue</code>.</p>\n<p><code>item</code> - the element added or removed from the array</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\nchange. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n<li><code>index</code> the index of the added or removed item</li>\n<li><code>item</code> the added or removed item: this is exactly the same as\nthe second arg</li>\n<li><code>arrayChanged</code> the array that triggered the change. Can be\nuseful when depending on multiple arrays.</li>\n</ul>\n<p>For property changes triggered on an item property change (when\ndepKey is something like <code>someArray.@each.someProperty</code>),\n<code>changeMeta</code> will also contain the following property:</p>\n<ul>\n<li><code>previousValues</code> an object whose keys are the properties that changed on\n  the item, and whose values are the item&apos;s previous values.</li>\n</ul>\n<p><code>previousValues</code> is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &amp;\nfiltering).</p>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it&apos;s used in eg max and min.</p>\n<p>Note that observers will be fired if either of these functions return a value\nthat differs from the accumulated value.  When returning an object that\nmutates in response to array changes, for example an array that maps\neverything from some other array (see <code>Ember.computed.map</code>), it is usually\nimportant that the <em>same</em> array be returned to avoid accidentally triggering observers.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>Ember.computed.max = <span class=\"keyword\">function</span> <span class=\"title\"></span>(dependentKey) {\n  <span class=\"keyword\">return</span> <span class=\"type\">Ember.reduceComputed(dependentKey,</span> {\n    initialValue: -Infinity,\n\n    addedItem: <span class=\"keyword\">function</span> <span class=\"title\"></span>(accumulatedValue, item, changeMeta, instanceMeta) {\n      <span class=\"keyword\">return</span> <span class=\"type\">Math.max(accumulatedValue,</span> item);\n    },\n\n    removedItem: <span class=\"keyword\">function</span> <span class=\"title\"></span>(accumulatedValue, item, changeMeta, instanceMeta) {\n      if (item &lt; accumulatedValue) {\n        <span class=\"keyword\">return</span> <span class=\"type\">accumulatedValue</span>;\n      }\n    }\n  });\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Dependent keys may refer to <code>@this</code> to observe changes to the object itself,\nwhich must be array-like, rather than a property of the object.  This is\nmostly useful for array proxies, to ensure objects are retrieved via\n<code>objectAtContent</code>.  This is how you could sort items by properties defined on an item controller.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.PeopleController = Ember.ArrayController.extend({\n  itemController: <span class=\"string\">&apos;person&apos;</span>,\n\n  sortedPeople: Ember.computed.sort(<span class=\"string\">&apos;@this.@each.reversedName&apos;</span>, <span class=\"keyword\">function</span><span class=\"params\">(personA, personB)</span> {\n    <span class=\"comment\">// `reversedName` isn&apos;t defined on Person, but we have access to it via</span>\n    <span class=\"comment\">// the item controller App.PersonController.  If we&apos;d used</span>\n    <span class=\"comment\">// `content.@each.reversedName` above, we would be getting the objects</span>\n    <span class=\"comment\">// directly and not have access to `reversedName`.</span>\n    <span class=\"comment\">//</span>\n    <span class=\"keyword\">var</span> reversedNameA = <span class=\"keyword\">get</span>(personA, <span class=\"string\">&apos;reversedName&apos;</span>),\n        reversedNameB = <span class=\"keyword\">get</span>(personB, <span class=\"string\">&apos;reversedName&apos;</span>);\n\n    <span class=\"keyword\">return</span> Ember.compare(reversedNameA, reversedNameB);\n  })\n});\n\nApp.PersonController = Ember.ObjectController.extend({\n  reversedName: <span class=\"keyword\">function</span> <span class=\"params\">()</span> {\n    <span class=\"keyword\">return</span> reverse(<span class=\"keyword\">get</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;name&apos;</span>));\n  }.property(<span class=\"string\">&apos;name&apos;</span>)\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Dependent keys whose values are not arrays are treated as regular\ndependencies: when they change, the computed property is completely\nrecalculated.  It is sometimes useful to have dependent arrays with similar\nsemantics.  Dependent keys which end in <code>.[]</code> do not use &quot;one at a time&quot;\nsemantics.  When an item is added or removed from such a dependency, the\ncomputed property is completely recomputed.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>Ember.<span class=\"keyword\">Object</span>.extend({\n  // <span class=\"keyword\">When</span> `string` <span class=\"keyword\">is</span> changed, `computed` <span class=\"keyword\">is</span> completely recomputed.\n  string: <span class=\"string\">&apos;a string&apos;</span>,\n\n  // <span class=\"keyword\">When</span> an item <span class=\"keyword\">is</span> added <span class=\"keyword\">to</span> `<span class=\"keyword\">array</span>`, `addedItem` <span class=\"keyword\">is</span> <span class=\"keyword\">called</span>.\n  <span class=\"keyword\">array</span>: [],\n\n  // <span class=\"keyword\">When</span> an item <span class=\"keyword\">is</span> added <span class=\"keyword\">to</span> `anotherArray`, `computed` <span class=\"keyword\">is</span> completely\n  // recomputed.\n  anotherArray: [],\n\n  computed: Ember.reduceComputed(<span class=\"string\">&apos;string&apos;</span>, <span class=\"string\">&apos;array&apos;</span>, <span class=\"string\">&apos;anotherArray.[]&apos;</span>, {\n    addedItem: addedItemCallback,\n    removedItem: removedItemCallback\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reduceComputed",
          "params": [
            {
              "name": "dependentKeys*",
              "description": "",
              "type": "String",
              "optional": true
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 20,
          "description": "<html><head></head><body><p>A computed property that returns the sum of the value\nin the dependent array.</p>\n</body></html>",
          "itemtype": "method",
          "name": "computed.sum",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the sum of all values in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 44,
          "description": "<html><head></head><body><p>A computed property that calculates the maximum value in the\ndependent array. This will return <code>-Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  <span class=\"attr\">maxChildAge</span>: Ember.computed.<span class=\"title function_ invoke__\">max</span>(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = App.Person.<span class=\"title function_ invoke__\">create</span>({<span class=\"attr\">children</span>: []});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// -Infinity</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// 7</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// 8</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.max",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the largest value in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 92,
          "description": "<html><head></head><body><p>A computed property that calculates the minimum value in the\ndependent array. This will return <code>Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  <span class=\"attr\">minChildAge</span>: Ember.computed.<span class=\"title function_ invoke__\">min</span>(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = App.Person.<span class=\"title function_ invoke__\">create</span>({<span class=\"attr\">children</span>: []});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// Infinity</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// 7</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// 5</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.min",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the smallest value in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 140,
          "description": "<html><head></head><body><p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span><span class=\"params\">(item)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  excitingChores: Ember.computed.map(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"keyword\">function</span>(chore) {\n    <span class=\"keyword\">return</span> chore.toUpperCase() + <span class=\"string\">&apos;!&apos;</span>;\n  })\n});\n\nvar hamster = App.Hamster.<span class=\"keyword\">create</span>({\n  chores: [<span class=\"string\">&apos;clean&apos;</span>, <span class=\"string\">&apos;write more unit tests&apos;</span>]\n});\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;excitingChores&apos;</span>); // [<span class=\"string\">&apos;CLEAN!&apos;</span>, <span class=\"string\">&apos;WRITE MORE UNIT TESTS!&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.map",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "an array mapped via the callback",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 187,
          "description": "<html><head></head><body><p>Returns an array mapped to the specified key.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = App.Person.<span class=\"title function_ invoke__\">create</span>({<span class=\"attr\">children</span>: []});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// []</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({<span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span>});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// [7]</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// [7, 5, 8]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.mapBy",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "an array mapped to the specified key",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 220,
          "itemtype": "method",
          "name": "computed.mapProperty",
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.mapBy` instead",
          "params": [
            {
              "name": "dependentKey",
              "description": ""
            },
            {
              "name": "propertyKey",
              "description": ""
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 229,
          "description": "<html><head></head><body><p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span><span class=\"params\">(item)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>App.Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  remainingChores: Ember.computed.<span class=\"keyword\">filter</span>(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"keyword\">function</span>(chore) {\n    <span class=\"keyword\">return</span> !chore.done;\n  })\n});\n\nvar hamster = App.Hamster.<span class=\"keyword\">create</span>({chores: [\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, done: <span class=\"keyword\">true</span>},\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, done: <span class=\"keyword\">true</span>},\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span>}\n]});\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // [{<span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.filter",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 291,
          "description": "<html><head></head><body><p>Filters the array by the property and value</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.Hamster = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">remainingChores</span>: Ember.computed.<span class=\"title function_ invoke__\">filterBy</span>(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"string\">&apos;done&apos;</span>, <span class=\"literal\">false</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = App.Hamster.<span class=\"title function_ invoke__\">create</span>({<span class=\"attr\">chores</span>: [\n  {<span class=\"attr\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>},\n  {<span class=\"attr\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>},\n  {<span class=\"attr\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>}\n]});\nhamster.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); <span class=\"comment\">// [{name: &apos;write more unit tests&apos;, done: false}]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.filterBy",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 330,
          "itemtype": "method",
          "name": "computed.filterProperty",
          "params": [
            {
              "name": "dependentKey",
              "description": ""
            },
            {
              "name": "propertyKey",
              "description": ""
            },
            {
              "name": "value",
              "description": ""
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.filterBy` instead",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 340,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uni<span class=\"string\">q(&apos;fruits&apos;)</span>\n});\n\nvar hamster = App.Hamster.create({fruits: [\n  <span class=\"string\">&apos;banana&apos;</span>,\n  <span class=\"string\">&apos;grape&apos;</span>,\n  <span class=\"string\">&apos;kale&apos;</span>,\n  <span class=\"string\">&apos;banana&apos;</span>\n]});\nhamster.get(<span class=\"string\">&apos;uniqueFruits&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.uniq",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 397,
          "description": "<html><head></head><body><p>Alias for <a href=\"/api/#method_computed_uniq\">Ember.computed.uniq</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "computed.union",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 408,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>var obj = Ember.<span class=\"keyword\">Object</span>.createWithMixins({\n  adaFriends: [<span class=\"string\">&apos;Charles Babbage&apos;</span>, <span class=\"string\">&apos;John Hobhouse&apos;</span>, <span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>],\n  charlesFriends: [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>, <span class=\"string\">&apos;Ada Lovelace&apos;</span>, <span class=\"string\">&apos;George Peacock&apos;</span>],\n  friendsInCommon: Ember.computed.<span class=\"keyword\">intersect</span>(<span class=\"string\">&apos;adaFriends&apos;</span>, <span class=\"string\">&apos;charlesFriends&apos;</span>)\n});\n\nobj.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;friendsInCommon&apos;</span>); // [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.intersect",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nduplicated elements from the dependent arrays",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 484,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.Hamster = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">likes</span>: [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>],\n  <span class=\"attr\">wants</span>: Ember.computed.<span class=\"title function_ invoke__\">setDiff</span>(<span class=\"string\">&apos;likes&apos;</span>, <span class=\"string\">&apos;fruits&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = App.Hamster.<span class=\"title function_ invoke__\">create</span>({<span class=\"attr\">fruits</span>: [\n  <span class=\"string\">&apos;grape&apos;</span>,\n  <span class=\"string\">&apos;kale&apos;</span>,\n]});\nhamster.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;wants&apos;</span>); <span class=\"comment\">// [&apos;banana&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.setDiff",
          "params": [
            {
              "name": "setAProperty",
              "description": "",
              "type": "String"
            },
            {
              "name": "setBProperty",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the\nitems from the first dependent array that are not in the second\ndependent array",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 592,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.</p>\n<p>The callback method you provide should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span><span class=\"params\">(itemA, itemB)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return <code>-1</code> when <code>itemA</code> should come before\n<code>itemB</code>. It should return <code>1</code> when <code>itemA</code> should come after\n<code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre>var ToDoList = Ember.<span class=\"keyword\">Object</span>.extend({\n  todosSorting: [<span class=\"string\">&apos;name&apos;</span>],\n  sortedTodos: Ember.computed.sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"string\">&apos;todosSorting&apos;</span>),\n  priorityTodos: Ember.computed.sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"keyword\">function</span>(a, b){\n    <span class=\"keyword\">if</span> (a.priority &gt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.priority &lt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\n    }\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  }),\n});\nvar todoList = ToDoList.<span class=\"keyword\">create</span>({todos: [\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;Unit Test&apos;</span>, priority: <span class=\"number\">2</span>},\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;Documentation&apos;</span>, priority: <span class=\"number\">3</span>},\n  {<span class=\"type\">name</span>: <span class=\"string\">&apos;Release&apos;</span>, priority: <span class=\"number\">1</span>}\n]});\n\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;sortedTodos&apos;</span>); // [{<span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span>}, {<span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span>}, {<span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span>}]\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;priorityTodos&apos;</span>); // [{<span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span>}, {<span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span>}, {<span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "computed.sort",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "sortDefinition",
              "description": "a dependent key to an\narray of sort properties or a function to use when sorting",
              "type": "String or Function"
            }
          ],
          "return": {
            "description": "computes a new sorted array based\non the sort property array or callback function",
            "type": "Ember.ComputedProperty"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/system/lazy_load.js",
          "line": 11,
          "description": "<html><head></head><body><p>Detects when a specific package of Ember (e.g. &apos;Ember.Handlebars&apos;)\nhas fully loaded and is available for extension.</p>\n<p>The provided <code>callback</code> will be called with the <code>name</code> passed\nresolved from a string into the object:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>on<span class=\"constructor\">Load(&apos;Ember.Handlebars&apos; <span class=\"params\">function</span>(<span class=\"params\">hbars</span>)</span>{\n  hbars.register<span class=\"constructor\">Helper(<span class=\"operator\">...</span>)</span>;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "onLoad",
          "params": [
            {
              "name": "name",
              "description": "name of hook",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "callback to be called",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/system/lazy_load.js",
          "line": 40,
          "description": "<html><head></head><body><p>Called when an Ember.js package (e.g Ember.Handlebars) has finished\nloading. Triggers any callbacks registered for this event.</p>\n</body></html>",
          "itemtype": "method",
          "name": "runLoadHooks",
          "params": [
            {
              "name": "name",
              "description": "name of hook",
              "type": "String"
            },
            {
              "name": "object",
              "description": "object to pass to callbacks",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/system/native_array.js",
          "line": 124,
          "description": "<html><head></head><body><p>Creates an <code>Ember.NativeArray</code> from an Array like object.\nDoes not modify the original object. Ember.A is not needed if\n<code>Ember.EXTEND_PROTOTYPES</code> is <code>true</code> (the default value). However,\nit is recommended that you use Ember.A when creating addons for\nember or when you can not guarantee that <code>Ember.EXTEND_PROTOTYPES</code>\nwill be <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Pagination = Ember.CollectionView.extend({\n  tagName: <span class=\"string\">&apos;ul&apos;</span>,\n  classNames: [<span class=\"string\">&apos;pagination&apos;</span>],\n  <span class=\"keyword\">init</span>: function() {\n    <span class=\"keyword\">this</span>._super();\n    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;content&apos;</span>)) {\n      <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;content&apos;</span>, Ember.A([]));\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "A",
          "return": {
            "description": "",
            "type": "Ember.NativeArray"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/core.js",
          "line": 12,
          "description": "<html><head></head><body><p>This will compare two javascript values of possibly different types.\nIt will tell you which one is greater than the other by returning:</p>\n<ul>\n<li>-1 if the first is smaller than the second,</li>\n<li>0 if both are equal,</li>\n<li>1 if the first is greater than the second.</li>\n</ul>\n<p>The order is calculated based on <code>Ember.ORDER_DEFINITION</code>, if types are different.\nIn case they have the same type an appropriate comparison for this type is made.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Ember.compare(<span class=\"string\">&apos;hello&apos;</span>, <span class=\"string\">&apos;hello&apos;</span>);  <span class=\"regexp\">//</span> <span class=\"number\">0</span>\nEmber.compare(<span class=\"string\">&apos;abc&apos;</span>, <span class=\"string\">&apos;dfg&apos;</span>);      <span class=\"regexp\">//</span> -<span class=\"number\">1</span>\nEmber.compare(<span class=\"number\">2</span>, <span class=\"number\">1</span>);              <span class=\"regexp\">//</span> <span class=\"number\">1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compare",
          "params": [
            {
              "name": "v",
              "description": "First value to compare",
              "type": "Object"
            },
            {
              "name": "w",
              "description": "Second value to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
            "type": "Number"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/core.js",
          "line": 166,
          "description": "<html><head></head><body><p>Creates a clone of the passed object. This function can take just about\nany type of object and create a clone of it, including primitive values\n(which are not actually cloned because they are immutable).</p>\n<p>If the passed object implements the <code>clone()</code> method, then this function\nwill simply call that method and return the result.</p>\n</body></html>",
          "itemtype": "method",
          "name": "copy",
          "params": [
            {
              "name": "obj",
              "description": "The object to clone",
              "type": "Object"
            },
            {
              "name": "deep",
              "description": "If true, a deep copy of the object is made",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "The cloned object",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/core.js",
          "line": 187,
          "description": "<html><head></head><body><p>Compares two objects, returning true if they are logically equal. This is\na deeper comparison than a simple triple equal. For sets it will compare the\ninternal objects. For any other object that implements <code>isEqual()</code> it will\nrespect that method.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Equal(&apos;<span class=\"params\">hello</span>&apos;, &apos;<span class=\"params\">hello</span>&apos;)</span>;  <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Equal(1, 2)</span>;              <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>is<span class=\"constructor\">Equal([4,2], [4,2])</span>;      <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEqual",
          "params": [
            {
              "name": "a",
              "description": "first object to compare",
              "type": "Object"
            },
            {
              "name": "b",
              "description": "second object to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-runtime/lib/core.js",
          "line": 225,
          "description": "<html><head></head><body><p>Returns all of the keys defined on an object or hash. This is useful\nwhen inspecting objects for debugging. On browsers that support it, this\nuses the native <code>Object.keys</code> implementation.</p>\n</body></html>",
          "itemtype": "method",
          "name": "keys",
          "params": [
            {
              "name": "obj",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "Array containing keys of obj",
            "type": "Array"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-views/lib/core.js",
          "line": 13,
          "description": "<html><head></head><body><p>Alias for jQuery</p>\n</body></html>",
          "itemtype": "method",
          "name": "$",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-views"
        }
      ],
      "events": [
        {
          "file": "../packages/ember-metal/lib/error.js",
          "line": 39,
          "description": "<html><head></head><body><p>A function may be assigned to <code>Ember.onerror</code> to be called when Ember\ninternals encounter an error. This is useful for specialized error handling\nand reporting code.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>Ember.onerror = function(<span class=\"keyword\">error</span>) {\n  Em.$.ajax(&apos;/<span class=\"keyword\">report</span>-<span class=\"keyword\">error</span>&apos;, &apos;<span class=\"keyword\">POST</span>&apos;, {\n    <span class=\"keyword\">stack</span>: <span class=\"keyword\">error</span>.<span class=\"keyword\">stack</span>,\n    otherInformation: &apos;whatever <span class=\"keyword\">app</span> state you want to provide&apos;\n  });\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "event",
          "name": "onerror",
          "params": [
            {
              "name": "error",
              "description": "the error object",
              "type": "Exception"
            }
          ],
          "class": "Ember",
          "module": "ember"
        }
      ],
      "properties": [
        {
          "file": "../packages/ember-metal/lib/array.js",
          "line": 91,
          "description": "<html><head></head><body><p>Array polyfills to support ES5 features in older browsers.</p>\n</body></html>",
          "itemtype": "property",
          "name": "ArrayPolyfills",
          "class": "Ember",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/array.js",
          "line": 104,
          "description": "<html><head></head><body><p>Array polyfills to support ES5 features in older browsers.</p>\n</body></html>",
          "itemtype": "property",
          "name": "ArrayPolyfills",
          "class": "Ember",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/binding.js",
          "line": 17,
          "description": "<html><head></head><body><p>Debug parameter you can turn on. This will log all bindings that fire to\nthe console. This should be disabled in production code. Note that you\ncan also enable this from the console or temporarily.</p>\n</body></html>",
          "itemtype": "property",
          "name": "LOG_BINDINGS",
          "type": "Boolean",
          "default": "false",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 49,
          "itemtype": "property",
          "name": "VERSION",
          "type": "String",
          "default": "'VERSION_STRING_PLACEHOLDER'",
          "static": 1,
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 57,
          "description": "<html><head></head><body><p>Standard environmental variables. You can define these in a global <code>EmberENV</code>\nvariable before loading Ember to control various configuration settings.</p>\n<p>For backwards compatibility with earlier versions of Ember the global <code>ENV</code>\nvariable will be used if <code>EmberENV</code> is not defined.</p>\n</body></html>",
          "itemtype": "property",
          "name": "ENV",
          "type": "Hash",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 93,
          "description": "<html><head></head><body><p>Hash of enabled Canary features. Add to before creating your application.</p>\n<p>You can also define <code>ENV.FEATURES</code> if you need to enable features flagged at runtime.</p>\n</body></html>",
          "itemtype": "property",
          "name": "FEATURES",
          "type": "Hash",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 136,
          "description": "<html><head></head><body><p>Determines whether Ember should enhances some built-in object prototypes to\nprovide a more friendly API. If enabled, a few methods will be added to\n<code>Function</code>, <code>String</code>, and <code>Array</code>. <code>Object.prototype</code> will not be enhanced,\nwhich is the one that causes most trouble for people.</p>\n<p>In general we recommend leaving this option set to true since it rarely\nconflicts with other code. If you need to turn it off however, you can\ndefine an <code>ENV.EXTEND_PROTOTYPES</code> config to disable it.</p>\n</body></html>",
          "itemtype": "property",
          "name": "EXTEND_PROTOTYPES",
          "type": "Boolean",
          "default": "true",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 156,
          "description": "<html><head></head><body><p>Determines whether Ember logs a full stack trace during deprecation warnings</p>\n</body></html>",
          "itemtype": "property",
          "name": "LOG_STACKTRACE_ON_DEPRECATION",
          "type": "Boolean",
          "default": "true",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 165,
          "description": "<html><head></head><body><p>Determines whether Ember should add ECMAScript 5 shims to older browsers.</p>\n</body></html>",
          "itemtype": "property",
          "name": "SHIM_ES5",
          "type": "Boolean",
          "default": "Ember.EXTEND_PROTOTYPES",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 174,
          "description": "<html><head></head><body><p>Determines whether Ember logs info about version of used libraries</p>\n</body></html>",
          "itemtype": "property",
          "name": "LOG_VERSION",
          "type": "Boolean",
          "default": "true",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/core.js",
          "line": 203,
          "description": "<html><head></head><body><p>Previously we used <code>Ember.$.uuid</code>, however <code>$.uuid</code> has been removed from\njQuery master. We&apos;ll just bootstrap our own uuid now.</p>\n</body></html>",
          "itemtype": "property",
          "name": "uuid",
          "type": "Number",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 27,
          "description": "<html><head></head><body><p>A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.</p>\n<p>On browsers that support it, these properties are added with enumeration\ndisabled so they won&apos;t show up when you iterate over your properties.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_KEY",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-metal/lib/utils.js",
          "line": 139,
          "description": "<html><head></head><body><p>The key used to store meta information on object for property observing.</p>\n</body></html>",
          "itemtype": "property",
          "name": "META_KEY",
          "access": "private",
          "tagname": "",
          "final": 1,
          "type": "String",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "../packages/ember-runtime/lib/system/string.js",
          "line": 17,
          "description": "<html><head></head><body><p>Defines the hash of localized strings for the current language. Used by\nthe <code>Ember.String.loc()</code> helper. To localize, add string values to this\nhash.</p>\n</body></html>",
          "itemtype": "property",
          "name": "STRINGS",
          "type": "Hash",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 43,
          "description": "<html><head></head><body><p>Global hash of shared templates. This will automatically be populated\nby the build tools so that you can store your Handlebars templates in\nseparate files that get loaded into JavaScript at buildtime.</p>\n</body></html>",
          "itemtype": "property",
          "name": "TEMPLATES",
          "type": "Hash",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-views"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.2.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.2.2",
          "type": "project-version"
        }
      }
    }
  }
}