{
  "data": {
    "id": "ember-4.12.1-ComputedProperty",
    "type": "class",
    "attributes": {
      "name": "ComputedProperty",
      "shortname": "ComputedProperty",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 76,
      "description": "<html><head></head><body><p><code>@computed</code> is a decorator that turns a JavaScript getter and setter into a\ncomputed property, which is a <em>cached, trackable value</em>. By default the getter\nwill only be called once and the result will be cached. You can specify\nvarious properties that your computed property depends on. This will force the\ncached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.</p>\n<p>In the following example we decorate a getter - <code>fullName</code> -  by calling\n<code>computed</code> with the property dependencies (<code>firstName</code> and <code>lastName</code>) as\narguments. The <code>fullName</code> getter will be called once (regardless of how many\ntimes it is accessed) as long as its dependencies do not change. Once\n<code>firstName</code> or <code>lastName</code> are updated any future calls to <code>fullName</code> will\nincorporate the new values, and any watchers of the value such as templates\nwill be updated:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed, <span class=\"keyword\">set</span> } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {\n  <span class=\"keyword\">constructor</span>(firstName, lastName) {\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n  }\n\n  <span class=\"meta\">@computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</span>\n  <span class=\"keyword\">get</span> fullName() {\n    <span class=\"keyword\">return</span> `${<span class=\"keyword\">this</span>.firstName} ${<span class=\"keyword\">this</span>.lastName}`;\n  }\n});\n\nlet tom = new Person(<span class=\"string\">&apos;Tom&apos;</span>, <span class=\"string\">&apos;Dale&apos;</span>);\n\ntom.fullName; <span class=\"comment\">// &apos;Tom Dale&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also provide a setter, which will be used when updating the computed\nproperty. Ember&apos;s <code>set</code> function must be used to update the property\nsince it will also notify observers of the property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed, <span class=\"keyword\">set</span> } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {\n  <span class=\"keyword\">constructor</span>(firstName, lastName) {\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n  }\n\n  <span class=\"meta\">@computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</span>\n  <span class=\"keyword\">get</span> fullName() {\n    <span class=\"keyword\">return</span> `${<span class=\"keyword\">this</span>.firstName} ${<span class=\"keyword\">this</span>.lastName}`;\n  }\n\n  <span class=\"keyword\">set</span> fullName(value) {\n    let [firstName, lastName] = value.split(<span class=\"string\">&apos; &apos;</span>);\n\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n  }\n});\n\nlet person = new Person();\n\n<span class=\"keyword\">set</span>(person, <span class=\"string\">&apos;fullName&apos;</span>, <span class=\"string\">&apos;Peter Wagenet&apos;</span>);\nperson.firstName; <span class=\"comment\">// &apos;Peter&apos;</span>\nperson.lastName;  <span class=\"comment\">// &apos;Wagenet&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also pass a getter function or object with <code>get</code> and <code>set</code> functions\nas the last argument to the computed decorator. This allows you to define\ncomputed property <em>macros</em>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"meta\"><span class=\"keyword\">import</span> { computed } from &apos;@ember/object&apos;;</span>\n\n<span class=\"keyword\">function</span> <span class=\"title function_\">join</span><span class=\"params\">(<span class=\"rest_arg\">...keys</span>)</span> {\n  <span class=\"keyword\">return</span> computed(...keys, <span class=\"keyword\">function</span><span class=\"params\">()</span> {\n    <span class=\"keyword\">return</span> keys.map(key =&gt; <span class=\"keyword\">this</span>[key]).join(<span class=\"string\">&apos; &apos;</span>);\n  });\n}\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {\n  @join(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)\n  fullName;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that when defined this way, getters and setters receive the <em>key</em> of the\nproperty they are decorating as the first argument. Setters receive the value\nthey are setting to as the second argument instead. Additionally, setters must\n<em>return</em> the value that should be cached:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed, <span class=\"keyword\">set</span> } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nfunction fullNameMacro(firstNameKey, lastNameKey) {\n  <span class=\"keyword\">return</span> computed(firstNameKey, lastNameKey, {\n    <span class=\"keyword\">get</span>() {\n      <span class=\"keyword\">return</span> `${<span class=\"keyword\">this</span>[firstNameKey]} ${<span class=\"keyword\">this</span>[lastNameKey]}`;\n    }\n\n    <span class=\"keyword\">set</span>(key, value) {\n      let [firstName, lastName] = value.split(<span class=\"string\">&apos; &apos;</span>);\n\n      <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, firstNameKey, firstName);\n      <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, lastNameKey, lastName);\n\n      <span class=\"keyword\">return</span> value;\n    }\n  });\n}\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {\n  <span class=\"keyword\">constructor</span>(firstName, lastName) {\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n  }\n\n  <span class=\"meta\">@fullNameMacro(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</span> fullName;\n});\n\nlet person = new Person();\n\n<span class=\"keyword\">set</span>(person, <span class=\"string\">&apos;fullName&apos;</span>, <span class=\"string\">&apos;Peter Wagenet&apos;</span>);\nperson.firstName; <span class=\"comment\">// &apos;Peter&apos;</span>\nperson.lastName;  <span class=\"comment\">// &apos;Wagenet&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Computed properties can also be used in classic classes. To do this, we\nprovide the getter and setter as the last argument like we would for a macro,\nand we assign it to a property on the class definition. This is an <em>anonymous</em>\ncomputed macro:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> EmberObject, { computed, <span class=\"keyword\">set</span> } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet Person = EmberObject.extend({\n  <span class=\"comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"literal\">null</span>,\n  lastName: <span class=\"literal\">null</span>,\n\n  fullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, {\n    <span class=\"keyword\">get</span>() {\n      <span class=\"keyword\">return</span> `${<span class=\"keyword\">this</span>.firstName} ${<span class=\"keyword\">this</span>.lastName}`;\n    }\n\n    <span class=\"keyword\">set</span>(key, value) {\n      let [firstName, lastName] = value.split(<span class=\"string\">&apos; &apos;</span>);\n\n      <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n      <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n\n      <span class=\"keyword\">return</span> value;\n    }\n  })\n});\n\nlet tom = Person.create({\n  firstName: <span class=\"string\">&apos;Tom&apos;</span>,\n  lastName: <span class=\"string\">&apos;Dale&apos;</span>\n});\n\ntom.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>) <span class=\"comment\">// &apos;Tom Dale&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can overwrite computed property without setters with a normal property (no\nlonger computed) that won&apos;t change if dependencies change. You can also mark\ncomputed property as <code>.readOnly()</code> and block all attempts to set it.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed, <span class=\"keyword\">set</span> } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {\n  <span class=\"keyword\">constructor</span>(firstName, lastName) {\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;firstName&apos;</span>, firstName);\n    <span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;lastName&apos;</span>, lastName);\n  }\n\n  <span class=\"meta\">@computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</span>.readOnly()\n  <span class=\"keyword\">get</span> fullName() {\n    <span class=\"keyword\">return</span> `${<span class=\"keyword\">this</span>.firstName} ${<span class=\"keyword\">this</span>.lastName}`;\n  }\n});\n\nlet person = new Person();\nperson.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;fullName&apos;</span>, <span class=\"string\">&apos;Peter Wagenet&apos;</span>); <span class=\"comment\">// Uncaught Error: Cannot set read-only property &quot;fullName&quot; on object: &lt;(...):emberXXX&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additional resources:</p>\n<ul>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md\">Decorators RFC</a></li>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md\">New CP syntax RFC</a></li>\n<li><a href=\"https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax\">New computed syntax explained in &quot;Ember 1.12 released&quot; </a></li>\n</ul>\n</body></html>",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/computed.ts",
          "line": 606,
          "description": "<html><head></head><body><p>Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>import { computed, <span class=\"keyword\">set</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title\">Person</span> {\n  @computed().readOnly()\n  <span class=\"function\"><span class=\"keyword\">get</span> <span class=\"title\">guid</span>()</span> {\n    <span class=\"keyword\">return</span> <span class=\"string\">&apos;guid-guid-guid&apos;</span>;\n  }\n}\n\n<span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person();\n<span class=\"keyword\">set</span>(person, <span class=\"string\">&apos;guid&apos;</span>, <span class=\"string\">&apos;new-guid&apos;</span>); <span class=\"comment\">// will throw an exception</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Classic Class Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">EmberObject</span>, { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">guid</span>: <span class=\"title function_\">computed</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"string\">&apos;guid-guid-guid&apos;</span>;\n  }).<span class=\"title function_\">readOnly</span>()\n});\n\n<span class=\"keyword\">let</span> person = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>();\nperson.<span class=\"title function_\">set</span>(<span class=\"string\">&apos;guid&apos;</span>, <span class=\"string\">&apos;new-guid&apos;</span>); <span class=\"comment\">// will throw an exception</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readOnly",
          "return": {
            "description": "this",
            "type": "ComputedProperty"
          },
          "chainable": 1,
          "access": "public",
          "tagname": "",
          "class": "ComputedProperty",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/computed.ts",
          "line": 656,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection. You can pass a hash of these values to a\ncomputed property.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n<span class=\"keyword\">import</span> Person from <span class=\"string\">&apos;my-app/utils/person&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Store</span> {\n  <span class=\"meta\">@computed()</span>.meta({ type: Person })\n  <span class=\"keyword\">get</span> person() {\n    let personId = <span class=\"keyword\">this</span>.personId;\n    <span class=\"keyword\">return</span> Person.create({ id: personId });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Classic Class Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n<span class=\"keyword\">import</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;my-app/utils/person&apos;</span>;\n\n<span class=\"keyword\">const</span> <span class=\"title class_\">Store</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">person</span>: <span class=\"title function_\">computed</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">let</span> personId = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&apos;personId&apos;</span>);\n    <span class=\"keyword\">return</span> <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({ <span class=\"attr\">id</span>: personId });\n  }).<span class=\"title function_\">meta</span>({ <span class=\"attr\">type</span>: <span class=\"title class_\">Person</span> })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The hash that you pass to the <code>meta()</code> function will be saved on the\ncomputed property descriptor under the <code>_meta</code> key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the <code>metaForProperty()</code> function.</p>\n</body></html>",
          "itemtype": "method",
          "name": "meta",
          "params": [
            {
              "name": "meta",
              "description": "",
              "type": "Object"
            }
          ],
          "chainable": 1,
          "access": "public",
          "tagname": "",
          "class": "ComputedProperty",
          "module": "@ember/object"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.12.1-@ember/object",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.12.1",
          "type": "project-version"
        }
      }
    }
  }
}