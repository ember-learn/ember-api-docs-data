{
  "data": {
    "id": "ember-3.9.1-Ember",
    "type": "class",
    "attributes": {
      "name": "Ember",
      "shortname": "Ember",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/meta/lib/meta.ts",
          "line": 891,
          "description": "Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.",
          "itemtype": "method",
          "name": "deleteMeta",
          "params": [
            {
              "name": "obj",
              "description": "the object to destroy",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/meta/lib/meta.ts",
          "line": 919,
          "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\n\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
          "itemtype": "method",
          "name": "meta",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve meta for",
              "type": "Object"
            },
            {
              "name": "writable",
              "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
              "type": "Boolean",
              "optional": true,
              "optdefault": "true"
            }
          ],
          "return": {
            "description": "the meta hash for an object",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/meta/lib/meta.ts",
          "line": 968,
          "description": "Returns the CP descriptor assocaited with `obj` and `keyName`, if any.",
          "itemtype": "method",
          "name": "descriptorFor",
          "params": [
            {
              "name": "obj",
              "description": "the object to check",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "the key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Descriptor"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/meta/lib/meta.ts",
          "line": 992,
          "description": "Check whether a value is a CP descriptor.",
          "itemtype": "method",
          "name": "isDescriptor",
          "params": [
            {
              "name": "possibleDesc",
              "description": "the value to check",
              "type": "Any"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/watching.ts",
          "line": 9,
          "description": "Starts watching a property on an object. Whenever the property changes,\ninvokes `Ember.notifyPropertyChange`. This is the primitive used by observers\nand dependent keys; usually you will never call this method directly but instead\nuse higher level methods like `addObserver()`.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "keyPath",
              "description": "",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/watching.ts",
          "line": 39,
          "description": "Stops watching a property on an object. Usually you will never call this method directly but instead\nuse higher level methods like `removeObserver()`.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "unwatch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "keyPath",
              "description": "",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/routing/lib/system/controller_for.ts",
          "line": 7,
          "description": "Finds a controller instance.",
          "itemtype": "method",
          "name": "controllerFor",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/routing/lib/system/generate_controller.ts",
          "line": 9,
          "description": "Generates a controller factory",
          "itemtype": "method",
          "name": "generateControllerFactory",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/routing/lib/system/generate_controller.ts",
          "line": 33,
          "description": "Generates and instantiates a controller extending from `controller:basic`\nif present, or `Controller` if not.",
          "itemtype": "method",
          "name": "generateController",
          "access": "private",
          "tagname": "",
          "since": "1.3.0",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/utils/lib/inspect.ts",
          "line": 14,
          "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\n\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
          "itemtype": "method",
          "name": "inspect",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "The object you want to inspect.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A description of the object",
            "type": "String"
          },
          "since": "1.4.0",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/-internals/utils/lib/invoke.ts",
          "line": 1,
          "description": "Checks to see if the `methodName` exists on the `obj`.\n\n```javascript\nlet foo = { bar: function() { return 'bar'; }, baz: null };\n\nEmber.canInvoke(foo, 'bar'); // true\nEmber.canInvoke(foo, 'baz'); // false\nEmber.canInvoke(foo, 'bat'); // false\n```",
          "itemtype": "method",
          "name": "canInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/-internals/utils/lib/spec.ts",
          "line": 1,
          "description": "Returns whether Type(value) is Object.\n\nUseful for checking whether a value is a valid WeakMap key.\n\nRefs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation\n      https://tc39.github.io/ecma262/#sec-weakmap.prototype.set",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "isObject",
          "class": "Ember",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/utils/lib/super.ts",
          "line": 65,
          "description": "Wraps the passed function so that `this._super` will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrap",
          "params": [
            {
              "name": "func",
              "description": "The function to call",
              "type": "Function"
            },
            {
              "name": "superFunc",
              "description": "The super function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "wrapped function.",
            "type": "Function"
          },
          "class": "Ember",
          "module": "@ember/array"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/utils/lib/guid.ts",
          "line": 29,
          "description": "Prefix used for guids through out Ember.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_PREFIX",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/utils/lib/guid.ts",
          "line": 42,
          "description": "A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.\n\nOn browsers that support it, these properties are added with enumeration\ndisabled so they won't show up when you iterate over your properties.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_KEY",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "@ember/object"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.9.1-@ember/utils",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.9.1",
          "type": "project-version"
        }
      }
    }
  }
}