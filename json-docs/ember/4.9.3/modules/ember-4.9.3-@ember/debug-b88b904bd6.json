{
  "data": {
    "id": "ember-4.9.3-@ember/debug",
    "type": "module",
    "attributes": {
      "name": "@ember/debug",
      "submodules": {},
      "elements": {},
      "fors": {
        "Ember": 1,
        "@ember/debug": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/debug/index.ts",
      "line": 131,
      "access": "public",
      "tagname": "",
      "parent": null,
      "publicclasses": [],
      "privateclasses": [],
      "staticfunctions": {
        "@ember/debug": [
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 136,
            "description": "Verify that a certain expectation is met, or throw a exception otherwise.\n\nThis is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.\n\nAssertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incuring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.\n\n```javascript\nimport { assert } from '@ember/debug';\n\n// Test for truthiness\nassert('Must pass a string', typeof str === 'string');\n\n// Fail unconditionally\nassert('This code path should never be run');\n```",
            "itemtype": "method",
            "name": "assert",
            "static": 1,
            "params": [
              {
                "name": "description",
                "description": "Describes the expectation. This will become the\n  text of the Error thrown if the assertion fails.",
                "type": "String"
              },
              {
                "name": "condition",
                "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
                "type": "Any"
              }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 176,
            "description": "Display a debug notice.\n\nCalls to this function are not invoked in production builds.\n\n```javascript\nimport { debug } from '@ember/debug';\n\ndebug('I\\'m a debug notice!');\n```",
            "itemtype": "method",
            "name": "debug",
            "static": 1,
            "params": [
              {
                "name": "message",
                "description": "A debug message to display.",
                "type": "String"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/deprecate.ts",
            "line": 182,
            "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only).\n\nEmber itself leverages [Semantic Versioning](https://semver.org) to aid\nprojects in keeping up with changes to the framework. Before any\nfunctionality or API is removed, it first flows linearly through a\ndeprecation staging process. The staging process currently contains two\nstages: available and enabled.\n\nDeprecations are initially released into the 'available' stage.\nDeprecations will stay in this stage until the replacement API has been\nmarked as a recommended practice via the RFC process and the addon\necosystem has generally adopted the change.\n\nOnce a deprecation meets the above criteria, it will move into the\n'enabled' stage where it will remain until the functionality or API is\neventually removed.\n\nFor application and addon developers, \"available\" deprecations are not\nurgent and \"enabled\" deprecations require action.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nimport { deprecate } from '@ember/debug';\n\ndeprecate(\n  'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',\n  false,\n  {\n    id: 'ember-polyfills.deprecate-assign',\n    until: '5.0.0',\n    url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',\n    for: 'ember-source',\n    since: {\n      available: '4.0.0',\n      enabled: '4.0.0',\n    },\n  }\n);\n```",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
              {
                "name": "message",
                "description": "A description of the deprecation.",
                "type": "String"
              },
              {
                "name": "test",
                "description": "A boolean. If falsy, the deprecation will be displayed.",
                "type": "Boolean"
              },
              {
                "name": "options",
                "description": "",
                "type": "Object",
                "props": [
                  {
                    "name": "id",
                    "description": "A unique id for this deprecation. The id can be\n  used by Ember debugging tools to change the behavior (raise, log or silence)\n  for that specific deprecation. The id should be namespaced by dots, e.g.\n  \"view.helper.select\".",
                    "type": "String"
                  },
                  {
                    "name": "until",
                    "description": "The version of Ember when this deprecation\n  warning will be removed.",
                    "type": "String"
                  },
                  {
                    "name": "for",
                    "description": "A namespace for the deprecation, usually the package name",
                    "type": "String"
                  },
                  {
                    "name": "since",
                    "description": "Describes when the deprecation became available and enabled.",
                    "type": "Object"
                  },
                  {
                    "name": "url",
                    "description": "An optional url to the transition guide on the\n      emberjs.com website.",
                    "type": "String",
                    "optional": true
                  }
                ]
              }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/deprecate.ts",
            "line": 37,
            "description": "Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word \"should\", otherwise defers to the default handler.\n\n```javascript\nimport { registerDeprecationHandler } from '@ember/debug';\n\nregisterDeprecationHandler((message, options, next) => {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerDeprecationHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle deprecation calls.",
                "type": "Function"
              }
            ],
            "since": "2.1.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/warn.ts",
            "line": 24,
            "description": "Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember's\ndefault warning behavior.\n\n```javascript\nimport { registerWarnHandler } from '@ember/debug';\n\n// next is not called, so no warnings get the default behavior\nregisterWarnHandler(() => {});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerWarnHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle warnings.",
                "type": "Function"
              }
            ],
            "since": "2.1.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 267,
            "description": "Run a function meant for debugging.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport Component from '@ember/component';\nimport { runInDebug } from '@ember/debug';\n\nrunInDebug(() => {\n  Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n```",
            "itemtype": "method",
            "name": "runInDebug",
            "static": 1,
            "params": [
              {
                "name": "func",
                "description": "The function to be executed.",
                "type": "Function"
              }
            ],
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/warn.ts",
            "line": 71,
            "description": "Display a warning with the provided message.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nimport { warn } from '@ember/debug';\nimport tomsterCount from './tomster-counter'; // a module in my project\n\n// Log a warning if we have more than 3 tomsters\nwarn('Too many tomsters!', tomsterCount <= 3, {\n  id: 'ember-debug.too-many-tomsters'\n});\n```",
            "itemtype": "method",
            "name": "warn",
            "static": 1,
            "params": [
              {
                "name": "message",
                "description": "A warning to display.",
                "type": "String"
              },
              {
                "name": "test",
                "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
                "type": "Boolean"
              },
              {
                "name": "options",
                "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
                "type": "Object"
              }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember/debug": [
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 136,
            "description": "Verify that a certain expectation is met, or throw a exception otherwise.\n\nThis is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.\n\nAssertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incuring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.\n\n```javascript\nimport { assert } from '@ember/debug';\n\n// Test for truthiness\nassert('Must pass a string', typeof str === 'string');\n\n// Fail unconditionally\nassert('This code path should never be run');\n```",
            "itemtype": "method",
            "name": "assert",
            "static": 1,
            "params": [
              {
                "name": "description",
                "description": "Describes the expectation. This will become the\n  text of the Error thrown if the assertion fails.",
                "type": "String"
              },
              {
                "name": "condition",
                "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
                "type": "Any"
              }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/capture-render-tree.ts",
            "line": 9,
            "description": "Ember Inspector calls this function to capture the current render tree.\n\nIn production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`\nbefore loading Ember.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "captureRenderTree",
            "params": [
              {
                "name": "app",
                "description": "An `ApplicationInstance`.",
                "type": "ApplicationInstance"
              }
            ],
            "since": "3.14.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 176,
            "description": "Display a debug notice.\n\nCalls to this function are not invoked in production builds.\n\n```javascript\nimport { debug } from '@ember/debug';\n\ndebug('I\\'m a debug notice!');\n```",
            "itemtype": "method",
            "name": "debug",
            "static": 1,
            "params": [
              {
                "name": "message",
                "description": "A debug message to display.",
                "type": "String"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/deprecate.ts",
            "line": 182,
            "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only).\n\nEmber itself leverages [Semantic Versioning](https://semver.org) to aid\nprojects in keeping up with changes to the framework. Before any\nfunctionality or API is removed, it first flows linearly through a\ndeprecation staging process. The staging process currently contains two\nstages: available and enabled.\n\nDeprecations are initially released into the 'available' stage.\nDeprecations will stay in this stage until the replacement API has been\nmarked as a recommended practice via the RFC process and the addon\necosystem has generally adopted the change.\n\nOnce a deprecation meets the above criteria, it will move into the\n'enabled' stage where it will remain until the functionality or API is\neventually removed.\n\nFor application and addon developers, \"available\" deprecations are not\nurgent and \"enabled\" deprecations require action.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nimport { deprecate } from '@ember/debug';\n\ndeprecate(\n  'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',\n  false,\n  {\n    id: 'ember-polyfills.deprecate-assign',\n    until: '5.0.0',\n    url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',\n    for: 'ember-source',\n    since: {\n      available: '4.0.0',\n      enabled: '4.0.0',\n    },\n  }\n);\n```",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
              {
                "name": "message",
                "description": "A description of the deprecation.",
                "type": "String"
              },
              {
                "name": "test",
                "description": "A boolean. If falsy, the deprecation will be displayed.",
                "type": "Boolean"
              },
              {
                "name": "options",
                "description": "",
                "type": "Object",
                "props": [
                  {
                    "name": "id",
                    "description": "A unique id for this deprecation. The id can be\n  used by Ember debugging tools to change the behavior (raise, log or silence)\n  for that specific deprecation. The id should be namespaced by dots, e.g.\n  \"view.helper.select\".",
                    "type": "String"
                  },
                  {
                    "name": "until",
                    "description": "The version of Ember when this deprecation\n  warning will be removed.",
                    "type": "String"
                  },
                  {
                    "name": "for",
                    "description": "A namespace for the deprecation, usually the package name",
                    "type": "String"
                  },
                  {
                    "name": "since",
                    "description": "Describes when the deprecation became available and enabled.",
                    "type": "Object"
                  },
                  {
                    "name": "url",
                    "description": "An optional url to the transition guide on the\n      emberjs.com website.",
                    "type": "String",
                    "optional": true
                  }
                ]
              }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 222,
            "description": "Alias an old, deprecated method with its new counterpart.\n\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport { deprecateFunc } from '@ember/debug';\n\nEmber.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);\n```",
            "itemtype": "method",
            "name": "deprecateFunc",
            "static": 1,
            "params": [
              {
                "name": "message",
                "description": "A description of the deprecation.",
                "type": "String"
              },
              {
                "name": "options",
                "description": "The options object for `deprecate`.",
                "type": "Object",
                "optional": true
              },
              {
                "name": "func",
                "description": "The new function called to replace its deprecated counterpart.",
                "type": "Function"
              }
            ],
            "return": {
              "description": "A new function that wraps the original function with a deprecation warning",
              "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/deprecate.ts",
            "line": 37,
            "description": "Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word \"should\", otherwise defers to the default handler.\n\n```javascript\nimport { registerDeprecationHandler } from '@ember/debug';\n\nregisterDeprecationHandler((message, options, next) => {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerDeprecationHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle deprecation calls.",
                "type": "Function"
              }
            ],
            "since": "2.1.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/warn.ts",
            "line": 24,
            "description": "Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember's\ndefault warning behavior.\n\n```javascript\nimport { registerWarnHandler } from '@ember/debug';\n\n// next is not called, so no warnings get the default behavior\nregisterWarnHandler(() => {});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerWarnHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle warnings.",
                "type": "Function"
              }
            ],
            "since": "2.1.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/index.ts",
            "line": 267,
            "description": "Run a function meant for debugging.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport Component from '@ember/component';\nimport { runInDebug } from '@ember/debug';\n\nrunInDebug(() => {\n  Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n```",
            "itemtype": "method",
            "name": "runInDebug",
            "static": 1,
            "params": [
              {
                "name": "func",
                "description": "The function to be executed.",
                "type": "Function"
              }
            ],
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/debug"
          },
          {
            "file": "packages/@ember/debug/lib/warn.ts",
            "line": 71,
            "description": "Display a warning with the provided message.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nimport { warn } from '@ember/debug';\nimport tomsterCount from './tomster-counter'; // a module in my project\n\n// Log a warning if we have more than 3 tomsters\nwarn('Too many tomsters!', tomsterCount <= 3, {\n  id: 'ember-debug.too-many-tomsters'\n});\n```",
            "itemtype": "method",
            "name": "warn",
            "static": 1,
            "params": [
              {
                "name": "message",
                "description": "A warning to display.",
                "type": "String"
              },
              {
                "name": "test",
                "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
                "type": "Boolean"
              },
              {
                "name": "options",
                "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
                "type": "Object"
              }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "@ember/debug",
            "module": "@ember/debug"
          }
        ],
        "Ember": [
          {
            "file": "packages/@ember/-internals/utils/lib/inspect.ts",
            "line": 15,
            "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\n\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
            "itemtype": "method",
            "name": "inspect",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object you want to inspect.",
                "type": "Object"
              }
            ],
            "return": {
              "description": "A description of the object",
              "type": "String"
            },
            "since": "1.4.0",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "@ember/debug"
          }
        ]
      },
      "version": "4.9.3"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-4.9.3",
          "type": "project-version"
        }
      }
    }
  }
}