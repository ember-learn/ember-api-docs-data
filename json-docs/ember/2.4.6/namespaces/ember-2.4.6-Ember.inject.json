{
  "data": {
    "id": "ember-2.4.6-Ember.inject",
    "type": "namespace",
    "attributes": {
      "name": "Ember.inject",
      "shortname": "Ember.inject",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "packages/ember-runtime/lib/inject.js",
      "line": 4,
      "description": "Namespace for injection helper methods.",
      "static": 1,
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-runtime/lib/controllers/controller.js",
          "line": 31,
          "description": "Creates a property that lazily looks up another controller in the container.\nCan only be used when defining another controller.\n\nExample:\n\n```javascript\nApp.PostController = Ember.Controller.extend({\n  posts: Ember.inject.controller()\n});\n```\n\nThis example will create a `posts` property on the `post` controller that\nlooks up the `posts` controller in the container, making it easy to\nreference other controllers. This is functionally equivalent to:\n\n```javascript\nApp.PostController = Ember.Controller.extend({\n  needs: 'posts',\n  posts: Ember.computed.alias('controllers.posts')\n});\n```",
          "itemtype": "method",
          "name": "controller",
          "since": "1.10.0",
          "params": [
            {
              "name": "name",
              "description": "(optional) name of the controller to inject, defaults\n       to the property's name",
              "type": "String"
            }
          ],
          "return": {
            "description": "injection descriptor instance",
            "type": "Ember.InjectedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.inject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/service.js",
          "line": 5,
          "description": "Creates a property that lazily looks up a service in the container. There\nare no restrictions as to what objects a service can be injected into.\n\nExample:\n\n```javascript\nApp.ApplicationRoute = Ember.Route.extend({\n  authManager: Ember.inject.service('auth'),\n\n  model: function() {\n    return this.get('authManager').findCurrentUser();\n  }\n});\n```\n\nThis example will create an `authManager` property on the application route\nthat looks up the `auth` service in the container, making it easily\naccessible in the `model` hook.",
          "itemtype": "method",
          "name": "service",
          "since": "1.10.0",
          "params": [
            {
              "name": "name",
              "description": "(optional) name of the service to inject, defaults to\n       the property's name",
              "type": "String"
            }
          ],
          "return": {
            "description": "injection descriptor instance",
            "type": "Ember.InjectedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.inject",
          "module": "ember",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.4.6-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.4.6",
          "type": "project-version"
        }
      }
    }
  }
}