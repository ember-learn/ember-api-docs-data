{
  "data": {
    "id": "ember-2.4.6-Ember.CoreObject",
    "type": "class",
    "attributes": {
      "name": "Ember.CoreObject",
      "shortname": "Ember.CoreObject",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "packages/ember-runtime/lib/system/core_object.js",
      "line": 221,
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 234,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  init: function() {\n    alert('Name is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name: \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 434,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 457,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 465,
          "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 484,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nApp.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=> \"<App.Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n   ```javascript\nStudent = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=> \"<(subclass of App.Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nApp.Teacher = App.Person.extend({\n  toStringExtension: function() {\n    return this.get('fullName');\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 549,
          "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()` method.\nFor example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the\nimplementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.');\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class.\nThe `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance\nof the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Mixin classes",
              "type": "Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 657,
          "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend`.",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 703,
          "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say: function(msg){\n    console.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\n\no.say(\"goodbye\"); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
          "itemtype": "method",
          "name": "reopen",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 739,
          "description": "Augments a constructor's own properties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class.\nThese are only available on the class and not on any instance of that class.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name : \"\",\n  sayHello : function() {\n    alert(\"Hello. My name is \" + this.get('name'));\n  }\n});\n\nApp.Person.reopenClass({\n  species : \"Homo sapiens\",\n  createPerson: function(newPersonsName){\n    return App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\nvar tom = App.Person.create({\n  name : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `App.Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
          "itemtype": "method",
          "name": "reopenClass",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 814,
          "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
          "static": 1,
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 875,
          "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
          "static": 1,
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 903,
          "description": "Provides lookup-time type validation for injected properties.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_onLookup",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 912,
          "description": "Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.",
          "itemtype": "method",
          "name": "_lazyInjections",
          "return": {
            "description": "Hash of all lazy injected property keys to container names",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 272,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo']\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Ember.View` the `classNameBindings` and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 341,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nApp.BarRoute = Ember.Route.extend({\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  queryParams: {\n    page: {replace: false},\n    limit: {replace: true}\n  }\n});\n\nApp.FooBarRoute = App.BarRoute.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  queryParams: {\n    limit: {replace: false}\n  }\n});\n\nvar fooBarRoute = App.FooBarRoute.create();\n\nfooBarRoute.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBarRoute.get('queryParams');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 410,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 422,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-2.4.6-Ember.Object"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-2.4.6-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.4.6",
          "type": "project-version"
        }
      }
    }
  }
}