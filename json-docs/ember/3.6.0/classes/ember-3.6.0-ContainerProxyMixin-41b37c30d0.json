{
  "data": {
    "id": "ember-3.6.0-ContainerProxyMixin",
    "type": "class",
    "attributes": {
      "name": "ContainerProxyMixin",
      "shortname": "ContainerProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "EngineInstance"
      ],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 7,
      "description": "<html><head></head><body><p>ContainerProxyMixin is used to provide public access to specific\ncontainer functionality.</p>\n</body></html>",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 23,
          "description": "<html><head></head><body><p>Returns an object that can be used to provide an owner to a\nmanually created instance.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { getOwner } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n\nlet owner = getOwner(this);\n\n<span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>(\n  <span class=\"keyword\">owner</span>.ownerInjection(),\n  { username: <span class=\"string\">&apos;rwjblue&apos;</span> }\n)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "ownerInjection",
          "since": "2.3.0",
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "ContainerProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 49,
          "description": "<html><head></head><body><p>Given a fullName return a corresponding instance.</p>\n<p>The default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> registry = <span class=\"keyword\">new</span> Registry();\n<span class=\"keyword\">let</span> container = registry.container();\n\nregistry.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"keyword\">let</span> twitter = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\n\ntwitter <span class=\"keyword\">instanceof</span> Twitter; <span class=\"comment\">// =&gt; true</span>\n\n<span class=\"comment\">// by default the container will return singletons</span>\n<span class=\"keyword\">let</span> twitter2 = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\ntwitter2 <span class=\"keyword\">instanceof</span> Twitter; <span class=\"comment\">// =&gt; true</span>\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If singletons are not wanted an optional flag can be provided at lookup.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> <span class=\"attr\">registry</span> = new Registry();\n<span class=\"keyword\">let</span> <span class=\"attr\">container</span> = registry.container();\n\nregistry.register(&apos;api:twitter&apos;, Twitter);\n\n<span class=\"keyword\">let</span> <span class=\"attr\">twitter</span> = container.lookup(&apos;api:twitter&apos;, { singleton: <span class=\"literal\">false</span> });\n<span class=\"keyword\">let</span> <span class=\"attr\">twitter2</span> = container.lookup(&apos;api:twitter&apos;, { singleton: <span class=\"literal\">false</span> });\n\n<span class=\"attr\">twitter</span> === twitter2; //=&gt; <span class=\"literal\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "ContainerProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 110,
          "description": "<html><head></head><body><p>Given a fullName return a factory manager.</p>\n<p> This method returns a manager which can be used for introspection of the\n factory&apos;s class or for the creation of factory instances with initial\n properties. The manager is an object with the following properties:</p>\n<ul>\n<li><p><code>class</code> - The registered or resolved class.</p>\n</li>\n<li><p><code>create</code> - A function that will create an instance of the class with\nany dependencies injected.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>import { getOwner } from &apos;@ember/application&apos;;\n\nlet owner = getOwner(otherInstance);\n// the owner is commonly the `applicationInstance`,<span class=\"built_in\"> and </span>can be accessed via\n// an<span class=\"built_in\"> instance </span>initializer.\n\nlet factory = owner.factoryFor(&apos;service:bespoke&apos;);\n\nfactory.class;\n// The registered<span class=\"built_in\"> or </span>resolved class. For example when used with an Ember-CLI\n// app, this would be the default export from `app/services/bespoke.js`.\n\nlet<span class=\"built_in\"> instance </span>= factory.create({\nsomeProperty: &apos;an initial property value&apos;\n});\n// Create an<span class=\"built_in\"> instance </span>with any injections<span class=\"built_in\"> and </span>the passed options as\n// initial properties.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</li>\n</ul>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "factoryFor",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "FactoryManager"
          },
          "class": "ContainerProxyMixin",
          "module": "ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 15,
          "description": "<html><head></head><body><p>The container stores state.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "__container__",
          "type": "Ember.Container",
          "class": "ContainerProxyMixin",
          "module": "ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.6.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.6.0",
          "type": "project-version"
        }
      }
    }
  }
}