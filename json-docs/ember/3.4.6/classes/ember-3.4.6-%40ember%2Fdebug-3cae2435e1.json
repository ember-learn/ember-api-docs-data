{
  "data": {
    "id": "ember-3.4.6-@ember/debug",
    "type": "class",
    "attributes": {
      "name": "@ember/debug",
      "shortname": "@ember/debug",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/debug/lib/deprecate.ts",
          "line": 30,
          "description": "<html><head></head><body><p>Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to <a href=\"https://emberjs.com/api/ember/release/classes/@ember%2Fapplication%2Fdeprecations/methods/deprecate?anchor=deprecate\">@ember/application/deprecations/deprecate</a>.\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word &quot;should&quot;, otherwise defers to the default handler.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>import { registerDeprecationHandler } from &apos;@ember/debug&apos;;\n\nregister<span class=\"constructor\">DeprecationHandler((<span class=\"params\">message</span>, <span class=\"params\">options</span>, <span class=\"params\">next</span>)</span> =&gt; {\n  <span class=\"keyword\">if</span> (message.index<span class=\"constructor\">Of(&apos;<span class=\"params\">should</span>&apos;)</span> !== -<span class=\"number\">1</span>) {\n    throw <span class=\"keyword\">new</span> <span class=\"constructor\">Error(`Deprecation <span class=\"params\">message</span> <span class=\"params\">with</span> <span class=\"params\">should</span>: ${<span class=\"params\">message</span>}`)</span>;\n  } <span class=\"keyword\">else</span> {\n    <span class=\"comment\">// defer to whatever handler was registered before this one</span>\n    next(message, options);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The handler function takes the following arguments:</p>\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul></body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "registerDeprecationHandler",
          "params": [
            {
              "name": "handler",
              "description": "A function to handle deprecation calls.",
              "type": "Function"
            }
          ],
          "since": "2.1.0",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/lib/warn.ts",
          "line": 25,
          "description": "<html><head></head><body><p>Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to <a href=\"https://emberjs.com/api/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn\">@ember/debug/warn</a>.\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember&apos;s\ndefault warning behavior.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerWarnHandler } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/debug&apos;</span>;\n\n<span class=\"regexp\">//</span> next <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> called, so <span class=\"literal\">no</span> warnings get the <span class=\"keyword\">default</span> behavior\nregisterWarnHandler(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The handler function takes the following arguments:</p>\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul></body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "registerWarnHandler",
          "params": [
            {
              "name": "handler",
              "description": "A function to handle warnings.",
              "type": "Function"
            }
          ],
          "since": "2.1.0",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/lib/warn.ts",
          "line": 75,
          "description": "<html><head></head><body><p>Display a warning with the provided message.</p>\n<ul>\n<li>In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "warn",
          "static": 1,
          "params": [
            {
              "name": "message",
              "description": "A warning to display.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
              "type": "Boolean"
            },
            {
              "name": "options",
              "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/index.ts",
          "line": 130,
          "description": "<html><head></head><body><p>Verify that a certain expectation is met, or throw a exception otherwise.</p>\n<p>This is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.</p>\n<p>Assertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incuring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>import { <span class=\"built_in\">assert</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/debug&apos;</span>;\n\n<span class=\"comment\">// Test for truthiness</span>\n<span class=\"built_in\">assert</span>(<span class=\"string\">&apos;Must pass a string&apos;</span>, <span class=\"built_in\">typeof</span> <span class=\"built_in\">str</span> === <span class=\"string\">&apos;string&apos;</span>);\n\n<span class=\"comment\">// Fail unconditionally</span>\n<span class=\"built_in\">assert</span>(<span class=\"string\">&apos;This code path should never be run&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "assert",
          "static": 1,
          "params": [
            {
              "name": "description",
              "description": "Describes the expectation. This will become the\n  text of the Error thrown if the assertion fails.",
              "type": "String"
            },
            {
              "name": "condition",
              "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
              "type": "Boolean"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/index.ts",
          "line": 170,
          "description": "<html><head></head><body><p>Display a debug notice.</p>\n<p>Calls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">debug</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/debug&apos;</span>;\n\n<span class=\"keyword\">debug</span>(<span class=\"string\">&apos;I\\&apos;</span>m a <span class=\"keyword\">debug</span> <span class=\"keyword\">notice</span>!<span class=\"string\">&apos;);</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "debug",
          "static": 1,
          "params": [
            {
              "name": "message",
              "description": "A debug message to display.",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/index.ts",
          "line": 199,
          "description": "<html><head></head><body><p>Display an info notice.</p>\n<p>Calls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.</p>\n</body></html>",
          "itemtype": "method",
          "name": "info",
          "access": "private",
          "tagname": "",
          "class": "@ember/debug",
          "module": "@ember/debug"
        },
        {
          "file": "packages/@ember/debug/index.ts",
          "line": 263,
          "description": "<html><head></head><body><p>Run a function meant for debugging.</p>\n<p>Calls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n<span class=\"keyword\">import</span> { runInDebug } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/debug&apos;</span>;\n\nrunInDebug(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {\n  Component.reopen({\n    didInsertElement() {\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&apos;m happy&quot;</span>);\n    }\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "runInDebug",
          "static": 1,
          "params": [
            {
              "name": "func",
              "description": "The function to be executed.",
              "type": "Function"
            }
          ],
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/debug",
          "module": "@ember/debug"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.4.6-@ember/application",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.4.6",
          "type": "project-version"
        }
      }
    }
  }
}