{
  "data": {
    "id": "ember-3.4.8-EmberRouter",
    "type": "class",
    "attributes": {
      "name": "EmberRouter",
      "shortname": "EmberRouter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/ember-routing/lib/system/router.js",
      "line": 28,
      "description": "The `EmberRouter` class manages the application state and URLs. Refer to\nthe [routing guide](https://guides.emberjs.com/release/routing/) for documentation.",
      "extends": "EmberObject",
      "uses": [
        "Evented"
      ],
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 138,
          "description": "Represents the current URL.",
          "itemtype": "method",
          "name": "url",
          "return": {
            "description": "The current URL.",
            "type": "String"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 159,
          "description": "Initializes the current router instance and sets up the change handling\nevent listeners used by the instances `location` implementation.\n\nA property named `initialURL` will be used to determine the initial URL.\nIf no value is found `/` will be used.",
          "itemtype": "method",
          "name": "startRouting",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 204,
          "description": "Handles updating the paths and notifying any listeners of the URL\nchange.\n\nTriggers the router level `didTransition` hook.\n\nFor example, to notify google analytics when the route changes,\nyou could use this hook.  (Note: requires also including GA scripts, etc.)\n\n```javascript\nimport config from './config/environment';\nimport EmberRouter from '@ember/routing/router';\n\nlet Router = EmberRouter.extend({\n  location: config.locationType,\n\n  didTransition: function() {\n    this._super(...arguments);\n\n    return ga('send', 'pageview', {\n      'page': this.get('url'),\n      'title': this.get('url')\n    });\n  }\n});\n```",
          "itemtype": "method",
          "name": "didTransition",
          "access": "public",
          "tagname": "",
          "since": "1.2.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 313,
          "description": "Handles notifying any listeners of an impending URL\nchange.\n\nTriggers the router level `willTransition` hook.",
          "itemtype": "method",
          "name": "willTransition",
          "access": "public",
          "tagname": "",
          "since": "1.11.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 351,
          "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\nSee [transitionTo](/api/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo) for more info.",
          "itemtype": "method",
          "name": "transitionTo",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "the transition object associated with this\n  attempted transition",
            "type": "Transition"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 410,
          "description": "Determines if the supplied route is currently active.",
          "itemtype": "method",
          "name": "isActive",
          "params": [
            {
              "name": "routeName",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 422,
          "description": "An alternative form of `isActive` that doesn't require\nmanual concatenation of the arguments into a single\narray.",
          "itemtype": "method",
          "name": "isActiveIntent",
          "params": [
            {
              "name": "routeName",
              "description": ""
            },
            {
              "name": "models",
              "description": ""
            },
            {
              "name": "queryParams",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "since": "1.7.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 444,
          "description": "Does this router instance have the given route.",
          "itemtype": "method",
          "name": "hasRoute",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 455,
          "description": "Resets the state of the router by clearing the current route\nhandlers and deactivating them.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "reset",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 664,
          "description": "Serializes the given query params according to their QP meta information.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_serializeQueryParams",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Arrray<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 686,
          "description": "Serializes the value of a query parameter based on a type",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_serializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 704,
          "description": "Deserializes the given query params according to their QP meta information.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_deserializeQueryParams",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 724,
          "description": "Deserializes the value of a query parameter based on a default type",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_deserializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "defaultType",
              "description": "",
              "type": "String"
            }
          ],
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 745,
          "description": "Removes (prunes) any query params with default values from the given QP\nobject. Default values are determined from the QP meta information per key.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_pruneDefaultQueryParamValues",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 810,
          "description": "Prepares the query params for a URL or Transition. Restores any undefined QP\nkeys/values, serializes all values, and then prunes any default values.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_prepareQueryParams",
          "params": [
            {
              "name": "targetRouteName",
              "description": "",
              "type": "String"
            },
            {
              "name": "models",
              "description": "",
              "type": "Array<Object>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            },
            {
              "name": "keepDefaultQueryParamValues",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 832,
          "description": "Returns the meta information for the query params of a given route. This\nwill be overridden to allow support for lazy routes.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_getQPMeta",
          "params": [
            {
              "name": "handlerInfo",
              "description": "",
              "type": "HandlerInfo"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 846,
          "description": "Returns a merged query params meta object for a given set of handlerInfos.\nUseful for knowing what query params are available for a given route hierarchy.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_queryParamsFor",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 912,
          "description": "Maps all query param keys to their fully scoped property name of the form\n`controllerName:propName`.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_fullyScopeQueryParams",
          "params": [
            {
              "name": "leafRouteName",
              "description": "",
              "type": "String"
            },
            {
              "name": "contexts",
              "description": "",
              "type": "Array<Object>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 952,
          "description": "Hydrates (adds/restores) any query params that have pre-existing values into\nthe given queryParams hash. This is what allows query params to be \"sticky\"\nand restore their last known values for their scope.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_hydrateUnsuppliedQueryParams",
          "params": [
            {
              "name": "state",
              "description": "",
              "type": "TransitionState"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 1387,
          "description": "The `Router.map` function allows you to define mappings from URLs to routes\nin your application. These mappings are defined within the\nsupplied callback function using `this.route`.\n\nThe first parameter is the name of the route which is used by default as the\npath name as well.\n\nThe second parameter is the optional options hash. Available options are:\n\n  * `path`: allows you to provide your own path as well as mark dynamic\n    segments.\n  * `resetNamespace`: false by default; when nesting routes, ember will\n    combine the route names to form the fully-qualified route name, which is\n    used with `{{link-to}}` or manually transitioning to routes. Setting\n    `resetNamespace: true` will cause the route not to inherit from its\n    parent route's names. This is handy for preventing extremely long route names.\n    Keep in mind that the actual URL path behavior is still retained.\n\nThe third parameter is a function, which can be used to nest routes.\nNested routes, by default, will have the parent route tree's route name and\npath prepended to it's own.\n\n```js {data-filename=app/router.js}\nRouter.map(function(){\n  this.route('post', { path: '/post/:post_id' }, function() {\n    this.route('edit');\n    this.route('comments', { resetNamespace: true }, function() {\n      this.route('new');\n    });\n  });\n});\n```\n\nFor more detailed documentation and examples please see\n[the guides](https://guides.emberjs.com/release/routing/defining-your-routes/).",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 48,
          "description": "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad', function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target can be passed in as the 2nd argument that will\nbe set as the \"this\" for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 74,
          "description": "Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use ``one`` when\nyou only care about the first time an event has taken place.\n\nThis function takes an optional 2nd argument that will become the \"this\"\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.",
          "itemtype": "method",
          "name": "one",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 100,
          "description": "Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat', function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\n// outputs: person ate some broccoli\n```",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "args",
              "description": "Optional arguments to pass on",
              "type": "Object..."
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 123,
          "description": "Cancels subscription for given name, target, and method.",
          "itemtype": "method",
          "name": "off",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target of the subscription",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The function of the subscription",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 138,
          "description": "Checks to see if object has any subscriptions for named event.",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            }
          ],
          "return": {
            "description": "does the object have a subscription for event",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 228,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 446,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 474,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 482,
          "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 497,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 95,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 140,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 165,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 213,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 231,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 251,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 270,
          "itemtype": "method",
          "name": "propertyWillChange",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 279,
          "itemtype": "method",
          "name": "propertyDidChange",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 288,
          "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 306,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 357,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 374,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 389,
          "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 407,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 429,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 451,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 468,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 38,
          "description": "The `location` property determines the type of URL's that your\napplication will use.\n\nThe following location types are currently available:\n\n* `history` - use the browser's history API to make the URLs look just like any standard URL\n* `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`\n* `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)\n* `auto` - use the best option based on browser capabilities: `history` if possible, then `hash` if possible, otherwise `none`\n\nThis value is defaulted to `auto` by the `locationType` setting of `/config/environment.js`",
          "itemtype": "property",
          "name": "location",
          "default": "'hash'",
          "see": [
            "{Location}"
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 58,
          "description": "Represents the URL of the root of the application, often '/'. This prefix is\nassumed on all routes defined on this router.",
          "itemtype": "property",
          "name": "rootURL",
          "default": "'/'",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 261,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 335,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 410,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 428,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-3.4.8-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.4.8-@ember/routing",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.4.8",
          "type": "project-version"
        }
      }
    }
  }
}