{
  "data": {
    "id": "ember-3.5.1-EmberRouter",
    "type": "class",
    "attributes": {
      "name": "EmberRouter",
      "shortname": "EmberRouter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/ember-routing/lib/system/router.js",
      "line": 28,
      "description": "<html><head></head><body><p>The <code>EmberRouter</code> class manages the application state and URLs. Refer to\nthe <a href=\"https://guides.emberjs.com/release/routing/\">routing guide</a> for documentation.</p>\n</body></html>",
      "extends": "EmberObject",
      "uses": [
        "Evented"
      ],
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 138,
          "description": "<html><head></head><body><p>Represents the current URL.</p>\n</body></html>",
          "itemtype": "method",
          "name": "url",
          "return": {
            "description": "The current URL.",
            "type": "String"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 159,
          "description": "<html><head></head><body><p>Initializes the current router instance and sets up the change handling\nevent listeners used by the instances <code>location</code> implementation.</p>\n<p>A property named <code>initialURL</code> will be used to determine the initial URL.\nIf no value is found <code>/</code> will be used.</p>\n</body></html>",
          "itemtype": "method",
          "name": "startRouting",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 204,
          "description": "<html><head></head><body><p>Handles updating the paths and notifying any listeners of the URL\nchange.</p>\n<p>Triggers the router level <code>didTransition</code> hook.</p>\n<p>For example, to notify google analytics when the route changes,\nyou could use this hook.  (Note: requires also including GA scripts, etc.)</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">&apos;./config/environment&apos;</span>;\n<span class=\"keyword\">import</span> EmberRouter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/routing/router&apos;</span>;\n\n<span class=\"keyword\">let</span> Router = EmberRouter.extend({\n  <span class=\"attr\">location</span>: config.locationType,\n\n  <span class=\"attr\">didTransition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">this</span>._super(...arguments);\n\n    <span class=\"keyword\">return</span> ga(<span class=\"string\">&apos;send&apos;</span>, <span class=\"string\">&apos;pageview&apos;</span>, {\n      <span class=\"string\">&apos;page&apos;</span>: <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;url&apos;</span>),\n      <span class=\"string\">&apos;title&apos;</span>: <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;url&apos;</span>)\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "didTransition",
          "access": "public",
          "tagname": "",
          "since": "1.2.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 313,
          "description": "<html><head></head><body><p>Handles notifying any listeners of an impending URL\nchange.</p>\n<p>Triggers the router level <code>willTransition</code> hook.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willTransition",
          "access": "public",
          "tagname": "",
          "since": "1.11.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 351,
          "description": "<html><head></head><body><p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<p>See <a href=\"/api/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo\">transitionTo</a> for more info.</p>\n</body></html>",
          "itemtype": "method",
          "name": "transitionTo",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "the transition object associated with this\n  attempted transition",
            "type": "Transition"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 410,
          "description": "<html><head></head><body><p>Determines if the supplied route is currently active.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isActive",
          "params": [
            {
              "name": "routeName",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 422,
          "description": "<html><head></head><body><p>An alternative form of <code>isActive</code> that doesn&apos;t require\nmanual concatenation of the arguments into a single\narray.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isActiveIntent",
          "params": [
            {
              "name": "routeName",
              "description": ""
            },
            {
              "name": "models",
              "description": ""
            },
            {
              "name": "queryParams",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "since": "1.7.0",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 444,
          "description": "<html><head></head><body><p>Does this router instance have the given route.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasRoute",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 455,
          "description": "<html><head></head><body><p>Resets the state of the router by clearing the current route\nhandlers and deactivating them.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "reset",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 664,
          "description": "<html><head></head><body><p>Serializes the given query params according to their QP meta information.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_serializeQueryParams",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Arrray<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 686,
          "description": "<html><head></head><body><p>Serializes the value of a query parameter based on a type</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_serializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 704,
          "description": "<html><head></head><body><p>Deserializes the given query params according to their QP meta information.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_deserializeQueryParams",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 724,
          "description": "<html><head></head><body><p>Deserializes the value of a query parameter based on a default type</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_deserializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "defaultType",
              "description": "",
              "type": "String"
            }
          ],
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 745,
          "description": "<html><head></head><body><p>Removes (prunes) any query params with default values from the given QP\nobject. Default values are determined from the QP meta information per key.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_pruneDefaultQueryParamValues",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 810,
          "description": "<html><head></head><body><p>Prepares the query params for a URL or Transition. Restores any undefined QP\nkeys/values, serializes all values, and then prunes any default values.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_prepareQueryParams",
          "params": [
            {
              "name": "targetRouteName",
              "description": "",
              "type": "String"
            },
            {
              "name": "models",
              "description": "",
              "type": "Array<Object>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            },
            {
              "name": "keepDefaultQueryParamValues",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 832,
          "description": "<html><head></head><body><p>Returns the meta information for the query params of a given route. This\nwill be overridden to allow support for lazy routes.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_getQPMeta",
          "params": [
            {
              "name": "handlerInfo",
              "description": "",
              "type": "HandlerInfo"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 846,
          "description": "<html><head></head><body><p>Returns a merged query params meta object for a given set of handlerInfos.\nUseful for knowing what query params are available for a given route hierarchy.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_queryParamsFor",
          "params": [
            {
              "name": "handlerInfos",
              "description": "",
              "type": "Array<HandlerInfo>"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 913,
          "description": "<html><head></head><body><p>Maps all query param keys to their fully scoped property name of the form\n<code>controllerName:propName</code>.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_fullyScopeQueryParams",
          "params": [
            {
              "name": "leafRouteName",
              "description": "",
              "type": "String"
            },
            {
              "name": "contexts",
              "description": "",
              "type": "Array<Object>"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 953,
          "description": "<html><head></head><body><p>Hydrates (adds/restores) any query params that have pre-existing values into\nthe given queryParams hash. This is what allows query params to be &quot;sticky&quot;\nand restore their last known values for their scope.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_hydrateUnsuppliedQueryParams",
          "params": [
            {
              "name": "state",
              "description": "",
              "type": "TransitionState"
            },
            {
              "name": "queryParams",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 1388,
          "description": "<html><head></head><body><p>The <code>Router.map</code> function allows you to define mappings from URLs to routes\nin your application. These mappings are defined within the\nsupplied callback function using <code>this.route</code>.</p>\n<p>The first parameter is the name of the route which is used by default as the\npath name as well.</p>\n<p>The second parameter is the optional options hash. Available options are:</p>\n<ul>\n<li><code>path</code>: allows you to provide your own path as well as mark dynamic\nsegments.</li>\n<li><code>resetNamespace</code>: false by default; when nesting routes, ember will\ncombine the route names to form the fully-qualified route name, which is\nused with <code>{{link-to}}</code> or manually transitioning to routes. Setting\n<code>resetNamespace: true</code> will cause the route not to inherit from its\nparent route&apos;s names. This is handy for preventing extremely long route names.\nKeep in mind that the actual URL path behavior is still retained.</li>\n</ul>\n<p>The third parameter is a function, which can be used to nest routes.\nNested routes, by default, will have the parent route tree&apos;s route name and\npath prepended to it&apos;s own.</p>\n<div class=\"highlight app/router.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/router.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&apos;post&apos;</span>, { path: <span class=\"string\">&apos;/post/:post_id&apos;</span> }, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&apos;edit&apos;</span>);\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&apos;comments&apos;</span>, { resetNamespace: <span class=\"literal\">true</span> }, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"keyword\">this</span>.route(<span class=\"string\">&apos;new&apos;</span>);\n    });\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>For more detailed documentation and examples please see\n<a href=\"https://guides.emberjs.com/release/routing/defining-your-routes/\">the guides</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 48,
          "description": "<html><head></head><body><p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>person.on(<span class=\"string\">&apos;didLoad&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"comment\">// fired once the person has loaded</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n</body></html>",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 74,
          "description": "<html><head></head><body><p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n</body></html>",
          "itemtype": "method",
          "name": "one",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 100,
          "description": "<html><head></head><body><p>Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>person.on(<span class=\"string\">&apos;didEat&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;person ate some &apos;</span> + food);\n});\n\nperson.trigger(<span class=\"string\">&apos;didEat&apos;</span>, <span class=\"string\">&apos;broccoli&apos;</span>);\n\n<span class=\"comment\">// outputs: person ate some broccoli</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "args",
              "description": "Optional arguments to pass on",
              "type": "Object..."
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 123,
          "description": "<html><head></head><body><p>Cancels subscription for given name, target, and method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "off",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target of the subscription",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The function of the subscription",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/evented.js",
          "line": 138,
          "description": "<html><head></head><body><p>Checks to see if object has any subscriptions for named event.</p>\n</body></html>",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            }
          ],
          "return": {
            "description": "does the object have a subscription for event",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 228,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Person = EmberObject.extend({\n  init() {\n    alert(<span class=\"string\">`Name is <span class=\"subst\">${<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>)}</span>`</span>);\n  }\n});\n\n<span class=\"keyword\">let</span> steve = Person.create({\n  name: <span class=\"string\">&apos;Steve&apos;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code>,\nbe sure to call <code>this._super(...arguments)</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 446,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 474,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 482,
          "description": "<html><head></head><body><p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 497,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject from &apos;@ember/object&apos;;\n\nconst Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">EmberObject</span>.</span></span>extend<span class=\"literal\">()</span>;\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>const Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>;\n<span class=\"keyword\">let</span> student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>;\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;(subclass of Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>const Teacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend({\n  <span class=\"keyword\">to</span><span class=\"constructor\">StringExtension()</span> {\n    return this.get(&apos;fullName&apos;);\n  }\n});\nteacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Teacher</span>.</span></span>create<span class=\"literal\">()</span>;\nteacher.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 95,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nfullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 140,
          "description": "<html><head></head><body><p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 165,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">record</span>.<span class=\"keyword\">set</span>(&quot;key&quot;, <span class=\"keyword\">value</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method is generally very similar to calling <code>object[&quot;key&quot;] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 213,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 231,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 251,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 270,
          "itemtype": "method",
          "name": "propertyWillChange",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 279,
          "itemtype": "method",
          "name": "propertyDidChange",
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 288,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 306,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods have the following signature:</p>\n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import Component from &apos;@ember/component&apos;;\n\nexport default <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Component</span>.</span></span>extend({\n  init<span class=\"literal\">()</span> {\n    this.<span class=\"constructor\">_super(<span class=\"operator\">...</span><span class=\"params\">arguments</span>)</span>;\n    this.add<span class=\"constructor\">Observer(&apos;<span class=\"params\">foo</span>&apos;, <span class=\"params\">this</span>, &apos;<span class=\"params\">fooDidChange</span>&apos;)</span>;\n  },\n\n  foo<span class=\"constructor\">DidChange(<span class=\"params\">sender</span>, <span class=\"params\">key</span>, <span class=\"params\">value</span>, <span class=\"params\">rev</span>)</span> {\n    <span class=\"comment\">// your code</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>sender</code> is the object that changed. The <code>key</code> is the property that\nchanges. The <code>value</code> property is currently reserved and unused. The <code>rev</code>\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>Usually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 357,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 374,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 389,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 407,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 429,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 451,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 468,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 38,
          "description": "<html><head></head><body><p>The <code>location</code> property determines the type of URL&apos;s that your\napplication will use.</p>\n<p>The following location types are currently available:</p>\n<ul>\n<li><code>history</code> - use the browser&apos;s history API to make the URLs look just like any standard URL</li>\n<li><code>hash</code> - use <code>#</code> to separate the server part of the URL from the Ember part: <code>/blog/#/posts/new</code></li>\n<li><code>none</code> - do not store the Ember URL in the actual browser URL (mainly used for testing)</li>\n<li><code>auto</code> - use the best option based on browser capabilities: <code>history</code> if possible, then <code>hash</code> if possible, otherwise <code>none</code></li>\n</ul>\n<p>This value is defaulted to <code>auto</code> by the <code>locationType</code> setting of <code>/config/environment.js</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "location",
          "default": "'hash'",
          "see": [
            "{Location}"
          ],
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-routing/lib/system/router.js",
          "line": 58,
          "description": "<html><head></head><body><p>Represents the URL of the root of the application, often &apos;/&apos;. This prefix is\nassumed on all routes defined on this router.</p>\n</body></html>",
          "itemtype": "property",
          "name": "rootURL",
          "default": "'/'",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/routing"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 261,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre>import <span class=\"symbol\">EmberObject</span> from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nconst <span class=\"symbol\">Bar</span> = <span class=\"symbol\">EmberObject</span>.extend({\n  // <span class=\"symbol\">Configure</span> which properties to concatenate\n  concatenatedProperties: [<span class=\"string\">&apos;concatenatedProperty&apos;</span>],\n\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\nconst <span class=\"symbol\">FooBar</span> = <span class=\"symbol\">Bar</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>]\n});\n\nlet fooBar = <span class=\"symbol\">FooBar</span>.create();\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = <span class=\"symbol\">FooBar</span>.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = FooBar.<span class=\"keyword\">create</span>({\n  concatenatedProperty: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Component</code> the <code>classNames</code>, <code>classNameBindings</code> and\n<code>attributeBindings</code> properties are concatenated.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 335,
          "description": "<html><head></head><body><p>Defines the properties that will be merged from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by merging the superclass property value\nwith the subclass property&apos;s value. An example of this in use within Ember\nis the <code>queryParams</code> property of routes.</p>\n<p>Here is some sample code showing the difference between a merged\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Bar = EmberObject.extend({\n  <span class=\"comment\">// Configure which properties are to be merged</span>\n  mergedProperties: [<span class=\"string\">&apos;mergedProperty&apos;</span>],\n\n  someNonMergedProperty: {\n    nonMerged: <span class=\"string\">&apos;superclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    page: { replace: <span class=\"literal\">false</span> },\n    limit: { replace: <span class=\"literal\">true</span> }\n  }\n});\n\n<span class=\"keyword\">const</span> FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: <span class=\"string\">&apos;subclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    limit: { replace: <span class=\"literal\">false</span> }\n  }\n});\n\n<span class=\"keyword\">let</span> fooBar = FooBar.create();\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonMergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; { completelyNonMerged: &apos;subclass value of nonMerged&apos; }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the entire object, including the nonMerged property of</span>\n<span class=\"comment\">// the superclass object, has been replaced</span>\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;mergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; {</span>\n<span class=\"comment\">//   page: {replace: false},</span>\n<span class=\"comment\">//   limit: {replace: false}</span>\n<span class=\"comment\">// }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the page remains from the superclass, and the</span>\n<span class=\"comment\">// `limit` property&apos;s value of `false` has been merged from</span>\n<span class=\"comment\">// the subclass.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior is not available during object <code>create</code> calls. It is only\navailable at <code>extend</code> time.</p>\n<p>In <code>Route</code> the <code>queryParams</code> property is merged.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 410,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 428,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "EmberRouter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-3.5.1-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.5.1-@ember/routing",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.5.1",
          "type": "project-version"
        }
      }
    }
  }
}