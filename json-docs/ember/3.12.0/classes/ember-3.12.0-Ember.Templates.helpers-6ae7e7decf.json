{
  "data": {
    "id": "ember-3.12.0-Ember.Templates.helpers",
    "type": "class",
    "attributes": {
      "name": "Ember.Templates.helpers",
      "shortname": "Ember.Templates.helpers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 86,
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/input.ts",
          "line": 13,
          "description": "<html><head></head><body><p>See <a href=\"/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input\">Ember.Templates.components.Input</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "input",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
          "line": 248,
          "description": "<html><head></head><body><p>See <a href=\"/api/ember/release/classes/Ember.Templates.components/methods/input?anchor=input\">Ember.Templates.components.LinkTo</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "link-to",
          "see": [
            "{Ember.Templates.components.LinkTo}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/routing"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
          "line": 916,
          "description": "<html><head></head><body><p>The <code>{{link-to}}</code> component renders a link to the supplied\n<code>routeName</code> passing an optionally supplied model to the\nroute as its <code>model</code> context of the route. The block\nfor <code>{{link-to}}</code> becomes the innerHTML of the rendered\nelement:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos;}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use an inline form of <code>{{link-to}}</code> component by\npassing the link text as the first argument\nto the component:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{link-<span class=\"keyword\">to</span> <span class=\"string\">&apos;Great Hamster Photos&apos;</span> <span class=\"string\">&apos;photoGallery&apos;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Both will result in:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-a-tagname\">Supplying a tagName</h3>\n<p>By default <code>{{link-to}}</code> renders an <code>&lt;a&gt;</code> element. This can\nbe overridden for a single use of <code>{{link-to}}</code> by supplying\na <code>tagName</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">tagName</span>=<span class=\"string\">&quot;li&quot;</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;li&gt;</span>\n  <span class=\"attribute\">Great</span> Hamster Photos\n<span class=\"section\">&lt;/li&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"disabling-the-link-to-component\">Disabling the <code>link-to</code> component</h3>\n<p>By default <code>{{link-to}}</code> is enabled.\nany passed value to the <code>disabled</code> component property will disable\nthe <code>link-to</code> component.</p>\n<p>static use: the <code>disabled</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">disabled</span>=true}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>dynamic use: the <code>disabledWhen</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">disabledWhen</span>=controller.someProperty}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>any truthy value passed to <code>disabled</code> will disable it except <code>undefined</code>.</p>\n<p>See &quot;Overriding Application-wide Defaults&quot; for more.</p>\n<h3 id=\"handling-href\">Handling <code>href</code></h3>\n<p><code>{{link-to}}</code> will use your application&apos;s Router to\nfill the element&apos;s <code>href</code> property with a url that\nmatches the path to the supplied <code>routeName</code> for your\nrouter&apos;s configured <code>Location</code> scheme, which defaults\nto HashLocation.</p>\n<h3 id=\"handling-current-route\">Handling current route</h3>\n<p><code>{{link-to}}</code> will apply a CSS class name of &apos;active&apos;\nwhen the application&apos;s current route matches\nthe supplied routeName. For example, if the application&apos;s\ncurrent route is &apos;photoGallery.recent&apos; the following\nuse of <code>{{link-to}}</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery.recent&apos;}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will result in</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;a href=<span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> <span class=\"keyword\">class</span>=&quot;<span class=\"symbol\">active</span>&quot;&gt;\n  <span class=\"symbol\">Great</span> <span class=\"symbol\">Hamster</span> <span class=\"symbol\">Photos</span>\n&lt;/<span class=\"symbol\">a</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The CSS class name used for active classes can be customized\nfor a single use of <code>{{link-to}}</code> by passing an <code>activeClass</code>\noption:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery.recent&apos; <span class=\"attr\">activeClass</span>=<span class=\"string\">&quot;current-url&quot;</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;current-url&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"keeping-a-link-active-for-other-routes\">Keeping a link active for other routes</h3>\n<p>If you need a link to be &apos;active&apos; even when it doesn&apos;t match\nthe current route, you can use the <code>current-when</code> argument.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; current-<span class=\"attr\">when</span>=&apos;photos&apos;}}</span><span class=\"xml\">\n  Photo Gallery\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This may be helpful for keeping links active for:</p>\n<ul>\n<li>non-nested routes that are logically related</li>\n<li>some secondary menu approaches</li>\n<li>&apos;top navigation&apos; with &apos;sub navigation&apos; scenarios</li>\n</ul>\n<p>A link will be active if <code>current-when</code> is <code>true</code> or the current\nroute is the route this link would transition to.</p>\n<p>To match multiple routes &apos;space-separate&apos; the routes:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;gallery&apos; current-<span class=\"attr\">when</span>=&apos;photos drawings paintings&apos;}}</span><span class=\"xml\">\n  Art Gallery\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-a-model\">Supplying a model</h3>\n<p>An optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, {path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span>});\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-multiple-models\">Supplying multiple models</h3>\n<p>For deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, { path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span> }, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;comment&quot;</span>, {path: <span class=\"string\">&quot;comments/:comment_id&quot;</span>});\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This argument will become the model context of the linked route:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery.comment&apos; aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42/comments/718&quot;</span>&gt;</span>\n  A+++ would snuggle again.\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3>\n<p>If you don&apos;t have a model object available to pass to <code>{{link-to}}</code>,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, { path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span> });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhotoId}}\n  {{aPhoto.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When transitioning into the linked route, the <code>model</code> hook will\nbe triggered with parameters including this passed identifier.</p>\n<h3 id=\"allowing-default-action\">Allowing Default Action</h3>\n<p>By default the <code>{{link-to}}</code> component prevents the default browser action\nby calling <code>preventDefault()</code> as this sort of action bubbling is normally\nhandled internally and we do not want to take the browser to a new URL (for\nexample).</p>\n<p>If you need to override this behavior specify <code>preventDefault=false</code> in\nyour template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhotoId preventDefault=false}}\n  {{aPhotoId.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"overriding-attributes\">Overriding attributes</h3>\n<p>You can override any given property of the <code>LinkComponent</code>\nthat is generated by the <code>{{link-to}}</code> component by passing\nkey/value pairs, like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span>  aPhoto <span class=\"attr\">tagName</span>=&apos;li&apos; <span class=\"attr\">title</span>=&apos;Following this link will change your life&apos; <span class=\"attr\">classNames</span>=&apos;pic sweet&apos;}}</span><span class=\"xml\">\n  Uh-mazing!\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/ember/release/classes/LinkComponent\">LinkComponent</a> for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of <code>LinkComponent</code>.</p>\n<h3 id=\"overriding-application-wide-defaults\">Overriding Application-wide Defaults</h3>\n<p><code>{{link-to}}</code> creates an instance of <code>LinkComponent</code> for rendering. To\noverride options for your entire application, export your customized\n<code>LinkComponent</code> from <code>app/components/link-to.js</code> with the desired overrides:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/components/link-to.js</span>\n<span class=\"keyword\">import</span> LinkComponent <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/routing/link-component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> LinkComponent.extend({\n  <span class=\"attr\">activeClass</span>: <span class=\"string\">&quot;is-active&quot;</span>,\n  <span class=\"attr\">tagName</span>: <span class=\"string\">&apos;li&apos;</span>\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to override the default event in this manner:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> LinkComponent <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/routing/link-component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> LinkComponent.extend({\n  eventName: <span class=\"string\">&apos;customEventName&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "link-to",
          "params": [
            {
              "name": "routeName",
              "description": "",
              "type": "String"
            },
            {
              "name": "context",
              "description": "",
              "type": "Object",
              "optional": true,
              "multiple": true
            },
            {
              "name": "options",
              "description": "Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "see": [
            "{LinkComponent}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/routing"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
          "line": 122,
          "description": "<html><head></head><body><p>See Ember.Templates.components.Textarea.</p>\n</body></html>",
          "itemtype": "method",
          "name": "textarea",
          "see": [
            "{Ember.Templates.components.textarea}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/action.ts",
          "line": 14,
          "description": "<html><head></head><body><p>The <code>{{action}}</code> helper provides a way to pass triggers for behavior (usually\njust a function) between components, and into components from controllers.</p>\n<h3 id=\"passing-functions-with-the-action-helper\">Passing functions with the action helper</h3>\n<p>There are three contexts an action helper can be used in. The first two\ncontexts to discuss are attribute context, and Handlebars value context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"comment\">{{! Examples of Handlebars value context }}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> on-<span class=\"built_in\">input</span>=(<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>)}}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">yield</span> (<span class=\"built_in\">action</span> <span class=\"string\">&quot;refreshData&quot;</span>) andAnotherParam}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In these contexts,\nthe helper is called a &quot;closure action&quot; helper. Its behavior is simple:\nIf passed a function name, read that function off the <code>actions</code> property\nof the current context. Once that function is read, or immediately if a function was\npassed, create a closure over that function and any arguments.\nThe resulting value of an action helper used this way is simply a function.</p>\n<p>For example, in the attribute context:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The resulting template render logic would be:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&apos;div&apos;</span>);\n<span class=\"keyword\">var</span> actionFunction = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>{\n  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> context.actions.save.apply(context, <span class=\"built_in\">arguments</span>);\n  };\n})(context);\ndiv.onclick = actionFunction;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Thus when the div is clicked, the action on that context is called.\nBecause the <code>actionFunction</code> is just a function, closure actions can be\npassed between components and still execute in the correct context.</p>\n<p>Here is an example action handler on a component:</p>\n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component from <span class=\"string\">&apos;@ember/component&apos;</span>;\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  actions: {\n    <span class=\"built_in\">save</span>() {\n      <span class=\"keyword\">this</span>.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;model&apos;</span>).<span class=\"built_in\">save</span>();\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Actions are always looked up on the <code>actions</code> property of the current context.\nThis avoids collisions in the naming of common actions, such as <code>destroy</code>.\nTwo options can be passed to the <code>action</code> helper when it is used in this way.</p>\n<ul>\n<li><code>target=someProperty</code> will look to <code>someProperty</code> instead of the current\ncontext for the <code>actions</code> hash. This can be useful when targeting a\nservice for actions.</li>\n<li><code>value=&quot;target.value&quot;</code> will read the path <code>target.value</code> off the first\nargument to the action when it is called and rewrite the first argument\nto be that value. This is useful when attaching actions to event listeners.</li>\n</ul>\n<h3 id=\"invoking-an-action\">Invoking an action</h3>\n<p>Closure actions curry both their scope and any arguments. When invoked, any\nadditional arguments are added to the already curried list.\nActions should be invoked using the <a href=\"/ember/release/classes/Component/methods/sendAction?anchor=sendAction\">sendAction</a>\nmethod. The first argument to <code>sendAction</code> is the action to be called, and\nadditional arguments are passed to the action function. This has interesting\nproperties combined with currying of arguments. For example:</p>\n<div class=\"highlight component.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{input on-input=(<span class=\"name\">action</span> (<span class=\"name\">action</span> &apos;setName&apos; model) value=<span class=\"string\">&quot;target.value&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  actions: {\n    setName(model, <span class=\"type\">name</span>) {\n      model.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;name&apos;</span>, <span class=\"type\">name</span>);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The first argument (<code>model</code>) was curried over, and the run-time argument (<code>event</code>)\nbecomes a second argument. Action calls can be nested this way because each simply\nreturns a function. Any function can be passed to the <code>{{action}}</code> helper, including\nother actions.</p>\n<p>Actions invoked with <code>sendAction</code> have the same currying behavior as demonstrated\nwith <code>on-input</code> above. For example:</p>\n<div class=\"highlight input.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">input.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  actions: {\n    setName(model, <span class=\"type\">name</span>) {\n      model.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;name&apos;</span>, <span class=\"type\">name</span>);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;MyInput <span class=\"meta\">@submit</span>={{action <span class=\"string\">&apos;setName&apos;</span> <span class=\"keyword\">this</span>.model}} /&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-input submit=(<span class=\"name\">action</span> &apos;setName&apos; model)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Component.extend({\n  click() {\n    <span class=\"regexp\">//</span> Note that model <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> passed, it was curried <span class=\"keyword\">in</span> the template\n    <span class=\"keyword\">this</span>.sendAction(<span class=\"string\">&apos;submit&apos;</span>, <span class=\"string\">&apos;bob&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"attaching-actions-to-dom-elements\">Attaching actions to DOM elements</h3>\n<p>The third context of the <code>{{action}}</code> helper can be called &quot;element space&quot;.\nFor example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of element space }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Used this way, the <code>{{action}}</code> helper provides a useful shortcut for\nregistering an HTML element in a template for a single DOM event and\nforwarding that interaction to the template&apos;s context (controller or component).\nIf the context of a template is a controller, actions used this way will\nbubble to routes when the controller does not implement the specified action.\nOnce an action hits a route, it will bubble through the route hierarchy.</p>\n<h3 id=\"event-propagation\">Event Propagation</h3>\n<p><code>{{action}}</code> helpers called in element space can control event bubbling. Note\nthat the closure style actions cannot.</p>\n<p>Events triggered through the action helper will automatically have\n<code>.preventDefault()</code> called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;sayHello&quot;</span> preventDefault=false}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"builtin-name\">action</span> &apos;edit&apos; post bubbles=false}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To disable bubbling with closure style actions you must create your own\nwrapper helper that makes use of <code>event.stopPropagation()</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{disable-bubbling (<span class=\"built_in\">action</span> <span class=\"string\">&quot;sayHello&quot;</span>)}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight bubbling.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">bubbling.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { helper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component/helper&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">disableBubbling</span>(<span class=\"params\">[action]</span>) </span>{\n  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>{\n    event.stopPropagation();\n    <span class=\"keyword\">return</span> action(event);\n  };\n}\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> helper(disableBubbling);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See\n<a href=\"/ember/release/classes/Component\">&quot;Responding to Browser Events&quot;</a>\nin the documentation for <code>Component</code> for more information.</p>\n<h3 id=\"specifying-dom-event-type\">Specifying DOM event type</h3>\n<p><code>{{action}}</code> helpers called in element space can specify an event type.\nBy default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can\nsupply an <code>on</code> option to the helper to specify a different DOM event name:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> {{action <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"keyword\">on</span>=<span class=\"string\">&quot;doubleClick&quot;</span>}}&gt;\n  click <span class=\"keyword\">me</span>\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/ember/release/classes/Component\">&quot;Event Names&quot;</a> for a list of\nacceptable DOM event names.</p>\n<h3 id=\"specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3>\n<p><code>{{action}}</code> helpers called in element space can specify modifier keys.\nBy default the <code>{{action}}</code> helper will ignore click events with pressed modifier\nkeys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;anActionName&quot;</span> allowedKeys=<span class=\"string\">&quot;alt&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This way the action will fire when clicking with the alt key pressed down.\nAlternatively, supply &quot;any&quot; to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> {{action <span class=\"string\">&quot;anActionName&quot;</span> allowedKeys=<span class=\"string\">&quot;any&quot;</span>}}&gt;\n  click <span class=\"keyword\">me</span> <span class=\"keyword\">with</span> any key pressed\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-a-target\">Specifying a Target</h3>\n<p>A <code>target</code> option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;anActionName&quot;</span> target=someService}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/controllers/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n<span class=\"keyword\">import</span> { inject <span class=\"keyword\">as</span> service } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/service&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Controller.extend({\n  someService: service()\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "action",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/array.ts",
          "line": 9,
          "description": "<html><head></head><body><p>Use the <code>{{array}}</code> helper to create an array to pass as an option to your\ncomponents.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>&lt;MyComponent <span class=\"meta\">@people</span>={{array\n  <span class=\"string\">&apos;Tom Dade&apos;</span>\n  <span class=\"string\">&apos;Yehuda Katz&apos;</span>\n  <span class=\"keyword\">this</span>.myOtherPerson}}\n/&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{{my-component people=(<span class=\"keyword\">array</span>\n  <span class=\"string\">&apos;Tom Dade&apos;</span>\n  <span class=\"string\">&apos;Yehuda Katz&apos;</span>\n  <span class=\"keyword\">this</span>.myOtherPerson)\n}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in an object such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"symbol\">&apos;Tom</span> Date&apos;, <span class=\"symbol\">&apos;Yehuda</span> Katz&apos;, this.get(<span class=\"symbol\">&apos;myOtherPerson</span>&apos;)]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Where the 3rd item in the array is bound to updates of the <code>myOtherPerson</code> property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "array",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "Array",
            "type": "Array"
          },
          "since": "3.8.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/component.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>{{component}}</code> helper lets you add instances of <code>Component</code> to a\ntemplate. See <a href=\"/ember/release/classes/Component\">Component</a> for\nadditional information on how a <code>Component</code> functions.\n<code>{{component}}</code>&apos;s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges. This helper has three modes: inline, block, and nested.</p>\n<h3 id=\"inline-form\">Inline Form</h3>\n<p>Given the following template:</p>\n<div class=\"highlight app/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{component infographicComponentName}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the following application code:</p>\n<div class=\"highlight app/controllers/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n<span class=\"keyword\">import</span> { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Controller.extend({\n  <span class=\"attr\">infographicComponentName</span>: computed(<span class=\"string\">&apos;isMarketOpen&apos;</span>, {\n    <span class=\"keyword\">get</span>() {\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;isMarketOpen&apos;</span>)) {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;live-updating-chart&apos;</span>;\n      } <span class=\"keyword\">else</span> {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;market-close-summary&apos;</span>;\n      }\n    }\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is\n<code>true</code>, and the <code>market-close-summary</code> component will be appended when\n<code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;LiveUpdatingChart /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{live-updating-chart}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"block-form\">Block Form</h3>\n<p>Using the block form of this helper is similar to using the block form\nof a component. Given the following application template:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">component</span></span> infographicComponentName}}</span><span class=\"xml\">\n  Last update: </span><span class=\"template-variable\">{{lastUpdateTimestamp}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The following controller code:</p>\n<div class=\"highlight app/controllers/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n<span class=\"keyword\">import</span> { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Controller.extend({\n  <span class=\"attr\">lastUpdateTimestamp</span>: computed(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();\n  }),\n\n  <span class=\"attr\">infographicComponentName</span>: computed(<span class=\"string\">&apos;isMarketOpen&apos;</span>, {\n    <span class=\"keyword\">get</span>() {\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;isMarketOpen&apos;</span>)) {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;live-updating-chart&apos;</span>;\n      } <span class=\"keyword\">else</span> {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;market-close-summary&apos;</span>;\n      }\n    }\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the following component template:</p>\n<div class=\"highlight chart.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">chart.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{! chart }}\n{{yield}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>Last Update: {{lastUpdateTimestamp}}</code> will be rendered in place of the <code>{{yield}}</code>.</p>\n<h3 id=\"nested-usage\">Nested Usage</h3>\n<p>The <code>component</code> helper can be used to package a component path with initial attrs.\nThe included attrs can then be merged during the final invocation.\nFor example, given a <code>person-form</code> component with the following template:</p>\n<div class=\"highlight form.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">form.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{yield (<span class=\"name\"><span class=\"builtin-name\">hash</span></span>\n  nameInput=(<span class=\"name\">component</span> <span class=\"string\">&quot;my-input-component&quot;</span> value=model.name placeholder=<span class=\"string\">&quot;First Name&quot;</span>)\n)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When yielding the component via the <code>hash</code> helper, the component is invoked directly.\nSee the following snippet:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">PersonForm</span> <span class=\"attr\">as</span> |<span class=\"attr\">form</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">form.nameInput</span> @<span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">PersonForm</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>or</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#person-form as |form|}}\n  {{form.nameInput placeholder=<span class=\"string\">&quot;Username&quot;</span>}}\n{{/person-form}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Which outputs an input whose value is already bound to <code>model.name</code> and <code>placeholder</code>\nis &quot;Username&quot;.</p>\n<p>When yielding the component without the hash helper use the <code>component</code> helper.\nFor example, below is a <code>full-name</code> component template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{yield (<span class=\"name\">component</span> <span class=\"string\">&quot;my-input-component&quot;</span> value=model.name placeholder=<span class=\"string\">&quot;Name&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;FullName <span class=\"built_in\">as</span> |<span class=\"type\">field</span>|<span class=\"type\">&gt;\n  {{component</span> <span class=\"built_in\">field</span> placeholder=<span class=\"string\">&quot;Full name&quot;</span>}}\n&lt;/FullName&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>or</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">full-name</span> <span class=\"keyword\">as</span> |field|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{<span class=\"built_in\">component</span> field placeholder=<span class=\"string\">&quot;Full name&quot;</span>}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">full-name</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "component",
          "since": "1.11.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/concat.ts",
          "line": 19,
          "description": "<html><head></head><body><p>Concatenates the given arguments into a string.</p>\n<p>Example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{some-component name=(<span class=\"name\"><span class=\"builtin-name\">concat</span></span> firstName <span class=\"string\">&quot; &quot;</span> lastName)}}\n\n{{! would pass name=<span class=\"string\">&quot;&lt;first name value&gt; &lt;last name value&gt;&quot;</span> to the component}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or for angle bracket invocation, you actually don&apos;t need concat at all.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> @<span class=\"attr\">name</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">{{firstName}}</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\"> </span></span></span><span class=\"template-variable\">{{lastName}}</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">&quot;</span> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "concat",
          "since": "1.13.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension\nof the base Handlebars <code>{{#each}}</code> helper.\nThe default behavior of <code>{{#each}}</code> is to yield its inner block once for every\nitem in an array passing the item as the first block parameter.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>var developers = [{ <span class=\"string\">name:</span> <span class=\"string\">&apos;Yehuda&apos;</span> },{ <span class=\"string\">name:</span> <span class=\"string\">&apos;Tom&apos;</span> }, { <span class=\"string\">name:</span> <span class=\"string\">&apos;Paul&apos;</span> }];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developers <span class=\"attr\">key</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">as</span> |person|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">\n  </span><span class=\"comment\">{{! `this` is whatever it was outside the #each }}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The same rules apply to arrays of primitives.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">var</span> developerNames = [<span class=\"string\">&apos;Yehuda&apos;</span>, <span class=\"string\">&apos;Tom&apos;</span>, <span class=\"string\">&apos;Paul&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developerNames <span class=\"attr\">key</span>=<span class=\"string\">&quot;@index&quot;</span> <span class=\"keyword\">as</span> |name|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{name}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>During iteration, the index of each item in the array is provided as a second block parameter.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> people <span class=\"keyword\">as</span> |person index|}}</span><span class=\"xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello, </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">! You&apos;re number </span><span class=\"template-variable\">{{index}}</span><span class=\"xml\"> in line<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-keys\">Specifying Keys</h3>\n<p>The <code>key</code> option is used to tell Ember how to determine if the array being\niterated over with <code>{{#each}}</code> has changed between renders. By helping Ember\ndetect that some elements in the array are the same, DOM elements can be\nre-used, significantly improving rendering speed.</p>\n<p>For example, here&apos;s the <code>{{#each}}</code> helper with its <code>key</code> set to <code>id</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> model <span class=\"attr\">key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"keyword\">as</span> |item|}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When this <code>{{#each}}</code> re-renders, Ember will match up the previously rendered\nitems (and reorder the generated DOM elements) based on each item&apos;s <code>id</code>\nproperty.\nBy default the item&apos;s own reference is used.</p>\n<h3 id=\"else-condition\">{{else}} condition</h3>\n<p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render\nif the collection is empty.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developers <span class=\"keyword\">as</span> |person|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">else</span>}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Sorry, nobody is available for this task.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "each",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
          "line": 85,
          "description": "<html><head></head><body><p>The <code>{{each-in}}</code> helper loops over properties on an object.</p>\n<p>For example, given a <code>user</code> object that looks like:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Shelly Sails&quot;</span>,\n  <span class=\"attr\">&quot;age&quot;</span>: <span class=\"number\">42</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This template would display all properties on the <code>user</code>\nobject in a list:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span>-<span class=\"builtin-name\">in</span></span> user as |key value|}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{key}}</span><span class=\"xml\">: </span><span class=\"template-variable\">{{value}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span>-<span class=\"builtin-name\">in</span></span>}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Outputting their name and age.</p>\n</body></html>",
          "itemtype": "method",
          "name": "each-in",
          "access": "public",
          "tagname": "",
          "since": "2.1.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/fn.ts",
          "line": 15,
          "itemtype": "method",
          "description": "<html><head></head><body><p>The <code>fn</code> helper allows you to ensure a function that you are passing off\nto another component, helper, or modifier has access to arguments that are\navailable in the template.</p>\n<p>For example, if you have an <code>each</code> helper looping over a number of items, you\nmay need to pass a function that expects to receive the item as an argument\nto a component invoked within the loop. Here&apos;s how you could use the <code>fn</code>\nhelper to pass both the function and its arguments together:</p>\n<div class=\"highlight listing.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">listing.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> @items <span class=\"keyword\">as</span> |item|}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">DisplayItem</span> @<span class=\"attr\">item</span>=<span class=\"string\">item</span> @<span class=\"attr\">select</span>=</span></span><span class=\"template-variable\">{{fn this.handleSelected item}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight list.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">list.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span> handleSelected(item) {\n    <span class=\"comment\">// ...snip...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case the <code>display-item</code> component will receive a normal function\nthat it can invoke. When it invokes the function, the <code>handleSelected</code>\nfunction will receive the <code>item</code> and any arguments passed, thanks to the\n<code>fn</code> helper.</p>\n<p>Let&apos;s take look at what that means in a couple circumstances:</p>\n<ul>\n<li>When invoked as <code>this.args.select()</code> the <code>handleSelected</code> function will\nreceive the <code>item</code> from the loop as its first and only argument.</li>\n<li>When invoked as <code>this.args.select(&apos;foo&apos;)</code> the <code>handleSelected</code> function\nwill receive the <code>item</code> from the loop as its first argument and the\nstring <code>&apos;foo&apos;</code> as its second argument.</li>\n</ul>\n<p>In the example above, we used <code>@action</code> to ensure that <code>handleSelected</code> is\nproperly bound to the <code>items-list</code>, but let&apos;s explore what happens if we\nleft out <code>@action</code>:</p>\n<div class=\"highlight list.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">list.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  handleSelected(item) {\n    <span class=\"comment\">// ...snip...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, when <code>handleSelected</code> is invoked inside the <code>display-item</code>\ncomponent, it will <strong>not</strong> have access to the component instance. In other\nwords, it will have no <code>this</code> context, so please make sure your functions\nare bound (via <code>@action</code> or other means) before passing into <code>fn</code>!</p>\n<p>See also <a href=\"https://en.wikipedia.org/wiki/Partial_application\">partial application</a>.</p>\n</body></html>",
          "name": "fn",
          "access": "public",
          "tagname": "",
          "since": "3.11.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/get.ts",
          "line": 20,
          "description": "<html><head></head><body><p>Dynamically look up a property on an object. The second argument to <code>{{get}}</code>\nshould have a string value, although it can be bound.</p>\n<p>For example, these two usages are equivalent:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{person.height}}\n{{get person <span class=\"string\">&quot;height&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If there were several facts about a person, the <code>{{get}}</code> helper can dynamically\npick one:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{get person factName}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>For a more complex example, this template would allow the user to switch\nbetween showing the user&apos;s height and weight with a click:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">get</span> person factName}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> (fn (<span class=\"built_in\">mut</span> factName)) <span class=\"string\">&quot;height&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Show height<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> (fn (<span class=\"built_in\">mut</span> factName)) <span class=\"string\">&quot;weight&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Show weight<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>{{get}}</code> helper can also respect mutable values itself. For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> value=(<span class=\"built_in\">mut</span> (<span class=\"built_in\">get</span> person factName)) type=<span class=\"string\">&quot;text&quot;</span>}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> (fn (<span class=\"built_in\">mut</span> factName)) <span class=\"string\">&quot;height&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Show height<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> (fn (<span class=\"built_in\">mut</span> factName)) <span class=\"string\">&quot;weight&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Show weight<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would allow the user to swap what fact is being displayed, and also edit\nthat fact via a two-way mutable binding.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "get",
          "since": "2.1.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/hash.ts",
          "line": 9,
          "description": "<html><head></head><body><p>Use the <code>{{hash}}</code> helper to create a hash to pass as an option to your\ncomponents. This is specially useful for contextual components where you can\njust yield a hash:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{{yield (<span class=\"name\"><span class=\"builtin-name\">hash</span></span>\n   name=&apos;Sarah&apos;\n   title=office\n)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in an object such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{ <span class=\"attribute\">name</span>: <span class=\"string\">&apos;Sarah&apos;</span>, title: this.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;office&apos;</span>) }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Where the <code>title</code> is bound to updates of the <code>office</code> property.</p>\n<p>Note that the hash is an empty object with no prototype chain, therefore\ncommon methods like <code>toString</code> are not available in the resulting hash.\nIf you need to use such a method, you can use the <code>call</code> or <code>apply</code>\napproach:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"keyword\">to</span><span class=\"constructor\">String(<span class=\"params\">obj</span>)</span> {\n  return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>prototype.toString.apply(obj);\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "hash",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "Hash",
            "type": "Object"
          },
          "since": "2.3.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
          "line": 50,
          "description": "<html><head></head><body><p>The <code>if</code> helper allows you to conditionally render one of two branches,\ndepending on the &quot;truthiness&quot; of a property.\nFor example the following values are all falsey: <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code>, <code>0</code>, <code>NaN</code> or an empty array.</p>\n<p>This helper has two forms, block and inline.</p>\n<h2 id=\"block-form\">Block form</h2>\n<p>You can use the block form of <code>if</code> to conditionally render a section of the template.</p>\n<p>To use it, pass the conditional value to the <code>if</code> helper,\nusing the block form to wrap the section of template you want to conditionally render.\nLike so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! will not render if foo is falsey}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> foo}}</span><span class=\"xml\">\n  Welcome to the </span><span class=\"template-variable\">{{foo.bar}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also specify a template to show if the property is falsey by using\nthe <code>else</code> helper.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! is it raining outside?}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> isRaining}}</span><span class=\"xml\">\n  Yes, grab an umbrella!\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  No, it&apos;s lovely outside!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You are also able to combine <code>else</code> and <code>if</code> helpers to create more complex\nconditional logic.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> isMorning}}</span><span class=\"xml\">\n  Good morning\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> isAfternoon}}</span><span class=\"xml\">\n  Good afternoon\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  Good night\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"inline-form\">Inline form</h2>\n<p>The inline <code>if</code> helper conditionally renders a single property or string.</p>\n<p>In this form, the <code>if</code> helper receives three arguments, the conditional value,\nthe value to render when truthy, and the value to render when falsey.</p>\n<p>For example, if <code>useLongGreeting</code> is truthy, the following:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">if</span> useLongGreeting <span class=\"string\">&quot;Hello&quot;</span> <span class=\"string\">&quot;Hi&quot;</span>}}</span><span class=\"xml\"> Alex</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Will render:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">Hello Alex</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"nested-if\">Nested <code>if</code></h3>\n<p>You can use the <code>if</code> helper inside another helper as a nested helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> @<span class=\"attr\">height</span>=</span></span><span class=\"template-variable\">{{<span class=\"built_in\">if</span> isBig <span class=\"string\">&quot;100&quot;</span> <span class=\"string\">&quot;10&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{some-component height=(<span class=\"name\"><span class=\"builtin-name\">if</span></span> isBig <span class=\"string\">&quot;100&quot;</span> <span class=\"string\">&quot;10&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>One detail to keep in mind is that both branches of the <code>if</code> helper will be evaluated,\nso if you have <code>{{if condition &quot;foo&quot; (expensive-operation &quot;bar&quot;)</code>,\n<code>expensive-operation</code> will always calculate.</p>\n</body></html>",
          "itemtype": "method",
          "name": "if",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
          "line": 147,
          "description": "<html><head></head><body><p>The <code>unless</code> helper is the inverse of the <code>if</code> helper. It displays if a value\nis falsey (&quot;not true&quot; or &quot;is false&quot;). Example values that will display with\n<code>unless</code>: <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code>, <code>0</code>, <code>NaN</code> or an empty array.</p>\n<h2 id=\"inline-form\">Inline form</h2>\n<p>The inline <code>unless</code> helper conditionally renders a single property or string.\nThis helper acts like a ternary operator. If the first property is falsy,\nthe second argument will be displayed, otherwise, the third argument will be\ndisplayed</p>\n<p>For example, if <code>useLongGreeting</code> is false below:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">unless</span> useLongGreeting <span class=\"string\">&quot;Hi&quot;</span> <span class=\"string\">&quot;Hello&quot;</span>}}</span><span class=\"xml\"> Ben</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then it will display:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">Hi</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can use the <code>unless</code> helper inside another helper as a subexpression.\nIf isBig is not true, it will set the height to 10:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{! If isBig <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">true</span>, <span class=\"literal\">it</span> will set the height <span class=\"keyword\">to</span> <span class=\"number\">10.</span>}}\n&lt;SomeComponent @height={{<span class=\"keyword\">unless</span> isBig <span class=\"string\">&quot;10&quot;</span> <span class=\"string\">&quot;100&quot;</span>}} /&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{some-component height=(<span class=\"name\"><span class=\"builtin-name\">unless</span></span> isBig <span class=\"string\">&quot;10&quot;</span> <span class=\"string\">&quot;100&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"block-form\">Block form</h2>\n<p>Like the <code>if</code> helper, <code>unless</code> helper also has a block form.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! If greetings are found, the text below will not render.}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">unless</span></span> greetings}}</span><span class=\"xml\">\n  No greetings were found. Why not set one?\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">unless</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use an <code>else</code> helper with the <code>unless</code> block. The\n<code>else</code> will display if the value is truthy.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>{{! Is the<span class=\"built_in\"> user </span>logged <span class=\"keyword\">in</span>?}}\n{{#unless userData}}\n  Please login.\n{{<span class=\"keyword\">else</span>}}\n  Welcome back!\n{{/unless}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If <code>userData</code> is false, undefined, null, or empty in the above example,\nthen it will render:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>Please login.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unless",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/loc.ts",
          "line": 8,
          "description": "<html><head></head><body><p>Calls <a href=\"/ember/release/classes/String/methods/loc?anchor=loc\">String.loc</a> with the\nprovided string. This is a convenient way to localize text within a template.\nFor example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Ember.STRINGS = {\n  &apos;_welcome_&apos;: &apos;Bonjour&apos;\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> <span class=\"class\"><span class=\"keyword\">class</span>=&apos;<span class=\"title\">message</span>&apos;&gt;\n  </span>{{loc <span class=\"string\">&apos;_welcome_&apos;</span>}}\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;div <span class=\"keyword\">class</span>=&apos;<span class=\"symbol\">message</span>&apos;&gt;\n  <span class=\"symbol\">Bonjour</span>\n&lt;/<span class=\"symbol\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/ember/release/classes/String/methods/loc?anchor=loc\">String.loc</a> for how to\nset up localized string references.</p>\n</body></html>",
          "itemtype": "method",
          "name": "loc",
          "params": [
            {
              "name": "str",
              "description": "The string to format.",
              "type": "String"
            }
          ],
          "see": [
            "{String#loc}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/log.ts",
          "line": 7,
          "description": "<html><head></head><body><p><code>log</code> allows you to output the value of variables in the current rendering\ncontext. <code>log</code> also accepts primitive types such as strings or numbers.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{log <span class=\"string\">&quot;myVariable:&quot;</span> myVariable }}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "log",
          "params": [
            {
              "name": "params",
              "description": "",
              "type": "Array"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/mut.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>mut</code> helper lets you <strong>clearly specify</strong> that a child <code>Component</code> can update the\n(mutable) value passed to it, which will <strong>change the value of the parent component</strong>.</p>\n<p>To specify that a parameter is mutable, when invoking the child <code>Component</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{fn (<span class=\"built_in\">mut</span> totalClicks)}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-child childClickCount=(<span class=\"name\">mut</span> totalClicks)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The child <code>Component</code> can then modify the parent&apos;s value just by modifying its own\nproperty:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// my-child.js</span>\n<span class=\"keyword\">export</span> <span class=\"built_in\">default</span> Component.extend({\n  <span class=\"built_in\">click</span>() {\n    <span class=\"keyword\">this</span>.incrementProperty(<span class=\"string\">&apos;childClickCount&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that for curly components (<code>{{my-component}}</code>) the bindings are already mutable,\nmaking the <code>mut</code> unnecessary.</p>\n<p>Additionally, the <code>mut</code> helper can be combined with the <code>fn</code> helper to\nmutate a value. For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{this.totalClicks}}</span><span class=\"xml\"><span class=\"tag\"> @<span class=\"attr\">click-count-change</span>=</span></span><span class=\"template-variable\">{{fn (<span class=\"built_in\">mut</span> totalClicks))}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-child childClickCount=totalClicks click-count-change=(<span class=\"name\"><span class=\"builtin-name\">fn</span></span> (<span class=\"name\">mut</span> totalClicks))}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The child <code>Component</code> would invoke the function with the new click value:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// my-child.js</span>\n<span class=\"keyword\">export</span> <span class=\"built_in\">default</span> Component.extend({\n  <span class=\"built_in\">click</span>() {\n    <span class=\"keyword\">this</span>.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;click-count-change&apos;</span>)(<span class=\"keyword\">this</span>.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;childClickCount&apos;</span>) + <span class=\"number\">1</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>mut</code> helper changes the <code>totalClicks</code> value to what was provided as the <code>fn</code> argument.</p>\n<p>The <code>mut</code> helper, when used with <code>fn</code>, will return a function that\nsets the value passed to <code>mut</code> to its first argument. As an example, we can create a\nbutton that increments a value passing the value directly to the <code>fn</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{{! inc helper <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> provided <span class=\"keyword\">by</span> Ember }}\n&lt;button onclick={{fn (mut <span class=\"built_in\">count</span>) (inc <span class=\"built_in\">count</span>)}}&gt;\n  Increment <span class=\"built_in\">count</span>\n&lt;/button&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use the <code>value</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{name}}</span><span class=\"xml\"><span class=\"tag\"> <span class=\"attr\">oninput</span>=</span></span><span class=\"template-variable\">{{fn (<span class=\"built_in\">mut</span> name) value=<span class=\"string\">&quot;target.value&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mut",
          "params": [
            {
              "name": "attr",
              "description": "the \"two-way\" attribute that can be modified.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/query-param.ts",
          "line": 10,
          "description": "<html><head></head><body><p>This is a helper to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.</p>\n<p>Example</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;posts&apos; (query-params <span class=\"attr\">direction</span>=<span class=\"string\">&quot;asc&quot;</span>)}}</span><span class=\"xml\">Sort</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "query-params",
          "params": [
            {
              "name": "hash",
              "description": "takes a hash of query parameters",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A `QueryParams` object for `{{link-to}}`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/readonly.ts",
          "line": 8,
          "description": "<html><head></head><body><p>The <code>readonly</code> helper let&apos;s you specify that a binding is one-way only,\ninstead of two-way.\nWhen you pass a <code>readonly</code> binding from an outer context (e.g. parent component),\nto to an inner context (e.g. child component), you are saying that changing that\nproperty in the inner context does not change the value in the outer context.</p>\n<p>To specify that a binding is read-only, when invoking the child <code>Component</code>:</p>\n<div class=\"highlight parent.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"builtin-name\">export</span><span class=\"built_in\"> default </span>Component.extend({\n  totalClicks: 3\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"builtin-name\">log</span> totalClicks}}</span><span class=\"xml\"> // -&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{readonly totalClicks}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-child childClickCount=(<span class=\"name\">readonly</span> totalClicks)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Now, when you update <code>childClickCount</code>:</p>\n<div class=\"highlight child.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"built_in\">default</span> Component.extend({\n  <span class=\"built_in\">click</span>() {\n    <span class=\"keyword\">this</span>.incrementProperty(<span class=\"string\">&apos;childClickCount&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The value updates in the child component, but not the parent component:</p>\n<div class=\"highlight child.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"built_in\">log</span> childClickCount}} <span class=\"comment\">//-&gt; 4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"builtin-name\">log</span> totalClicks}}</span><span class=\"xml\"> //-&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{readonly totalClicks}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"built_in\">log</span> totalClicks}} <span class=\"comment\">//-&gt; 3</span>\n{{my-child childClickCount=(<span class=\"keyword\">readonly</span> totalClicks)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"objects-and-arrays\">Objects and Arrays</h3>\n<p>When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),\nonly the reference to the object is protected using the readonly helper.\nThis means that you can change properties of the object both on the parent component, as well as the child component.\nThe <code>readonly</code> binding behaves similar to the <code>const</code> keyword in JavaScript.</p>\n<p>Let&apos;s look at an example:</p>\n<p>First let&apos;s set up the parent component:</p>\n<div class=\"highlight parent.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component from <span class=\"string\">&apos;@ember/component&apos;</span>;\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  clicks: <span class=\"literal\">null</span>,\n\n  <span class=\"keyword\">init</span>() {\n    <span class=\"keyword\">this</span>._super(...arguments);\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;clicks&apos;</span>, { total: <span class=\"number\">3</span> });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"builtin-name\">log</span> clicks.total}}</span><span class=\"xml\"> //-&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClicks</span>=</span></span><span class=\"template-variable\">{{readonly clicks}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"built_in\">log</span> clicks.total}} <span class=\"comment\">//-&gt; 3</span>\n{{my-child childClicks=(<span class=\"keyword\">readonly</span> clicks)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Now, if you update the <code>total</code> property of <code>childClicks</code>:</p>\n<div class=\"highlight child.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component from <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"built_in\">default</span> Component.extend({\n  <span class=\"built_in\">click</span>() {\n    <span class=\"keyword\">this</span>.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;clicks&apos;</span>).incrementProperty(<span class=\"string\">&apos;total&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You will see the following happen:</p>\n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"builtin-name\">log</span> clicks.total}}</span><span class=\"xml\"> //-&gt; 4\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClicks</span>=</span></span><span class=\"template-variable\">{{readonly clicks}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight parent.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"built_in\">log</span> clicks.total}} <span class=\"comment\">//-&gt; 4</span>\n{{my-child childClicks=(<span class=\"keyword\">readonly</span> clicks)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight child.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"keyword\">log</span> childClicks.<span class=\"keyword\">total</span>}} <span class=\"comment\">//-&gt; 4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readonly",
          "params": [
            {
              "name": "attr",
              "description": "the read-only attribute.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/unbound.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>{{unbound}}</code> helper disconnects the one-way binding of a property,\nessentially freezing its value at the moment of rendering. For example,\nin this example the display of the variable <code>name</code> will not change even\nif it is set with a new value:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{unbound name}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Like any helper, the <code>unbound</code> helper can accept a nested helper expression.\nThis allows for custom helpers to be rendered unbound:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{{unbound (<span class=\"name\">some-custom-helper</span>)}}\n{{unbound (<span class=\"name\">capitalize</span> name)}}\n{{! You can use any helper, including unbound, in a nested expression }}\n{{capitalize (<span class=\"name\">unbound</span> name)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>unbound</code> helper only accepts a single argument, and it return an\nunbound value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "unbound",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/modifiers/on.ts",
          "line": 215,
          "itemtype": "method",
          "description": "<html><head></head><body><p>The <code>{{on}}</code> modifier lets you easily add event listeners (it uses\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">EventTarget.addEventListener</a>\ninternally).</p>\n<p>For example, if you&apos;d like to run a function on your component when a <code>&lt;button&gt;</code>\nin the components template is clicked you might do something like:</p>\n<div class=\"highlight post.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;button {{on <span class=\"string\">&apos;click&apos;</span> <span class=\"keyword\">this</span>.saveLike}}&gt;Like <span class=\"keyword\">this</span> post!&lt;/button&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikePostComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span> saveLike() {\n    <span class=\"comment\">// someone likes your post!</span>\n    <span class=\"comment\">// better send a request off to your server...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"arguments\">Arguments</h3>\n<p><code>{{on}}</code> accepts two positional arguments, and a few named arguments.</p>\n<p>The positional arguments are:</p>\n<ul>\n<li><code>event</code> -- the name to use when calling <code>addEventListener</code></li>\n<li><code>callback</code> -- the function to be passed to <code>addEventListener</code></li>\n</ul>\n<p>The named arguments are:</p>\n<ul>\n<li>capture -- a <code>true</code> value indicates that events of this type will be dispatched\nto the registered listener before being dispatched to any EventTarget beneath it\nin the DOM tree.</li>\n<li>once -- indicates that the listener should be invoked at most once after being\nadded. If true, the listener would be automatically removed when invoked.</li>\n<li>passive -- if <code>true</code>, indicates that the function specified by listener will never\ncall preventDefault(). If a passive listener does call preventDefault(), the user\nagent will do nothing other than generate a console warning. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners\">Improving scrolling performance with passive listeners</a>\nto learn more.</li>\n</ul>\n<p>The callback function passed to <code>{{on}}</code> will receive any arguments that are passed\nto the event handler. Most commonly this would be the <code>event</code> itself.</p>\n<p>If you would like to pass additional arguments to the function you should use\nthe <code>{{fn}}</code> helper.</p>\n<p>For example, in our example case above if you&apos;d like to pass in the post that\nwas being liked when the button is clicked you could do something like:</p>\n<div class=\"highlight post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;button {{on <span class=\"string\">&apos;click&apos;</span> (fn <span class=\"keyword\">this</span>.saveLike <span class=\"meta\">@post</span>)}}&gt;Like <span class=\"keyword\">this</span> post!&lt;/button&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, the <code>saveLike</code> function will receive two arguments: the click event\nand the value of <code>@post</code>.</p>\n<h3 id=\"function-context\">Function Context</h3>\n<p>In the example above, we used <code>@action</code> to ensure that <code>likePost</code> is\nproperly bound to the <code>items-list</code>, but let&apos;s explore what happens if we\nleft out <code>@action</code>:</p>\n<div class=\"highlight post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikePostComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  saveLike() {\n    <span class=\"comment\">// ...snip...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, when the button is clicked <code>saveLike</code> will be invoked,\nit will <strong>not</strong> have access to the component instance. In other\nwords, it will have no <code>this</code> context, so please make sure your functions\nare bound (via <code>@action</code> or other means) before passing into <code>on</code>!</p>\n</body></html>",
          "name": "on",
          "access": "public",
          "tagname": "",
          "since": "3.11.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/input.ts",
          "line": 29,
          "description": "<html><head></head><body><p>The <code>{{input}}</code> helper lets you create an HTML <code>&lt;input /&gt;</code> component.\nIt causes a <code>TextField</code> component to be rendered.  For more info,\nsee the <a href=\"/ember/release/classes/TextField\">TextField</a> docs and\nthe <a href=\"https://guides.emberjs.com/release/templates/input-helpers/\">templates guide</a>.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{input value=<span class=\"string\">&quot;987&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>renders as:</p>\n<div class=\"highlight HTML\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=&quot;text&quot; <span class=\"keyword\">value</span>=&quot;987&quot; /&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"text-field\">Text field</h3>\n<p>If no <code>type</code> option is specified, a default of type &apos;text&apos; is used.\nMany of the standard HTML attributes may be passed to this helper.</p>\n<table>\n  <tbody><tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n  <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n  <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n  <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n  <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n  <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n  <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n  <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n  <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n  <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&#xA0;</td></tr>\n</tbody></table>\nWhen set to a quoted string, these values will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate&apos;s current rendering context (most typically a controller instance).\nA very common use of this helper is to bind the `value` of an input to an Object&apos;s attribute:\n\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\">Search:\n</span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> value=searchWord}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, the initial value in the <code>&lt;input /&gt;</code> will be set to the value of <code>searchWord</code>.\nIf the user changes the text, the value of <code>searchWord</code> will also be updated.</p>\n<h3 id=\"actions\">Actions</h3>\n<p>The helper can send multiple actions based on user events.\nThe action property defines the action which is sent when\nthe user presses the return key.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> <span class=\"built_in\">action</span>=<span class=\"string\">&quot;submit&quot;</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The helper allows some user events to send actions.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n<li><code>key-up</code></li>\n</ul>\n<p>For example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{input focus-out=<span class=\"string\">&quot;alertMessage&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See more about <a href=\"/ember/release/classes/TextField\">Text Support Actions</a></p>\n<h3 id=\"extending-textfield\">Extending <code>TextField</code></h3>\n<p>Internally, <code>{{input type=&quot;text&quot;}}</code> creates an instance of <code>TextField</code>, passing\narguments from the helper to <code>TextField</code>&apos;s <code>create</code> method. You can extend the\ncapabilities of text inputs in your applications by reopening this class. For example,\nif you are building a Bootstrap project where <code>data-*</code> attributes are used, you\ncan add one to the <code>TextField</code>&apos;s <code>attributeBindings</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> TextField <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component/text-field&apos;</span>;\nTextField.reopen({\n  attributeBindings: [<span class=\"string\">&apos;data-error&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Keep in mind when writing <code>TextField</code> subclasses that <code>TextField</code>\nitself extends <code>Component</code>. Expect isolated component semantics, not\nlegacy 1.x view semantics (like <code>controller</code> being present).\nSee more about <a href=\"/ember/release/classes/Component\">Ember components</a></p>\n<h3 id=\"checkbox\">Checkbox</h3>\n<p>Checkboxes are special forms of the <code>{{input}}</code> helper.  To create a <code>&lt;checkbox /&gt;</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>Emberize Everything:\n{{input <span class=\"attribute\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attribute\">name</span>=<span class=\"string\">&quot;isEmberized&quot;</span> <span class=\"attribute\">checked</span>=isEmberized}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will bind checked state of this checkbox to the value of <code>isEmberized</code>  -- if either one changes,\nit will be reflected in the other.</p>\n<p>The following HTML attributes can be set via the helper:</p>\n<ul>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n<li><code>tabindex</code></li>\n<li><code>indeterminate</code></li>\n<li><code>name</code></li>\n<li><code>autofocus</code></li>\n<li><code>form</code></li>\n</ul>\n<h3 id=\"extending-checkbox\">Extending <code>Checkbox</code></h3>\n<p>Internally, <code>{{input type=&quot;checkbox&quot;}}</code> creates an instance of <code>Checkbox</code>, passing\narguments from the helper to <code>Checkbox</code>&apos;s <code>create</code> method. You can extend the\ncapablilties of checkbox inputs in your applications by reopening this class. For example,\nif you wanted to add a css class to all checkboxes in your application:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Checkbox <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component/checkbox&apos;</span>;\n\nCheckbox.reopen({\n  classNames: [<span class=\"string\">&apos;my-app-checkbox&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "input",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/let.ts",
          "line": 10,
          "description": "<html><head></head><body><p>The <code>let</code> helper receives one or more positional arguments and yields\nthem out as block params.</p>\n<p>This allows the developer to introduce shorter names for certain computations\nin the template.</p>\n<p>This is especially useful if you are passing properties to a component\nthat receives a lot of options and you want to clean up the invocation.</p>\n<p>For the following example, the template receives a <code>post</code> object with\n<code>content</code> and <code>title</code> properties.</p>\n<p>We are going to call the <code>my-post</code> component, passing a title which is\nthe title of the post suffixed with the name of the blog, the content\nof the post, and a series of options defined in-place.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">let</span>\n    (<span class=\"built_in\">concat</span> post.title &apos; | The Ember.js Blog&apos;)\n    post.content\n    (<span class=\"built_in\">hash</span>\n      <span class=\"attr\">theme</span>=<span class=\"string\">&quot;high-contrast&quot;</span>\n      <span class=\"attr\">enableComments</span>=true\n    )\n    <span class=\"keyword\">as</span> |title content options|\n}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">MyPost</span> @<span class=\"attr\">title</span>=</span></span><span class=\"template-variable\">{{title}}</span><span class=\"xml\"><span class=\"tag\"> @<span class=\"attr\">content</span>=</span></span><span class=\"template-variable\">{{content}}</span><span class=\"xml\"><span class=\"tag\"> @<span class=\"attr\">options</span>=</span></span><span class=\"template-variable\">{{options}}</span><span class=\"xml\"><span class=\"tag\"> /&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>{{#<span class=\"built_in\">let</span>\n    (<span class=\"built_in\">concat</span> post.<span class=\"built_in\">title</span> &apos; | The Ember.js Blog&apos;)\n    post.<span class=\"built_in\">content</span>\n    (hash\n      theme=<span class=\"string\">&quot;high-contrast&quot;</span>\n      enableComments=<span class=\"literal\">true</span>\n    )\n    as |<span class=\"built_in\">title</span> <span class=\"built_in\">content</span> options|\n}}\n  {{my-post <span class=\"built_in\">title</span>=<span class=\"built_in\">title</span> <span class=\"built_in\">content</span>=<span class=\"built_in\">content</span> options=options}}\n{{/<span class=\"built_in\">let</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "let",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/mount.ts",
          "line": 30,
          "description": "<html><head></head><body><p>The <code>{{mount}}</code> helper lets you embed a routeless engine in a template.\nMounting an engine will cause an instance to be booted and its <code>application</code>\ntemplate to be rendered.</p>\n<p>For example, the following template mounts the <code>ember-chat</code> engine:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{! application.hbs }}\n{{mount <span class=\"string\">&quot;ember-chat&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally, you can also pass in a <code>model</code> argument that will be\nset as the engines model. This can be an existing object:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"built-in\">div</span>&gt;\n  {{mount <span class=\"string\">&apos;admin&apos;</span> <span class=\"keyword\">model</span>=userSettings}}\n&lt;/<span class=\"built-in\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Or an inline <code>hash</code>, and you can even pass components:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Application template!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n  </span><span class=\"template-variable\">{{mount &apos;admin&apos; model=(<span class=\"built_in\">hash</span>\n      title=&apos;Secret Admin&apos;\n      signInButton=(<span class=\"built_in\">component</span> &apos;sign-in-button&apos;)\n  )}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "mount",
          "params": [
            {
              "name": "name",
              "description": "Name of the engine to mount.",
              "type": "String"
            },
            {
              "name": "model",
              "description": "Object that will be set as\n                        the model of the engine.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/outlet.ts",
          "line": 17,
          "description": "<html><head></head><body><p>The <code>{{outlet}}</code> helper lets you specify where a child route will render in\nyour template. An important use of the <code>{{outlet}}</code> helper is in your\napplication&apos;s <code>application.hbs</code> file:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! app/templates/application.hbs }}</span><span class=\"xml\">\n<span class=\"comment\">&lt;!-- header content goes here, and will always display --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">MyHeader</span> /&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-dynamic-content&quot;</span>&gt;</span>\n  <span class=\"comment\">&lt;!-- this content will change based on the current route, which depends on the current URL --&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"builtin-name\">outlet</span>}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n<span class=\"comment\">&lt;!-- footer content goes here, and will always display --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">MyFooter</span> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You may also specify a name for the <code>{{outlet}}</code>, which is useful when using more than one\n<code>{{outlet}}</code> in a template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{outlet <span class=\"string\">&quot;menu&quot;</span>}}\n{{outlet <span class=\"string\">&quot;sidebar&quot;</span>}}\n{{outlet <span class=\"string\">&quot;main&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Your routes can then render into a specific one of these <code>outlet</code>s by specifying the <code>outlet</code>\nattribute in your <code>renderTemplate</code> function:</p>\n<div class=\"highlight app/routes/menu.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/menu.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Route <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/routing/route&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Route.extend({\n  renderTemplate() {\n    <span class=\"keyword\">this</span>.render({ outlet: <span class=\"string\">&apos;menu&apos;</span> });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See the <a href=\"https://guides.emberjs.com/release/routing/rendering-a-template/\">routing guide</a> for more\ninformation on how your <code>route</code> interacts with the <code>{{outlet}}</code> helper.\nNote: Your content <strong>will not render</strong> if there isn&apos;t an <code>{{outlet}}</code> for it.</p>\n</body></html>",
          "itemtype": "method",
          "name": "outlet",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 91,
          "description": "<html><head></head><body><p>Use the <code>{{with}}</code> helper when you want to alias a property to a new name. This is helpful\nfor semantic clarity as it allows you to retain default scope or to reference a property from another\n<code>{{with}}</code> block.</p>\n<p>If the aliased property is &quot;falsey&quot;, for example: <code>false</code>, <code>undefined</code> <code>null</code>, <code>&quot;&quot;</code>, <code>0</code>, <code>NaN</code> or\nan empty array, the block will not be rendered.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! Will only render if user.posts contains items}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">with</span></span> user.posts <span class=\"keyword\">as</span> |blogPosts|}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;notice&quot;</span>&gt;</span>\n    There are </span><span class=\"template-variable\">{{blogPosts.length}}</span><span class=\"xml\"> blog posts written by </span><span class=\"template-variable\">{{user.name}}</span><span class=\"xml\">.\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> blogPosts <span class=\"keyword\">as</span> |post|}}</span><span class=\"xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{post.title}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: The alias should not reuse a name from the bound property path.</p>\n<p>For example: <code>{{#with foo.bar as |foo|}}</code> is not supported because it attempts to alias using\nthe first part of the property path, <code>foo</code>. Instead, use <code>{{#with foo.bar as |baz|}}</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "with",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 123,
          "description": "<html><head></head><body><p><code>{{yield}}</code> denotes an area of a template that will be rendered inside\nof another template.</p>\n<h3 id=\"use-with-component\">Use with <code>Component</code></h3>\n<p>When designing components <code>{{yield}}</code> is used to denote where, inside the component&apos;s\ntemplate, an optional block passed to the component should render:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">labeled-textfield</span> <span class=\"attr\">value</span>=someProperty}}</span><span class=\"xml\">\n  First name:\n</span><span class=\"template-tag\">{{/<span class=\"name\">labeled-textfield</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight textfield.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">textfield.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"built_in\">yield</span>}}</span><span class=\"xml\"> </span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> value=value}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">label</span>&gt;\n  First name: &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;\n&lt;/<span class=\"keyword\">label</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally you can <code>yield</code> properties into the context for use by the consumer:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">labeled-textfield</span> <span class=\"attr\">value</span>=someProperty <span class=\"attr\">validator</span>=(<span class=\"built_in\">action</span> &apos;firstNameValidator&apos;) <span class=\"keyword\">as</span> |validationError|}}</span><span class=\"xml\">\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> validationError}}</span><span class=\"xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span></span><span class=\"template-variable\">{{validationError}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\">\n  First name:\n</span><span class=\"template-tag\">{{/<span class=\"name\">labeled-textfield</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight textfield.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">textfield.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"built_in\">yield</span> validationError}}</span><span class=\"xml\"> </span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> value=value}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span>First Name must be at least 3 characters long.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n  First name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "yield",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 184,
          "description": "<html><head></head><body><p><code>{{has-block}}</code> indicates if the component was invoked with a block.</p>\n<p>This component is invoked with a block:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\">\n  Hi Jen!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This component is invoked without a block:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-component}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using angle bracket invocation, this looks like:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span>Hi Jen!<span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span> </span><span class=\"comment\">{{! with a block}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span> </span><span class=\"comment\">{{! without a block}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is useful when you want to create a component that can optionally take a block\nand then render a default template when it is not invoked with a block.</p>\n<div class=\"highlight component.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"comment\">#if (has-block)}}</span>\n  Welcome {{<span class=\"keyword\">yield</span>}}, we are happy yo<span class=\"string\">u&apos;re here!\n{{else}}\n  Hey you! You&apos;</span>re great!\n{{/<span class=\"keyword\">if</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "hasBlock",
          "params": [
            {
              "name": "the",
              "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
              "type": "String"
            }
          ],
          "return": {
            "description": "`true` if the component was invoked with a block",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 226,
          "description": "<html><head></head><body><p><code>{{has-block-params}}</code> indicates if the component was invoked with block params.</p>\n<p>This component is invoked with block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"builtin-name\">component</span></span> <span class=\"keyword\">as</span> |favoriteFlavor|}}</span><span class=\"xml\">\n  Hi Jen!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This component is invoked without block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\">\n  Hi Jenn!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"builtin-name\">component</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is useful when you want to create a component that can render itself\ndifferently when it is not invoked with block params.</p>\n<div class=\"highlight component.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> (has-block-params)}}</span><span class=\"xml\">\n  Welcome </span><span class=\"template-variable\">{{<span class=\"builtin-name\">yield</span> favoriteFlavor}}</span><span class=\"xml\">, we&apos;re happy you&apos;re here and hope you\n  enjoy your favorite ice cream flavor.\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  Welcome </span><span class=\"template-variable\">{{<span class=\"builtin-name\">yield</span>}}</span><span class=\"xml\">, we&apos;re happy you&apos;re here, but we&apos;re unsure what\n  flavor ice cream you would enjoy.\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "hasBlockParams",
          "params": [
            {
              "name": "the",
              "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
              "type": "String"
            }
          ],
          "return": {
            "description": "`true` if the component was invoked with block params",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 263,
          "description": "<html><head></head><body><p>Execute the <code>debugger</code> statement in the current template&apos;s context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{debugger}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When using the debugger helper you will have access to a <code>get</code> function. This\nfunction retrieves values available in the context of the template.\nFor example, if you&apos;re wondering why a value <code>{{foo}}</code> isn&apos;t rendering as\nexpected within a template, you could place a <code>{{debugger}}</code> statement and,\nwhen the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"function\"><span class=\"title\">get</span>(<span class=\"string\">&apos;foo&apos;</span>)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p><code>get</code> is also aware of keywords. So in this situation</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> items <span class=\"keyword\">as</span> |item|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{<span class=\"built_in\">debugger</span>}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You&apos;ll be able to get values from the current item:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"keyword\">get</span>(&apos;<span class=\"built_in\">item</span>.<span class=\"built_in\">name</span>&apos;)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>You can also access the context of the view to make sure it is the object that\nyou expect:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"quote\">&gt; context</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "debugger",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 306,
          "description": "<html><head></head><body><p>The <code>partial</code> helper renders another template without\nchanging the template context:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{foo}}\n{{partial <span class=\"string\">&quot;nav&quot;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above example template will render a template named\n&quot;-nav&quot;, which has the same context as the parent template\nit&apos;s rendered into, so if the &quot;-nav&quot; template also referenced\n<code>{{foo}}</code>, it would print the same thing as the <code>{{foo}}</code>\nin the above example.</p>\n<p>If a &quot;-nav&quot; template isn&apos;t found, the <code>partial</code> helper will\nfall back to a template named &quot;nav&quot;.</p>\n<h3 id=\"bound-template-names\">Bound template names</h3>\n<p>The parameter supplied to <code>partial</code> can also be a path\nto a property containing a template name, e.g.:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{partial someTemplateName}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above example will look up the value of <code>someTemplateName</code>\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If <code>someTemplateName</code>\nchanges, the partial will be re-rendered using the new template\nname.</p>\n</body></html>",
          "itemtype": "method",
          "name": "partial",
          "params": [
            {
              "name": "partialName",
              "description": "The name of the template to render minus the leading underscore.",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.12.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.12.0",
          "type": "project-version"
        }
      }
    }
  }
}