{
  "data": {
    "id": "ember-1.13.7-RSVP.EventTarget",
    "type": "class",
    "attributes": {
      "name": "RSVP.EventTarget",
      "shortname": "RSVP.EventTarget",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "file": "bower_components/rsvp/lib/rsvp/events.js",
      "line": 19,
      "methods": [
        {
          "file": "bower_components/rsvp/lib/rsvp/events.js",
          "line": 24,
          "description": "<html><head></head><body><p><code>RSVP.EventTarget.mixin</code> extends an object with EventTarget methods. For\nExample:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>var object = {};\n\nRSVP.EventTarget.<span class=\"keyword\">mixin</span>(object);\n\nobject.on(<span class=\"string\">&apos;finished&apos;</span>, function(event) {\n  <span class=\"comment\">// handle event</span>\n});\n\nobject.trigger(<span class=\"string\">&apos;finished&apos;</span>, { detail: value });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>EventTarget.mixin</code> also works with prototypes:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{};\nRSVP.EventTarget.mixin(Person.prototype);\n\n<span class=\"keyword\">var</span> yehuda = <span class=\"keyword\">new</span> Person();\n<span class=\"keyword\">var</span> tom = <span class=\"keyword\">new</span> Person();\n\nyehuda.on(<span class=\"string\">&apos;poke&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;Yehuda says OW&apos;</span>);\n});\n\ntom.on(<span class=\"string\">&apos;poke&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;Tom says OW&apos;</span>);\n});\n\nyehuda.trigger(<span class=\"string\">&apos;poke&apos;</span>);\ntom.trigger(<span class=\"string\">&apos;poke&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mixin",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "object",
              "description": "object to extend with EventTarget methods",
              "type": "Object"
            }
          ],
          "class": "RSVP.EventTarget"
        },
        {
          "file": "bower_components/rsvp/lib/rsvp/events.js",
          "line": 74,
          "description": "<html><head></head><body><p>Registers a callback to be executed when <code>eventName</code> is triggered</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;event&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(eventInfo)</span><span class=\"comment\">{\n  // handle the event\n}</span>);</span>\n\n<span class=\"keyword\">object</span>.trigger(<span class=\"string\">&apos;event&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "on",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "eventName",
              "description": "name of the event to listen for",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "function to be called when the event is triggered.",
              "type": "Function"
            }
          ],
          "class": "RSVP.EventTarget"
        },
        {
          "file": "bower_components/rsvp/lib/rsvp/events.js",
          "line": 105,
          "description": "<html><head></head><body><p>You can use <code>off</code> to stop firing a particular callback for an event:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> doStuff() { // <span class=\"keyword\">do</span> stuff! }\n<span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;stuff&apos;</span>, doStuff);\n\n<span class=\"keyword\">object</span>.<span class=\"keyword\">trigger</span>(<span class=\"string\">&apos;stuff&apos;</span>); // doStuff will be <span class=\"keyword\">called</span>\n\n// Unregister <span class=\"keyword\">ONLY</span> the doStuff callback\n<span class=\"keyword\">object</span>.<span class=\"keyword\">off</span>(<span class=\"string\">&apos;stuff&apos;</span>, doStuff);\n<span class=\"keyword\">object</span>.<span class=\"keyword\">trigger</span>(<span class=\"string\">&apos;stuff&apos;</span>); // doStuff will <span class=\"keyword\">NOT</span> be <span class=\"keyword\">called</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you don&apos;t pass a <code>callback</code> argument to <code>off</code>, ALL callbacks for the\nevent will not be executed when the event fires. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> callback1 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span><span class=\"comment\">{}</span>;</span>\n<span class=\"keyword\">var</span> callback2 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span><span class=\"comment\">{}</span>;</span>\n\n<span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;stuff&apos;</span>, callback1);\n<span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;stuff&apos;</span>, callback2);\n\n<span class=\"keyword\">object</span>.trigger(<span class=\"string\">&apos;stuff&apos;</span>); <span class=\"comment\">// callback1 and callback2 will be executed.</span>\n\n<span class=\"keyword\">object</span>.off(<span class=\"string\">&apos;stuff&apos;</span>);\n<span class=\"keyword\">object</span>.trigger(<span class=\"string\">&apos;stuff&apos;</span>); <span class=\"comment\">// callback1 and callback2 will not be executed!</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "off",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "eventName",
              "description": "event to stop listening to",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "optional argument. If given, only the function\ngiven will be removed from the event's callback queue. If no `callback`\nargument is given, all callbacks will be removed from the event's callback\nqueue.",
              "type": "Function"
            }
          ],
          "class": "RSVP.EventTarget"
        },
        {
          "file": "bower_components/rsvp/lib/rsvp/events.js",
          "line": 159,
          "description": "<html><head></head><body><p>Use <code>trigger</code> to fire custom events. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;foo&apos;</span>, <span class=\"keyword\">function</span>(){\n  console.log(<span class=\"string\">&apos;foo event happened!&apos;</span>);\n});\n<span class=\"keyword\">object</span>.<span class=\"keyword\">trigger</span>(<span class=\"string\">&apos;foo&apos;</span>);\n// <span class=\"string\">&apos;foo event happened!&apos;</span> <span class=\"keyword\">logged</span> <span class=\"keyword\">to</span> the console</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also pass a value as a second argument to <code>trigger</code> that will be\npassed as an argument to all event listeners for the event:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">object</span>.<span class=\"keyword\">on</span>(<span class=\"string\">&apos;foo&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"keyword\">value</span>){\n  console.log(<span class=\"keyword\">value</span>.name);\n});\n\n<span class=\"keyword\">object</span>.<span class=\"keyword\">trigger</span>(<span class=\"string\">&apos;foo&apos;</span>, { <span class=\"type\">name</span>: <span class=\"string\">&apos;bar&apos;</span> });\n// <span class=\"string\">&apos;bar&apos;</span> <span class=\"keyword\">logged</span> <span class=\"keyword\">to</span> the console</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "trigger",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "eventName",
              "description": "name of the event to be triggered",
              "type": "String"
            },
            {
              "name": "options",
              "description": "optional value to be passed to any event handlers for\nthe given `eventName`",
              "type": "Any"
            }
          ],
          "class": "RSVP.EventTarget"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.13.7-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.13.7",
          "type": "project-version"
        }
      }
    }
  }
}