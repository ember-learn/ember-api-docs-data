{
  "data": {
    "id": "ember-2.7.3-ember",
    "type": "module",
    "attributes": {
      "name": "ember",
      "submodules": {
        "ember-application": 1,
        "ember-debug": 1,
        "ember-extension-support": 1,
        "ember-views": 1,
        "ember-templates": 1,
        "ember-htmlbars": 1,
        "ember-routing": 1,
        "ember-runtime": 1,
        "ember-testing": 1
      },
      "elements": {},
      "fors": {
        "Ember": 1,
        "Ember.Templates.helpers": 1,
        "Ember.HTMLBars": 1,
        "Ember.String": 1,
        "Ember.FEATURES": 1,
        "Ember.ControllerMixin": 1,
        "Ember.Route": 1,
        "Ember.computed": 1,
        "Ember.inject": 1,
        "Function": 1,
        "String": 1,
        "Ember.Test": 1
      },
      "namespaces": {
        "Ember.ApplicationInstance": 1,
        "Ember": 1,
        "Ember.Instrumentation": 1,
        "Ember.Test": 1
      },
      "tag": "module",
      "file": "packages/ember-views/lib/views/view.js",
      "line": 20,
      "parent": null,
      "publicclasses": [
        "Ember.ApplicationInstance",
        "Ember.ApplicationInstance.BootOptions",
        "Ember.Application",
        "Ember.DefaultResolver",
        "Ember.Debug",
        "Ember.ContainerDebugAdapter",
        "Ember.DataAdapter",
        "Ember.Checkbox",
        "Ember.TextArea",
        "Ember.TextField",
        "Ember.Component",
        "Ember.Helper",
        "Ember.ComputedProperty",
        "Ember.Error",
        "Ember.Mixin",
        "Ember.Route",
        "Ember.Router",
        "Ember.Controller",
        "Ember.Array",
        "Ember.Evented",
        "Ember.MutableArray",
        "Ember.MutableEnumerable",
        "Ember.Observable",
        "Ember.PromiseProxyMixin",
        "Ember.ArrayProxy",
        "Ember.CoreObject",
        "Ember.Namespace",
        "Ember.NativeArray",
        "Ember.Object",
        "Ember.ObjectProxy",
        "Ember.Service",
        "Ember.Test.Adapter",
        "Ember.Test.QUnitAdapter",
        "Ember.Test",
        "Ember.InstrumentationSupport",
        "Ember.VisibilitySupport"
      ],
      "privateclasses": [
        "Transition",
        "RSVP.EventTarget",
        "RSVP.Promise",
        "Ember.LinkComponent",
        "Ember.Binding",
        "Backburner",
        "Ember.InjectedProperty",
        "Libraries",
        "Ember.OrderedSet",
        "Ember.Map",
        "Ember.MapWithDefault",
        "Ember.ControllerMixin",
        "Ember.HashLocation",
        "Ember.HistoryLocation",
        "Ember.NoneLocation",
        "RoutingService",
        "Ember.ProxyMixin",
        "Ember.ActionHandler",
        "Ember.Comparable",
        "ContainerProxyMixin",
        "Ember.Copyable",
        "Ember.Enumerable",
        "Ember.Freezable",
        "RegistryProxyMixin",
        "Ember.TargetActionSupport",
        "Ember.EachProxy",
        "Ember.AriaRoleSupport",
        "Ember.ClassNamesSupport",
        "Ember.LegacyViewSupport",
        "Ember.TextSupport",
        "Ember.ViewTargetActionSupport",
        "Ember.EventDispatcher",
        "Ember.CoreView",
        "Ember.View"
      ],
      "staticfunctions": {
        "Ember.Test": [
          {
            "file": "packages/ember-testing/lib/test/waiters.js",
            "line": 74,
            "description": "Iterates through each registered test waiter, and invokes\nits callback. If any waiter returns false, this method will return\ntrue indicating that the waiters have not settled yet.\n\nThis is generally used internally from the acceptance/integration test\ninfrastructure.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "checkWaiters",
            "class": "Ember.Test",
            "module": "ember",
            "version": "2.7.3",
            "since": "2.7.3"
          }
        ],
        "Ember.Mixin": [
          {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 499,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
              {
                "name": "arguments",
                "description": "",
                "multiple": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "version": "2.7.3",
            "since": "2.7.3"
          }
        ],
        "Ember.CoreObject": [
          {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 647,
            "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend`.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
              {
                "name": "arguments",
                "description": "",
                "optional": true,
                "multiple": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "version": "2.7.3",
            "since": "2.7.3"
          },
          {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 539,
            "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()` method.\nFor example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the\nimplementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.');\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class.\nThe `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance\nof the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
              {
                "name": "mixins",
                "description": "One or more Mixin classes",
                "type": "Mixin",
                "optional": true,
                "multiple": true
              },
              {
                "name": "arguments",
                "description": "Object containing values to use within the new class",
                "type": "Object",
                "optional": true,
                "multiple": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "version": "2.7.3",
            "since": "2.7.3"
          }
        ],
        "Ember.Helper": [
          {
            "file": "packages/ember-htmlbars/lib/helper.js",
            "line": 94,
            "description": "In many cases, the ceremony of a full `Ember.Helper` class is not required.\nThe `helper` method creates pure-function helpers without instances. For\nexample:\n\n```js\n// app/helpers/format-currency.js\nexport function formatCurrency([cents], hash) {\n  let currency = hash.currency;\n  return `${currency}${cents * 0.01}`;\n});\n\nexport default Ember.Helper.helper(formatCurrency);\n\n// tests/myhelper.js\nimport { formatCurrency } from ..../helpers/myhelper\n// add some tests\n```",
            "static": 1,
            "params": [
              {
                "name": "helper",
                "description": "The helper function",
                "type": "Function"
              }
            ],
            "itemtype": "method",
            "name": "helper",
            "access": "public",
            "tagname": "",
            "since": "2.7.3",
            "class": "Ember.Helper",
            "module": "ember",
            "submodule": "ember-templates",
            "version": "2.7.3"
          }
        ],
        "Ember.String": [
          {
            "file": "packages/ember-htmlbars/lib/utils/string.js",
            "line": 10,
            "description": "Mark a string as safe for unescaped output with Ember templates. If you\nreturn HTML from a helper, use this function to\nensure Ember's rendering layer does not escape the HTML.\n\n```javascript\nEmber.String.htmlSafe('<div>someString</div>')\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "static": 1,
            "return": {
              "description": "A string that will not be HTML escaped by Handlebars.",
              "type": "Handlebars.SafeString"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-htmlbars",
            "version": "2.7.3",
            "since": "2.7.3"
          }
        ],
        "Ember.Debug": [
          {
            "file": "packages/ember-debug/lib/index.js",
            "line": 224,
            "description": "Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to [Ember.deprecate](http://emberjs.com/api/classes/Ember.html#method_deprecate).\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word \"should\", otherwise defers to the default handler.\n\n```javascript\nEmber.Debug.registerDeprecationHandler((message, options, next) => {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n}\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerDeprecationHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle deprecation calls.",
                "type": "Function"
              }
            ],
            "since": "2.7.3",
            "class": "Ember.Debug",
            "module": "ember",
            "submodule": "ember-debug",
            "version": "2.7.3"
          },
          {
            "file": "packages/ember-debug/lib/index.js",
            "line": 260,
            "description": "Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to [Ember.warn](http://emberjs.com/api/classes/Ember.html#method_warn).\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember's\ndefault warning behavior.\n\n```javascript\n// next is not called, so no warnings get the default behavior\nEmber.Debug.registerWarnHandler(() => {});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerWarnHandler",
            "params": [
              {
                "name": "handler",
                "description": "A function to handle warnings.",
                "type": "Function"
              }
            ],
            "since": "2.7.3",
            "class": "Ember.Debug",
            "module": "ember",
            "submodule": "ember-debug",
            "version": "2.7.3"
          }
        ]
      },
      "version": "2.7.3"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-2.7.3",
          "type": "project-version"
        }
      }
    }
  }
}