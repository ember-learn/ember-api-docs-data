{
  "data": {
    "id": "ember-1.10.1-Ember.Handlebars",
    "type": "class",
    "attributes": {
      "name": "Ember.Handlebars",
      "shortname": "Ember.Handlebars",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-htmlbars",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-htmlbars/lib/compat/handlebars-get.js",
          "line": 6,
          "description": "Lookup both on root and on window. If the path starts with\na keyword, the corresponding object will be looked up in the\ntemplate's data hash and used to resolve the path.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "root",
              "description": "The object to look up the property on",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The path to be lookedup",
              "type": "String"
            },
            {
              "name": "options",
              "description": "The template's option hash",
              "type": "Object"
            }
          ],
          "deprecated": true,
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-htmlbars/lib/compat/make-bound-helper.js",
          "line": 19,
          "description": "A helper function used by `registerBoundHelper`. Takes the\nprovided Handlebars helper function fn and returns it in wrapped\nbound helper form.\n\nThe main use case for using this outside of `registerBoundHelper`\nis for registering helpers on the container:\n\n```js\nvar boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {\n  return word.toUpperCase();\n});\n\ncontainer.register('helper:my-bound-helper', boundHelperFn);\n```\n\nIn the above example, if the helper function hadn't been wrapped in\n`makeBoundHelper`, the registered helper would be unbound.",
          "itemtype": "method",
          "name": "makeBoundHelper",
          "params": [
            {
              "name": "function",
              "description": "",
              "type": "Function"
            },
            {
              "name": "dependentKeys",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "since": "1.2.0",
          "deprecated": true,
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-htmlbars/lib/compat/register-bound-helper.js",
          "line": 11,
          "description": "Register a bound handlebars helper. Bound helpers behave similarly to regular\nhandlebars helpers, with the added ability to re-render when the underlying data\nchanges.\n\n## Simple example\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalize', function(value) {\n  return Ember.String.capitalize(value);\n});\n```\n\nThe above bound helper can be used inside of templates as follows:\n\n```handlebars\n{{capitalize name}}\n```\n\nIn this case, when the `name` property of the template's context changes,\nthe rendered value of the helper will update to reflect this change.\n\n## Example with options\n\nLike normal handlebars helpers, bound helpers have access to the options\npassed into the helper call.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('repeat', function(value, options) {\n  var count = options.hash.count;\n  var a = [];\n  while(a.length < count) {\n      a.push(value);\n  }\n  return a.join('');\n});\n```\n\nThis helper could be used in a template as follows:\n\n```handlebars\n{{repeat text count=3}}\n```\n\n## Example with bound options\n\nBound hash options are also supported. Example:\n\n```handlebars\n{{repeat text count=numRepeats}}\n```\n\nIn this example, count will be bound to the value of\nthe `numRepeats` property on the context. If that property\nchanges, the helper will be re-rendered.\n\n## Example with extra dependencies\n\nThe `Ember.Handlebars.registerBoundHelper` method takes a variable length\nthird parameter which indicates extra dependencies on the passed in value.\nThis allows the handlebars helper to update when these dependencies change.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalizeName', function(value) {\n  return value.get('name').toUpperCase();\n}, 'name');\n```\n\n## Example with multiple bound properties\n\n`Ember.Handlebars.registerBoundHelper` supports binding to\nmultiple properties, e.g.:\n\n```javascript\nEmber.Handlebars.registerBoundHelper('concatenate', function() {\n  var values = Array.prototype.slice.call(arguments, 0, -1);\n  return values.join('||');\n});\n```\n\nWhich allows for template syntax such as `{{concatenate prop1 prop2}}` or\n`{{concatenate prop1 prop2 prop3}}`. If any of the properties change,\nthe helper will re-render.  Note that dependency keys cannot be\nusing in conjunction with multi-property helpers, since it is ambiguous\nwhich property the dependent keys would belong to.\n\n## Use with unbound helper\n\nThe `{{unbound}}` helper can be used with bound helper invocations\nto render them in their unbound form, e.g.\n\n```handlebars\n{{unbound capitalize name}}\n```\n\nIn this example, if the name property changes, the helper\nwill not re-render.\n\n## Use with blocks not supported\n\nBound helpers do not support use with Handlebars blocks or\nthe addition of child views of any kind.",
          "itemtype": "method",
          "name": "registerBoundHelper",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "function",
              "description": "",
              "type": "Function"
            },
            {
              "name": "dependentKeys",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-htmlbars/lib/system/bootstrap.js",
          "line": 20,
          "description": "Find templates stored in the head tag as script tags and make them available\nto `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run\nas as jQuery DOM-ready callback.\n\nScript tags with `text/x-handlebars` will be compiled\nwith Ember's Handlebars and are suitable for use as a view's template.\nThose with type `text/x-raw-handlebars` will be compiled with regular\nHandlebars and are suitable for use in views' computed properties.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "bootstrap",
          "static": 1,
          "params": [
            {
              "name": "ctx",
              "description": ""
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.10.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.10.1",
          "type": "project-version"
        }
      }
    }
  }
}