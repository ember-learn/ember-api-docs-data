{
  "data": {
    "id": "ember-3.14.3-EmberArray",
    "type": "class",
    "attributes": {
      "name": "EmberArray",
      "shortname": "EmberArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "MutableArray"
      ],
      "module": "@ember/array",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 184,
      "description": "This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.\n\nFor example, ArrayProxy is a concrete class that can be instantiated to\nimplement array-like behavior. This class uses the Array Mixin by way of\nthe MutableArray mixin, which allows observable changes to be made to the\nunderlying array.\n\nThis mixin defines methods specifically for collections that provide\nindex-ordered access to their contents. When you are designing code that\nneeds to accept any kind of Array-like object, you should use these methods\ninstead of Array primitives because these will properly notify observers of\nchanges to the array.\n\nAlthough these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and \"virtual\" arrays such\nas controllers and collections.\n\nYou can use the methods defined in this module to access and modify array\ncontents in an observable-friendly way. You can also be notified whenever\nthe membership of an array changes by using `.observes('myArray.[]')`.\n\nTo support `EmberArray` in your own class, you must override two\nprimitives to use it: `length()` and `objectAt()`.",
      "uses": [
        "Enumerable"
      ],
      "since": "Ember 0.9.0",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 230,
          "description": "Returns the object at the given `index`. If the given `index` is negative\nor is greater or equal than the array length, returns `undefined`.\n\nThis is one of the primitives you must implement to support `EmberArray`.\nIf your object supports retrieving the value of an array item using `get()`\n(i.e. `myArray.get(0)`), then you do not need to implement this method\nyourself.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\n\narr.objectAt(0);   // 'a'\narr.objectAt(3);   // 'd'\narr.objectAt(-1);  // undefined\narr.objectAt(4);   // undefined\narr.objectAt(5);   // undefined\n```",
          "itemtype": "method",
          "name": "objectAt",
          "params": [
            {
              "name": "idx",
              "description": "The index of the item to return.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "item at index or undefined",
            "type": "*"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 255,
          "description": "This returns the objects at the specified indexes, using `objectAt`.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\n\narr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']\narr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]\n```",
          "itemtype": "method",
          "name": "objectsAt",
          "params": [
            {
              "name": "indexes",
              "description": "An array of indexes of items to return.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 325,
          "description": "Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.\n\n```javascript\nlet arr = ['red', 'green', 'blue'];\n\narr.slice(0);       // ['red', 'green', 'blue']\narr.slice(0, 2);    // ['red', 'green']\narr.slice(1, 100);  // ['green', 'blue']\n```",
          "itemtype": "method",
          "name": "slice",
          "params": [
            {
              "name": "beginIndex",
              "description": "(Optional) index to begin slicing from.",
              "type": "Number"
            },
            {
              "name": "endIndex",
              "description": "(Optional) index to end the slice at (but not included).",
              "type": "Number"
            }
          ],
          "return": {
            "description": "New array with specified slice",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 365,
          "description": "Returns the index of the given object's first occurrence.\nIf no `startAt` argument is given, the starting location to\nsearch is 0. If it's negative, will count backward from\nthe end of the array. Returns -1 if no match is found.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.indexOf('a');       //  0\narr.indexOf('z');       // -1\narr.indexOf('a', 2);    //  4\narr.indexOf('a', -1);   //  4\narr.indexOf('b', 3);    // -1\narr.indexOf('a', 100);  // -1\n```",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 393,
          "description": "Returns the index of the given object's last occurrence.\nIf no `startAt` argument is given, the search starts from\nthe last position. If it's negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.lastIndexOf('a');       //  4\narr.lastIndexOf('z');       // -1\narr.lastIndexOf('a', 2);    //  0\narr.lastIndexOf('a', -1);   //  4\narr.lastIndexOf('b', 3);    //  1\narr.lastIndexOf('a', 100);  //  4\n```",
          "itemtype": "method",
          "name": "lastIndexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 440,
          "description": "Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:\n\n* `willChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just before the array is modified.\n* `didChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just after the array is modified.\n\nBoth callbacks will be passed the observed object, starting index of the\nchange as well as a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.\n\nIn addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.",
          "itemtype": "method",
          "name": "addArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The observer object.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "example": [
            "\n    import Service from '@ember/service';\n\n    export default Service.extend({\n      data: Ember.A(),\n\n      init() {\n        this._super(...arguments);\n\n        this.data.addArrayObserver(this, {\n          willChange: 'dataWillChange',\n          didChange: 'dataDidChange'\n        });\n      },\n\n      dataWillChange(array, start, removeCount, addCount) {\n        console.log('array will change', array, start, removeCount, addCount);\n      },\n\n      dataDidChange(array, start, removeCount, addCount) {\n        console.log('array did change', array, start, removeCount, addCount);\n      }\n    });"
          ],
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 493,
          "description": "Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.",
          "itemtype": "method",
          "name": "removeArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The object observing the array.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 520,
          "description": "If you are implementing an object that supports `EmberArray`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n```js {data-filename=app/components/show-post.js}\nimport Component from '@ember/component';\nimport EmberObject from '@ember/object';\n\nconst Post = EmberObject.extend({\n  body: '',\n  save() {}\n})\n\nexport default Component.extend({\n  attemptsToModify: 0,\n  successfulModifications: 0,\n  posts: null,\n\n  init() {\n    this._super(...arguments);\n\n    this.posts = [1, 2, 3].map(i => Post.create({ body: i }));\n    this.posts.addArrayObserver(this, {\n      willChange() {\n        this.incrementProperty('attemptsToModify');\n      },\n      didChange() {\n        this.incrementProperty('successfulModifications');\n      }\n    });\n  },\n\n  actions: {\n    editPost(post, newContent) {\n      let oldContent = post.body,\n          postIndex = this.posts.indexOf(post);\n          \n      this.posts.arrayContentWillChange(postIndex, 0, 0); // attemptsToModify = 1\n      post.set('body', newContent);\n\n      post.save()\n        .then(response => {\n          this.posts.arrayContentDidChange(postIndex, 0, 0); // successfulModifications = 1\n        })\n        .catch(error => {\n          post.set('body', oldContent);\n        })\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "arrayContentWillChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that will change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 587,
          "description": "If you are implementing an object that supports `EmberArray`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\n\narr.copyWithin(-2); // [1, 2, 3, 1, 2]\n// arr.lastObject = 5\narr.arrayContentDidChange(3, 2, 2);\n// arr.lastObject = 2\n```",
          "itemtype": "method",
          "name": "arrayContentDidChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that did change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 615,
          "description": "Iterates through the array, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 654,
          "description": "Alias for `mapBy`",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 664,
          "description": "Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.\n\n```javascript\nlet people = [{name: 'Joe'}, {name: 'Matt'}];\n\npeople.setEach('zipCode', '10011);\n// [{name: 'Joe', zipCode: '10011'}, {name: 'Matt', zipCode: '10011'}];\n```",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 687,
          "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\nlet arr = [1, 2, 3, 4, 5, 6];\n\narr.map(element => element * element);\n// [1, 4, 9, 16, 25, 36];\n\narr.map((element, index) => element + index);\n// [1, 3, 5, 7, 9, 11];\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return the mapped value.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 731,
          "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.\n\n```javascript\nlet people = [{name: 'Joe'}, {name: 'Matt'}];\n\npeople.mapBy('name');\n// ['Joe', 'Matt'];\n\npeople.mapBy('unknownProperty');\n// [undefined, undefined];\n```",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 752,
          "description": "Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to `filter()` defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 795,
          "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *array* is the array itself.\n\nIt should return a falsey value to include the item in the results.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 829,
          "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nExample Usage:\n\n```javascript\nconst things = Ember.A().addObjects([{food: 'apple'}, {food: 'beans'}]);\nthings.filterBy('food', 'beans'); // [{food: 'beans'}]\n```",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 851,
          "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 866,
          "description": "Returns the first item in the array for which the callback returns true.\nThis method is similar to the `find()` method defined in ECMAScript 2015.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nlet users = [\n  { id: 1, name: 'Yehuda' },\n  { id: 2, name: 'Tom' },\n  { id: 3, name: 'Melanie' },\n  { id: 4, name: 'Leah' }\n];\n\nusers.find((user) => user.name == 'Tom'); // [{ id: 2, name: 'Tom' }]\nusers.find(({ id }) => id == 3); // [{ id: 3, name: 'Melanie' }]\n```",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 913,
          "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.\n\nUsage Example:\n\n```javascript\nlet users = [\n  { id: 1, name: 'Yehuda', isTom: false },\n  { id: 2, name: 'Tom', isTom: true },\n  { id: 3, name: 'Melanie', isTom: false },\n  { id: 4, name: 'Leah', isTom: false }\n];\n\nusers.findBy('id', 4); // { id: 4, name: 'Leah', isTom: false }\nusers.findBy('name', 'Melanie'); // { id: 3, name: 'Melanie', isTom: false }\nusers.findBy('isTom'); // { id: 2, name: 'Tom', isTom: true }\n```",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 945,
          "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `every()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return the `true` or `false`.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nif (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}\n```",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 985,
          "description": "Returns `true` if the passed property resolves to the value of the second\nargument for all items in the array. This method is often simpler/faster\nthan using a callback.\n\nNote that like the native `Array.every`, `isEvery` will return true when called\non any empty array.",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1004,
          "description": "Returns `true` if the passed function returns true for any item in the\nenumeration.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array object itself.\n\nIt must return a truthy value (i.e. `true`) to include an item in the\nresults. Any non-truthy return value will discard the item from the\nresults.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}\n```",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1046,
          "description": "Returns `true` if the passed property resolves to the value of the second\nargument for any item in the array. This method is often simpler/faster\nthan using a callback.",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1062,
          "description": "This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(previousValue, item, index, array);\n```\n\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\n\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1107,
          "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.\n\n```javascript\nconst Person = EmberObject.extend({\n  name: null,\n  greet(prefix='Hello') {\n    return `${prefix} ${this.name}`;\n  },\n  \n});\nlet people = [Person.create('Joe'), Person.create('Matt')];\n\npeople.invoke('greet'); // ['Hello Joe', 'Hello Matt']\npeople.invoke('greet', 'Bonjour'); // ['Bonjour Joe', 'Bonjour Matt']\n```",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1140,
          "description": "Simply converts the object into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the object as an array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1152,
          "description": "Returns a copy of the array with all `null` and `undefined` elements removed.\n\n```javascript\nlet arr = ['a', null, 'c', undefined];\narr.compact();  // ['a', 'c']\n```",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1168,
          "description": "Returns `true` if the passed object can be found in the array.\nThis method is a Polyfill for ES 2016 Array.includes.\nIf no `startAt` argument is given, the starting location to\nsearch is 0. If it's negative, searches from the index of\n`this.length + startAt` by asc.\n\n```javascript\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 2);  // true\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, 3].includes(1, -1); // false\n[1, 2, 3].includes(1, -4); // true\n[1, 2, NaN].includes(NaN); // true\n```",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "object",
              "description": "The object to search for.",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "`true` if object is found in the array.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1196,
          "description": "Sorts the array by the keys specified in the argument.\n\nYou may provide multiple arguments to sort by multiple properties.\n\n```javascript\n   let colors = [\n { name: 'red', weight: 500 },\n { name: 'green', weight: 600 },\n { name: 'blue', weight: 500 }\n];\n   \n   colors.sortBy('name');\n   // [{name: 'blue', weight: 500}, {name: 'green', weight: 600}, {name: 'red', weight: 500}]\n   \n   colors.sortBy('weight', 'name');\n   // [{name: 'blue', weight: 500}, {name: 'red', weight: 500}, {name: 'green', weight: 600}]\n   ```",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1240,
          "description": "Returns a new array that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nlet arr = ['a', 'a', 'b', 'b'];\narr.uniq();  // ['a', 'b']\n```\n\nThis only works on primitive data types, e.g. Strings, Numbers, etc.",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1259,
          "description": "Returns a new array that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.\n\n```javascript\nlet arr = [{ value: 'a' }, { value: 'a' }, { value: 'b' }, { value: 'b' }];\narr.uniqBy('value');  // [{ value: 'a' }, { value: 'b' }]\n\nlet arr = [2.2, 2.1, 3.2, 3.3];\narr.uniqBy(Math.floor);  // [2.2, 3.2];\n```",
          "itemtype": "method",
          "name": "uniqBy",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String,Function"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1281,
          "description": "Returns a new array that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original array.\n\n```javascript\nlet arr = ['a', 'b', 'a', 'c'];\narr.without('a');  // ['b', 'c']\n```",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 220,
          "description": "__Required.__ You must implement this method to apply this mixin.\n\nYour array must support the `length` property. Your replace methods should\nset this property whenever it changes.",
          "itemtype": "property",
          "name": "length",
          "type": "Number",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 274,
          "description": "This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.\n\n```javascript\nlet peopleToMoon = ['Armstrong', 'Aldrin'];\n\npeopleToMoon.get('[]'); // ['Armstrong', 'Aldrin']\n\npeopleToMoon.set('[]', ['Collins']); // ['Collins']\npeopleToMoon.get('[]'); // ['Collins']\n```",
          "itemtype": "property",
          "name": "[]",
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 302,
          "description": "The first object in the array, or `undefined` if the array is empty.",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "The first object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 313,
          "description": "The last object in the array, or `undefined` if the array is empty.",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "The last object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 509,
          "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
          "itemtype": "property",
          "name": "hasArrayObservers",
          "type": "Boolean",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.14.3-@ember/array",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.14.3",
          "type": "project-version"
        }
      }
    }
  }
}