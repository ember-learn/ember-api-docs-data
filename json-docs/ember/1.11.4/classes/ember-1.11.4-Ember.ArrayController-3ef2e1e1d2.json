{
  "data": {
    "id": "ember-1.11.4-Ember.ArrayController",
    "type": "class",
    "attributes": {
      "name": "Ember.ArrayController",
      "shortname": "Ember.ArrayController",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "packages/ember-runtime/lib/controllers/array_controller.js",
      "line": 20,
      "description": "<html><head></head><body><p><code>Ember.ArrayController</code> provides a way for you to publish a collection of\nobjects so that you can easily bind to the collection from a Handlebars\n<code>#each</code> helper, an <code>Ember.CollectionView</code>, or other controllers.</p>\n<p>The advantage of using an <code>ArrayController</code> is that you only have to set up\nyour view bindings once; to change what&apos;s displayed, simply swap out the\n<code>model</code> property on the controller.</p>\n<p>For example, imagine you wanted to display a list of items fetched via an XHR\nrequest. Create an <code>Ember.ArrayController</code> and set its <code>model</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyApp</span>.</span></span>listController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ArrayController</span>.</span></span>create<span class=\"literal\">()</span>;\n\n$.get(&apos;people.json&apos;, <span class=\"keyword\">function</span>(data) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyApp</span>.</span></span>listController.set(&apos;model&apos;, data);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then, create a view that binds to your new controller:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#each person in MyApp.listController}}\n  {{person.firstName}} {{person.lastName}}\n{{/each}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Although you are binding to the controller, the behavior of this controller\nis to pass through any methods or properties to the underlying array. This\ncapability comes from <code>Ember.ArrayProxy</code>, which this class inherits from.</p>\n<p>Sometimes you want to display computed properties within the body of an\n<code>#each</code> helper that depend on the underlying items in <code>model</code>, but are not\npresent on those items.   To do this, set <code>itemController</code> to the name of a\ncontroller (probably an <code>ObjectController</code>) that will wrap each individual item.</p>\n<p>For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> post in controller}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{post.title}}</span><span class=\"xml\"> (</span><span class=\"template-variable\">{{post.titleLength}}</span><span class=\"xml\"> characters)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.PostsController = Ember.ArrayController.extend({\n  itemController: <span class=\"string\">&apos;post&apos;</span>\n});\n\nApp.PostController = Ember.ObjectController.extend({\n  <span class=\"comment\">// the `title` property will be proxied to the underlying post.</span>\n  titleLength: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;title&apos;</span>).length;\n  }.property(<span class=\"string\">&apos;title&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In some cases it is helpful to return a different <code>itemController</code> depending\non the particular item.  Subclasses can do this by overriding\n<code>lookupItemController</code>.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: function( <span class=\"keyword\">object</span> ) {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">object</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isSpecial&apos;</span>)) {\n      <span class=\"keyword\">return</span> <span class=\"string\">&quot;special&quot;</span>; <span class=\"comment\">// use App.SpecialController</span>\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> <span class=\"string\">&quot;regular&quot;</span>; <span class=\"comment\">// use App.RegularController</span>\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The itemController instances will have a <code>parentController</code> property set to\nthe <code>ArrayController</code> instance.</p>\n</body></html>",
      "extends": "Ember.ArrayProxy",
      "uses": [
        "Ember.ControllerMixin",
        "Ember.SortableMixin"
      ],
      "methods": [
        {
          "file": "packages/ember-runtime/lib/controllers/array_controller.js",
          "line": 125,
          "description": "<html><head></head><body><p>Return the name of the controller to wrap items, or <code>null</code> if items should\nbe returned directly.  The default implementation simply returns the\n<code>itemController</code> property, but subclasses can override this method to return\ndifferent controllers for different objects.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: function( <span class=\"keyword\">object</span> ) {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">object</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isSpecial&apos;</span>)) {\n      <span class=\"keyword\">return</span> <span class=\"string\">&quot;special&quot;</span>; <span class=\"comment\">// use App.SpecialController</span>\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> <span class=\"string\">&quot;regular&quot;</span>; <span class=\"comment\">// use App.RegularController</span>\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lookupItemController",
          "params": [
            {
              "name": "object",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 91,
          "description": "<html><head></head><body><p>Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "objectAtContent",
          "params": [
            {
              "name": "idx",
              "description": "The index to retrieve.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "the value or undefined if none found",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 106,
          "description": "<html><head></head><body><p>Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "replaceContent",
          "params": [
            {
              "name": "idx",
              "description": "The starting index",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "The number of items to remove from the content.",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "Optional array of objects to insert or null if no\n  objects.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 124,
          "description": "<html><head></head><body><p>Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_contentWillChange",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 146,
          "description": "<html><head></head><body><p>Override to implement content array <code>willChange</code> observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "contentArrayWillChange",
          "params": [
            {
              "name": "contentArray",
              "description": "the content array",
              "type": "Ember.Array"
            },
            {
              "name": "start",
              "description": "starting index of the change",
              "type": "Number"
            },
            {
              "name": "removeCount",
              "description": "count of items removed",
              "type": "Number"
            },
            {
              "name": "addCount",
              "description": "count of items added",
              "type": "Number"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 158,
          "description": "<html><head></head><body><p>Override to implement content array <code>didChange</code> observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "contentArrayDidChange",
          "params": [
            {
              "name": "contentArray",
              "description": "the content array",
              "type": "Ember.Array"
            },
            {
              "name": "start",
              "description": "starting index of the change",
              "type": "Number"
            },
            {
              "name": "removeCount",
              "description": "count of items removed",
              "type": "Number"
            },
            {
              "name": "addCount",
              "description": "count of items added",
              "type": "Number"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 170,
          "description": "<html><head></head><body><p>Invoked when the content property changes. Notifies observers that the\nentire array content has changed.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_contentDidChange",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-application/lib/ext/controller.js",
          "line": 147,
          "itemtype": "method",
          "name": "controllerFor",
          "see": [
            "{Ember.Route#controllerFor}"
          ],
          "deprecated": true,
          "deprecationMessage": "Use `needs` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 99,
          "itemtype": "method",
          "name": "_updateCacheParams",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 120,
          "itemtype": "method",
          "name": "_qpChanged",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 144,
          "itemtype": "method",
          "name": "_calculateCacheKey",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 159,
          "description": "<html><head></head><body><p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPosts</span>&apos;)</span>;\naController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPosts</span>.<span class=\"params\">recentEntries</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPost</span>&apos;, <span class=\"params\">aPost</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">aController</span><span class=\"selector-class\">.transitionToRoute</span>(<span class=\"string\">&apos;blogPost&apos;</span>, <span class=\"number\">1</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&apos;blogPost&apos;</span>, {path:<span class=\"string\">&apos;:blogPostId&apos;</span>}, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.resource(<span class=\"string\">&apos;blogComment&apos;</span>, {path: <span class=\"string\">&apos;:blogCommentId&apos;</span>});\n  });\n});\n\naController.transitionToRoute(<span class=\"string\">&apos;blogComment&apos;</span>, aPost, aComment);\naController.transitionToRoute(<span class=\"string\">&apos;blogComment&apos;</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"operator\">/</span>&apos;)</span>;\naController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"operator\">/</span><span class=\"params\">blog</span><span class=\"operator\">/</span><span class=\"params\">post</span><span class=\"operator\">/</span>1<span class=\"operator\">/</span><span class=\"params\">comment</span><span class=\"operator\">/</span>13&apos;)</span>;\naController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"operator\">/</span><span class=\"params\">blog</span><span class=\"operator\">/</span><span class=\"params\">posts</span>?<span class=\"params\">sort</span>=<span class=\"params\">title</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">aController</span><span class=\"selector-class\">.transitionToRoute</span>(<span class=\"string\">&apos;blogPost&apos;</span>, <span class=\"number\">1</span>, {\n  <span class=\"attribute\">queryParams</span>: {<span class=\"attribute\">showComments</span>: <span class=\"string\">&apos;true&apos;</span>}\n});\n\n<span class=\"comment\">// if you just want to transition the query parameters without changing the route</span>\n<span class=\"selector-tag\">aController</span><span class=\"selector-class\">.transitionToRoute</span>({<span class=\"attribute\">queryParams</span>: {<span class=\"attribute\">sort</span>: <span class=\"string\">&apos;date&apos;</span>}});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See also <a href=\"/api/classes/Ember.ControllerMixin.html#method_replaceRoute\">replaceRoute</a>.</p>\n</body></html>",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used\n  while transitioning to the route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "itemtype": "method",
          "name": "transitionToRoute",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 237,
          "deprecated": true,
          "itemtype": "method",
          "name": "transitionTo",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 247,
          "description": "<html><head></head><body><p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>aController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPosts</span>&apos;)</span>;\naController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPosts</span>.<span class=\"params\">recentEntries</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>aController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPost</span>&apos;, <span class=\"params\">aPost</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">aController</span><span class=\"selector-class\">.replaceRoute</span>(<span class=\"string\">&apos;blogPost&apos;</span>, <span class=\"number\">1</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&apos;blogPost&apos;</span>, {path:<span class=\"string\">&apos;:blogPostId&apos;</span>}, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.resource(<span class=\"string\">&apos;blogComment&apos;</span>, {path: <span class=\"string\">&apos;:blogCommentId&apos;</span>});\n  });\n});\n\naController.replaceRoute(<span class=\"string\">&apos;blogComment&apos;</span>, aPost, aComment);\naController.replaceRoute(<span class=\"string\">&apos;blogComment&apos;</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>aController.replace<span class=\"constructor\">Route(&apos;<span class=\"operator\">/</span>&apos;)</span>;\naController.replace<span class=\"constructor\">Route(&apos;<span class=\"operator\">/</span><span class=\"params\">blog</span><span class=\"operator\">/</span><span class=\"params\">post</span><span class=\"operator\">/</span>1<span class=\"operator\">/</span><span class=\"params\">comment</span><span class=\"operator\">/</span>13&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used\nwhile transitioning to the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "replaceRoute",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 309,
          "deprecated": true,
          "itemtype": "method",
          "name": "replaceWith",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 53,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "replace",
          "params": [
            {
              "name": "idx",
              "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "An array of zero or more objects that should be\n  inserted into the array at *idx*",
              "type": "Array"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 70,
          "description": "<html><head></head><body><p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];\ncolor.<span class=\"built_in\">length</span>();   <span class=\"comment\">//  3</span>\ncolors.<span class=\"keyword\">clear</span>();   <span class=\"comment\">//  []</span>\ncolors.<span class=\"built_in\">length</span>();  <span class=\"comment\">//  0</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "clear",
          "return": {
            "description": "An empty Array.",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 94,
          "description": "<html><head></head><body><p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];\ncolors.insertAt(<span class=\"number\">2</span>, <span class=\"string\">&quot;yellow&quot;</span>);  // [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>]\ncolors.insertAt(<span class=\"number\">5</span>, <span class=\"string\">&quot;orange&quot;</span>);  // <span class=\"type\">Error</span>: <span class=\"type\">Index</span> <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> <span class=\"built_in\">range</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "insertAt",
          "params": [
            {
              "name": "idx",
              "description": "index of insert the object at.",
              "type": "Number"
            },
            {
              "name": "object",
              "description": "object to insert",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 118,
          "description": "<html><head></head><body><p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>];\ncolors.removeAt(<span class=\"number\">0</span>);     // [<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>]\ncolors.removeAt(<span class=\"number\">2</span>, <span class=\"number\">2</span>);  // [<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>]\ncolors.removeAt(<span class=\"number\">4</span>, <span class=\"number\">2</span>);  // <span class=\"type\">Error</span>: <span class=\"type\">Index</span> <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> <span class=\"built_in\">range</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeAt",
          "params": [
            {
              "name": "start",
              "description": "index, start of range",
              "type": "Number"
            },
            {
              "name": "len",
              "description": "length of passing range",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 155,
          "description": "<html><head></head><body><p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>];\ncolors.pushObject(<span class=\"string\">&quot;black&quot;</span>);     // [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;black&quot;</span>]\ncolors.pushObject([<span class=\"string\">&quot;yellow&quot;</span>]);  // [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, [<span class=\"string\">&quot;yellow&quot;</span>]]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObject",
          "params": [
            {
              "name": "obj",
              "description": "object to push",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 174,
          "description": "<html><head></head><body><p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>];\ncolors.pushObjects([<span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>]);  // [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 195,
          "description": "<html><head></head><body><p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];\ncolors.popObject();   <span class=\"regexp\">//</span> <span class=\"string\">&quot;blue&quot;</span>\nconsole.log(colors);  <span class=\"regexp\">//</span> [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "popObject",
          "return": {
            "description": "object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 219,
          "description": "<html><head></head><body><p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];\ncolors.shiftObject();  <span class=\"regexp\">//</span> <span class=\"string\">&quot;red&quot;</span>\nconsole.log(colors);   <span class=\"regexp\">//</span> [<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "shiftObject",
          "return": {
            "description": "object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 242,
          "description": "<html><head></head><body><p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>];\ncolors.unshiftObject(<span class=\"string\">&quot;yellow&quot;</span>);    // [<span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;red&quot;</span>]\ncolors.unshiftObject([<span class=\"string\">&quot;black&quot;</span>]);   // [[<span class=\"string\">&quot;black&quot;</span>], <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;red&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObject",
          "params": [
            {
              "name": "obj",
              "description": "object to unshift",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 261,
          "description": "<html><head></head><body><p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>];\ncolors.unshiftObjects([<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;white&quot;</span>]);   // [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;white&quot;</span>, <span class=\"string\">&quot;red&quot;</span>]\ncolors.unshiftObjects(<span class=\"string\">&quot;yellow&quot;</span>); // <span class=\"keyword\">Type</span> <span class=\"type\">Error: </span><span class=\"symbol\">&apos;undefined</span>&apos; <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a <span class=\"keyword\">function</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 280,
          "description": "<html><head></head><body><p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reverseObjects",
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 298,
          "description": "<html><head></head><body><p>Replace all the receiver&apos;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];\ncolors.setObjects([<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;white&quot;</span>]);  // [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;white&quot;</span>]\ncolors.setObjects([]);                  // []</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setObjects",
          "params": [
            {
              "name": "objects",
              "description": "array whose content will be used for replacing\n    the content of the receiver",
              "type": "Ember.Array"
            }
          ],
          "return": {
            "description": "receiver with the new content",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 327,
          "description": "<html><head></head><body><p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var cities = [<span class=\"string\">&quot;Chicago&quot;</span>, <span class=\"string\">&quot;Berlin&quot;</span>, <span class=\"string\">&quot;Lima&quot;</span>, <span class=\"string\">&quot;Chicago&quot;</span>];\ncities.removeObject(<span class=\"string\">&quot;Chicago&quot;</span>);  // [<span class=\"string\">&quot;Berlin&quot;</span>, <span class=\"string\">&quot;Lima&quot;</span>]\ncities.removeObject(<span class=\"string\">&quot;Lima&quot;</span>);     // [<span class=\"string\">&quot;Berlin&quot;</span>]\ncities.removeObject(<span class=\"string\">&quot;Tokyo&quot;</span>)     // [<span class=\"string\">&quot;Berlin&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "obj",
              "description": "object to remove",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 353,
          "description": "<html><head></head><body><p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>var cities = [<span class=\"string\">&quot;Chicago&quot;</span>, <span class=\"string\">&quot;Berlin&quot;</span>];\ncities.addObject(<span class=\"string\">&quot;Lima&quot;</span>);    // [<span class=\"string\">&quot;Chicago&quot;</span>, <span class=\"string\">&quot;Berlin&quot;</span>, <span class=\"string\">&quot;Lima&quot;</span>]\ncities.addObject(<span class=\"string\">&quot;Berlin&quot;</span>);  // [<span class=\"string\">&quot;Chicago&quot;</span>, <span class=\"string\">&quot;Berlin&quot;</span>, <span class=\"string\">&quot;Lima&quot;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "obj",
              "description": "object to add, if not already present",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 148,
          "description": "<html><head></head><body><p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "willMergeMixin",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 178,
          "description": "<html><head></head><body><p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&apos;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n       <span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;playMusic&apos;</span>, <span class=\"string\">&apos;theme.mp3&apos;</span>);\n    },\n    playMusic: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(track)</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "actionName",
              "description": "The action to trigger",
              "type": "String"
            },
            {
              "name": "context",
              "description": "a context to send with the action",
              "type": "*"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 52,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "object",
              "description": "The object to add to the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 68,
          "description": "<html><head></head><body><p>Adds each object in the passed enumerable to the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 82,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "object",
              "description": "The object to remove from the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 99,
          "description": "<html><head></head><body><p>Removes each object in the passed enumerable from the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 242,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  init: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"string\">&apos;Name is &apos;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"string\">&quot;Steve&quot;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 366,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 388,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 395,
          "description": "<html><head></head><body><p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 414,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Em</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend<span class=\"literal\">()</span>\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;App.Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>\nstudent = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;(subclass of App.Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.Teacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend({\n  toStringExtension: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    return this.get(&apos;fullName&apos;);\n  }\n});\nteacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Teacher</span>.</span></span>create<span class=\"literal\">()</span>\nteacher.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;App.Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 478,
          "description": "<html><head></head><body><p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>App.<span class=\"keyword\">Person</span> = Ember.Object.extend({\n  <span class=\"keyword\">say</span>: function(<span class=\"keyword\">thing</span>) {\n    alert(<span class=\"keyword\">thing</span>);\n   }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&apos;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>App.PersonView = Ember.<span class=\"keyword\">View</span>.extend({\n  tagName: <span class=\"string\">&apos;li&apos;</span>,\n  classNameBindings: [<span class=\"string\">&apos;isAdministrator&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>);\n    alert(name + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">this</span>._super(thing + <span class=\"string\">&quot;, sir!&quot;</span>);\n  },\n  march: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; marches for &apos;</span> + numberOfHours + <span class=\"string\">&apos; hours.&apos;</span>)\n  }\n});\n\n<span class=\"keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"string\">&quot;Yehuda Katz&quot;</span>\n});\n\nyehuda.say(<span class=\"string\">&quot;Yes&quot;</span>);  <span class=\"comment\">// alerts &quot;Yehuda Katz says: Yes, sir!&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span></span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; sings: la la la &apos;</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; dances: tap tap tap tap &apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Mixin classes",
              "type": "Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 581,
          "description": "<html><head></head><body><p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 602,
          "description": "<html><head></head><body><p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend({\n  helloWorld: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    alert(<span class=\"string\">&quot;Hi, my name is &quot;</span> + this.get(&apos;name&apos;));\n  }\n});\n\nvar tom = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create({\n  name: &apos;Tom Dale&apos;\n});\n\ntom.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts &quot;Hi, my name is Tom Dale&quot;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var noName = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nnoName.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 652,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>MyObject = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend({\n  name: &apos;an object&apos;\n});\n\no = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>create<span class=\"literal\">()</span>;\no.get(&apos;name&apos;); <span class=\"comment\">// &apos;an object&apos;</span>\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>reopen({\n  say: <span class=\"keyword\">function</span>(msg){\n    console.log(msg);\n  }\n})\n\no2 = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>create<span class=\"literal\">()</span>;\no2.say(<span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">// logs &quot;hello&quot;</span>\n\no.say(<span class=\"string\">&quot;goodbye&quot;</span>); <span class=\"comment\">// logs &quot;goodbye&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 696,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s own properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>MyObject = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;an object&apos;</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"keyword\">false</span>\n});\n\nMyObject.canBuild; // <span class=\"keyword\">false</span>\no = MyObject.<span class=\"keyword\">create</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  name : <span class=\"string\">&quot;&quot;</span>,\n  sayHello : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"string\">&quot;Hello. My name is &quot;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"string\">&quot;Homo sapiens&quot;</span>,\n  createPerson: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(newPersonsName)</span></span>{\n    <span class=\"keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"string\">&quot;Tom Dale&quot;</span>\n});\n<span class=\"keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"string\">&quot;Yehuda Katz&quot;</span>);\n\ntom.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Tom Dale&quot;</span>\nyehuda.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Yehuda Katz&quot;</span>\nalert(App.Person.species); <span class=\"comment\">// &quot;Homo sapiens&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&apos;s prototype\nsee <code>reopen</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 778,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Once you&apos;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyClass</span>.</span></span>meta<span class=\"constructor\">ForProperty(&apos;<span class=\"params\">person</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will return the original hash that was passed to <code>meta()</code>.</p>\n</body></html>",
          "static": 1,
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 834,
          "description": "<html><head></head><body><p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n</body></html>",
          "static": 1,
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 862,
          "description": "<html><head></head><body><p>Provides lookup-time type validation for injected properties.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_onLookup",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 871,
          "description": "<html><head></head><body><p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_lazyInjections",
          "return": {
            "description": "Hash of all lazy injected property keys to container names",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 101,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n}.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 143,
          "description": "<html><head></head><body><p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Hash"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 167,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;Charles&apos;</span>).<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Jolley&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 221,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 238,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 257,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 275,
          "description": "<html><head></head><body><p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 298,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 321,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 344,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"keyword\">function</span>(sender,<span class=\"built_in\"> key</span>, <span class=\"keyword\">value</span>, <span class=\"keyword\">context</span>, rev) { };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 395,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 409,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 423,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 440,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 460,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 480,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 497,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 52,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "object",
              "description": "The object to add to the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 68,
          "description": "<html><head></head><body><p>Adds each object in the passed enumerable to the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 82,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "object",
              "description": "The object to remove from the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 99,
          "description": "<html><head></head><body><p>Removes each object in the passed enumerable from the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 103,
          "description": "<html><head></head><body><p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectAt<span class=\"comment\">(0)</span>;   <span class=\"comment\">// &apos;a&apos;</span>\narr.objectAt<span class=\"comment\">(3)</span>;   <span class=\"comment\">// &apos;d&apos;</span>\narr.objectAt<span class=\"comment\">(-1)</span>;  <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(4)</span>;   <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(5)</span>;   <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectAt",
          "params": [
            {
              "name": "idx",
              "description": "The index of the item to return.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "item at index or undefined",
            "type": "*"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 134,
          "description": "<html><head></head><body><p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectsAt([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);  // [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]\narr.objectsAt([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);  // [<span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, undefined]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectsAt",
          "params": [
            {
              "name": "indexes",
              "description": "An array of indexes of items to return.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 193,
          "description": "<html><head></head><body><p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\narr.slice(<span class=\"number\">0</span>);       // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\narr.slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);    // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]\narr.slice(<span class=\"number\">1</span>, <span class=\"number\">100</span>);  // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "slice",
          "params": [
            {
              "name": "beginIndex",
              "description": "(Optional) index to begin slicing from.",
              "type": "Integer"
            },
            {
              "name": "endIndex",
              "description": "(Optional) index to end the slice at (but not included).",
              "type": "Integer"
            }
          ],
          "return": {
            "description": "New array with specified slice",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 238,
          "description": "<html><head></head><body><p>Returns the index of the given object&apos;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&apos;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, <span class=\"string\">&apos;a&apos;</span>];\n\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>);       <span class=\"comment\">//  0</span>\narr.indexOf(<span class=\"string\">&apos;z&apos;</span>);       <span class=\"comment\">// -1</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">2</span>);    <span class=\"comment\">//  4</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">-1</span>);   <span class=\"comment\">//  4</span>\narr.indexOf(<span class=\"string\">&apos;b&apos;</span>, <span class=\"number\">3</span>);    <span class=\"comment\">// -1</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// -1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 281,
          "description": "<html><head></head><body><p>Returns the index of the given object&apos;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&apos;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, <span class=\"string\">&apos;a&apos;</span>];\n\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>);       <span class=\"comment\">//  4</span>\narr.lastIndexOf(<span class=\"string\">&apos;z&apos;</span>);       <span class=\"comment\">// -1</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">2</span>);    <span class=\"comment\">//  0</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">-1</span>);   <span class=\"comment\">//  4</span>\narr.lastIndexOf(<span class=\"string\">&apos;b&apos;</span>, <span class=\"number\">3</span>);    <span class=\"comment\">//  1</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">100</span>);  <span class=\"comment\">//  4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lastIndexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 328,
          "description": "<html><head></head><body><p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The observer object.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 357,
          "description": "<html><head></head><body><p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The object observing the array.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 382,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n</body></html>",
          "itemtype": "method",
          "name": "arrayContentWillChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that will change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 436,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n</body></html>",
          "itemtype": "method",
          "name": "arrayContentDidChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that did change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 96,
          "description": "<html><head></head><body><p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&apos;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 204,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\n\narr.contains(<span class=\"string\">&apos;a&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">true</span>\narr.contains(<span class=\"string\">&apos;z&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 228,
          "description": "<html><head></head><body><p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 278,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 287,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 304,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 340,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 354,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapProperty",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `mapBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 406,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 438,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 452,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `filterBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 465,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 489,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `rejectBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 502,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 558,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 574,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `findBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 589,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.every(isEngineer)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BigBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 629,
          "itemtype": "method",
          "name": "everyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 638,
          "itemtype": "method",
          "name": "everyProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 647,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 661,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.any(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 718,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.some(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "some",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `any` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 756,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 770,
          "itemtype": "method",
          "name": "anyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 779,
          "itemtype": "method",
          "name": "someProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 788,
          "description": "<html><head></head><body><p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 835,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 864,
          "description": "<html><head></head><body><p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 881,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 898,
          "description": "<html><head></head><body><p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 928,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 974,
          "description": "<html><head></head><body><p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1002,
          "description": "<html><head></head><body><p>Removes a registered enumerable observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1041,
          "description": "<html><head></head><body><p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1093,
          "description": "<html><head></head><body><p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1147,
          "description": "<html><head></head><body><p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 96,
          "description": "<html><head></head><body><p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&apos;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 204,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\n\narr.contains(<span class=\"string\">&apos;a&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">true</span>\narr.contains(<span class=\"string\">&apos;z&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 228,
          "description": "<html><head></head><body><p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 278,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 287,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 304,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 340,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 354,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapProperty",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `mapBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 406,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 438,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 452,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `filterBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 465,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 489,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `rejectBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 502,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 558,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 574,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `findBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 589,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.every(isEngineer)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BigBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 629,
          "itemtype": "method",
          "name": "everyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 638,
          "itemtype": "method",
          "name": "everyProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 647,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 661,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.any(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 718,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.some(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "some",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `any` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 756,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 770,
          "itemtype": "method",
          "name": "anyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 779,
          "itemtype": "method",
          "name": "someProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 788,
          "description": "<html><head></head><body><p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 835,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 864,
          "description": "<html><head></head><body><p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 881,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 898,
          "description": "<html><head></head><body><p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 928,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 974,
          "description": "<html><head></head><body><p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1002,
          "description": "<html><head></head><body><p>Removes a registered enumerable observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1041,
          "description": "<html><head></head><body><p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1093,
          "description": "<html><head></head><body><p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1147,
          "description": "<html><head></head><body><p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 96,
          "description": "<html><head></head><body><p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&apos;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 204,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\n\narr.contains(<span class=\"string\">&apos;a&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">true</span>\narr.contains(<span class=\"string\">&apos;z&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 228,
          "description": "<html><head></head><body><p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 278,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 287,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 304,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 340,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 354,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapProperty",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `mapBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 406,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 438,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 452,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `filterBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 465,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 489,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `rejectBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 502,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 558,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 574,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `findBy` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 589,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.every(isEngineer)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BigBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 629,
          "itemtype": "method",
          "name": "everyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 638,
          "itemtype": "method",
          "name": "everyProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 647,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 661,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.any(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 718,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.some(isManager)) {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Paychecks</span>.</span></span>add<span class=\"constructor\">BiggerBonus()</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "some",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `any` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 756,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 770,
          "itemtype": "method",
          "name": "anyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 779,
          "itemtype": "method",
          "name": "someProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 788,
          "description": "<html><head></head><body><p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 835,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 864,
          "description": "<html><head></head><body><p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 881,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 898,
          "description": "<html><head></head><body><p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 928,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 974,
          "description": "<html><head></head><body><p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1002,
          "description": "<html><head></head><body><p>Removes a registered enumerable observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1041,
          "description": "<html><head></head><body><p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1093,
          "description": "<html><head></head><body><p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1147,
          "description": "<html><head></head><body><p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-runtime/lib/controllers/array_controller.js",
          "line": 108,
          "description": "<html><head></head><body><p>A string containing the controller name used to wrap items.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.MyArrayController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ArrayController</span>.</span></span>extend({\n  itemController: &apos;myItem&apos; <span class=\"comment\">// use App.MyItemController</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "itemController",
          "type": "String",
          "default": "null",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/controllers/array_controller.js",
          "line": 221,
          "description": "<html><head></head><body><p>Flag to mark as being &quot;virtual&quot;. Used to keep this instance\nfrom participating in the parentController hierarchy.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_isVirtual",
          "type": "Boolean",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 73,
          "description": "<html><head></head><body><p>The content array. Must be an object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray.</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "content",
          "type": "Ember.Array",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-runtime/lib/system/array_proxy.js",
          "line": 82,
          "description": "<html><head></head><body><p>The array that the proxy pretends to be. In the default <code>ArrayProxy</code>\nimplementation, this and <code>content</code> are the same. Subclasses of <code>ArrayProxy</code>\ncan override this property to provide things like sorting and filtering.</p>\n</body></html>",
          "itemtype": "property",
          "name": "arrangedContent",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ArrayProxy"
        },
        {
          "file": "packages/ember-application/lib/ext/controller.js",
          "line": 77,
          "description": "<html><head></head><body><p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.CommentsController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ArrayController</span>.</span></span>extend({\n  needs: <span class=\"literal\">[&apos;<span class=\"identifier\">post</span>&apos;]</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The application&apos;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>this.get(&apos;controllers.post&apos;); //<span class=\"built_in\"> instance </span>of App.PostController</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>App.CommentsNewController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ObjectController</span>.</span></span>extend({\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.IndexController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ObjectController</span>.</span></span>extend({\n  needs: <span class=\"literal\">[&apos;<span class=\"identifier\">commentsNew</span>&apos;]</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>this.get(&apos;controllers.commentsNew&apos;); //<span class=\"built_in\"> instance </span>of App.CommentsNewController</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is only available for singleton controllers.</p>\n</body></html>",
          "itemtype": "property",
          "name": "needs",
          "type": "Array",
          "default": "[]",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-application/lib/ext/controller.js",
          "line": 157,
          "description": "<html><head></head><body><p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"string\">&apos;post&apos;</span>],\n  postTitle: function() {\n    <span class=\"keyword\">var</span> currentPost = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;controllers.post&apos;</span>); <span class=\"comment\">// instance of App.PostController</span>\n    <span class=\"keyword\">return</span> currentPost.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;title&apos;</span>);\n  }.property(<span class=\"string\">&apos;controllers.post.title&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "see": [
            "{Ember.ControllerMixin#needs}"
          ],
          "itemtype": "property",
          "name": "controllers",
          "type": "Object",
          "default": "null",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 23,
          "description": "<html><head></head><body><p>Defines which query parameters the controller accepts.\nIf you give the names [&apos;category&apos;,&apos;page&apos;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "queryParams",
          "access": "public",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 34,
          "itemtype": "property",
          "name": "_qpDelegate",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 40,
          "itemtype": "property",
          "name": "_normalizedQueryParams",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 64,
          "itemtype": "property",
          "name": "_cacheMeta",
          "access": "private",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-routing",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/controller.js",
          "line": 19,
          "description": "<html><head></head><body><p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&apos;s controller&apos;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n</body></html>",
          "itemtype": "property",
          "name": "target",
          "default": "null",
          "class": "Ember.ArrayController",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/controller.js",
          "line": 45,
          "description": "<html><head></head><body><p>The controller&apos;s current model. When retrieving or modifying a controller&apos;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n</body></html>",
          "itemtype": "property",
          "name": "model",
          "access": "public",
          "tagname": "",
          "class": "Ember.ArrayController",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/sortable.js",
          "line": 78,
          "description": "<html><head></head><body><p>Specifies which properties dictate the <code>arrangedContent</code>&apos;s sort order.</p>\n<p>When specifying multiple properties the sorting will use properties\nfrom the <code>sortProperties</code> array prioritized from first to last.</p>\n</body></html>",
          "itemtype": "property",
          "name": "sortProperties",
          "type": "Array",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.SortableMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/sortable.js",
          "line": 88,
          "description": "<html><head></head><body><p>Specifies the <code>arrangedContent</code>&apos;s sort direction.\nSorts the content in ascending order by default. Set to <code>false</code> to\nuse descending order.</p>\n</body></html>",
          "itemtype": "property",
          "name": "sortAscending",
          "type": "Boolean",
          "default": "true",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.SortableMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/sortable.js",
          "line": 98,
          "description": "<html><head></head><body><p>The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.,</p>\n<ul>\n<li>return 0 if the two parameters are equal,</li>\n<li>return a negative value if the first parameter is smaller than the second or</li>\n<li>return a positive value otherwise:</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>function(<span class=\"symbol\">x</span>, <span class=\"symbol\">y</span>) { <span class=\"comment\">// These are assumed to be integers</span>\n  <span class=\"keywords\">if</span> (<span class=\"symbol\">x</span> === <span class=\"symbol\">y</span>)\n    <span class=\"keywords\">return</span> <span class=\"number\">0</span>;\n  <span class=\"keywords\">return</span> <span class=\"symbol\">x</span> &lt; <span class=\"symbol\">y</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "sortFunction",
          "type": "{Function}",
          "default": "Ember.compare",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.SortableMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/sortable.js",
          "line": 158,
          "description": "<html><head></head><body><p>Overrides the default <code>arrangedContent</code> from <code>ArrayProxy</code> in order to sort by <code>sortFunction</code>.\nAlso sets up observers for each <code>sortProperty</code> on each item in the content Array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "arrangedContent",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.SortableMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 28,
          "description": "<html><head></head><body><p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&apos;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;displayBanner&apos;</span>);\n<span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;playMusic&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Within a Controller, Route, View or Component&apos;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.SongRoute = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Route</span>.</span></span>extend({\n  actions: {\n    myAction: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n      this.controller<span class=\"constructor\">For(<span class=\"string\">&quot;song&quot;</span>)</span>;\n      this.transition<span class=\"constructor\">To(<span class=\"string\">&quot;other.route&quot;</span>)</span>;<span class=\"operator\">\n      ...\n    </span>}\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>App.DebugRoute = Ember.Mixin.create({\n  <span class=\"attr\">actions</span>: {\n    <span class=\"attr\">debugRouteInformation</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n      <span class=\"built_in\">console</span>.debug(<span class=\"string\">&quot;trololo&quot;</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  <span class=\"attr\">actions</span>: {\n    <span class=\"attr\">debugRouteInformation</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n      <span class=\"comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"keyword\">this</span>._super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);\n\n      <span class=\"comment\">// show additional annoyance</span>\n      <span class=\"built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&quot;album&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;song&quot;</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// ...</span>\n\n      <span class=\"keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "actions",
          "type": "Hash",
          "default": "null",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 276,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">View</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  classNames: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span> = <span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  classNames: [<span class=\"string\">&apos;foo&apos;</span>]\n});\n\nvar fooBarView = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create();\nfooBarView.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBarView.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  classNames: [<span class=\"string\">&apos;baz&apos;</span>]\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  classNames: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 344,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 355,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 95,
          "description": "<html><head></head><body><p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n</body></html>",
          "itemtype": "property",
          "name": "length",
          "type": "Number",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 161,
          "description": "<html><head></head><body><p>This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.</p>\n<p>This property overrides the default property defined in <code>Ember.Enumerable</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 372,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasArrayObservers",
          "type": "Boolean",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 502,
          "description": "<html><head></head><body><p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "@each",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 131,
          "description": "<html><head></head><body><p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// &apos;a&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 166,
          "description": "<html><head></head><body><p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// &apos;c&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 954,
          "description": "<html><head></head><body><p>This property will trigger anytime the enumerable&apos;s content changes.\nYou can observe this property to be notified of changes to the enumerable&apos;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1029,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 131,
          "description": "<html><head></head><body><p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// &apos;a&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 166,
          "description": "<html><head></head><body><p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// &apos;c&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 954,
          "description": "<html><head></head><body><p>This property will trigger anytime the enumerable&apos;s content changes.\nYou can observe this property to be notified of changes to the enumerable&apos;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1029,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 131,
          "description": "<html><head></head><body><p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// &apos;a&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 166,
          "description": "<html><head></head><body><p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// &apos;c&apos;</span>\n\n<span class=\"keyword\">var</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 954,
          "description": "<html><head></head><body><p>This property will trigger anytime the enumerable&apos;s content changes.\nYou can observe this property to be notified of changes to the enumerable&apos;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1029,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "class": "Ember.ArrayController",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.11.4-Ember.ArrayProxy",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.11.4-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.11.4",
          "type": "project-version"
        }
      }
    }
  }
}