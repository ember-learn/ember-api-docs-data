{
  "data": {
    "id": "ember-1.11.4-Ember.TextSupport",
    "type": "class",
    "attributes": {
      "name": "Ember.TextSupport",
      "shortname": "Ember.TextSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.TextArea",
        "Ember.TextField"
      ],
      "module": "ember",
      "submodule": "ember-views",
      "namespace": "Ember",
      "file": "packages/ember-views/lib/mixins/text_support.js",
      "line": 11,
      "description": "`TextSupport` is a shared mixin used by both `Ember.TextField` and\n`Ember.TextArea`. `TextSupport` adds a number of methods that allow you to\nspecify a controller action to invoke when a certain event is fired on your\ntext field or textarea. The specifed controller action would get the current\nvalue of the field passed in as the only argument unless the value of\nthe field is empty. In that case, the instance of the field itself is passed\nin as the only argument.\n\nLet's use the pressing of the escape key as an example. If you wanted to\ninvoke a controller action when a user presses the escape key while on your\nfield, you would use the `escape-press` attribute on your field like so:\n\n```handlebars\n  {{! application.hbs}}\n\n  {{input escape-press='alertUser'}}\n```\n\n```javascript\n    App = Ember.Application.create();\n\n    App.ApplicationController = Ember.Controller.extend({\n      actions: {\n        alertUser: function ( currentValue ) {\n          alert( 'escape pressed, current value: ' + currentValue );\n        }\n      }\n    });\n```\n\nThe following chart is a visual representation of what takes place when the\nescape key is pressed in this scenario:\n\nThe Template\n+---------------------------+\n|                           |\n| escape-press='alertUser'  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------> | checks for the `escape-press` |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | `alertUser` value             |\n     |     action name 'alertUser'     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( 'the esc key was pressed!' ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+\n\nHere are the events that we currently support along with the name of the\nattribute you would need to use on your field. To reiterate, you would use the\nattribute name like so:\n\n```handlebars\n  {{input attribute-name='controllerAction'}}\n```\n\n+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | insert-newline |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+",
      "uses": [
        "Ember.TargetActionSupport"
      ],
      "extends": "Ember.Mixin",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
          "line": 45,
          "description": "Iterates through the view's attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.",
          "itemtype": "method",
          "name": "_applyAttributeBindings",
          "params": [
            {
              "name": "buffer",
              "description": "",
              "type": "Ember.RenderBuffer"
            },
            {
              "name": "attributeBindings",
              "description": "",
              "type": "Array"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
          "line": 92,
          "description": "We're using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren't defined on a view at initialization time.\n\nNote: setUnknownProperty will only be called once for each property.",
          "itemtype": "method",
          "name": "setUnknownProperty",
          "params": [
            {
              "name": "key",
              "description": ""
            },
            {
              "name": "value",
              "description": ""
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/class_names_support.js",
          "line": 87,
          "description": "Iterates over the view's `classNameBindings` array, inserts the value\nof the specified property into the `classNames` array, then creates an\nobserver to update the view's element if the bound property ever changes\nin the future.",
          "itemtype": "method",
          "name": "_applyClassNameBindings",
          "access": "private",
          "tagname": "",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/component_template_deprecation.js",
          "line": 14,
          "access": "private",
          "tagname": "Moves `templateName` to `layoutName` and `template` to `layout` at extend\ntime if a layout is not also specified.\n\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
          "itemtype": "method",
          "name": "willMergeMixin",
          "since": "1.4.0",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
          "line": 23,
          "description": "Removes all children from the `parentView`.",
          "itemtype": "method",
          "name": "removeAllChildren",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
          "line": 41,
          "description": "Return the nearest ancestor whose parent is an instance of\n`klass`.",
          "itemtype": "method",
          "name": "nearestChildOf",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself)",
              "type": "Class"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "deprecated": true,
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
          "line": 61,
          "description": "Return the nearest ancestor that is an instance of the provided\nclass.",
          "itemtype": "method",
          "name": "nearestInstanceOf",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself)",
              "type": "Class"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "deprecated": true,
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/template_rendering_support.js",
          "line": 14,
          "description": "Called on your view when it should push strings of HTML into a\n`Ember.RenderBuffer`. Most users will want to override the `template`\nor `templateName` properties instead of this method.\n\nBy default, `Ember.View` will look for a function in the `template`\nproperty and invoke it with the value of `context`. The value of\n`context` will be the view's controller unless you override it.",
          "itemtype": "method",
          "name": "render",
          "params": [
            {
              "name": "buffer",
              "description": "The render buffer",
              "type": "Ember.RenderBuffer"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 194,
          "description": "Allows you to specify a controller action to invoke when either the `enter`\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an `insert-newline`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `insert-newline` attribute, please\nreference the example near the top of this file.",
          "itemtype": "method",
          "name": "insertNewline",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 212,
          "description": "Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an `escape-press`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `escape-press` attribute, please reference\nthe example near the top of this file.",
          "itemtype": "method",
          "name": "cancel",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 228,
          "description": "Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a `focus-in` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-in` attribute, please reference the\nexample near the top of this file.",
          "itemtype": "method",
          "name": "focusIn",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 244,
          "description": "Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a `focus-out` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-out` attribute, please reference the\nexample near the top of this file.",
          "itemtype": "method",
          "name": "focusOut",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 261,
          "description": "Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a `key-press` attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.\n\nFor an example on how to use the `key-press` attribute, please reference the\nexample near the top of this file.",
          "itemtype": "method",
          "name": "keyPress",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 277,
          "description": "Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a `key-up` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `key-up` attribute, please reference the\nexample near the top of this file.",
          "itemtype": "method",
          "name": "keyUp",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 295,
          "description": "Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a `key-down` attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.\n\nFor an example on how to use the `key-down` attribute, please reference the\nexample near the top of this file.",
          "itemtype": "method",
          "name": "keyDown",
          "params": [
            {
              "name": "event",
              "description": "",
              "type": "Event"
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 588,
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 607,
          "itemtype": "method",
          "name": "reopen",
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 642,
          "itemtype": "method",
          "name": "apply",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "applied object"
          },
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 670,
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
          "line": 58,
          "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  action: 'save',\n  actionContext: Ember.computed.alias('context'),\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save',\n      target: this.get('controller'),\n      actionContext: this.get('context')\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with a reference to `this`,\n        // to the current controller\n  }\n});\n```",
          "itemtype": "method",
          "name": "triggerAction",
          "params": [
            {
              "name": "opts",
              "description": "(optional, with the optional keys action, target and/or actionContext)",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "true if the action was sent successfully and did not return false",
            "type": "Boolean"
          },
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.TargetActionSupport"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 588,
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 607,
          "itemtype": "method",
          "name": "reopen",
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 642,
          "itemtype": "method",
          "name": "apply",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "applied object"
          },
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 670,
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
          "line": 13,
          "description": "A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.\n\n```javascript\n// Applies the type attribute to the element\n// with the value \"button\", like <div type=\"button\">\nEmber.View.extend({\n  attributeBindings: ['type'],\n  type: 'button'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as an attribute.\n\n```javascript\n// Renders something like <div enabled=\"enabled\">\nEmber.View.extend({\n  attributeBindings: ['enabled'],\n  enabled: true\n});\n```",
          "itemtype": "property",
          "name": "attributeBindings",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/class_names_support.js",
          "line": 33,
          "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
          "itemtype": "property",
          "name": "classNames",
          "type": "Array",
          "default": "['ember-view']",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/class_names_support.js",
          "line": 44,
          "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nEmber.View.extend({\n  classNameBindings: ['priority']\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent']\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent:urgent']\n  isUrgent: true\n});\n```\n\nThis list of properties is inherited from the view's superclasses as well.",
          "itemtype": "property",
          "name": "classNameBindings",
          "type": "Array",
          "default": "[]",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/instrumentation_support.js",
          "line": 6,
          "description": "Used to identify this view during debugging",
          "itemtype": "property",
          "name": "instrumentDisplay",
          "type": "String",
          "class": "Ember.TextSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 134,
          "description": "The action to be sent when the user presses the return key.\n\nThis is similar to the `{{action}}` helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.",
          "itemtype": "property",
          "name": "action",
          "type": "String",
          "default": "null",
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 147,
          "description": "The event that should send the action.\n\nOptions are:\n\n* `enter`: the user pressed enter\n* `keyPress`: the user pressed a key",
          "itemtype": "property",
          "name": "onEvent",
          "type": "String",
          "default": "enter",
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/text_support.js",
          "line": 161,
          "description": "Whether the `keyUp` event that triggers an `action` to be sent continues\npropagating to other views.\n\nBy default, when the user presses the return key on their keyboard and\nthe text field has an `action` set, the action will be sent to the view's\ncontroller and the key event will stop propagating.\n\nIf you would like parent views to receive the `keyUp` event even after an\naction has been dispatched, set `bubbles` to true.",
          "itemtype": "property",
          "name": "bubbles",
          "type": "Boolean",
          "default": "false",
          "class": "Ember.TextSupport",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.11.4-Ember.Mixin",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.11.4-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.11.4",
          "type": "project-version"
        }
      }
    }
  }
}