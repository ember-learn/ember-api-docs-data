{
  "data": {
    "id": "ember-1.8.1-Ember.Location",
    "type": "namespace",
    "attributes": {
      "name": "Ember.Location",
      "shortname": "Ember.Location",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-routing",
      "namespace": "Ember",
      "file": "../packages/ember-routing/lib/location/api.js",
      "line": 10,
      "description": "Ember.Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`) to force a\nparticular implementation to be used in your application.\n\n### HashLocation\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the `hashchange` event existing in the browser.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.\n\n### HistoryLocation\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.\n\n### AutoLocation\n\nUsing `AutoLocation`, the router will use the best Location class supported by\nthe browser it is running in.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\n### NoneLocation\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.",
      "static": 1,
      "methods": [
        {
          "file": "../packages/ember-routing/lib/ext/view.js",
          "line": 13,
          "description": "Sets the private `_outlets` object on the view.",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/ext/view.js",
          "line": 23,
          "description": "Manually fill any of a view's `{{outlet}}` areas with the\nsupplied view.\n\nExample\n\n```javascript\nvar MyView = Ember.View.extend({\n  template: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n});\nvar myView = MyView.create();\nmyView.appendTo('body');\n// The html for myView now looks like:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\nvar FooView = Ember.View.extend({\n  template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n});\nvar fooView = FooView.create();\nmyView.connectOutlet('main', fooView);\n// The html for myView now looks like:\n// <div id=\"ember228\" class=\"ember-view\">Child view:\n//   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n// </div>\n```",
          "itemtype": "method",
          "name": "connectOutlet",
          "params": [
            {
              "name": "outletName",
              "description": "A unique name for the outlet",
              "type": "String"
            },
            {
              "name": "view",
              "description": "An Ember.View",
              "type": "Object"
            }
          ],
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/ext/view.js",
          "line": 74,
          "description": "Determines if the view has already been created by checking if\nthe view has the same constructor, template, and context as the\nview in the `_outlets` object.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_hasEquivalentView",
          "params": [
            {
              "name": "outletName",
              "description": "The name of the outlet we are checking",
              "type": "String"
            },
            {
              "name": "view",
              "description": "An Ember.View",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/ext/view.js",
          "line": 93,
          "description": "Removes an outlet from the view.\n\nExample\n\n```javascript\nvar MyView = Ember.View.extend({\n  template: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n});\nvar myView = MyView.create();\nmyView.appendTo('body');\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\nvar FooView = Ember.View.extend({\n  template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n});\nvar fooView = FooView.create();\nmyView.connectOutlet('main', fooView);\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view:\n//   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n// </div>\n\nmyView.disconnectOutlet('main');\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n```",
          "itemtype": "method",
          "name": "disconnectOutlet",
          "params": [
            {
              "name": "outletName",
              "description": "The name of the outlet to be removed",
              "type": "String"
            }
          ],
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/ext/view.js",
          "line": 133,
          "description": "Gets an outlet that is pending disconnection and then\nnullifys the object on the `_outlet` object.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_finishDisconnections",
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "../packages/ember-routing/lib/location/api.js",
          "line": 123,
          "description": "This is deprecated in favor of using the container to lookup the location\nimplementation as desired.\n\nFor example:\n\n```javascript\n// Given a location registered as follows:\ncontainer.register('location:history-test', HistoryTestLocation);\n\n// You could create a new instance via:\ncontainer.lookup('location:history-test');\n```",
          "itemtype": "method",
          "name": "create",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "an instance of an implementation of the `location` API",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use the container to lookup the location implementation that you\n need.",
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-routing/lib/location/api.js",
          "line": 153,
          "description": "This is deprecated in favor of using the container to register the\nlocation implementation as desired.\n\nExample:\n\n```javascript\nApplication.initializer({\n name: \"history-test-location\",\n\n initialize: function(container, application) {\n   application.register('location:history-test', HistoryTestLocation);\n }\n});\n```",
          "itemtype": "method",
          "name": "registerImplementation",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "implementation",
              "description": "of the `location` API",
              "type": "Object"
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Register your custom location implementation with the\ncontainer directly.",
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-routing/lib/location/api.js",
          "line": 184,
          "description": "Returns the current `location.hash` by parsing location.href since browsers\ninconsistently URL-decode `location.hash`.\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=483304",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getHash",
          "since": "1.4.0",
          "class": "Ember.Location",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.8.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.8.1",
          "type": "project-version"
        }
      }
    }
  }
}