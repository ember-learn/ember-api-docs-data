{
  "data": {
    "id": "ember-3.1.4-ApplicationInstance",
    "type": "class",
    "attributes": {
      "name": "ApplicationInstance",
      "shortname": "ApplicationInstance",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "file": "packages/ember-application/lib/system/application-instance.js",
      "line": 12,
      "description": "<html><head></head><body><p>The <code>ApplicationInstance</code> encapsulates all of the stateful aspects of a\nrunning <code>Application</code>.</p>\n<p>At a high-level, we break application boot into two distinct phases:</p>\n<ul>\n<li>Definition time, where all of the classes, templates, and other\ndependencies are loaded (typically in the browser).</li>\n<li>Run time, where we begin executing the application once everything\nhas loaded.</li>\n</ul>\n<p>Definition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.</p>\n<p>That state is what the <code>ApplicationInstance</code> manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "extends": "EngineInstance",
      "methods": [
        {
          "file": "packages/ember-application/lib/system/application-instance.js",
          "line": 279,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "setupRegistry",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Registry"
            },
            {
              "name": "options",
              "description": "",
              "type": "BootOptions"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 60,
          "description": "<html><head></head><body><p>Initialize the <code>EngineInstance</code> and return a promise that resolves\nwith the instance itself when the boot process is complete.</p>\n<p>The primary task here is to run any registered instance initializers.</p>\n<p>See the documentation on <code>BootOptions</code> for the options it takes.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "boot",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise<EngineInstance,Error>"
          },
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 115,
          "description": "<html><head></head><body><p>Unregister a factory.</p>\n<p>Overrides <code>RegistryProxy#unregister</code> in order to clear any cached instances\nof the unregistered factory.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 130,
          "description": "<html><head></head><body><p>Build a new <code>EngineInstance</code> that&apos;s a child of this instance.</p>\n<p>Engines must be registered by name with their parent engine\n(or application).</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "buildChildEngineInstance",
          "params": [
            {
              "name": "name",
              "description": "the registered name of the engine.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "options provided to the engine instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "EngineInstance,Error"
          },
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 156,
          "description": "<html><head></head><body><p>Clone dependencies shared between an engine instance and its parent.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "cloneParentDependencies",
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 197,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "setupRegistry",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Registry"
            },
            {
              "name": "options",
              "description": "",
              "type": "BootOptions"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
          "line": 22,
          "description": "<html><head></head><body><p>Returns an object that can be used to provide an owner to a\nmanually created instance.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { getOwner } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n\nlet owner = getOwner(this);\n\n<span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>(\n  <span class=\"keyword\">owner</span>.ownerInjection(),\n  { username: <span class=\"string\">&apos;rwjblue&apos;</span> }\n)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "ownerInjection",
          "since": "2.3.0",
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
          "line": 48,
          "description": "<html><head></head><body><p>Given a fullName return a corresponding instance.</p>\n<p>The default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> registry = <span class=\"keyword\">new</span> Registry();\n<span class=\"keyword\">let</span> container = registry.container();\n\nregistry.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"keyword\">let</span> twitter = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\n\ntwitter <span class=\"keyword\">instanceof</span> Twitter; <span class=\"regexp\">// =&gt; true\n\n//</span> <span class=\"keyword\">by</span> <span class=\"keyword\">default</span> the container will <span class=\"keyword\">return</span> singletons\n<span class=\"keyword\">let</span> twitter2 = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\ntwitter2 <span class=\"keyword\">instanceof</span> Twitter; <span class=\"regexp\">// =&gt; true\n\ntwitter === twitter2; //</span>=&gt; <span class=\"literal\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If singletons are not wanted an optional flag can be provided at lookup.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>let registry = <span class=\"keyword\">new</span> Registry();\nlet <span class=\"built_in\">container</span> = registry.<span class=\"built_in\">container</span>();\n\nregistry.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\nlet twitter = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"literal\">false</span> });\nlet twitter2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"literal\">false</span> });\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
          "line": 96,
          "description": "<html><head></head><body><p>Given a name and a source path, resolve the fullName</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_resolveLocalLookupName",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "source",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
          "line": 124,
          "description": "<html><head></head><body><p>Given a fullName return a factory manager.</p>\n<p> This method returns a manager which can be used for introspection of the\n factory&apos;s class or for the creation of factory instances with initial\n properties. The manager is an object with the following properties:</p>\n<ul>\n<li><code>class</code> - The registered or resolved class.</li>\n<li><code>create</code> - A function that will create an instance of the class with\nany dependencies injected.</li>\n</ul>\n<p> For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>import { getOwner } from &apos;@ember/application&apos;;\n\nlet owner = getOwner(otherInstance);\n// the owner is commonly the `applicationInstance`,<span class=\"built_in\"> and </span>can be accessed via\n// an<span class=\"built_in\"> instance </span>initializer.\n\nlet factory = owner.factoryFor(&apos;service:bespoke&apos;);\n\nfactory.class;\n// The registered<span class=\"built_in\"> or </span>resolved class. For example when used with an Ember-CLI\n// app, this would be the default export from `app/services/bespoke.js`.\n\nlet<span class=\"built_in\"> instance </span>= factory.create({\n  someProperty: &apos;an initial property value&apos;\n});\n// Create an<span class=\"built_in\"> instance </span>with any injections<span class=\"built_in\"> and </span>the passed options as\n// initial properties.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "factoryFor",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "FactoryManager"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 19,
          "description": "<html><head></head><body><p>Given a fullName return the corresponding factory.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "resolveRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 29,
          "description": "<html><head></head><body><p>Registers a factory that can be used for dependency injection (with\n<code>inject</code>) or for service lookup. Each factory is registered with\na full name including two parts: <code>type:name</code>.</p>\n<p>A simple example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, App.Orange);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Ember will resolve factories from the <code>App</code> namespace automatically.\nFor example <code>App.CarsController</code> will be discovered and returned if\nan application requests <code>controller:cars</code>.</p>\n<p>An example of registering a controller with a non-standard name:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n<span class=\"keyword\">let</span> Session = Controller.extend();\n\nApp.register(<span class=\"string\">&apos;controller:session&apos;</span>, Session);\n\n<span class=\"comment\">// The Session controller can now be treated like a normal controller,</span>\n<span class=\"comment\">// despite its non-standard name.</span>\nApp.ApplicationController = Controller.extend({\n  needs: [<span class=\"string\">&apos;session&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Registered factories are <strong>instantiated</strong> by having <code>create</code>\ncalled on them. Additionally they are <strong>singletons</strong>, each time\nthey are looked up they return the same instance.</p>\n<p>Some examples modifying that default behavior:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet App = Application.<span class=\"keyword\">create</span>();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.<span class=\"keyword\">session</span> = EmberObject.<span class=\"keyword\">create</span>();\n\nApp.register(<span class=\"string\">&apos;model:user&apos;</span>, App.Person, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, App.Orange);\nApp.register(<span class=\"string\">&apos;communication:main&apos;</span>, App.Email, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">&apos;session&apos;</span>, App.<span class=\"keyword\">session</span>, { instantiate: <span class=\"keyword\">false</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "type:name (e.g., 'model:user')",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "(e.g., App.Person)",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "(optional) disable instantiation or singleton usage",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 99,
          "description": "<html><head></head><body><p>Unregister a factory.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet App = Application.<span class=\"keyword\">create</span>();\nlet <span class=\"keyword\">User</span> = EmberObject.extend();\nApp.register(<span class=\"string\">&apos;model:user&apos;</span>, <span class=\"keyword\">User</span>);\n\nApp.resolveRegistration(<span class=\"string\">&apos;model:user&apos;</span>).<span class=\"keyword\">create</span>() instanceof <span class=\"keyword\">User</span> //=&gt; <span class=\"keyword\">true</span>\n\nApp.unregister(<span class=\"string\">&apos;model:user&apos;</span>)\nApp.resolveRegistration(<span class=\"string\">&apos;model:user&apos;</span>) === undefined //=&gt; <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 122,
          "description": "<html><head></head><body><p>Check if a factory is registered.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "hasRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 132,
          "description": "<html><head></head><body><p>Return a specific registered option for a particular factory.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOption",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "optionName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 143,
          "description": "<html><head></head><body><p>Register options for a particular factory.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 153,
          "description": "<html><head></head><body><p>Return registered options for a particular factory.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 163,
          "description": "<html><head></head><body><p>Allow registering options for all factories of a type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n\n<span class=\"keyword\">let</span> <span class=\"title class_\">App</span> = <span class=\"title class_\">Application</span>.<span class=\"title function_\">create</span>();\n<span class=\"keyword\">let</span> appInstance = <span class=\"title class_\">App</span>.<span class=\"title function_\">buildInstance</span>();\n\n<span class=\"comment\">// if all of type `connection` must not be singletons</span>\nappInstance.<span class=\"title function_\">registerOptionsForType</span>(<span class=\"string\">&apos;connection&apos;</span>, { <span class=\"attr\">singleton</span>: <span class=\"literal\">false</span> });\n\nappInstance.<span class=\"title function_\">register</span>(<span class=\"string\">&apos;connection:twitter&apos;</span>, <span class=\"title class_\">TwitterConnection</span>);\nappInstance.<span class=\"title function_\">register</span>(<span class=\"string\">&apos;connection:facebook&apos;</span>, <span class=\"title class_\">FacebookConnection</span>);\n\n<span class=\"keyword\">let</span> twitter = appInstance.<span class=\"title function_\">lookup</span>(<span class=\"string\">&apos;connection:twitter&apos;</span>);\n<span class=\"keyword\">let</span> twitter2 = appInstance.<span class=\"title function_\">lookup</span>(<span class=\"string\">&apos;connection:twitter&apos;</span>);\n\ntwitter === twitter2; <span class=\"comment\">// =&gt; false</span>\n\n<span class=\"keyword\">let</span> facebook = appInstance.<span class=\"title function_\">lookup</span>(<span class=\"string\">&apos;connection:facebook&apos;</span>);\n<span class=\"keyword\">let</span> facebook2 = appInstance.<span class=\"title function_\">lookup</span>(<span class=\"string\">&apos;connection:facebook&apos;</span>);\n\nfacebook === facebook2; <span class=\"comment\">// =&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 196,
          "description": "<html><head></head><body><p>Return the registered options for all factories of a type.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
          "line": 206,
          "description": "<html><head></head><body><p>Define a dependency injection onto a specific factory or all factories\nof a type.</p>\n<p>When Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.</p>\n<p>An example of providing a session object to all controllers:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { <span class=\"keyword\">alias</span> } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object/computed&apos;</span>;\n<span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n<span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/controller&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nlet App = Application.<span class=\"keyword\">create</span>();\nlet <span class=\"keyword\">Session</span> = EmberObject.extend({ isAuthenticated: <span class=\"keyword\">false</span> });\n\n// A factory must be registered <span class=\"keyword\">before</span> it can be injected\nApp.register(<span class=\"string\">&apos;session:main&apos;</span>, <span class=\"keyword\">Session</span>);\n\n// Inject <span class=\"string\">&apos;session:main&apos;</span> onto <span class=\"keyword\">all</span> factories <span class=\"keyword\">of</span> the <span class=\"keyword\">type</span> <span class=\"string\">&apos;controller&apos;</span>\n// <span class=\"keyword\">with</span> the <span class=\"type\">name</span> <span class=\"string\">&apos;session&apos;</span>\nApp.inject(<span class=\"string\">&apos;controller&apos;</span>, <span class=\"string\">&apos;session&apos;</span>, <span class=\"string\">&apos;session:main&apos;</span>);\n\nApp.IndexController = Controller.extend({\n  isLoggedIn: <span class=\"keyword\">alias</span>(<span class=\"string\">&apos;session.isAuthenticated&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Injections can also be performed on specific factories.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">App</span>.inject(&lt;full_name or <span class=\"keyword\">type</span>&gt;, &lt;property name&gt;, &lt;full_name&gt;)\n<span class=\"type\">App</span>.inject(<span class=\"symbol\">&apos;route&apos;</span>, <span class=\"symbol\">&apos;source&apos;</span>, <span class=\"symbol\">&apos;source</span>:main&apos;)\n<span class=\"type\">App</span>.inject(<span class=\"symbol\">&apos;route</span>:application&apos;, <span class=\"symbol\">&apos;email&apos;</span>, <span class=\"symbol\">&apos;model</span>:email&apos;)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via <code>create</code> or <code>new</code>) bypasses the dependency injection\nsystem.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "inject",
          "params": [
            {
              "name": "factoryNameOrType",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 296,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">EmberObject</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> <span class=\"title class_\">Person</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) {\n    <span class=\"title function_\">alert</span>(<span class=\"string\">`Name is <span class=\"subst\">${<span class=\"variable language_\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>)}</span>`</span>);\n  }\n});\n\n<span class=\"keyword\">let</span> steve = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Steve&apos;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code>,\nbe sure to call <code>this._super(...arguments)</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 511,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 537,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 545,
          "description": "<html><head></head><body><p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 558,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject from &apos;@ember/<span class=\"keyword\">object</span>&apos;;\n\nconst Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">EmberObject</span>.</span></span>extend<span class=\"literal\">()</span>;\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>const Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>;\n<span class=\"keyword\">let</span> student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>;\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;(subclass of Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">const</span> Teacher = Person.extend({\n  toStringExtension() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>);\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); <span class=\"comment\">//=&gt; &quot;&lt;Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 97,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nfullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 142,
          "description": "<html><head></head><body><p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 167,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&quot;key&quot;</span>, value);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method is generally very similar to calling <code>object[&quot;key&quot;] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 216,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.<span class=\"title function_ invoke__\">setProperties</span>({ <span class=\"attr\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 234,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 254,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 273,
          "itemtype": "method",
          "name": "propertyWillChange",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 282,
          "itemtype": "method",
          "name": "propertyDidChange",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 291,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 309,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Component</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_super</span>(...<span class=\"variable language_\">arguments</span>);\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">addObserver</span>(<span class=\"string\">&apos;foo&apos;</span>, <span class=\"variable language_\">this</span>, <span class=\"string\">&apos;fooDidChange&apos;</span>);\n  },\n\n  <span class=\"title function_\">fooDidChange</span>(<span class=\"params\">sender, key, value, rev</span>) {\n    <span class=\"comment\">// your code</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>sender</code> is the object that changed. The <code>key</code> is the property that\nchanges. The <code>value</code> property is currently reserved and unused. The <code>rev</code>\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>Usually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 360,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 377,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 392,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>person.getWithDefault(&apos;lastName&apos;, &apos;Doe&apos;);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 410,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>person.increment<span class=\"constructor\">Property(&apos;<span class=\"params\">age</span>&apos;)</span>;\nteam.increment<span class=\"constructor\">Property(&apos;<span class=\"params\">score</span>&apos;, 2)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 430,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>player.decrement<span class=\"constructor\">Property(&apos;<span class=\"params\">lives</span>&apos;)</span>;\norc.decrement<span class=\"constructor\">Property(&apos;<span class=\"params\">health</span>&apos;, 5)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 450,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>starship.toggle<span class=\"constructor\">Property(&apos;<span class=\"params\">warpDriveEngaged</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 467,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-application/lib/system/application-instance.js",
          "line": 38,
          "description": "<html><head></head><body><p>The <code>Application</code> for which this is an instance.</p>\n</body></html>",
          "itemtype": "property",
          "name": "application",
          "type": "Application",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/ember-application/lib/system/application-instance.js",
          "line": 46,
          "description": "<html><head></head><body><p>The DOM events for which the event dispatcher should listen.</p>\n<p>By default, the application&apos;s <code>Ember.EventDispatcher</code> listens\nfor a set of standard DOM events, such as <code>mousedown</code> and\n<code>keyup</code>, and delegates them to your application&apos;s <code>Ember.View</code>\ninstances.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "customEvents",
          "type": "Object",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/ember-application/lib/system/application-instance.js",
          "line": 59,
          "description": "<html><head></head><body><p>The root DOM element of the Application as an element or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector\nstring</a>.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "rootElement",
          "type": "String|DOMElement",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/ember-application/lib/system/engine-instance.js",
          "line": 28,
          "description": "<html><head></head><body><p>The base <code>Engine</code> for which this is an instance.</p>\n</body></html>",
          "itemtype": "property",
          "name": "engine",
          "type": "Engine",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
          "line": 14,
          "description": "<html><head></head><body><p>The container stores state.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "__container__",
          "type": "Ember.Container",
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 336,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Bar = EmberObject.extend({\n  <span class=\"comment\">// Configure which properties to concatenate</span>\n  concatenatedProperties: [<span class=\"string\">&apos;concatenatedProperty&apos;</span>],\n\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"keyword\">const</span> FooBar = Bar.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>]\n});\n\n<span class=\"keyword\">let</span> fooBar = FooBar.create();\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); <span class=\"comment\">// [&apos;foo&apos;]</span>\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); <span class=\"comment\">// [&apos;bar&apos;, &apos;foo&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = FooBar.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;baz&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = FooBar.<span class=\"keyword\">create</span>({\n  concatenatedProperty: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Component</code> the <code>classNames</code>, <code>classNameBindings</code> and\n<code>attributeBindings</code> properties are concatenated.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 411,
          "description": "<html><head></head><body><p>Defines the properties that will be merged from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by merging the superclass property value\nwith the subclass property&apos;s value. An example of this in use within Ember\nis the <code>queryParams</code> property of routes.</p>\n<p>Here is some sample code showing the difference between a merged\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> <span class=\"variable constant_\">Bar</span> = EmberObject.<span class=\"title function_ invoke__\">extend</span>({\n  // Configure which properties are to be merged\n  <span class=\"attr\">mergedProperties</span>: [<span class=\"string\">&apos;mergedProperty&apos;</span>],\n\n  <span class=\"attr\">someNonMergedProperty</span>: {\n    <span class=\"attr\">nonMerged</span>: <span class=\"string\">&apos;superclass value of nonMerged&apos;</span>\n  },\n  <span class=\"attr\">mergedProperty</span>: {\n    <span class=\"attr\">page</span>: { <span class=\"attr\">replace</span>: <span class=\"literal\">false</span> },\n    <span class=\"attr\">limit</span>: { <span class=\"attr\">replace</span>: <span class=\"literal\">true</span> }\n  }\n});\n\n<span class=\"keyword\">const</span> <span class=\"variable constant_\">FooBar</span> = Bar.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">someNonMergedProperty</span>: {\n    <span class=\"attr\">completelyNonMerged</span>: <span class=\"string\">&apos;subclass value of nonMerged&apos;</span>\n  },\n  <span class=\"attr\">mergedProperty</span>: {\n    <span class=\"attr\">limit</span>: { <span class=\"attr\">replace</span>: <span class=\"literal\">false</span> }\n  }\n});\n\nlet fooBar = FooBar.<span class=\"title function_ invoke__\">create</span>();\n\nfooBar.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;someNonMergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; { completelyNonMerged: &apos;subclass value of nonMerged&apos; }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the entire object, including the nonMerged property of</span>\n<span class=\"comment\">// the superclass object, has been replaced</span>\n\nfooBar.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;mergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; {</span>\n<span class=\"comment\">//   page: {replace: false},</span>\n<span class=\"comment\">//   limit: {replace: false}</span>\n<span class=\"comment\">// }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the page remains from the superclass, and the</span>\n<span class=\"comment\">// `limit` property&apos;s value of `false` has been merged from</span>\n<span class=\"comment\">// the subclass.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior is not available during object <code>create</code> calls. It is only\navailable at <code>extend</code> time.</p>\n<p>In <code>Route</code> the <code>queryParams</code> property is merged.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 487,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 499,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-3.1.4-EngineInstance",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.1.4-@ember/application",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.1.4",
          "type": "project-version"
        }
      }
    }
  }
}