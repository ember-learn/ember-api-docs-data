{
  "data": {
    "id": "ember-3.0.0-ControllerMixin",
    "type": "class",
    "attributes": {
      "name": "ControllerMixin",
      "shortname": "ControllerMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 32,
          "description": "This property is updated to various different callback functions depending on\nthe current \"state\" of the backing route. It is used by\n`Controller.prototype._qpChanged`.\n\nThe methods backing each state can be found in the `Route.prototype._qp` computed\nproperty return value (the `.states` property). The current values are listed here for\nthe sanity of future travelers:\n\n* `inactive` - This state is used when this controller instance is not part of the active\n  route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and\n  `Route.prototype.actions.finalizeQueryParamChange`.\n* `active` - This state is used when this controller instance is part of the active\n  route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.\n* `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).",
          "itemtype": "method",
          "name": "_qpDelegate",
          "access": "private",
          "tagname": "",
          "class": "ControllerMixin",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 53,
          "description": "During `Route#setup` observers are created to invoke this method\nwhen any of the query params declared in `Controller#queryParams` property\nare changed.\n\n\nWhen invoked this method uses the currently active query param update delegate\n(see `Controller.prototype._qpDelegate` for details) and invokes it with\nthe QP key/value being changed.",
          "itemtype": "method",
          "name": "_qpChanged",
          "access": "private",
          "tagname": "",
          "class": "ControllerMixin",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 74,
          "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\naController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.transitionToRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.transitionToRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nroute tree.\n\n```js {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('blogPost', { path: ':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n```\n\n```javascript\naController.transitionToRoute('blogComment', aPost, aComment);\naController.transitionToRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\naController.transitionToRoute('/');\naController.transitionToRoute('/blog/post/1/comment/13');\naController.transitionToRoute('/blog/posts?sort=title');\n```\n\nAn options hash with a `queryParams` property may be provided as\nthe final argument to add query parameters to the destination URL.\n\n```javascript\naController.transitionToRoute('blogPost', 1, {\n  queryParams: { showComments: 'true' }\n});\n\n// if you just want to transition the query parameters without changing the route\naController.transitionToRoute({ queryParams: { sort: 'date' } });\n```\n\nSee also [replaceRoute](/api/ember/release/classes/Ember.ControllerMixin/methods/replaceRoute?anchor=replaceRoute).",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used\n  while transitioning to the route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "itemtype": "method",
          "name": "transitionToRoute",
          "access": "public",
          "tagname": "",
          "class": "ControllerMixin",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 155,
          "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.replaceRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nroute tree.\n\n```js {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('blogPost', { path: ':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n```\n\n```\naController.replaceRoute('blogComment', aPost, aComment);\naController.replaceRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\naController.replaceRoute('/');\naController.replaceRoute('/blog/post/1/comment/13');\n```",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or a URL",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used\nwhile transitioning to the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "replaceRoute",
          "access": "public",
          "tagname": "",
          "class": "ControllerMixin",
          "module": "ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-routing/lib/ext/controller.js",
          "line": 12,
          "description": "Defines which query parameters the controller accepts.\nIf you give the names `['category','page']` it will bind\nthe values of these query parameters to the variables\n`this.category` and `this.page`.\nBy default, Ember coerces query parameter values using `toggleProperty`.\nThis behavior may lead to unexpected results.\nTo explicitly configure a query parameter property so it coerces as expected, you must define a type property:\n```javascript\n  queryParams: [{\n    category: {\n      type: 'boolean'\n    }\n  }]\n```",
          "itemtype": "property",
          "name": "queryParams",
          "access": "public",
          "tagname": "",
          "class": "ControllerMixin",
          "module": "ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.0.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.0.0",
          "type": "project-version"
        }
      }
    }
  }
}