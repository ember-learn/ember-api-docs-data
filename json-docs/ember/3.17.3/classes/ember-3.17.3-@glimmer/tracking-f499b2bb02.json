{
  "data": {
    "id": "ember-3.17.3-@glimmer/tracking",
    "type": "class",
    "attributes": {
      "name": "@glimmer/tracking",
      "shortname": "@glimmer/tracking",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@glimmer/tracking",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/glimmer/lib/glimmer-tracking-docs.ts",
          "line": 14,
          "description": "<html><head></head><body><p>Marks a property as tracked. By default, values that are rendered in Ember app\ntemplates are <em>static</em>, meaning that updates to them won&apos;t cause the\napplication to rerender. Marking a property as tracked means that when that\nproperty changes, any templates that used that property, directly or\nindirectly, will rerender. For instance, consider this component:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Count: </span><span class=\"template-variable\">{{<span class=\"name\">this.count</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Times Ten: </span><span class=\"template-variable\">{{<span class=\"name\">this.timesTen</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"name\">on</span> <span class=\"string\">&quot;click&quot;</span> this.plusOne}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n    Plus One\n  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@glimmer</span>/tracking&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@tracked</span> count = <span class=\"number\">0</span>;\n\n  get timesTen() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count * <span class=\"number\">10</span>;\n  }\n\n  <span class=\"meta\">@action</span>\n  plusOne() {\n    <span class=\"keyword\">this</span>.count += <span class=\"number\">1</span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Both the <code>{{this.count}}</code> and the <code>{{this.timesTen}}</code> properties in the\ntemplate will update whenever the button is clicked. Any tracked properties\nthat are used in any way to calculate a value that is used in the template\nwill cause a rerender when updated - this includes through method calls and\nother means:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Component</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/component&apos;</span>;\n<span class=\"keyword\">import</span> { tracked } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> {\n  <span class=\"meta\">@tracked</span> name;\n  <span class=\"meta\">@tracked</span> phoneNumber;\n\n  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, phoneNumber</span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;\n    <span class=\"variable language_\">this</span>.<span class=\"property\">phoneNumber</span> = phoneNumber;\n  }\n}\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PhoneBookComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> {\n  entries = [\n    <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>(<span class=\"string\">&apos;Pizza Palace&apos;</span>, <span class=\"number\">5551234</span>),\n    <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>(<span class=\"string\">&apos;1st Street Cleaners&apos;</span>, <span class=\"number\">5554321</span>),\n    <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>(<span class=\"string\">&apos;Plants R Us&apos;</span>, <span class=\"number\">5552468</span>),\n  ];\n\n  <span class=\"comment\">// Any usage of this property will update whenever any of the names in the</span>\n  <span class=\"comment\">// entries arrays are updated</span>\n  <span class=\"keyword\">get</span> <span class=\"title function_\">names</span>() {\n    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">entries</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"property\">name</span>);\n  }\n\n  <span class=\"comment\">// Any usage of this property will update whenever any of the numbers in the</span>\n  <span class=\"comment\">// entries arrays are updated</span>\n  <span class=\"keyword\">get</span> <span class=\"title function_\">numbers</span>() {\n    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getFormattedNumbers</span>();\n  }\n\n  <span class=\"title function_\">getFormattedNumbers</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">entries</span>\n      .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"property\">phoneNumber</span>)\n      .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> {\n        <span class=\"keyword\">let</span> numberString = <span class=\"string\">&apos;&apos;</span> + <span class=\"built_in\">number</span>;\n\n        <span class=\"keyword\">return</span> numberString.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>) + <span class=\"string\">&apos;-&apos;</span> + numberString.<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>);\n      });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>tracked</code> can also be used with the classic Ember object model in a similar\nmanner to classic computed properties:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">EmberObject</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n<span class=\"keyword\">import</span> { tracked } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking&apos;</span>;\n\n<span class=\"keyword\">const</span> <span class=\"title class_\">Entry</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">name</span>: <span class=\"title function_\">tracked</span>(),\n  <span class=\"attr\">phoneNumber</span>: <span class=\"title function_\">tracked</span>()\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Often this is unnecessary, but to ensure robust auto-tracking behavior it is\nadvisable to mark tracked state appropriately wherever possible.</p>\n<p>This form of <code>tracked</code> also accepts an optional configuration object\ncontaining either an initial <code>value</code> or an <code>initializer</code> function (but not\nboth).</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n<span class=\"keyword\">import</span> { tracked } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking&apos;</span>;\n\nconst Entry = EmberObject.extend({\n  name: tracked({ value: <span class=\"string\">&apos;Zoey&apos;</span> }),\n  favoriteSongs: tracked({\n    initializer: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [<span class=\"string\">&apos;Raspberry Beret&apos;</span>, <span class=\"string\">&apos;Time After Time&apos;</span>]\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "tracked",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking",
          "module": "@glimmer/tracking"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.17.3-@glimmer/tracking",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.17.3",
          "type": "project-version"
        }
      }
    }
  }
}