{
  "data": {
    "id": "ember-3.17.0-@ember/utils",
    "type": "module",
    "attributes": {
      "name": "@ember/utils",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/utils/lib/invoke.ts",
      "line": 23,
      "parent": null,
      "publicclasses": [],
      "privateclasses": [],
      "staticfunctions": {
        "@ember/utils": [
          {
            "file": "packages/@ember/-internals/runtime/lib/compare.js",
            "line": 44,
            "description": "Compares two javascript values and returns:\n\n - -1 if the first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first is greater than the second.\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 'hello');  // 0\n compare('abc', 'dfg');      // -1\n compare(2, 1);              // 1\n ```\n\nIf the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered `<` types\nlater in the list:\n\n - undefined\n - null\n - boolean\n - number\n - string\n - array\n - object\n - instance\n - function\n - class\n - date\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 50);       // 1\n compare(50, 'hello');       // -1\n ```",
            "itemtype": "method",
            "name": "compare",
            "static": 1,
            "params": [
              {
                "name": "v",
                "description": "First value to compare",
                "type": "Object"
              },
              {
                "name": "w",
                "description": "Second value to compare",
                "type": "Object"
              }
            ],
            "return": {
              "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
              "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_blank.ts",
            "line": 5,
            "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nimport { isBlank } from '@ember/utils';\n\nisBlank();                // true\nisBlank(null);            // true\nisBlank(undefined);       // true\nisBlank('');              // true\nisBlank([]);              // true\nisBlank('\\n\\t');          // true\nisBlank('  ');            // true\nisBlank({});              // false\nisBlank('\\n\\t Hello');    // false\nisBlank('Hello world');   // false\nisBlank([1,2,3]);         // false\n```",
            "itemtype": "method",
            "name": "isBlank",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_empty.ts",
            "line": 5,
            "description": "Verifies that a value is `null` or `undefined`, an empty string, or an empty\narray.\n\nConstrains the rules on `isNone` by returning true for empty strings and\nempty arrays.\n\nIf the value is an object with a `size` property of type number, it is used\nto check emptiness.\n\n```javascript\nisEmpty();                 // true\nisEmpty(null);             // true\nisEmpty(undefined);        // true\nisEmpty('');               // true\nisEmpty([]);               // true\nisEmpty({ size: 0});       // true\nisEmpty({});               // false\nisEmpty('Adam Hawkins');   // false\nisEmpty([0,1,2]);          // false\nisEmpty('\\n\\t');           // false\nisEmpty('  ');             // false\nisEmpty({ size: 1 })       // false\nisEmpty({ size: () => 0 }) // false\n```",
            "itemtype": "method",
            "name": "isEmpty",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/runtime/lib/is-equal.js",
            "line": 4,
            "description": "Compares two objects, returning true if they are equal.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual('hello', 'hello');                   // true\nisEqual(1, 2);                               // false\n```\n\n`isEqual` is a more specific comparison than a triple equal comparison.\nIt will call the `isEqual` instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\nlet Person = EmberObject.extend({\n  isEqual(other) { return this.ssn == other.ssn; }\n});\n\nlet personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\nlet personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n\nisEqual(personA, personB); // true\n```\n\nDue to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual([4, 2], [4, 2]);                     // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "static": 1,
            "params": [
              {
                "name": "a",
                "description": "first object to compare",
                "type": "Object"
              },
              {
                "name": "b",
                "description": "second object to compare",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_none.ts",
            "line": 4,
            "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nisNone();              // true\nisNone(null);          // true\nisNone(undefined);     // true\nisNone('');            // false\nisNone([]);            // false\nisNone(function() {}); // false\n```",
            "itemtype": "method",
            "name": "isNone",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_present.ts",
            "line": 5,
            "description": "A value is present if it not `isBlank`.\n\n```javascript\nisPresent();                // false\nisPresent(null);            // false\nisPresent(undefined);       // false\nisPresent('');              // false\nisPresent('  ');            // false\nisPresent('\\n\\t');          // false\nisPresent([]);              // false\nisPresent({ length: 0 });   // false\nisPresent(false);           // true\nisPresent(true);            // true\nisPresent('string');        // true\nisPresent(0);               // true\nisPresent(function() {});   // true\nisPresent({});              // true\nisPresent('\\n\\t Hello');    // true\nisPresent([1, 2, 3]);       // true\n```",
            "itemtype": "method",
            "name": "isPresent",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/utils/lib/invoke.ts",
            "line": 27,
            "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n\n```javascript\nimport { tryInvoke } from '@ember/utils';\n\nlet d = new Date('03/15/2013');\n\ntryInvoke(d, 'getTime');              // 1363320000000\ntryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\ntryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
            "itemtype": "method",
            "name": "tryInvoke",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to check for the method",
                "type": "Object"
              },
              {
                "name": "methodName",
                "description": "The method name to check for",
                "type": "String"
              },
              {
                "name": "args",
                "description": "The arguments to pass to the method",
                "type": "Array",
                "optional": true
              }
            ],
            "return": {
              "description": "the return value of the invoked method or undefined if it cannot be invoked",
              "type": "*"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/runtime/lib/type-of.js",
            "line": 24,
            "description": "Returns a consistent type for the passed object.\n\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n\n    | Return Value  | Meaning                                              |\n    |---------------|------------------------------------------------------|\n    | 'string'      | String primitive or String object.                   |\n    | 'number'      | Number primitive or Number object.                   |\n    | 'boolean'     | Boolean primitive or Boolean object.                 |\n    | 'null'        | Null value                                           |\n    | 'undefined'   | Undefined value                                      |\n    | 'function'    | A function                                           |\n    | 'array'       | An instance of Array                                 |\n    | 'regexp'      | An instance of RegExp                                |\n    | 'date'        | An instance of Date                                  |\n    | 'filelist'    | An instance of FileList                              |\n    | 'class'       | An Ember class (created using EmberObject.extend())  |\n    | 'instance'    | An Ember object instance                             |\n    | 'error'       | An instance of the Error object                      |\n    | 'object'      | A JavaScript object not inheriting from EmberObject  |\n\nExamples:\n\n```javascript\nimport { A } from '@ember/array';\nimport { typeOf } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\ntypeOf();                       // 'undefined'\ntypeOf(null);                   // 'null'\ntypeOf(undefined);              // 'undefined'\ntypeOf('michael');              // 'string'\ntypeOf(new String('michael'));  // 'string'\ntypeOf(101);                    // 'number'\ntypeOf(new Number(101));        // 'number'\ntypeOf(true);                   // 'boolean'\ntypeOf(new Boolean(true));      // 'boolean'\ntypeOf(A);                      // 'function'\ntypeOf(A());                    // 'array'\ntypeOf([1, 2, 90]);             // 'array'\ntypeOf(/abc/);                  // 'regexp'\ntypeOf(new Date());             // 'date'\ntypeOf(event.target.files);     // 'filelist'\ntypeOf(EmberObject.extend());   // 'class'\ntypeOf(EmberObject.create());   // 'instance'\ntypeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\ntypeOf({ a: 'b' });             // 'object'\n```",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
              {
                "name": "item",
                "description": "the item to check",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the type",
              "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember/utils",
            "module": "@ember/utils"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember/utils": [
          {
            "file": "packages/@ember/-internals/runtime/lib/compare.js",
            "line": 44,
            "description": "Compares two javascript values and returns:\n\n - -1 if the first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first is greater than the second.\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 'hello');  // 0\n compare('abc', 'dfg');      // -1\n compare(2, 1);              // 1\n ```\n\nIf the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered `<` types\nlater in the list:\n\n - undefined\n - null\n - boolean\n - number\n - string\n - array\n - object\n - instance\n - function\n - class\n - date\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 50);       // 1\n compare(50, 'hello');       // -1\n ```",
            "itemtype": "method",
            "name": "compare",
            "static": 1,
            "params": [
              {
                "name": "v",
                "description": "First value to compare",
                "type": "Object"
              },
              {
                "name": "w",
                "description": "Second value to compare",
                "type": "Object"
              }
            ],
            "return": {
              "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
              "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_blank.ts",
            "line": 5,
            "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nimport { isBlank } from '@ember/utils';\n\nisBlank();                // true\nisBlank(null);            // true\nisBlank(undefined);       // true\nisBlank('');              // true\nisBlank([]);              // true\nisBlank('\\n\\t');          // true\nisBlank('  ');            // true\nisBlank({});              // false\nisBlank('\\n\\t Hello');    // false\nisBlank('Hello world');   // false\nisBlank([1,2,3]);         // false\n```",
            "itemtype": "method",
            "name": "isBlank",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_empty.ts",
            "line": 5,
            "description": "Verifies that a value is `null` or `undefined`, an empty string, or an empty\narray.\n\nConstrains the rules on `isNone` by returning true for empty strings and\nempty arrays.\n\nIf the value is an object with a `size` property of type number, it is used\nto check emptiness.\n\n```javascript\nisEmpty();                 // true\nisEmpty(null);             // true\nisEmpty(undefined);        // true\nisEmpty('');               // true\nisEmpty([]);               // true\nisEmpty({ size: 0});       // true\nisEmpty({});               // false\nisEmpty('Adam Hawkins');   // false\nisEmpty([0,1,2]);          // false\nisEmpty('\\n\\t');           // false\nisEmpty('  ');             // false\nisEmpty({ size: 1 })       // false\nisEmpty({ size: () => 0 }) // false\n```",
            "itemtype": "method",
            "name": "isEmpty",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/runtime/lib/is-equal.js",
            "line": 4,
            "description": "Compares two objects, returning true if they are equal.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual('hello', 'hello');                   // true\nisEqual(1, 2);                               // false\n```\n\n`isEqual` is a more specific comparison than a triple equal comparison.\nIt will call the `isEqual` instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\nlet Person = EmberObject.extend({\n  isEqual(other) { return this.ssn == other.ssn; }\n});\n\nlet personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\nlet personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n\nisEqual(personA, personB); // true\n```\n\nDue to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual([4, 2], [4, 2]);                     // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "static": 1,
            "params": [
              {
                "name": "a",
                "description": "first object to compare",
                "type": "Object"
              },
              {
                "name": "b",
                "description": "second object to compare",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_none.ts",
            "line": 4,
            "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nisNone();              // true\nisNone(null);          // true\nisNone(undefined);     // true\nisNone('');            // false\nisNone([]);            // false\nisNone(function() {}); // false\n```",
            "itemtype": "method",
            "name": "isNone",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/is_present.ts",
            "line": 5,
            "description": "A value is present if it not `isBlank`.\n\n```javascript\nisPresent();                // false\nisPresent(null);            // false\nisPresent(undefined);       // false\nisPresent('');              // false\nisPresent('  ');            // false\nisPresent('\\n\\t');          // false\nisPresent([]);              // false\nisPresent({ length: 0 });   // false\nisPresent(false);           // true\nisPresent(true);            // true\nisPresent('string');        // true\nisPresent(0);               // true\nisPresent(function() {});   // true\nisPresent({});              // true\nisPresent('\\n\\t Hello');    // true\nisPresent([1, 2, 3]);       // true\n```",
            "itemtype": "method",
            "name": "isPresent",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Value to test",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Boolean"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/utils/lib/invoke.ts",
            "line": 27,
            "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n\n```javascript\nimport { tryInvoke } from '@ember/utils';\n\nlet d = new Date('03/15/2013');\n\ntryInvoke(d, 'getTime');              // 1363320000000\ntryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\ntryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
            "itemtype": "method",
            "name": "tryInvoke",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to check for the method",
                "type": "Object"
              },
              {
                "name": "methodName",
                "description": "The method name to check for",
                "type": "String"
              },
              {
                "name": "args",
                "description": "The arguments to pass to the method",
                "type": "Array",
                "optional": true
              }
            ],
            "return": {
              "description": "the return value of the invoked method or undefined if it cannot be invoked",
              "type": "*"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/utils",
            "module": "@ember/utils"
          },
          {
            "file": "packages/@ember/-internals/runtime/lib/type-of.js",
            "line": 24,
            "description": "Returns a consistent type for the passed object.\n\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n\n    | Return Value  | Meaning                                              |\n    |---------------|------------------------------------------------------|\n    | 'string'      | String primitive or String object.                   |\n    | 'number'      | Number primitive or Number object.                   |\n    | 'boolean'     | Boolean primitive or Boolean object.                 |\n    | 'null'        | Null value                                           |\n    | 'undefined'   | Undefined value                                      |\n    | 'function'    | A function                                           |\n    | 'array'       | An instance of Array                                 |\n    | 'regexp'      | An instance of RegExp                                |\n    | 'date'        | An instance of Date                                  |\n    | 'filelist'    | An instance of FileList                              |\n    | 'class'       | An Ember class (created using EmberObject.extend())  |\n    | 'instance'    | An Ember object instance                             |\n    | 'error'       | An instance of the Error object                      |\n    | 'object'      | A JavaScript object not inheriting from EmberObject  |\n\nExamples:\n\n```javascript\nimport { A } from '@ember/array';\nimport { typeOf } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\ntypeOf();                       // 'undefined'\ntypeOf(null);                   // 'null'\ntypeOf(undefined);              // 'undefined'\ntypeOf('michael');              // 'string'\ntypeOf(new String('michael'));  // 'string'\ntypeOf(101);                    // 'number'\ntypeOf(new Number(101));        // 'number'\ntypeOf(true);                   // 'boolean'\ntypeOf(new Boolean(true));      // 'boolean'\ntypeOf(A);                      // 'function'\ntypeOf(A());                    // 'array'\ntypeOf([1, 2, 90]);             // 'array'\ntypeOf(/abc/);                  // 'regexp'\ntypeOf(new Date());             // 'date'\ntypeOf(event.target.files);     // 'filelist'\ntypeOf(EmberObject.extend());   // 'class'\ntypeOf(EmberObject.create());   // 'instance'\ntypeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\ntypeOf({ a: 'b' });             // 'object'\n```",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
              {
                "name": "item",
                "description": "the item to check",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the type",
              "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember/utils",
            "module": "@ember/utils"
          }
        ]
      },
      "version": "3.17.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-3.17.0",
          "type": "project-version"
        }
      }
    }
  }
}