{
  "data": {
    "id": "ember-2.0.3-ember-application",
    "type": "module",
    "attributes": {
      "name": "ember-application",
      "submodules": {},
      "fors": {},
      "is_submodule": 1,
      "namespaces": {
        "Ember": 1
      },
      "namespace": "",
      "file": "packages/ember-application/lib/system/resolver.js",
      "line": 38,
      "access": "private",
      "tagname": "",
      "description": "<html><head></head><body><p>An instance of <code>Ember.Application</code> is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.</p>\n<p>Each Ember app has one and only one <code>Ember.Application</code> object. In fact, the\nvery first thing you should do in your application is create the instance:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">window</span>.App = Ember.Application.<span class=\"keyword\">create</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Typically, the application object is the only global variable. All other\nclasses in your app should be properties on the <code>Ember.Application</code> instance,\nwhich highlights its first role: a global namespace.</p>\n<p>For example, if you define a view class, it might look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">App</span>.MyView = Ember.<span class=\"keyword\">View</span>.extend();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, calling <code>Ember.Application.create()</code> will automatically initialize\nyour application by calling the <code>Ember.Application.initialize()</code> method. If\nyou need to delay initialization, you can call your app&apos;s <code>deferReadiness()</code>\nmethod. When you are ready for your app to be initialized, call its\n<code>advanceReadiness()</code> method.</p>\n<p>You can define a <code>ready</code> method on the <code>Ember.Application</code> instance, which\nwill be run by Ember when the application is initialized.</p>\n<p>Because <code>Ember.Application</code> inherits from <code>Ember.Namespace</code>, any classes\nyou create will have useful string representations when calling <code>toString()</code>.\nSee the <code>Ember.Namespace</code> documentation for more information.</p>\n<p>While you can think of your <code>Ember.Application</code> as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.</p>\n<h3 id=\"event-delegation\">Event Delegation</h3>\n<p>Ember uses a technique called <em>event delegation</em>. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n<code>mousedown</code> listener on its associated element, Ember sets up a <code>mousedown</code>\nlistener on the <code>body</code>.</p>\n<p>If a <code>mousedown</code> event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir <code>mouseDown</code> method as it goes.</p>\n<p><code>Ember.Application</code> has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the <code>keypress</code> event causes the <code>keyPress</code> method on the view to be\ncalled, the <code>dblclick</code> event causes <code>doubleClick</code> to be called, and so on.</p>\n<p>If there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application&apos;s <code>customEvents</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var App = Ember.Application.create({\n  customEvents: {\n    // <span class=\"keyword\">add</span><span class=\"bash\"> support <span class=\"keyword\">for</span> the paste event\n</span>    paste: <span class=\"string\">&apos;paste&apos;</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.</p>\n<p>For example, if only events inside a DOM element with the ID of <code>ember-app</code>\nshould be delegated, set your application&apos;s <code>rootElement</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">var App</span> = Ember.Application.create({\n  rootElement: <span class=\"string\">&apos;#ember-app&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>rootElement</code> can be either a DOM element or a jQuery-compatible selector\nstring. Note that <em>views appended to the DOM outside the root element will\nnot receive events.</em> If you specify a custom root element, make sure you only\nappend views inside it!</p>\n<p>To learn more about the advantages of event delegation and the Ember view\nlayer, and a list of the event listeners that are setup by default, visit the\n<a href=\"http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation\">Ember View Layer guide</a>.</p>\n<h3 id=\"initializers\">Initializers</h3>\n<p>Libraries on top of Ember can add initializers, like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.Application</span><span class=\"selector-class\">.initializer</span>({\n  <span class=\"attribute\">name</span>: <span class=\"string\">&apos;api-adapter&apos;</span>,\n\n  initialize: <span class=\"built_in\">function</span>(container, application) {\n    application.<span class=\"built_in\">register</span>(<span class=\"string\">&apos;api-adapter:main&apos;</span>, ApiAdapter);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Initializers provide an opportunity to access the container, which\norganizes the different components of an Ember application. Additionally\nthey provide a chance to access the instantiated application. Beyond\nbeing used for libraries, initializers are also a great way to organize\ndependency injection or setup in your own application.</p>\n<h3 id=\"routing\">Routing</h3>\n<p>In addition to creating your application&apos;s router, <code>Ember.Application</code> is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the <code>LOG_TRANSITIONS</code> flag, and more\ndetailed intra-transition logging can be logged with\nthe <code>LOG_TRANSITIONS_INTERNAL</code> flag:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">var</span> <span class=\"string\">App</span> <span class=\"string\">=</span> <span class=\"string\">Ember.Application.create({</span>\n<span class=\"attr\">  LOG_TRANSITIONS:</span> <span class=\"literal\">true</span><span class=\"string\">,</span> <span class=\"string\">//</span> <span class=\"string\">basic</span> <span class=\"string\">logging</span> <span class=\"string\">of</span> <span class=\"string\">successful</span> <span class=\"string\">transitions</span>\n<span class=\"attr\">  LOG_TRANSITIONS_INTERNAL:</span> <span class=\"literal\">true</span> <span class=\"string\">//</span> <span class=\"string\">detailed</span> <span class=\"string\">logging</span> <span class=\"string\">of</span> <span class=\"string\">all</span> <span class=\"string\">routing</span> <span class=\"string\">steps</span>\n<span class=\"string\">});</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the router will begin trying to translate the current URL into\napplication state once the browser emits the <code>DOMContentReady</code> event. If you\nneed to defer routing, you can call the application&apos;s <code>deferReadiness()</code>\nmethod. Once routing can begin, call the <code>advanceReadiness()</code> method.</p>\n<p>If there is any setup required before routing begins, you can implement a\n<code>ready()</code> method on your app that will be invoked immediately before routing\nbegins.</p>\n</body></html>",
      "parent": "ember",
      "publicclasses": [
        "Ember.Application",
        "Ember.DefaultResolver"
      ],
      "privateclasses": [],
      "staticfunctions": {},
      "version": "2.0.3"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-2.0.3",
          "type": "project-version"
        }
      }
    }
  }
}