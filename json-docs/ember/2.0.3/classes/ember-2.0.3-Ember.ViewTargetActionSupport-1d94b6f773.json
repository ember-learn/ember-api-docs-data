{
  "data": {
    "id": "ember-2.0.3-Ember.ViewTargetActionSupport",
    "type": "class",
    "attributes": {
      "name": "Ember.ViewTargetActionSupport",
      "shortname": "Ember.ViewTargetActionSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
      "line": 5,
      "description": "<html><head></head><body><p><code>Ember.ViewTargetActionSupport</code> is a mixin that can be included in a\nview class to add a <code>triggerAction</code> method with semantics similar to\nthe Handlebars <code>{{action}}</code> helper. It provides intelligent defaults\nfor the action&apos;s target: the view&apos;s controller; and the context that is\nsent with the action: the view&apos;s context.</p>\n<p>Note: In normal Ember usage, the <code>{{action}}</code> helper is usually the best\nchoice. This mixin is most often useful when you are doing more complex\nevent handling in custom View subclasses.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: <span class=\"string\">&apos;save&apos;</span>,\n  click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.triggerAction(); <span class=\"comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"comment\">// to the current controller</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>action</code> can be provided as properties of an optional object argument\nto <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.triggerAction({\n      action: <span class=\"string\">&apos;save&apos;</span>\n    }); <span class=\"comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"comment\">// to the current controller</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "extends": "Ember.TargetActionSupport",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 43,
          "description": "<html><head></head><body><p>Removes the child view from the parent view.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeChild",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 69,
          "description": "<html><head></head><body><p>Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding <code>createChildViews()</code>. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createChildView",
          "params": [
            {
              "name": "viewClass",
              "description": "",
              "type": "Class|String"
            },
            {
              "name": "attrs",
              "description": "Attributes to add",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "new instance",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
          "line": 62,
          "description": "<html><head></head><body><p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.SaveButtonView = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">View</span>.</span></span>extend(Ember.TargetActionSupport, {\n  target: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>computed.alias(&apos;controller&apos;),\n  action: &apos;save&apos;,\n  actionContext: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>computed.alias(&apos;context&apos;),\n  click: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    this.trigger<span class=\"constructor\">Action()</span>; <span class=\"comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"comment\">// to the current controller</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: function() {\n    <span class=\"keyword\">this</span>.triggerAction({\n      action: <span class=\"string\">&apos;save&apos;</span>,\n      target: <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;controller&apos;</span>),\n      actionContext: <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;context&apos;</span>)\n    }); <span class=\"comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"comment\">// to the current controller</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"string\">&apos;controller&apos;</span>),\n  click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.triggerAction({\n      action: <span class=\"string\">&apos;save&apos;</span>\n    }); <span class=\"comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"comment\">// to the current controller</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "triggerAction",
          "params": [
            {
              "name": "opts",
              "description": "(optional, with the optional keys action, target and/or actionContext)",
              "type": "Object"
            }
          ],
          "return": {
            "description": "true if the action was sent successfully and did not return false",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.TargetActionSupport"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 581,
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 596,
          "itemtype": "method",
          "name": "reopen",
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 632,
          "itemtype": "method",
          "name": "apply",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "applied object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 661,
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 14,
          "description": "<html><head></head><body><p>Array of child views. You should never edit this array directly.\nInstead, use <code>appendChild</code> and <code>removeFromParent</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "childViews",
          "type": "Array",
          "default": "[]",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 14,
          "description": "<html><head></head><body><p>The object from which templates should access properties.</p>\n<p>This object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.</p>\n<p>By default, this will be the view&apos;s controller.</p>\n</body></html>",
          "itemtype": "property",
          "name": "context",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 37,
          "description": "<html><head></head><body><p>Private copy of the view&apos;s template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.</p>\n<p>The context of a view is looked up as follows:</p>\n<ol>\n<li>Supplied context (usually by Handlebars)</li>\n<li>Specified controller</li>\n<li><code>parentView</code>&apos;s context (for a child of a ContainerView)</li>\n</ol>\n<p>The code in Handlebars that overrides the <code>_context</code> property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.</p>\n</body></html>",
          "itemtype": "property",
          "name": "_context",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 76,
          "description": "<html><head></head><body><p>The controller managing this view. If this property is set, it will be\nmade available for use by the template.</p>\n</body></html>",
          "itemtype": "property",
          "name": "controller",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
          "line": 48,
          "itemtype": "property",
          "name": "target",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
          "line": 53,
          "itemtype": "property",
          "name": "actionContext",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-2.0.3-Ember.TargetActionSupport",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.0.3-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.0.3",
          "type": "project-version"
        }
      }
    }
  }
}