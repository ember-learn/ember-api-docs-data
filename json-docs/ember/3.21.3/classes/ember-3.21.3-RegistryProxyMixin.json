{
  "data": {
    "id": "ember-3.21.3-RegistryProxyMixin",
    "type": "class",
    "attributes": {
      "name": "RegistryProxyMixin",
      "shortname": "RegistryProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Application",
        "EngineInstance"
      ],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 8,
      "description": "RegistryProxyMixin is used to provide public access to specific\nregistry functionality.",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 18,
          "description": "Given a fullName return the corresponding factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "resolveRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 31,
          "description": "Registers a factory that can be used for dependency injection (with\n`inject`) or for service lookup. Each factory is registered with\na full name including two parts: `type:name`.\n\nA simple example:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register('fruit:favorite', App.Orange);\n```\n\nEmber will resolve factories from the `App` namespace automatically.\nFor example `App.CarsController` will be discovered and returned if\nan application requests `controller:cars`.\n\nAn example of registering a controller with a non-standard name:\n\n```javascript\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\n\nlet App = Application.create();\nlet Session = Controller.extend();\n\nApp.register('controller:session', Session);\n\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Controller.extend({\n  needs: ['session']\n});\n```\n\nRegistered factories are **instantiated** by having `create`\ncalled on them. Additionally they are **singletons**, each time\nthey are looked up they return the same instance.\n\nSome examples modifying that default behavior:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.session = EmberObject.create();\n\nApp.register('model:user', App.Person, { singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, { singleton: false });\nApp.register('session', App.session, { instantiate: false });\n```",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "type:name (e.g., 'model:user')",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "(e.g., App.Person)",
              "type": "Any"
            },
            {
              "name": "options",
              "description": "(optional) disable instantiation or singleton usage",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 101,
          "description": "Unregister a factory.\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet User = EmberObject.extend();\nApp.register('model:user', User);\n\nApp.resolveRegistration('model:user').create() instanceof User //=> true\n\nApp.unregister('model:user')\nApp.resolveRegistration('model:user') === undefined //=> true\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 124,
          "description": "Check if a factory is registered.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "hasRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 134,
          "description": "Return a specific registered option for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOption",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "optionName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 145,
          "description": "Register options for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 155,
          "description": "Return registered options for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 165,
          "description": "Allow registering options for all factories of a type.\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create();\nlet appInstance = App.buildInstance();\n\n// if all of type `connection` must not be singletons\nappInstance.registerOptionsForType('connection', { singleton: false });\n\nappInstance.register('connection:twitter', TwitterConnection);\nappInstance.register('connection:facebook', FacebookConnection);\n\nlet twitter = appInstance.lookup('connection:twitter');\nlet twitter2 = appInstance.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = appInstance.lookup('connection:facebook');\nlet facebook2 = appInstance.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 198,
          "description": "Return the registered options for all factories of a type.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "RegistryProxyMixin",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 208,
          "description": "Define a dependency injection onto a specific factory or all factories\nof a type.\n\nWhen Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.\n\nAn example of providing a session object to all controllers:\n\n```javascript\nimport { alias } from '@ember/object/computed';\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet Session = EmberObject.extend({ isAuthenticated: false });\n\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\n\nApp.IndexController = Controller.extend({\n  isLoggedIn: alias('session.isAuthenticated')\n});\n```\n\nInjections can also be performed on specific factories.\n\n```javascript\nApp.inject(<full_name or type>, <property name>, <full_name>)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n```\n\nIt is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via `create` or `new`) bypasses the dependency injection\nsystem.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "inject",
          "params": [
            {
              "name": "factoryNameOrType",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "RegistryProxyMixin",
          "module": "ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.21.3-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.21.3",
          "type": "project-version"
        }
      }
    }
  }
}