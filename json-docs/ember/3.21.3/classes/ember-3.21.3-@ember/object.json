{
  "data": {
    "id": "ember-3.21.3-@ember/object",
    "type": "class",
    "attributes": {
      "name": "@ember/object",
      "shortname": "@ember/object",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/computed.ts",
          "line": 864,
          "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties with\nnative decorator syntax, mixins, or via `defineProperty()`.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\nYou can also provide a setter, either directly on the class using native class\nsyntax, or by passing a hash with `get` and `set` functions.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  set fullName(value) {\n    let [firstName, lastName] = value.split(/\\s+/);\n\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n\n    return value;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  })\n});\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n```\n\nWhen passed as an argument, the `set` function should accept two parameters,\n`key` and `value`. The value returned from `set` will be the new value of the\nproperty.\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._\n\nThe alternative syntax, with prototype extensions, might look like:\n\n```js\nfullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```\n\nThis form does not work with native decorators.",
          "itemtype": "method",
          "name": "computed",
          "static": 1,
          "params": [
            {
              "name": "dependentKeys*",
              "description": "Optional dependent keys that trigger this computed property.",
              "type": "String",
              "optional": true
            },
            {
              "name": "func",
              "description": "The computed property function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "property decorator instance",
            "type": "ComputedDecorator"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/get_properties.ts",
          "line": 6,
          "description": "To get multiple properties at once, call `getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "",
              "type": "Object"
            },
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/mixin.ts",
          "line": 787,
          "description": "Makes a method available via an additional name.\n\n```js {data-filename=app/utils/person.js}\nimport EmberObject, {\n  aliasMethod\n} from '@ember/object';\n\nexport default EmberObject.extend({\n  name() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: aliasMethod('name')\n});\n```\n\n```javascript\nlet goodGuy = Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
          "itemtype": "method",
          "name": "aliasMethod",
          "static": 1,
          "deprecated": true,
          "deprecationMessage": "Use a shared utility method instead",
          "params": [
            {
              "name": "methodName",
              "description": "name of the method to alias",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/mixin.ts",
          "line": 840,
          "description": "Specify a method that observes property changes.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { observer } from '@ember/object';\n\nexport default EmberObject.extend({\n  valueObserver: observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
          "itemtype": "method",
          "name": "observer",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/properties.ts",
          "line": 11,
          "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\nimport { defineProperty, computed } from '@ember/object';\n\n// ES5 compatible mode\ndefineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\ndefineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\ndefineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "defineProperty",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "the object to define this property on. This may be a prototype.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "the name of the property",
              "type": "String"
            },
            {
              "name": "desc",
              "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
              "type": "Descriptor",
              "optional": true
            },
            {
              "name": "data",
              "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
              "type": "*",
              "optional": true
            }
          ],
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_events.ts",
          "line": 19,
          "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            },
            {
              "name": "_meta",
              "description": "The objects meta.",
              "type": "Meta",
              "optional": true
            },
            {
              "name": "value",
              "description": "The new value to set for the property",
              "type": "Unknown",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "since": "3.1.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_events.ts",
          "line": 67,
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_events.ts",
          "line": 77,
          "itemtype": "method",
          "name": "endPropertyChanges",
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_events.ts",
          "line": 89,
          "description": "Make a series of property changes together in an\nexception-safe way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo', mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```",
          "itemtype": "method",
          "name": "changeProperties",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_get.ts",
          "line": 47,
          "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nimport { get } from '@ember/object';\nget(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
          "itemtype": "method",
          "name": "get",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve from.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "the property value or `null`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_get.ts",
          "line": 161,
          "description": "Retrieves the value of a property from an Object, or a default value in the\ncase that the property returns `undefined`.\n\n```javascript\nimport { getWithDefault } from '@ember/object';\ngetWithDefault(person, 'lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve from.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "deprecated": true,
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_set.ts",
          "line": 18,
          "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change.\nIf the specified property is not defined on the object and the object\nimplements the `setUnknownProperty` method, then instead of setting the\nvalue of the property on the object, its `setUnknownProperty` handler\nwill be invoked with the two parameters `keyName` and `value`.\n\n```javascript\nimport { set } from '@ember/object';\nset(obj, \"name\", value);\n```",
          "itemtype": "method",
          "name": "set",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/property_set.ts",
          "line": 124,
          "description": "Error-tolerant form of `set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.\n\n```javascript\nimport { trySet } from '@ember/object';\n\nlet obj = { name: \"Zoey\" };\ntrySet(obj, \"contacts.twitter\", \"@emberjs\");\n```",
          "itemtype": "method",
          "name": "trySet",
          "static": 1,
          "params": [
            {
              "name": "root",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The property path to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/set_properties.ts",
          "line": 6,
          "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nimport EmberObject from '@ember/object';\nlet anObject = EmberObject.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
          "itemtype": "method",
          "name": "setProperties",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "properties",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "properties"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 594,
          "description": "Creates a new subclass.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of EmberObject: `Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()` method.\nFor example, you might want to create a subclass of Ember's built-in `Component` class:\n\n```javascript\nimport Component from '@ember/component';\n\nconst PersonComponent = Component.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the\nimplementation of your parent class by calling the special `_super()` method:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    let name = this.get('name');\n    alert(`${name} says: ${thing}`);\n  }\n});\n\nconst Soldier = Person.extend({\n  say(thing) {\n    this._super(`${thing}, sir!`);\n  },\n  march(numberOfHours) {\n    alert(`${this.get('name')} marches for ${numberOfHours} hours.`);\n  }\n});\n\nlet yehuda = Soldier.create({\n  name: 'Yehuda Katz'\n});\n\nyehuda.say('Yes');  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `Soldier` class.\nThe `extend()` on line #8 creates a *subclass* of `Person`. Any instance\nof the `Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport Mixin from '@ember/object/mixin';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    alert(`${this.get('name')} says: ${thing}`);\n  }\n});\n\nconst SingingMixin = Mixin.create({\n  sing(thing) {\n    alert(`${this.get('name')} sings: la la la ${thing}`);\n  }\n});\n\nconst BroadwayStar = Person.extend(SingingMixin, {\n  dance() {\n    alert(`${this.get('name')} dances: tap tap tap tap `);\n  }\n});\n```\n\nThe `BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Mixin classes",
              "type": "Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 694,
          "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  helloWorld() {\n    alert(`Hi, my name is ${this.get('name')}`);\n  }\n});\n\nlet tom = Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nlet noName = Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend`.",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 754,
          "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst MyObject = EmberObject.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say(msg) {\n    console.log(msg);\n  }\n});\n\no2 = MyObject.create();\no2.say('hello'); // logs \"hello\"\n\no.say('goodbye'); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
          "itemtype": "method",
          "name": "reopen",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 808,
          "description": "Augments a constructor's own properties and functions:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst MyObject = EmberObject.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class.\nThese are only available on the class and not on any instance of that class.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  name: '',\n  sayHello() {\n    alert(`Hello. My name is ${this.get('name')}`);\n  }\n});\n\nPerson.reopenClass({\n  species: 'Homo sapiens',\n\n  createPerson(name) {\n    return Person.create({ name });\n  }\n});\n\nlet tom = Person.create({\n  name: 'Tom Dale'\n});\nlet yehuda = Person.createPerson('Yehuda Katz');\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
          "itemtype": "method",
          "name": "reopenClass",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 891,
          "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nimport { computed } from '@ember/object';\n\nperson: computed(function() {\n  let personId = this.get('personId');\n  return Person.create({ id: personId });\n}).meta({ type: Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
          "static": 1,
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 934,
          "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
          "static": 1,
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 1043,
          "description": "Provides lookup-time type validation for injected properties.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_onLookup",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 1064,
          "description": "Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.",
          "itemtype": "method",
          "name": "_lazyInjections",
          "return": {
            "description": "Hash of all lazy injected property keys to container names",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "@ember/object",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/index.js",
          "line": 5,
          "description": "Decorator that turns the target function into an Action which can be accessed\ndirectly by reference.\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n```handlebars\n<!-- template.hbs -->\n<button {{action this.toggleShowing}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nDecorated actions also interop with the string style template actions:\n\n```handlebars\n<!-- template.hbs -->\n<button {{action \"toggleShowing\"}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nIt also binds the function directly to the instance, so it can be used in any\ncontext and will correctly refer to the class it came from:\n\n```handlebars\n<!-- template.hbs -->\n<button\n  {{did-insert this.toggleShowing}}\n  {{on \"click\" this.toggleShowing}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThis can also be used in JavaScript code directly:\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  constructor() {\n    super(...arguments);\n\n    // this.toggleShowing is still bound correctly when added to\n    // the event listener\n    document.addEventListener('click', this.toggleShowing);\n  }\n\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n\nThis is considered best practice, since it means that methods will be bound\ncorrectly no matter where they are used. By contrast, the `{{action}}` helper\nand modifier can also be used to bind context, but it will be required for\nevery usage of the method:\n\n```handlebars\n<!-- template.hbs -->\n<button\n  {{did-insert (action this.toggleShowing)}}\n  {{on \"click\" (action this.toggleShowing)}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThey also do not have equivalents in JavaScript directly, so they cannot be\nused for other situations where binding would be useful.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "action",
          "static": 1,
          "params": [
            {
              "name": "callback",
              "description": "The function to turn into an action,\n                                     when used in classic classes",
              "type": "Function|undefined"
            }
          ],
          "return": {
            "description": "property decorator instance",
            "type": "PropertyDecorator"
          },
          "class": "@ember/object",
          "module": "@ember/object"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.21.3-@ember/object",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.21.3",
          "type": "project-version"
        }
      }
    }
  }
}