{
  "data": {
    "id": "ember-3.16.6-Helper",
    "type": "class",
    "attributes": {
      "name": "Helper",
      "shortname": "Helper",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 45,
      "description": "<html><head></head><body><p>Ember Helpers are functions that can compute values, and are used in templates.\nFor example, this code calls a helper named <code>format-currency</code>:</p>\n<div class=\"highlight app/templates/application.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">Cost</span> @<span class=\"attr\">cents</span>=<span class=\"string\">{{230}}</span> /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/components/cost.hbs\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/cost.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"variable\">&lt;div&gt;</span>{{format-currency <span class=\"meta\">@cents</span> currency=<span class=\"string\">&quot;$&quot;</span>}}<span class=\"variable\">&lt;/div&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally a helper can be called as a nested helper.\nIn this example, we show the formatted currency value if the <code>showMoney</code>\nnamed argument is truthy.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{<span class=\"selector-tag\">if</span> @<span class=\"selector-tag\">showMoney</span> (format-currency <span class=\"variable\">@cents</span> currency=<span class=\"string\">&quot;$&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Helpers defined using a class must provide a <code>compute</code> function. For example:</p>\n<div class=\"highlight currency.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">currency.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Helper</span> from &apos;<span class=\"meta\">@ember</span>/component/helper&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Helper</span> </span>{\n  compute([cents], { currency }) {\n    <span class=\"keyword\">return</span> `${currency}${cents * <span class=\"number\">0.01</span>}`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Each time the input to a helper changes, the <code>compute</code> function will be\ncalled again.</p>\n<p>As instances, these helpers also have access to the container and will accept\ninjected dependencies.</p>\n<p>Additionally, class helpers can call <code>recompute</code> to force a new computation.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "methods": [
        {
          "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
          "line": 95,
          "description": "<html><head></head><body><p>On a class-based helper, it may be useful to force a recomputation of that\nhelpers value. This is akin to <code>rerender</code> on a component.</p>\n<p>For example, this component will rerender when the <code>currentUser</code> on a\nsession service changes:</p>\n<div class=\"highlight email.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">email.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Helper <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component/helper&apos;</span>\n<span class=\"keyword\">import</span> { inject <span class=\"keyword\">as</span> service } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/service&apos;</span>\n<span class=\"keyword\">import</span> { observer } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Helper.extend({\n  <span class=\"attr\">session</span>: service(),\n\n  <span class=\"attr\">onNewUser</span>: observer(<span class=\"string\">&apos;session.currentUser&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">this</span>.recompute();\n  }),\n\n  compute() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;session.currentUser.email&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "recompute",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Helper",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
          "line": 128,
          "description": "<html><head></head><body><p>Override this function when writing a class-based helper.</p>\n</body></html>",
          "itemtype": "method",
          "name": "compute",
          "params": [
            {
              "name": "params",
              "description": "The positional arguments to the helper",
              "type": "Array"
            },
            {
              "name": "hash",
              "description": "The named arguments to the helper",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Helper",
          "module": "@ember/component"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.16.6-@ember/component",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.16.6",
          "type": "project-version"
        }
      }
    }
  }
}