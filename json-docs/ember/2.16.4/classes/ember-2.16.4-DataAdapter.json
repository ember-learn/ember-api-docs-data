{
  "data": {
    "id": "ember-2.16.4-DataAdapter",
    "type": "class",
    "attributes": {
      "name": "DataAdapter",
      "shortname": "DataAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/debug",
      "namespace": "",
      "file": "packages/ember-extension-support/lib/data_adapter.js",
      "line": 17,
      "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```",
      "extends": "EmberObject",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 111,
          "description": "Specifies how records can be filtered.\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "getFilters",
          "return": {
            "description": "List of objects defining filters.\n The object should have a `name` and `desc` property.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 125,
          "description": "Fetch the model types and observe them for changes.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "watchModelTypes",
          "params": [
            {
              "name": "typesAdded",
              "description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
              "type": "Function"
            },
            {
              "name": "typesUpdated",
              "description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "Method to call to remove all observers",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 170,
          "description": "Fetch the records of a given type and observe them for changes.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "watchRecords",
          "params": [
            {
              "name": "modelName",
              "description": "The model name.",
              "type": "String"
            },
            {
              "name": "recordsAdded",
              "description": "Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\n  columnValues: {Object} The key and value of a table cell.\n  object: {Object} The actual record object.",
              "type": "Function"
            },
            {
              "name": "recordsUpdated",
              "description": "Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.",
              "type": "Function"
            },
            {
              "name": "recordsRemoved",
              "description": "Callback to call when a record has removed.\nTakes the following parameters:\n  index: The array index where the records were removed.\n  count: The number of records removed.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "Method to call to remove all observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 237,
          "description": "Clear all observers before destruction",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 247,
          "description": "Detect whether a class is a model.\n\nTest that against the model class\nof your persistence library.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "klass",
              "description": "The class to test.",
              "type": "Class"
            }
          ],
          "return": {
            "description": "boolean Whether the class is a model class or not."
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 262,
          "description": "Get the columns for a given model type.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "columnsForType",
          "params": [
            {
              "name": "type",
              "description": "The model type.",
              "type": "Class"
            }
          ],
          "return": {
            "description": "An array of columns of the following format:\n name: {String} The name of the column.\n desc: {String} Humanized description (what would show in a table column name).",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 276,
          "description": "Adds observers to a model type class.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "observeModelType",
          "params": [
            {
              "name": "modelName",
              "description": "The model type name.",
              "type": "String"
            },
            {
              "name": "typesUpdated",
              "description": "Called when a type is modified.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "The function to call to remove observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 313,
          "description": "Wraps a given model type and observes changes to it.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrapModelType",
          "params": [
            {
              "name": "klass",
              "description": "A model class.",
              "type": "Class"
            },
            {
              "name": "modelName",
              "description": "Name of the class.",
              "type": "String"
            }
          ],
          "return": {
            "description": "Contains the wrapped type and the function to remove observers\nFormat:\n  type: {Object} The wrapped type.\n    The wrapped type has the following format:\n      name: {String} The name of the type.\n      count: {Integer} The number of records available.\n      columns: {Columns} An array of columns to describe the record.\n      object: {Class} The actual Model type class.\n  release: {Function} The function to remove observers.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 345,
          "description": "Fetches all models defined in the application.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getModelTypes",
          "return": {
            "description": "Array of model types.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 374,
          "description": "Loops over all namespaces and all objects\nattached to them.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_getObjectsOnNamespaces",
          "return": {
            "description": "Array of model type strings.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 399,
          "description": "Fetches all loaded records for a given type.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecords",
          "return": {
            "description": "An array of records.\n This array will be observed for changes,\n so it should update when new records are added/removed.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 412,
          "description": "Wraps a record and observers changes to it.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrapRecord",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The wrapped record. Format:\ncolumnValues: {Array}\nsearchKeywords: {Array}",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 433,
          "description": "Gets the values for each column.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordColumnValues",
          "return": {
            "description": "Keys should match column names defined\nby the model type.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 445,
          "description": "Returns keywords to match when searching records.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordKeywords",
          "return": {
            "description": "Relevant keywords for search.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 456,
          "description": "Returns the values of filters defined by `getFilters`.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordFilterValues",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The filter values.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 468,
          "description": "Each record can have a color that represents its state.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordColor",
          "params": [
            {
              "name": "record",
              "description": "The record instance",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The records color.\n  Possible options: black, red, blue, green.",
            "type": "String"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 481,
          "description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "observerRecord",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            },
            {
              "name": "recordUpdated",
              "description": "The callback to call when a record is updated.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "The function to call to remove all observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 209,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nconst Person = Ember.Object.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 444,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 470,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 478,
          "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 497,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nconst Person = Ember.Object.extend()\nperson = Person.create()\nperson.toString() //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend()\nlet student = Student.create()\nstudent.toString() //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create()\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 94,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nfullName: Ember.computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 137,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 162,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 211,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 229,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 249,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 268,
          "description": "Notify the observer system that a property is about to change.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyDidChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 292,
          "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyWillChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 316,
          "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 331,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 380,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 395,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 410,
          "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 428,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 448,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 468,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 485,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 64,
          "description": "The container-debug-adapter which is used\nto list all models.",
          "itemtype": "property",
          "name": "containerDebugAdapter",
          "default": "undefined",
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 75,
          "description": "The number of attributes to send\nas columns. (Enough to make the record\nidentifiable).",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "attributeLimit",
          "default": "3",
          "since": "1.3.0",
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 87,
          "description": "Ember Data > v1.0.0-beta.18\nrequires string model names to be passed\naround instead of the actual factories.\n\nThis is a stamp for the Ember Inspector\nto differentiate between the versions\nto be able to support older versions too.",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "acceptsModelName",
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 101,
          "description": "Stores all methods that clear observers.\nThese methods will be called on destruction.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "releaseMethods",
          "since": "1.3.0",
          "class": "DataAdapter",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 247,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nconst Bar = Ember.Object.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Ember.Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 320,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nconst Bar = Ember.Object.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Ember.Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 394,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 419,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-2.16.4-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.16.4-@ember/debug",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.16.4",
          "type": "project-version"
        }
      }
    }
  }
}