{
  "data": {
    "id": "ember-4.4.5-@glimmer/tracking/primitives/cache",
    "type": "class",
    "attributes": {
      "name": "@glimmer/tracking/primitives/cache",
      "shortname": "@glimmer/tracking/primitives/cache",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@glimmer/tracking/primitives/cache",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 14,
          "description": "<html><head></head><body><p>Receives a function, and returns a wrapped version of it that memoizes based on\n<em>autotracking</em>. The function will only rerun whenever any tracked values used\nwithin it have changed. Otherwise, it will return the previous value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n              <td class=\"code\"><pre>import { tracked } <span class=\"keyword\">from</span> &apos;@glimmer/tracking&apos;;\nimport { createCache, getValue } <span class=\"keyword\">from</span> &apos;@glimmer/tracking/primitives/cache&apos;;\n\nclass State {\n  @tracked value;\n}\n\nlet <span class=\"keyword\">state</span> = new State();\nlet computeCount = <span class=\"number\">0</span>;\n\nlet counter = createCache(() =&gt; {\n  // consume the <span class=\"keyword\">state</span>. Now, `counter` will\n  // only rerun if `<span class=\"keyword\">state</span>.value` changes.\n  <span class=\"keyword\">state</span>.value;\n\n  return ++computeCount;\n});\n\ngetValue(counter); // <span class=\"number\">1</span>\n\n// returns the same value because <span class=\"keyword\">no</span> tracked <span class=\"keyword\">state</span> has changed\ngetValue(counter); // <span class=\"number\">1</span>\n\n<span class=\"keyword\">state</span>.value = &apos;foo&apos;;\n\n// reruns because a tracked value used <span class=\"keyword\">in</span> the function has changed,\n// incermenting the counter\ngetValue(counter); // <span class=\"number\">2</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "createCache",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 56,
          "description": "<html><head></head><body><p>Gets the value of a cache created with <code>createCache</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { tracked } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking&apos;</span>;\n<span class=\"keyword\">import</span> { createCache, getValue } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking/primitives/cache&apos;</span>;\n\n<span class=\"keyword\">let</span> computeCount = <span class=\"number\">0</span>;\n\n<span class=\"keyword\">let</span> counter = <span class=\"title function_\">createCache</span>(<span class=\"function\">() =&gt;</span> {\n  <span class=\"keyword\">return</span> ++computeCount;\n});\n\n<span class=\"title function_\">getValue</span>(counter); <span class=\"comment\">// 1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getValue",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 78,
          "description": "<html><head></head><body><p>Can be used to check if a memoized function is <em>constant</em>. If no tracked state\nwas used while running a memoized function, it will never rerun, because nothing\ncan invalidate its result. <code>isConst</code> can be used to determine if a memoized\nfunction is constant or not, in order to optimize code surrounding that\nfunction.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { tracked } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking&apos;</span>;\n<span class=\"keyword\">import</span> { createCache, getValue, isConst } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@glimmer/tracking/primitives/cache&apos;</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">State</span> {\n  @tracked value;\n}\n\nlet state = <span class=\"keyword\">new</span> State();\nlet computeCount = <span class=\"number\">0</span>;\n\nlet counter = createCache(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {\n  <span class=\"regexp\">//</span> consume the state\n  state.value;\n\n  <span class=\"keyword\">return</span> computeCount++;\n});\n\nlet constCounter = createCache(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {\n  <span class=\"keyword\">return</span> computeCount++;\n});\n\ngetValue(counter);\ngetValue(constCounter);\n\nisConst(counter); <span class=\"regexp\">//</span> <span class=\"literal\">false</span>\nisConst(constCounter); <span class=\"regexp\">//</span> <span class=\"literal\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If called on a cache that hasn&apos;t been accessed yet, it will throw an\nerror. This is because there&apos;s no way to know if the function will be constant\nor not yet, and so this helps prevent missing an optimization opportunity on\naccident.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isConst",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.4.5-@glimmer/tracking/primitives/cache",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.4.5",
          "type": "project-version"
        }
      }
    }
  }
}