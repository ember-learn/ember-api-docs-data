{
  "data": {
    "id": "ember-1.6.1-Ember.Set",
    "type": "class",
    "attributes": {
      "name": "Ember.Set",
      "shortname": "Ember.Set",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "../packages_es6/ember-runtime/lib/system/set.js",
      "line": 22,
      "description": "An unordered collection of objects.\n\nA Set works a bit like an array except that its items are not ordered. You\ncan create a set to efficiently test for membership for an object. You can\nalso iterate through a set just like an array, even accessing objects by\nindex, however there is no guarantee as to their order.\n\nAll Sets are observable via the Enumerable Observer API - which works\non any enumerable object including both Sets and Arrays.\n\n## Creating a Set\n\nYou can create a set like you would most objects using\n`new Ember.Set()`. Most new sets you create will be empty, but you can\nalso initialize the set with some content by passing an array or other\nenumerable of objects to the constructor.\n\nFinally, you can pass in an existing set and the set will be copied. You\ncan also create a copy of a set by calling `Ember.Set#copy()`.\n\n```javascript\n// creates a new empty set\nvar foundNames = new Ember.Set();\n\n// creates a set with four names in it.\nvar names = new Ember.Set([\"Charles\", \"Tom\", \"Juan\", \"Alex\"]); // :P\n\n// creates a copy of the names set.\nvar namesCopy = new Ember.Set(names);\n\n// same as above.\nvar anotherNamesCopy = names.copy();\n```\n\n## Adding/Removing Objects\n\nYou generally add or remove objects from a set using `add()` or\n`remove()`. You can add any type of object including primitives such as\nnumbers, strings, and booleans.\n\nUnlike arrays, objects can only exist one time in a set. If you call `add()`\non a set with the same object multiple times, the object will only be added\nonce. Likewise, calling `remove()` with the same object multiple times will\nremove the object the first time and have no effect on future calls until\nyou add the object to the set again.\n\nNOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do\nso will be ignored.\n\nIn addition to add/remove you can also call `push()`/`pop()`. Push behaves\njust like `add()` but `pop()`, unlike `remove()` will pick an arbitrary\nobject, remove it and return it. This is a good way to use a set as a job\nqueue when you don't care which order the jobs are executed in.\n\n## Testing for an Object\n\nTo test for an object's presence in a set you simply call\n`Ember.Set#contains()`.\n\n## Observing changes\n\nWhen using `Ember.Set`, you can observe the `\"[]\"` property to be\nalerted whenever the content changes. You can also add an enumerable\nobserver to the set to be notified of specific objects that are added and\nremoved from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)\nfor more information on enumerables.\n\nThis is often unhelpful. If you are filtering sets of objects, for instance,\nit is very inefficient to re-filter all of the items each time the set\nchanges. It would be better if you could just adjust the filtered set based\non what was changed on the original set. The same issue applies to merging\nsets, as well.\n\n## Other Methods\n\n`Ember.Set` primary implements other mixin APIs. For a complete reference\non the methods you will use with `Ember.Set`, please consult these mixins.\nThe most useful ones will be `Ember.Enumerable` and\n`Ember.MutableEnumerable` which implement most of the common iterator\nmethods you are used to on Array.\n\nNote that you can also use the `Ember.Copyable` and `Ember.Freezable`\nAPIs on `Ember.Set` as well. Once a set is frozen it can no longer be\nmodified. The benefit of this is that when you call `frozenCopy()` on it,\nEmber will avoid making copies of the set. This allows you to write\ncode that can know with certainty when the underlying set data will or\nwill not be modified.",
      "extends": "Ember.CoreObject",
      "uses": [
        "Ember.Freezable",
        "Ember.Copyable",
        "Ember.MutableEnumerable"
      ],
      "since": "Ember 0.9",
      "methods": [
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 135,
          "description": "Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.length;  // 3\ncolors.clear();\ncolors.length;  // 0\n```",
          "itemtype": "method",
          "name": "clear",
          "return": {
            "description": "An empty Set",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 176,
          "description": "Returns true if the passed object is also an enumerable that contains the\nsame objects as the receiver.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"],\n    same_colors = new Ember.Set(colors);\n\nsame_colors.isEqual(colors);               // true\nsame_colors.isEqual([\"purple\", \"brown\"]);  // false\n```",
          "itemtype": "method",
          "name": "isEqual",
          "params": [
            {
              "name": "obj",
              "description": "the other object.",
              "type": "Ember.Set"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 206,
          "description": "Adds an object to the set. Only non-`null` objects can be added to a set\nand those can only be added once. If the object is already in the set or\nthe passed value is null this method will have no effect.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"red\");      // [\"blue\", \"red\"]\ncolors.add(null);       // [\"blue\", \"red\"]\ncolors.add(undefined);  // [\"blue\", \"red\"]\n```",
          "itemtype": "method",
          "name": "add",
          "params": [
            {
              "name": "obj",
              "description": "The object to add.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 228,
          "description": "Removes the object from the set if it is found. If you pass a `null` value\nor an object that is already not in the set, this method will have no\neffect. This is an alias for `Ember.MutableEnumerable.removeObject()`.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.remove(\"red\");     // [\"blue\", \"green\"]\ncolors.remove(\"purple\");  // [\"blue\", \"green\"]\ncolors.remove(null);      // [\"blue\", \"green\"]\n```",
          "itemtype": "method",
          "name": "remove",
          "params": [
            {
              "name": "obj",
              "description": "The object to remove",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 246,
          "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.pop();  // \"blue\"\ncolors.pop();  // \"green\"\ncolors.pop();  // null\n```",
          "itemtype": "method",
          "name": "pop",
          "return": {
            "description": "The removed object from the set or null.",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 266,
          "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.push(\"red\");   // [\"red\"]\ncolors.push(\"green\"); // [\"red\", \"green\"]\ncolors.push(\"blue\");  // [\"red\", \"green\", \"blue\"]\n```",
          "itemtype": "method",
          "name": "push",
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 284,
          "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n\nThis is an alias for `Ember.Set.pop()`.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.shift();  // \"blue\"\ncolors.shift();  // \"green\"\ncolors.shift();  // null\n```",
          "itemtype": "method",
          "name": "shift",
          "return": {
            "description": "The removed object from the set or null.",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 301,
          "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias of `Ember.Set.push()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.unshift(\"red\");    // [\"red\"]\ncolors.unshift(\"green\");  // [\"red\", \"green\"]\ncolors.unshift(\"blue\");   // [\"red\", \"green\", \"blue\"]\n```",
          "itemtype": "method",
          "name": "unshift",
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 319,
          "description": "Adds each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.addObjects()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.addEach([\"red\", \"green\", \"blue\"]);  // [\"red\", \"green\", \"blue\"]\n```",
          "itemtype": "method",
          "name": "addEach",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 335,
          "description": "Removes each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.removeObjects()`\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.removeEach([\"red\", \"blue\"]);  //  [\"green\"]\n```",
          "itemtype": "method",
          "name": "removeEach",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "The set itself.",
            "type": "Ember.Set"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 198,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  init: function() {\n    alert('Name is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name: \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super()` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 318,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 340,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 347,
          "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 366,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nApp.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=> \"<App.Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n   ```javascript\nStudent = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=> \"<(subclass of App.Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nApp.Teacher = App.Person.extend({\n  toStringExtension: function() {\n    return this.get('fullName');\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 433,
          "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Mixin classes",
              "type": "Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 535,
          "description": "Equivalent to doing `extend(arguments).create()`.\nIf possible use the normal `create` method instead.",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 549,
          "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend` or use the `createWithMixins` shorthand.",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 592,
          "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say: function(msg){\n    console.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\n\no.say(\"goodbye\"); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 627,
          "description": "Augments a constructor's own properties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name : \"\",\n  sayHello : function(){\n    alert(\"Hello. My name is \" + this.get('name'));\n  }\n});\n\nApp.Person.reopenClass({\n  species : \"Homo sapiens\",\n  createPerson: function(newPersonsName){\n    return App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\nvar tom = App.Person.create({\n  name : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `App.Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 701,
          "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 736,
          "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/freezable.js",
          "line": 77,
          "description": "Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.",
          "itemtype": "method",
          "name": "freeze",
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Freezable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/copyable.js",
          "line": 33,
          "description": "Override to return a copy of the receiver. Default implementation raises\nan exception.",
          "itemtype": "method",
          "name": "copy",
          "params": [
            {
              "name": "deep",
              "description": "if `true`, a deep copy of the object should be made",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "copy of receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Copyable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/copyable.js",
          "line": 43,
          "description": "If the object implements `Ember.Freezable`, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.\n\nRaises an exception if you try to call this method on a object that does\nnot support freezing.\n\nYou should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.",
          "itemtype": "method",
          "name": "frozenCopy",
          "return": {
            "description": "copy of receiver or receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Copyable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 54,
          "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "object",
              "description": "The object to add to the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 70,
          "description": "Adds each object in the passed enumerable to the receiver.",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 84,
          "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "object",
              "description": "The object to remove from the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 101,
          "description": "Removes each object in the passed enumerable from the receiver.",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 84,
          "description": "Implement this method to make your class enumerable.\n\nThis method will be call repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don't have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.\n\nThe `previousObject` is the object that was returned from the last call\nto `nextObject` for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.\n\nFinally the context parameter will always contain a hash you can use as\na \"scratchpad\" to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.\n\nGenerally iterators will continue to call `nextObject` until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.\n\nThe default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 178,
          "description": "Returns `true` if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.contains(\"a\"); // true\narr.contains(\"z\"); // false\n```",
          "itemtype": "method",
          "name": "contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 197,
          "description": "Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 238,
          "description": "Alias for `mapBy`",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 249,
          "description": "Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 266,
          "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the mapped value.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 300,
          "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 314,
          "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
          "itemtype": "method",
          "name": "mapProperty",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `mapBy` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 326,
          "description": "Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to `filter()` defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 362,
          "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns false for. This method is the inverse of filter().\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *enumerable* is the enumerable object itself.\n\nIt should return the a falsey value to include the item in the results.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 394,
          "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 408,
          "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `filterBy` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 421,
          "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 439,
          "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
          "itemtype": "method",
          "name": "rejectProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `rejectBy` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 452,
          "description": "Returns the first item in the array for which the callback returns true.\nThis method works similar to the `filter()` method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 496,
          "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 512,
          "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
          "itemtype": "method",
          "name": "findProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `findBy` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 527,
          "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `every()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` or `false`.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nif (people.every(isEngineer)) { Paychecks.addBigBonus(); }\n```",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 565,
          "itemtype": "method",
          "name": "everyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 574,
          "itemtype": "method",
          "name": "everyProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 583,
          "description": "Returns `true` if the passed property resolves to `true` for all items in\nthe enumerable. This method is often simpler/faster than using a callback.",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 597,
          "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.any(isManager)) { Paychecks.addBiggerBonus(); }\n```",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 650,
          "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.some(isManager)) { Paychecks.addBiggerBonus(); }\n```",
          "itemtype": "method",
          "name": "some",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `any` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 686,
          "description": "Returns `true` if the passed property resolves to `true` for any item in\nthe enumerable. This method is often simpler/faster than using a callback.",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 700,
          "itemtype": "method",
          "name": "anyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 709,
          "itemtype": "method",
          "name": "someProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 718,
          "description": "This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(previousValue, item, index, enumerable);\n```\n\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\n\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 763,
          "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 787,
          "description": "Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 800,
          "description": "Returns a copy of the array with all null and undefined elements removed.\n\n```javascript\nvar arr = [\"a\", null, \"c\", undefined];\narr.compact();  // [\"a\", \"c\"]\n```",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 815,
          "description": "Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.\n\n```javascript\nvar arr = [\"a\", \"b\", \"a\", \"c\"];\narr.without(\"a\");  // [\"b\", \"c\"]\n```",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 838,
          "description": "Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nvar arr = [\"a\", \"a\", \"b\", \"b\"];\narr.uniq();  // [\"a\", \"b\"]\n```",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 878,
          "description": "Registers an enumerable observer. Must implement `Ember.EnumerableObserver`\nmixin.",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 899,
          "description": "Removes a registered enumerable observer.",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 931,
          "description": "Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 967,
          "description": "Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If your are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 1004,
          "description": "Converts the enumerable into an array and sorts by the keys\nspecified in the argument.\n\nYou may provide multiple arguments to sort by multiple properties.",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages_es6/ember-runtime/lib/system/set.js",
          "line": 126,
          "description": "This property will change as the number of objects in the set changes.",
          "itemtype": "property",
          "name": "length",
          "type": "number",
          "default": "0",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 228,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo'],\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell to Ember that mix\nthe content of the properties.\n\nIn `Ember.View` the `classNameBindings` and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 296,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/system/core_object.js",
          "line": 307,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/freezable.js",
          "line": 68,
          "description": "Set to `true` when the object is frozen. Use this property to detect\nwhether your object is frozen or not.",
          "itemtype": "property",
          "name": "isFrozen",
          "type": "Boolean",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Freezable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 119,
          "description": "Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.\n\nIf you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('firstObject');  // \"a\"\n\nvar arr = [];\narr.get('firstObject');  // undefined\n```",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 150,
          "description": "Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('lastObject');  // \"c\"\n\nvar arr = [];\narr.get('lastObject');  // undefined\n```",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 858,
          "description": "This property will trigger anytime the enumerable's content changes.\nYou can observe this property to be notified of changes to the enumerables\ncontent.\n\nFor plain enumerables, this property is read only. `Array` overrides\nthis method.",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages_es6/ember-runtime/lib/mixins/enumerable.js",
          "line": 919,
          "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "class": "Ember.Set",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.6.1-Ember.CoreObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.6.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.6.1",
          "type": "project-version"
        }
      }
    }
  }
}