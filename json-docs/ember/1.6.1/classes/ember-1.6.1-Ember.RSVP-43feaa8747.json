{
  "data": {
    "id": "ember-1.6.1-Ember.RSVP",
    "type": "class",
    "attributes": {
      "name": "Ember.RSVP",
      "shortname": "RSVP",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "RSVP",
      "namespace": "Ember",
      "file": "../packages/rsvp/lib/main.js",
      "line": 1,
      "methods": [
        {
          "file": "../packages/metamorph/lib/main.js",
          "line": 130,
          "access": "public",
          "tagname": "Remove this object (including starting and ending\nplaceholders).",
          "itemtype": "method",
          "name": "remove",
          "class": "Ember.RSVP",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 11,
          "description": "<html><head></head><body><p>This is a convenient alias for <code>RSVP.Promise.all</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "all",
          "params": [
            {
              "name": "array",
              "description": "Array of promises.",
              "type": "Array"
            },
            {
              "name": "label",
              "description": "An optional label. This is useful\nfor tooling.",
              "type": "String"
            }
          ],
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 33,
          "description": "<html><head></head><body><p><code>RSVP.allSettled</code> is similar to <code>RSVP.all</code>, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises&apos; failure states together as a set.</p>\n<p>Returns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the <code>promises</code> array argument.</p>\n<p>Each state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{ <span class=\"attribute\">state</span>: <span class=\"string\">&apos;fulfilled&apos;</span>, value: value }\n  <span class=\"selector-tag\">or</span>\n{ <span class=\"attribute\">state</span>: <span class=\"string\">&apos;rejected&apos;</span>, reason: reason }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>var promise1 = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span><span class=\"module\"><span class=\"identifier\">Promise</span>.</span></span>resolve(<span class=\"number\">1</span>);\nvar promise2 = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span><span class=\"module\"><span class=\"identifier\">Promise</span>.</span></span>reject(<span class=\"keyword\">new</span> <span class=\"constructor\">Error(&apos;2&apos;)</span>);\nvar promise3 = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span><span class=\"module\"><span class=\"identifier\">Promise</span>.</span></span>reject(<span class=\"keyword\">new</span> <span class=\"constructor\">Error(&apos;3&apos;)</span>);\nvar promises = <span class=\"literal\">[ <span class=\"identifier\">promise1</span>, <span class=\"identifier\">promise2</span>, <span class=\"identifier\">promise3</span> ]</span>;\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>all<span class=\"constructor\">Settled(<span class=\"params\">promises</span>)</span>.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(<span class=\"built_in\">array</span>){\n  <span class=\"comment\">// array == [</span>\n  <span class=\"comment\">//   { state: &apos;fulfilled&apos;, value: 1 },</span>\n  <span class=\"comment\">//   { state: &apos;rejected&apos;, reason: Error },</span>\n  <span class=\"comment\">//   { state: &apos;rejected&apos;, reason: Error }</span>\n  <span class=\"comment\">// ]</span>\n  <span class=\"comment\">// Note that for the second item, reason.message will be &quot;2&quot;, and for the</span>\n  <span class=\"comment\">// third item, reason.message will be &quot;3&quot;.</span>\n}, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// Not run. (This block would only be called if allSettled had failed,</span>\n  <span class=\"comment\">// for instance if passed an incorrect argument type.)</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "allSettled",
          "params": [
            {
              "name": "promises",
              "description": "",
              "type": "Array"
            },
            {
              "name": "label",
              "description": "- optional string that describes the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "promise that is fulfilled with an array of the settled\nstates of the constituent promises.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 177,
          "description": "<html><head></head><body><p><code>RSVP.defer</code> returns an object similar to jQuery&apos;s <code>$.Deferred</code>.\n<code>RSVP.defer</code> should be used when porting over code reliant on <code>$.Deferred</code>&apos;s\ninterface. New code should use the <code>RSVP.Promise</code> constructor instead.</p>\n<p>The object returned from <code>RSVP.defer</code> is a plain object with three properties:</p>\n<ul>\n<li>promise - an <code>RSVP.Promise</code>.</li>\n<li>reject - a function that causes the <code>promise</code> property on this object to\nbecome rejected</li>\n<li>resolve - a function that causes the <code>promise</code> property on this object to\nbecome fulfilled.</li>\n</ul>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre> var <span class=\"keyword\">deferred</span> = RSVP.defer();\n\n <span class=\"keyword\">deferred</span>.resolve(&quot;Success!&quot;);\n\n <span class=\"keyword\">deferred</span>.promise.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(<span class=\"keyword\">value</span>){\n   // <span class=\"keyword\">value</span> here <span class=\"keyword\">is</span> &quot;Success!&quot;\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "defer",
          "params": [
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 433,
          "description": "<html><head></head><body><p><code>RSVP.filter</code> is similar to JavaScript&apos;s native <code>filter</code> method, except that it\n waits for all promises to become fulfilled before running the <code>filterFn</code> on\n each item in given to <code>promises</code>. <code>RSVP.filter</code> returns a promise that will\n become fulfilled with the result of running <code>filterFn</code> on the values the\n promises become fulfilled with.</p>\n<p> For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> promise1 = RSVP.resolve(<span class=\"number\">1</span>);\n <span class=\"keyword\">var</span> promise2 = RSVP.resolve(<span class=\"number\">2</span>);\n <span class=\"keyword\">var</span> promise3 = RSVP.resolve(<span class=\"number\">3</span>);\n\n <span class=\"keyword\">var</span> filterFn = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item)</span></span>{\n   <span class=\"keyword\">return</span> item &gt; <span class=\"number\">1</span>;\n };\n\n RSVP.filter(promises, filterFn).then(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(result)</span></span>{\n   <span class=\"comment\">// result is [ 2, 3 ]</span>\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> If any of the <code>promises</code> given to <code>RSVP.filter</code> are rejected, the first promise\n that is rejected will be given as an argument to the returned promise&apos;s\n rejection handler. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> promise1 = RSVP.resolve(<span class=\"number\">1</span>);\n <span class=\"keyword\">var</span> promise2 = RSVP.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;2&quot;</span>));\n <span class=\"keyword\">var</span> promise3 = RSVP.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;3&quot;</span>));\n <span class=\"keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"keyword\">var</span> filterFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>{\n   <span class=\"keyword\">return</span> item &gt; <span class=\"number\">1</span>;\n };\n\n RSVP.filter(promises, filterFn).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>)</span>{\n   <span class=\"comment\">// Code here never runs because there are rejected promises!</span>\n }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>{\n   <span class=\"comment\">// reason.message === &quot;2&quot;</span>\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> <code>RSVP.filter</code> will also wait for any promises returned from <code>filterFn</code>.\n For instance, you may want to fetch a list of users then return a subset\n of those users based on some asynchronous operation:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> alice = { name: <span class=\"string\">&apos;alice&apos;</span> };\n <span class=\"keyword\">var</span> bob   = { name: <span class=\"string\">&apos;bob&apos;</span> };\n <span class=\"keyword\">var</span> users = [ alice, bob ];\n\n <span class=\"keyword\">var</span> promises = users.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(user)</span></span>{\n   <span class=\"keyword\">return</span> RSVP.resolve(user);\n });\n\n <span class=\"keyword\">var</span> filterFn = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(user)</span></span>{\n   <span class=\"comment\">// Here, Alice has permissions to create a blog post, but Bob does not.</span>\n   <span class=\"keyword\">return</span> getPrivilegesForUser(user).then(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(privs)</span></span>{\n     <span class=\"keyword\">return</span> privs.can_create_blog_post === <span class=\"literal\">true</span>;\n   });\n };\n RSVP.filter(promises, filterFn).then(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(users)</span></span>{\n   <span class=\"comment\">// true, because the server told us only Alice can create a blog post.</span>\n   users.length === <span class=\"number\">1</span>;\n   <span class=\"comment\">// false, because Alice is the only user present in `users`</span>\n   users[<span class=\"number\">0</span>] === bob;\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "promises",
              "description": "",
              "type": "Array"
            },
            {
              "name": "filterFn",
              "description": "- function to be called on each resolved value to\n filter the final results.",
              "type": "Function"
            },
            {
              "name": "label",
              "description": "optional string describing the promise. Useful for\n tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise"
          },
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 548,
          "description": "<html><head></head><body><p><code>RSVP.hash</code> is similar to <code>RSVP.all</code>, but takes an object instead of an array\nfor its <code>promises</code> argument.</p>\n<p>Returns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the <code>promises</code> object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>var promises = {\n  myPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"number\">1</span>),\n  yourPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"number\">2</span>),\n  theirPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"number\">3</span>),\n  notAPromise: <span class=\"number\">4</span>\n};\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>hash(promises).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(hash){\n  <span class=\"comment\">// hash here is an object that looks like:</span>\n  <span class=\"comment\">// {</span>\n  <span class=\"comment\">//   myPromise: 1,</span>\n  <span class=\"comment\">//   yourPromise: 2,</span>\n  <span class=\"comment\">//   theirPromise: 3,</span>\n  <span class=\"comment\">//   notAPromise: 4</span>\n  <span class=\"comment\">// }</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If any of the <code>promises</code> given to <code>RSVP.hash</code> are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>var promises = {\n  myPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"number\">1</span>),\n  rejectedPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>reject(<span class=\"keyword\">new</span> <span class=\"constructor\">Error(<span class=\"string\">&quot;rejectedPromise&quot;</span>)</span>),\n  anotherRejectedPromise: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>reject(<span class=\"keyword\">new</span> <span class=\"constructor\">Error(<span class=\"string\">&quot;anotherRejectedPromise&quot;</span>)</span>),\n};\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>hash(promises).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(hash){\n  <span class=\"comment\">// Code here never runs because there are rejected promises!</span>\n}, <span class=\"keyword\">function</span>(reason) {\n  <span class=\"comment\">// reason.message === &quot;rejectedPromise&quot;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>An important note: <code>RSVP.hash</code> is intended for plain JavaScript objects that\nare just a set of keys and values. <code>RSVP.hash</code> will NOT preserve prototype\nchains.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"constructor\">MyConstructor()</span>{\n  this.example = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"string\">&quot;Example&quot;</span>);\n}\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyConstructor</span>.</span></span>prototype = {\n  protoProperty: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>resolve(<span class=\"string\">&quot;Proto Property&quot;</span>)\n};\n\nvar myObject = <span class=\"keyword\">new</span> <span class=\"constructor\">MyConstructor()</span>;\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RSVP</span>.</span></span>hash(myObject).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(hash){\n  <span class=\"comment\">// protoProperty will not be present, instead you will just have an</span>\n  <span class=\"comment\">// object that looks like:</span>\n  <span class=\"comment\">// {</span>\n  <span class=\"comment\">//   example: &quot;Example&quot;</span>\n  <span class=\"comment\">// }</span>\n  <span class=\"comment\">//</span>\n  <span class=\"comment\">// hash.hasOwnProperty(&apos;protoProperty&apos;); // false</span>\n  <span class=\"comment\">// &apos;undefined&apos; === typeof hash.protoProperty</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "hash",
          "params": [
            {
              "name": "promises",
              "description": "",
              "type": "Object"
            },
            {
              "name": "label",
              "description": "optional string that describes the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "promise that is fulfilled when all properties of `promises`\nhave been fulfilled, or rejected if any of them become rejected.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 713,
          "description": "<html><head></head><body><p><code>RSVP.map</code> is similar to JavaScript&apos;s native <code>map</code> method, except that it\n waits for all promises to become fulfilled before running the <code>mapFn</code> on\n each item in given to <code>promises</code>. <code>RSVP.map</code> returns a promise that will\n become fulfilled with the result of running <code>mapFn</code> on the values the promises\n become fulfilled with.</p>\n<p> For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> promise1 = RSVP.resolve(<span class=\"number\">1</span>);\n <span class=\"keyword\">var</span> promise2 = RSVP.resolve(<span class=\"number\">2</span>);\n <span class=\"keyword\">var</span> promise3 = RSVP.resolve(<span class=\"number\">3</span>);\n <span class=\"keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"keyword\">var</span> mapFn = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item)</span></span>{\n   <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;\n };\n\n RSVP.map(promises, mapFn).then(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(result)</span></span>{\n   <span class=\"comment\">// result is [ 2, 3, 4 ]</span>\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> If any of the <code>promises</code> given to <code>RSVP.map</code> are rejected, the first promise\n that is rejected will be given as an argument to the returned promise&apos;s\n rejection handler. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> promise1 = RSVP.resolve(<span class=\"number\">1</span>);\n <span class=\"keyword\">var</span> promise2 = RSVP.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;2&quot;</span>));\n <span class=\"keyword\">var</span> promise3 = RSVP.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;3&quot;</span>));\n <span class=\"keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"keyword\">var</span> mapFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>{\n   <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;\n };\n\n RSVP.map(promises, mapFn).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>)</span>{\n   <span class=\"comment\">// Code here never runs because there are rejected promises!</span>\n }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>{\n   <span class=\"comment\">// reason.message === &quot;2&quot;</span>\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> <code>RSVP.map</code> will also wait if a promise is returned from <code>mapFn</code>. For example,\n say you want to get all comments from a set of blog posts, but you need\n the blog posts first becuase they contain a url to those comments.</p>\n<div class=\"highlight javscript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre> var mapFn = <span class=\"keyword\">function</span>(blogPost){\n   // getComments does <span class=\"keyword\">some</span> ajax <span class=\"keyword\">and</span> <span class=\"keyword\">returns</span> an RSVP.Promise that <span class=\"keyword\">is</span> fulfilled\n   // <span class=\"keyword\">with</span> <span class=\"keyword\">some</span> comments data\n   <span class=\"keyword\">return</span> getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does <span class=\"keyword\">some</span> ajax <span class=\"keyword\">and</span> <span class=\"keyword\">returns</span> an RSVP.Promise that <span class=\"keyword\">is</span> fulfilled\n // <span class=\"keyword\">with</span> <span class=\"keyword\">some</span> blog post data\n RSVP.map(getBlogPosts(), mapFn).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(comments){\n   // comments <span class=\"keyword\">is</span> the result <span class=\"keyword\">of</span> asking the <span class=\"keyword\">server</span> <span class=\"keyword\">for</span> the comments\n   // <span class=\"keyword\">of</span> <span class=\"keyword\">all</span> blog posts returned <span class=\"keyword\">from</span> getBlogPosts()\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "promises",
              "description": "",
              "type": "Array"
            },
            {
              "name": "mapFn",
              "description": "function to be called on each fulfilled promise.",
              "type": "Function"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\n Useful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "promise that is fulfilled with the result of calling\n `mapFn` on each fulfilled promise or value when they become fulfilled.\n  The promise will be rejected if any of the given `promises` become rejected.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 833,
          "description": "<html><head></head><body><p><code>RSVP.denodeify</code> takes a &quot;node-style&quot; function and returns a function that\nwill return an <code>RSVP.Promise</code>. You can use <code>denodeify</code> in Node.js or the\nbrowser when you&apos;d prefer to use promises over using callbacks. For example,\n<code>denodeify</code> transforms the following:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var fs = require(&apos;fs&apos;);\n\nfs.read<span class=\"constructor\">File(&apos;<span class=\"params\">myfile</span>.<span class=\"params\">txt</span>&apos;, <span class=\"params\">function</span>(<span class=\"params\">err</span>, <span class=\"params\">data</span>)</span>{\n  <span class=\"keyword\">if</span> (err) return handle<span class=\"constructor\">Error(<span class=\"params\">err</span>)</span>;\n  handle<span class=\"constructor\">Data(<span class=\"params\">data</span>)</span>;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>into:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&apos;fs&apos;</span>);\n\n<span class=\"keyword\">var</span> readFile = RSVP.denodeify(fs.readFile);\n\nreadFile(<span class=\"string\">&apos;myfile.txt&apos;</span>).<span class=\"keyword\">then</span>(handleData, handleError);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using <code>denodeify</code> makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&apos;fs&apos;</span>);\n<span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">&apos;some-async-logger&apos;</span>);\n\nfs.readFile(<span class=\"string\">&apos;myfile.txt&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>{\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  fs.writeFile(<span class=\"string\">&apos;myfile2.txt&apos;</span>, data, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    log(<span class=\"string\">&apos;success&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    });\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can chain the operations together using <code>then</code> from the returned promise:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&apos;fs&apos;</span>);\n<span class=\"keyword\">var</span> denodeify = RSVP.denodeify;\n<span class=\"keyword\">var</span> readFile = denodeify(fs.readFile);\n<span class=\"keyword\">var</span> writeFile = denodeify(fs.writeFile);\n<span class=\"keyword\">var</span> log = denodeify(<span class=\"built_in\">require</span>(<span class=\"string\">&apos;some-async-logger&apos;</span>));\n\nreadFile(<span class=\"string\">&apos;myfile.txt&apos;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>{\n  <span class=\"keyword\">return</span> writeFile(<span class=\"string\">&apos;myfile2.txt&apos;</span>, data);\n}).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n  <span class=\"keyword\">return</span> log(<span class=\"string\">&apos;SUCCESS&apos;</span>);\n}).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n  <span class=\"comment\">// success handler</span>\n}, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>{\n  <span class=\"comment\">// rejection handler</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "denodeify",
          "params": [
            {
              "name": "nodeFunc",
              "description": "a \"node-style\" function that takes a callback as\nits last argument. The callback expects an error to be passed as its first\nargument (if an error occurred, otherwise null), and the value from the\noperation as its second argument (\"function(err, value){ }\").",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "optional argument for binding the \"this\" value when\ncalling the `nodeFunc` function.",
              "type": "Any"
            }
          ],
          "return": {
            "description": "a function that wraps `nodeFunc` to return an\n`RSVP.Promise`",
            "type": "Function"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1961,
          "description": "<html><head></head><body><p>This is a convenient alias for <code>RSVP.Promise.reject</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "reason",
              "description": "value that the returned promise will be rejected with.",
              "type": "Any"
            },
            {
              "name": "label",
              "description": "optional string for identifying the returned promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a promise rejected with the given `reason`.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1982,
          "description": "<html><head></head><body><p>This is a convenient alias for <code>RSVP.Promise.resolve</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "value",
              "description": "value that the returned promise will be resolved with",
              "type": "Any"
            },
            {
              "name": "label",
              "description": "optional string for identifying the returned promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a promise that will become fulfilled with the given\n`value`",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 2002,
          "description": "<html><head></head><body><p><code>RSVP.rethrow</code> will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.</p>\n<p>Promises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to <code>then</code>. However, <code>RSVP.rethrow</code> will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. <code>rethrow</code> will also throw the\nerror again so the error can be handled by the promise per the spec.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throws</span>(<span class=\"params\"></span>)</span>{\n  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&apos;Whoops!&apos;</span>);\n}\n\n<span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>{\n  throws();\n});\n\npromise.catch(RSVP.rethrow).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n  <span class=\"comment\">// Code here doesn&apos;t run because the promise became rejected due to an</span>\n  <span class=\"comment\">// error!</span>\n}, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>)</span>{\n  <span class=\"comment\">// handle the error here</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The &apos;Whoops&apos; error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to <code>.then</code> or <code>.catch</code> on the returned promise.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rethrow",
          "params": [
            {
              "name": "reason",
              "description": "reason the promise became rejected.",
              "type": "Error"
            }
          ],
          "throws": {
            "description": "Error"
          },
          "static": 1,
          "class": "Ember.RSVP",
          "module": "RSVP",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.6.1-RSVP",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.6.1",
          "type": "project-version"
        }
      }
    }
  }
}