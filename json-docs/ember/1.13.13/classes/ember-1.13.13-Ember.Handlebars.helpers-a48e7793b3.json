{
  "data": {
    "id": "ember-1.13.13-Ember.Handlebars.helpers",
    "type": "class",
    "attributes": {
      "name": "Ember.Handlebars.helpers",
      "shortname": "Ember.Handlebars.helpers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-htmlbars",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
          "line": 6,
          "description": "<html><head></head><body><p><code>bind-attr</code> allows you to create a binding between DOM element attributes and\nEmber objects. For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img {{bind-attr <span class=\"attribute\">src</span>=imageUrl <span class=\"attribute\">alt</span>=imageTitle}}&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above handlebars template will fill the <code>&lt;img&gt;</code>&apos;s <code>src</code> attribute with\nthe value of the property referenced with <code>imageUrl</code> and its <code>alt</code>\nattribute with the value of the property referenced with <code>imageTitle</code>.</p>\n<p>If the rendering context of this template is the following object:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attribute\">imageUrl</span>: <span class=\"string\">&apos;http://lolcats.info/haz-a-funny&apos;</span>,\n  imageTitle: <span class=\"string\">&apos;A humorous image of a cat&apos;</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The resulting HTML output will be:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img <span class=\"attribute\">src</span>=<span class=\"string\">&quot;http://lolcats.info/haz-a-funny&quot;</span> <span class=\"attribute\">alt</span>=<span class=\"string\">&quot;A humorous image of a cat&quot;</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>bind-attr</code> cannot redeclare existing DOM element attributes. The use of <code>src</code>\nin the following <code>bind-attr</code> example will be ignored and the hard coded value\nof <code>src=&quot;/failwhale.gif&quot;</code> will take precedence:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img <span class=\"attribute\">src</span>=<span class=\"string\">&quot;/failwhale.gif&quot;</span> {{bind-attr <span class=\"attribute\">src</span>=imageUrl <span class=\"attribute\">alt</span>=imageTitle}}&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"bind-attr-and-the-class-attribute\"><code>bind-attr</code> and the <code>class</code> attribute</h3>\n<p><code>bind-attr</code> supports a special syntax for handling a number of cases unique\nto the <code>class</code> DOM element attribute. The <code>class</code> attribute combines\nmultiple discrete values into a single attribute as a space-delimited\nlist of strings. Each string can be:</p>\n<ul>\n<li>a string return value of an object&apos;s property.</li>\n<li>a boolean return value of an object&apos;s property</li>\n<li>a hard-coded value</li>\n</ul>\n<p>A string return value works identically to other uses of <code>bind-attr</code>. The\nreturn value of the property will become the value of the attribute. For\nexample, the following view and template:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>  AView = View.extend({\n    someProperty: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"keyword\">return</span> <span class=\"string\">&quot;aValue&quot;</span>;\n    }.property()\n  })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> </span></span><span class=\"template-variable\">{{bind-attr class=<span class=\"builtin-name\">view</span>.someProperty}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result in the following rendered output:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img <span class=\"keyword\">class</span>=<span class=\"string\">&quot;aValue&quot;</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A boolean return value will insert a specified class name if the property\nreturns <code>true</code> and remove the class name if the property returns <code>false</code>.</p>\n<p>A class name is provided via the syntax\n<code>somePropertyName:class-name-if-true</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>AView = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">View</span>.</span></span>extend({\n  someBool: <span class=\"literal\">true</span>\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> </span></span><span class=\"template-variable\">{{bind-attr class=&quot;<span class=\"builtin-name\">view</span>.someBool:class-name-<span class=\"builtin-name\">if</span>-true&quot;}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result in the following rendered output:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img <span class=\"keyword\">class</span>=<span class=\"string\">&quot;class-name-if-true&quot;</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>An additional section of the binding can be provided if you want to\nreplace the existing class instead of removing it when the boolean\nvalue changes:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img {{bind-attr <span class=\"class\"><span class=\"keyword\">class</span>=&quot;<span class=\"title\">view</span>.<span class=\"title\">someBool</span>:</span><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>-<span class=\"title\">if</span>-<span class=\"title\">true</span>:</span><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>-<span class=\"title\">if</span>-<span class=\"title\">false</span>&quot;}}&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A hard-coded value can be used by prepending <code>:</code> to the desired\nclass name: <code>:class-name-to-always-apply</code>.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img {{bind-attr <span class=\"class\"><span class=\"keyword\">class</span>=&quot;:</span><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>-<span class=\"title\">to</span>-<span class=\"title\">always</span>-<span class=\"title\">apply</span>&quot;}}&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Results in the following rendered output:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img <span class=\"keyword\">class</span>=<span class=\"string\">&quot;class-name-to-always-apply&quot;</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>All three strategies - string return value, boolean return value, and\nhard-coded value &#x2013; can be combined in a single declaration:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;img {{bind-attr <span class=\"class\"><span class=\"keyword\">class</span>=&quot;:</span><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>-<span class=\"title\">to</span>-<span class=\"title\">always</span>-<span class=\"title\">apply</span> <span class=\"title\">view</span>.<span class=\"title\">someBool</span>:</span><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>-<span class=\"title\">if</span>-<span class=\"title\">true</span> <span class=\"title\">view</span>.<span class=\"title\">someProperty</span>&quot;}}&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "bind-attr",
          "deprecated": true,
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Handlebars.helpers",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
          "line": 132,
          "description": "<html><head></head><body><p>See <code>bind-attr</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "bindAttr",
          "deprecated": true,
          "params": [
            {
              "name": "context",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Handlebars.helpers",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-routing-htmlbars/lib/keywords/link-to.js",
          "line": 340,
          "description": "<html><head></head><body><p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_link-to\">link-to</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "linkTo",
          "deprecated": true,
          "params": [
            {
              "name": "routeName",
              "description": "",
              "type": "String"
            },
            {
              "name": "context",
              "description": "",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.Handlebars.helpers",
          "module": "ember",
          "submodule": "ember-routing-htmlbars"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.13.13-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.13.13",
          "type": "project-version"
        }
      }
    }
  }
}