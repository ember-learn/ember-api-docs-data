{
  "data": {
    "id": "ember-1.13.13-Ember.computed",
    "type": "namespace",
    "attributes": {
      "name": "Ember.computed",
      "shortname": "Ember.computed",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-metal",
      "namespace": "Ember",
      "file": "packages/ember-metal/lib/computed.js",
      "line": 533,
      "description": "<html><head></head><body><p>This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via <code>Ember.defineProperty()</code>.</p>\n<p>The function you pass will be used to both get and set property values.\nThe function should accept two parameters, key and value. If value is not\nundefined you should set the value first. In either case return the\ncurrent value of the property.</p>\n<p>A computed property defined in this way might look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Person = Ember.Object.extend({\n  firstName: <span class=\"string\">&apos;Betty&apos;</span>,\n  lastName: <span class=\"string\">&apos;Jones&apos;</span>,\n\n  fullName: Ember.computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, function(key, value) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n  })\n});\n\n<span class=\"keyword\">var</span> client = Person.create();\n\nclient.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>); <span class=\"comment\">// &apos;Betty Jones&apos;</span>\n\nclient.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Fuller&apos;</span>);\nclient.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>); <span class=\"comment\">// &apos;Betty Fuller&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><em>Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have prototype extensions enabled.</em></p>\n<p>You might use this method if you disabled\n<a href=\"http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/\">Prototype Extensions</a>.\nThe alternative syntax might look like this\n(if prototype extensions are enabled, which is the default behavior):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: function () {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n}.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "is_constructor": 1,
      "static": 1,
      "params": [
        {
          "name": "dependentKeys*",
          "description": "Optional dependent keys that trigger this computed property.",
          "type": "String",
          "optional": true
        },
        {
          "name": "func",
          "description": "The computed property function.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "property descriptor instance",
        "type": "Ember.ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 32,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> ToDoList = Ember.<span class=\"built_in\">Object</span>.extend({\n  isDone: Ember.computed.empty(<span class=\"string\">&apos;todos&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> todoList = ToDoList.create({\n  todos: [<span class=\"string\">&apos;Unit Test&apos;</span>, <span class=\"string\">&apos;Documentation&apos;</span>, <span class=\"string\">&apos;Release&apos;</span>]\n});\n\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isDone&apos;</span>); <span class=\"comment\">// false</span>\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;todos&apos;</span>).clear();\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isDone&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.6.0",
          "itemtype": "method",
          "name": "empty",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which negate\nthe original value for property",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 66,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasStuff: Ember.computed.notEmpty(<span class=\"string\">&apos;backpack&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create({ backpack: [<span class=\"string\">&apos;Food&apos;</span>, <span class=\"string\">&apos;Sleeping Bag&apos;</span>, <span class=\"string\">&apos;Tent&apos;</span>] });\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>);         <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;backpack&apos;</span>).clear(); <span class=\"comment\">// []</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasStuff&apos;</span>);         <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "notEmpty",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if\noriginal value for property is not empty.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 97,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  isHungry: Ember.computed.none(<span class=\"string\">&apos;food&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"string\">&apos;Banana&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;food&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isHungry&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "none",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which\nreturns true if original value for property is null or undefined.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 131,
          "description": "<html><head></head><body><p>A computed property that returns the inverse boolean value\nof the original value for the dependent property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  isAnonymous: Ember.computed.<span class=\"keyword\">not</span>(<span class=\"string\">&apos;loggedIn&apos;</span>)\n});\n\nvar <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">true</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;loggedIn&apos;</span>, <span class=\"keyword\">true</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isAnonymous&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "not",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns\ninverse of the original value for property",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 162,
          "description": "<html><head></head><body><p>A computed property that converts the provided dependent property\ninto a boolean value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasBananas: Ember.computed.<span class=\"built_in\">bool</span>(<span class=\"string\">&apos;numBananas&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">0</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">1</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"keyword\">null</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasBananas&apos;</span>); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "bool",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which converts\nto boolean the original value for property",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 195,
          "description": "<html><head></head><body><p>A computed property which matches the original value for the\ndependent property against a given RegExp, returning <code>true</code>\nif they values matches the RegExp and <code>false</code> if it does not.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  hasValidEmail: Ember.computed.match(<span class=\"string\">&apos;email&apos;</span>, /^.+@.+\\..+$/)\n});\n\nvar <span class=\"keyword\">user</span> = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({loggedIn: <span class=\"keyword\">false</span>});\n\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">false</span>\n<span class=\"keyword\">user</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;ember_hamster@example.com&apos;</span>);\n<span class=\"keyword\">user</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasValidEmail&apos;</span>); // <span class=\"keyword\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "match",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "regexp",
              "description": "",
              "type": "RegExp"
            }
          ],
          "return": {
            "description": "computed property which match\nthe original value for property against a given RegExp",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 232,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis equal to the given value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  napTime: Ember.computed.equal(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;sleepy&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;sleepy&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;state&apos;</span>, <span class=\"string\">&apos;hungry&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;napTime&apos;</span>); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "equal",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "String|Number|Object"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 266,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis greater than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasTooManyBananas: Ember.computed.gt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">11</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "gt",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater than given value.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 300,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasTooManyBananas: Ember.computed.gte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">10</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasTooManyBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "gte",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 334,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  needsMoreBananas: Ember.computed.lt(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">2</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lt",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less then given value.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 368,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  needsMoreBananas: Ember.computed.lte(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">5</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;numBananas&apos;</span>, <span class=\"number\">3</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;needsMoreBananas&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lte",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if\nthe original value for property is less or equal than given value.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 402,
          "description": "<html><head></head><body><p>A computed property that performs a logical <code>and</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  readyForCamp: Ember.computed.and(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"string\">&apos;hasBackpack&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasTent&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasBackpack&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasBackpack&apos;</span>, <span class=\"string\">&apos;Yes&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForCamp&apos;</span>); <span class=\"comment\">// &apos;Yes&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "and",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 442,
          "description": "<html><head></head><body><p>A computed property which performs a logical <code>or</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  readyForRain: Ember.computed.or(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"string\">&apos;hasUmbrella&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); <span class=\"comment\">// false</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasUmbrella&apos;</span>, <span class=\"keyword\">true</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); <span class=\"comment\">// true</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hasJacket&apos;</span>, <span class=\"string\">&apos;Yes&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;readyForRain&apos;</span>); <span class=\"comment\">// &apos;Yes&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "or",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 478,
          "description": "<html><head></head><body><p>A computed property that returns the first truthy value\nfrom a list of dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  hasClothes: Ember.computed.any(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;shirt&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasClothes&apos;</span>); <span class=\"comment\">// null</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;shirt&apos;</span>, <span class=\"string\">&apos;Hawaiian Shirt&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;hasClothes&apos;</span>); <span class=\"comment\">// &apos;Hawaiian Shirt&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which returns\nthe first truthy value of given list of properties.",
            "type": "Ember.ComputedProperty"
          },
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.or` instead.",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 514,
          "description": "<html><head></head><body><p>A computed property that returns the array of values\nfor the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>var Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  clothes: Ember.computed.collect(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;shirt&apos;</span>)\n});\n\nvar hamster = Hamster.<span class=\"keyword\">create</span>();\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>]\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;hat&apos;</span>, <span class=\"string\">&apos;Camp Hat&apos;</span>);\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;shirt&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;clothes&apos;</span>); // [<span class=\"string\">&apos;Camp Hat&apos;</span>, <span class=\"string\">&apos;Camp Shirt&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "collect",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which maps\nvalues of all passed in properties to an array.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 554,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>var Person = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;Alex Matchneer&apos;</span>,\n  nomen: Ember.computed.<span class=\"keyword\">alias</span>(<span class=\"string\">&apos;name&apos;</span>)\n});\n\nvar alex = Person.<span class=\"keyword\">create</span>();\n\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nomen&apos;</span>); // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;Alex Matchneer&apos;</span>\n\nalex.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nomen&apos;</span>, <span class=\"string\">&apos;@machty&apos;</span>);\nalex.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>);  // <span class=\"string\">&apos;@machty&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "alias",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates an\nalias to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 582,
          "description": "<html><head></head><body><p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: Ember.computed.oneWay(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\nvar teddy = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName:  <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);              // <span class=\"string\">&apos;Teddy&apos;</span>\nteddy.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>); // <span class=\"string\">&apos;TeddyBear&apos;</span>\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);             // <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "oneWay",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 619,
          "description": "<html><head></head><body><p>This is a more semantically meaningful alias of <code>computed.oneWay</code>,\nwhose name is somewhat ambiguous as to which direction the data flows.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reads",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\n  one way computed property to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 631,
          "description": "<html><head></head><body><p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propagate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">User</span> = Ember.<span class=\"keyword\">Object</span>.extend({\n  firstName: <span class=\"keyword\">null</span>,\n  lastName: <span class=\"keyword\">null</span>,\n  nickName: Ember.computed.readOnly(<span class=\"string\">&apos;firstName&apos;</span>)\n});\n\nvar teddy = <span class=\"keyword\">User</span>.<span class=\"keyword\">create</span>({\n  firstName: <span class=\"string\">&apos;Teddy&apos;</span>,\n  lastName:  <span class=\"string\">&apos;Zeenny&apos;</span>\n});\n\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;nickName&apos;</span>);              // <span class=\"string\">&apos;Teddy&apos;</span>\nteddy.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;nickName&apos;</span>, <span class=\"string\">&apos;TeddyBear&apos;</span>); // throws <span class=\"keyword\">Exception</span>\n// throw <span class=\"built_in\">new</span> Ember.Error(<span class=\"string\">&apos;Cannot Set: nickName on: &lt;User:ember27288&gt;&apos;</span> );`\nteddy.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);             // <span class=\"string\">&apos;Teddy&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readOnly",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a\none way computed property to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 670,
          "description": "<html><head></head><body><p>A computed property that acts like a standard getter and setter,\nbut returns the value at the provided <code>defaultPath</code> if the\nproperty itself has not been set to a value</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.<span class=\"built_in\">Object</span>.extend({\n  wishList: Ember.computed.defaultTo(<span class=\"string\">&apos;favoriteFood&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.create({ favoriteFood: <span class=\"string\">&apos;Banana&apos;</span> });\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;wishList&apos;</span>);                     <span class=\"comment\">// &apos;Banana&apos;</span>\nhamster.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;wishList&apos;</span>, <span class=\"string\">&apos;More Unit Tests&apos;</span>);\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;wishList&apos;</span>);                     <span class=\"comment\">// &apos;More Unit Tests&apos;</span>\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;favoriteFood&apos;</span>);                 <span class=\"comment\">// &apos;Banana&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "defaultTo",
          "params": [
            {
              "name": "defaultPath",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which acts like\na standard getter and setter, but defaults to the value from `defaultPath`.",
            "type": "Ember.ComputedProperty"
          },
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.oneWay` or custom CP with default instead.",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/computed_macros.js",
          "line": 712,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.</p>\n</body></html>",
          "itemtype": "method",
          "name": "deprecatingAlias",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates an\nalias with a deprecation to the original value for property.",
            "type": "Ember.ComputedProperty"
          },
          "since": "1.7.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 26,
          "description": "<html><head></head><body><p>A computed property that returns the sum of the value\nin the dependent array.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sum",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the sum of all values in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 52,
          "description": "<html><head></head><body><p>A computed property that calculates the maximum value in the\ndependent array. This will return <code>-Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  <span class=\"attr\">maxChildAge</span>: Ember.computed.<span class=\"title function_ invoke__\">max</span>(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = Person.<span class=\"title function_ invoke__\">create</span>({ <span class=\"attr\">children</span>: [] });\n\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// -Infinity</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// 7</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;maxChildAge&apos;</span>); <span class=\"comment\">// 8</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "max",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the largest value in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 103,
          "description": "<html><head></head><body><p>A computed property that calculates the minimum value in the\ndependent array. This will return <code>Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>),\n  <span class=\"attr\">minChildAge</span>: Ember.computed.<span class=\"title function_ invoke__\">min</span>(<span class=\"string\">&apos;childAges&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = Person.<span class=\"title function_ invoke__\">create</span>({ <span class=\"attr\">children</span>: [] });\n\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// Infinity</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span>\n});\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// 7</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;minChildAge&apos;</span>); <span class=\"comment\">// 5</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "min",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the smallest value in the dependentKey's array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 155,
          "description": "<html><head></head><body><p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>var Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  excitingChores: Ember.computed.map(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"keyword\">function</span>(chore, <span class=\"keyword\">index</span>) {\n    <span class=\"keyword\">return</span> chore.toUpperCase() + <span class=\"string\">&apos;!&apos;</span>;\n  })\n});\n\nvar hamster = Hamster.<span class=\"keyword\">create</span>({\n  chores: [<span class=\"string\">&apos;clean&apos;</span>, <span class=\"string\">&apos;write more unit tests&apos;</span>]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;excitingChores&apos;</span>); // [<span class=\"string\">&apos;CLEAN!&apos;</span>, <span class=\"string\">&apos;WRITE MORE UNIT TESTS!&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "an array mapped via the callback",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 207,
          "description": "<html><head></head><body><p>Returns an array mapped to the specified key.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Person = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">childAges</span>: Ember.computed.<span class=\"title function_ invoke__\">mapBy</span>(<span class=\"string\">&apos;children&apos;</span>, <span class=\"string\">&apos;age&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> lordByron = Person.<span class=\"title function_ invoke__\">create</span>({ <span class=\"attr\">children</span>: [] });\n\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// []</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObject</span>({ <span class=\"attr\">name</span>: <span class=\"string\">&apos;Augusta Ada Byron&apos;</span>, <span class=\"attr\">age</span>: <span class=\"number\">7</span> });\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// [7]</span>\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;children&apos;</span>).<span class=\"title function_ invoke__\">pushObjects</span>([{\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Allegra Byron&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">5</span>\n}, {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;Elizabeth Medora Leigh&apos;</span>,\n  <span class=\"attr\">age</span>: <span class=\"number\">8</span>\n}]);\nlordByron.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;childAges&apos;</span>); <span class=\"comment\">// [7, 5, 8]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "an array mapped to the specified key",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 242,
          "itemtype": "method",
          "name": "mapProperty",
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.mapBy` instead",
          "params": [
            {
              "name": "dependentKey",
              "description": ""
            },
            {
              "name": "propertyKey",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 252,
          "description": "<html><head></head><body><p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.\n<code>array</code> is the dependant array itself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>var Hamster = Ember.<span class=\"keyword\">Object</span>.extend({\n  remainingChores: Ember.computed.<span class=\"keyword\">filter</span>(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"keyword\">function</span>(chore, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>) {\n    <span class=\"keyword\">return</span> !chore.done;\n  })\n});\n\nvar hamster = Hamster.<span class=\"keyword\">create</span>({\n  chores: [\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, done: <span class=\"keyword\">true</span> },\n    { <span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span> }\n  ]\n});\n\nhamster.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); // [{<span class=\"type\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, done: <span class=\"keyword\">false</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 322,
          "description": "<html><head></head><body><p>Filters the array by the property and value</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">remainingChores</span>: Ember.computed.<span class=\"title function_ invoke__\">filterBy</span>(<span class=\"string\">&apos;chores&apos;</span>, <span class=\"string\">&apos;done&apos;</span>, <span class=\"literal\">false</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.<span class=\"title function_ invoke__\">create</span>({\n  <span class=\"attr\">chores</span>: [\n    { <span class=\"attr\">name</span>: <span class=\"string\">&apos;cook&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> },\n    { <span class=\"attr\">name</span>: <span class=\"string\">&apos;clean&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> },\n    { <span class=\"attr\">name</span>: <span class=\"string\">&apos;write more unit tests&apos;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> }\n  ]\n});\n\nhamster.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;remainingChores&apos;</span>); <span class=\"comment\">// [{ name: &apos;write more unit tests&apos;, done: false }]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "*"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 365,
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "dependentKey",
              "description": ""
            },
            {
              "name": "propertyKey",
              "description": ""
            },
            {
              "name": "value",
              "description": ""
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `Ember.computed.filterBy` instead",
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 376,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>var Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uni<span class=\"string\">q(&apos;fruits&apos;)</span>\n});\n\nvar hamster = Hamster.create({\n  fruits: [\n    <span class=\"string\">&apos;banana&apos;</span>,\n    <span class=\"string\">&apos;grape&apos;</span>,\n    <span class=\"string\">&apos;kale&apos;</span>,\n    <span class=\"string\">&apos;banana&apos;</span>\n  ]\n});\n\nhamster.get(<span class=\"string\">&apos;uniqueFruits&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 443,
          "description": "<html><head></head><body><p>Alias for <a href=\"/api/#method_computed_uniq\">Ember.computed.uniq</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "union",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 455,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>var obj = Ember.<span class=\"keyword\">Object</span>.extend({\n  friendsInCommon: Ember.computed.<span class=\"keyword\">intersect</span>(<span class=\"string\">&apos;adaFriends&apos;</span>, <span class=\"string\">&apos;charlesFriends&apos;</span>)\n}).<span class=\"keyword\">create</span>({\n  adaFriends: [<span class=\"string\">&apos;Charles Babbage&apos;</span>, <span class=\"string\">&apos;John Hobhouse&apos;</span>, <span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>],\n  charlesFriends: [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>, <span class=\"string\">&apos;Ada Lovelace&apos;</span>, <span class=\"string\">&apos;George Peacock&apos;</span>]\n});\n\nobj.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;friendsInCommon&apos;</span>); // [<span class=\"string\">&apos;William King&apos;</span>, <span class=\"string\">&apos;Mary Somerville&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "intersect",
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nduplicated elements from the dependent arrays",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 539,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> Hamster = Ember.Object.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">likes</span>: [<span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">&apos;grape&apos;</span>, <span class=\"string\">&apos;kale&apos;</span>],\n  <span class=\"attr\">wants</span>: Ember.computed.<span class=\"title function_ invoke__\">setDiff</span>(<span class=\"string\">&apos;likes&apos;</span>, <span class=\"string\">&apos;fruits&apos;</span>)\n});\n\n<span class=\"keyword\">var</span> hamster = Hamster.<span class=\"title function_ invoke__\">create</span>({\n  <span class=\"attr\">fruits</span>: [\n    <span class=\"string\">&apos;grape&apos;</span>,\n    <span class=\"string\">&apos;kale&apos;</span>,\n  ]\n});\n\nhamster.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&apos;wants&apos;</span>); <span class=\"comment\">// [&apos;banana&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setDiff",
          "params": [
            {
              "name": "setAProperty",
              "description": "",
              "type": "String"
            },
            {
              "name": "setBProperty",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the\nitems from the first dependent array that are not in the second\ndependent array",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
          "line": 653,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.</p>\n<p>The callback method you provide should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span><span class=\"params\">(itemA, itemB)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should come before\n<code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code> should come after\n<code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p>\n<p>Therefore, if this function is comparing some numeric values, simple <code>itemA - itemB</code> or\n<code>itemA.get( &apos;foo&apos; ) - itemB.get( &apos;foo&apos; )</code> can be used instead of series of <code>if</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre></td>\n              <td class=\"code\"><pre>var ToDoList = Ember.<span class=\"keyword\">Object</span>.extend({\n  // <span class=\"keyword\">using</span> standard ascending sort\n  todosSorting: [<span class=\"string\">&apos;name&apos;</span>],\n  sortedTodos: Ember.computed.sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"string\">&apos;todosSorting&apos;</span>),\n\n  // <span class=\"keyword\">using</span> descending sort\n  todosSortingDesc: [<span class=\"string\">&apos;name:desc&apos;</span>],\n  sortedTodosDesc: Ember.computed.sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"string\">&apos;todosSortingDesc&apos;</span>),\n\n  // <span class=\"keyword\">using</span> a custom sort <span class=\"keyword\">function</span>\n  priorityTodos: Ember.computed.sort(<span class=\"string\">&apos;todos&apos;</span>, <span class=\"keyword\">function</span>(a, b){\n    <span class=\"keyword\">if</span> (a.priority &gt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.priority &lt; b.priority) {\n      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  })\n});\n\nvar todoList = ToDoList.<span class=\"keyword\">create</span>({todos: [\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Unit Test&apos;</span>, priority: <span class=\"number\">2</span> },\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Documentation&apos;</span>, priority: <span class=\"number\">3</span> },\n  { <span class=\"type\">name</span>: <span class=\"string\">&apos;Release&apos;</span>, priority: <span class=\"number\">1</span> }\n]});\n\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;sortedTodos&apos;</span>);      // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }]\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;sortedTodosDesc&apos;</span>);  // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }]\ntodoList.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;priorityTodos&apos;</span>);    // [{ <span class=\"type\">name</span>:<span class=\"string\">&apos;Release&apos;</span>, priority:<span class=\"number\">1</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Unit Test&apos;</span>, priority:<span class=\"number\">2</span> }, { <span class=\"type\">name</span>:<span class=\"string\">&apos;Documentation&apos;</span>, priority:<span class=\"number\">3</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "sort",
          "params": [
            {
              "name": "itemsKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "sortDefinition",
              "description": "a dependent key to an\narray of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting",
              "type": "String or Function"
            }
          ],
          "return": {
            "description": "computes a new sorted array based\non the sort property array or callback function",
            "type": "Ember.ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.computed",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.13.13-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.13.13",
          "type": "project-version"
        }
      }
    }
  }
}