{
  "data": {
    "id": "ember-2.15.3-Ember.Helper",
    "type": "class",
    "attributes": {
      "name": "Ember.Helper",
      "shortname": "Ember.Helper",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-glimmer",
      "namespace": "",
      "file": "packages/ember-glimmer/lib/helper.js",
      "line": 12,
      "description": "<html><head></head><body><p>Ember Helpers are functions that can compute values, and are used in templates.\nFor example, this code calls a helper named <code>format-currency</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">format-currency</span> cents <span class=\"attr\">currency</span>=<span class=\"string\">&quot;$&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally a helper can be called as a nested helper (sometimes called a\nsubexpression). In this example, the computed value of a helper is passed\nto a component named <code>show-money</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">show-money</span> <span class=\"attr\">amount</span>=(<span class=\"name\">format-currency</span> cents <span class=\"attr\">currency</span>=<span class=\"string\">&quot;$&quot;</span>)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Helpers defined using a class must provide a <code>compute</code> function. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Ember</span>.<span class=\"property\">Helper</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">compute</span>(<span class=\"params\">params, hash</span>) {\n    <span class=\"keyword\">let</span> cents = params[<span class=\"number\">0</span>];\n    <span class=\"keyword\">let</span> currency = hash.<span class=\"property\">currency</span>;\n    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${currency}</span><span class=\"subst\">${cents * <span class=\"number\">0.01</span>}</span>`</span>;\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Each time the input to a helper changes, the <code>compute</code> function will be\ncalled again.</p>\n<p>As instances, these helpers also have access to the container an will accept\ninjected dependencies.</p>\n<p>Additionally, class helpers can call <code>recompute</code> to force a new computation.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "methods": [
        {
          "file": "packages/ember-glimmer/lib/helper.js",
          "line": 60,
          "description": "<html><head></head><body><p>On a class-based helper, it may be useful to force a recomputation of that\nhelpers value. This is akin to <code>rerender</code> on a component.</p>\n<p>For example, this component will rerender when the <code>currentUser</code> on a\nsession service changes:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/helpers/current-user-email.js</span>\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Ember</span>.<span class=\"property\">Helper</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">session</span>: <span class=\"title class_\">Ember</span>.<span class=\"property\">inject</span>.<span class=\"title function_\">service</span>(),\n  <span class=\"attr\">onNewUser</span>: <span class=\"title class_\">Ember</span>.<span class=\"title function_\">observer</span>(<span class=\"string\">&apos;session.currentUser&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">recompute</span>();\n  }),\n  <span class=\"title function_\">compute</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&apos;session.currentUser.email&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "recompute",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Ember.Helper",
          "module": "ember",
          "submodule": "ember-glimmer"
        },
        {
          "file": "packages/ember-glimmer/lib/helper.js",
          "line": 88,
          "description": "<html><head></head><body><p>Override this function when writing a class-based helper.</p>\n</body></html>",
          "itemtype": "method",
          "name": "compute",
          "params": [
            {
              "name": "params",
              "description": "The positional arguments to the helper",
              "type": "Array"
            },
            {
              "name": "hash",
              "description": "The named arguments to the helper",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Ember.Helper",
          "module": "ember",
          "submodule": "ember-glimmer"
        },
        {
          "file": "packages/ember-glimmer/lib/helper.js",
          "line": 103,
          "description": "<html><head></head><body><p>In many cases, the ceremony of a full <code>Ember.Helper</code> class is not required.\nThe <code>helper</code> method create pure-function helpers without instances. For\nexample:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/helpers/format-currency.js</span>\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Ember</span>.<span class=\"property\">Helper</span>.<span class=\"title function_\">helper</span>(<span class=\"keyword\">function</span>(<span class=\"params\">params, hash</span>) {\n  <span class=\"keyword\">let</span> cents = params[<span class=\"number\">0</span>];\n  <span class=\"keyword\">let</span> currency = hash.<span class=\"property\">currency</span>;\n  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${currency}</span><span class=\"subst\">${cents * <span class=\"number\">0.01</span>}</span>`</span>;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "static": 1,
          "params": [
            {
              "name": "helper",
              "description": "The helper function",
              "type": "Function"
            }
          ],
          "itemtype": "method",
          "name": "helper",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Ember.Helper",
          "module": "ember",
          "submodule": "ember-glimmer"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.15.3-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.15.3",
          "type": "project-version"
        }
      }
    }
  }
}