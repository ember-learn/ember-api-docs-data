{
  "data": {
    "id": "ember-1.4.0-Ember.RSVP.Promise",
    "type": "class",
    "attributes": {
      "name": "Ember.RSVP.Promise",
      "shortname": "RSVP.Promise",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "RSVP",
      "namespace": "Ember",
      "file": "../packages/rsvp/lib/main.js",
      "line": 950,
      "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promiseâ€™s eventual value or the reason\nwhy the promise cannot be fulfilled.\n\nTerminology\n-----------\n\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\n\nA promise can be in one of three states: pending, fulfilled, or rejected.\n\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.  Similarly, a\nrejection reason is never a thenable.\n\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\n\n\nBasic Usage:\n------------\n\n```js\nvar promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nAdvanced Usage:\n---------------\n\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n\n```js\nfunction getJSON(url) {\n  return new Promise(function(resolve, reject){\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(\"getJSON: `\" + url + \"` failed with status: [\" + this.status + \"]\");\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nUnlike callbacks, promises are great composable primitives.\n\n```js\nPromise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // => postsJSON\n  values[1] // => commentsJSON\n\n  return values;\n});\n```",
      "params": [
        {
          "name": "UNKNOWN",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String"
        }
      ],
      "is_constructor": 1,
      "methods": [
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1145,
          "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n\n```js\nfindUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n```\n\nChaining\n--------\n\nThe return value of `then` is itself a promise.  This second, \"downstream\"\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n\n```js\nfindUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return \"default name\";\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `\"default name\"`\n});\n\nfindUser().then(function (user) {\n  throw new Error(\"Found user, but still unhappy\");\n}, function (reason) {\n  throw new Error(\"`findUser` rejected and we're unhappy\");\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be \"Found user, but still unhappy\".\n  // If `findUser` rejected, `reason` will be \"`findUser` rejected and we're unhappy\".\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n```js\nfindUser().then(function (user) {\n  throw new PedagogicalException(\"Upstream error\");\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n```\n\nAssimilation\n------------\n\nSometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n```\n\nIf the assimliated promise rejects, then the downstream promise will also reject.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\n\nSimple Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar result;\n\ntry {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\nfindResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n```\n\nAdvanced Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar author, books;\n\ntry {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\n\nfunction foundBooks(books) {\n\n}\n\nfunction failure(reason) {\n\n}\n\nfindAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n```",
          "itemtype": "method",
          "name": "then",
          "params": [
            {
              "name": "onFulfilled",
              "description": "",
              "type": "Function"
            },
            {
              "name": "onRejected",
              "description": "",
              "type": "Function"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise"
          },
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1361,
          "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n\n```js\nfunction findAuthor(){\n  throw new Error(\"couldn't find that author\");\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});\n```",
          "itemtype": "method",
          "name": "catch",
          "params": [
            {
              "name": "onRejection",
              "description": "",
              "type": "Function"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise"
          },
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1393,
          "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\n\nSynchronous example:\n\n```js\nfindAuthor() {\n  if (Math.random() > 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n\ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuther();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n```\n\nAsynchronous example:\n\n```js\nfindAuthor().catch(function(reason){\n  return findOtherAuther();\n}).finally(function(){\n  // author was either found, or not\n});\n```",
          "itemtype": "method",
          "name": "finally",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise"
          },
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1562,
          "description": "`RSVP.Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // The array here would be [ 1, 2, 3 ];\n});\n```\n\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // Code here never runs because there are rejected promises!\n}, function(error) {\n  // error.message === \"2\"\n});\n```",
          "itemtype": "method",
          "name": "all",
          "params": [
            {
              "name": "entries",
              "description": "array of promises",
              "type": "Array"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "promise that is fulfilled when all `promises` have been\nfulfilled, or rejected if any of them become rejected.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1660,
          "description": "`RSVP.Promise.cast` coerces its argument to a promise, or returns the\nargument if it is already a promise which shares a constructor with the caster.\n\nExample:\n\n```javascript\nvar promise = RSVP.Promise.resolve(1);\nvar casted = RSVP.Promise.cast(promise);\n\nconsole.log(promise === casted); // true\n```\n\nIn the case of a promise whose constructor does not match, it is assimilated.\nThe resulting promise will fulfill or reject based on the outcome of the\npromise being casted.\n\nExample:\n\n```javascript\nvar thennable = $.getJSON('/api/foo');\nvar casted = RSVP.Promise.cast(thennable);\n\nconsole.log(thennable === casted); // false\nconsole.log(casted instanceof RSVP.Promise) // true\n\ncasted.then(function(data) {\n  // data is the value getJSON fulfills with\n});\n```\n\nIn the case of a non-promise, a promise which will fulfill with that value is\nreturned.\n\nExample:\n\n```javascript\nvar value = 1; // could be a number, boolean, string, undefined...\nvar casted = RSVP.Promise.cast(value);\n\nconsole.log(value === casted); // false\nconsole.log(casted instanceof RSVP.Promise) // true\n\ncasted.then(function(val) {\n  val === value // => true\n});\n```\n\n`RSVP.Promise.cast` is similar to `RSVP.Promise.resolve`, but `RSVP.Promise.cast` differs in the\nfollowing ways:\n\n* `RSVP.Promise.cast` serves as a memory-efficient way of getting a promise, when you\nhave something that could either be a promise or a value. RSVP.resolve\nwill have the same effect but will create a new promise wrapper if the\nargument is a promise.\n* `RSVP.Promise.cast` is a way of casting incoming thenables or promise subclasses to\npromises of the exact class specified, so that the resulting object's `then` is\nensured to have the behavior of the constructor you are calling cast on (i.e., RSVP.Promise).",
          "itemtype": "method",
          "name": "cast",
          "params": [
            {
              "name": "object",
              "description": "to be casted",
              "type": "Object"
            },
            {
              "name": "label",
              "description": "optional string for labeling the promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1750,
          "description": "`RSVP.Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\n\nExample:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 1\");\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 2\");\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // result === \"promise 2\" because it was resolved before promise1\n  // was resolved.\n});\n```\n\n`RSVP.Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 1\");\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(new Error(\"promise 2\"));\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // Code here never runs\n}, function(reason){\n  // reason.message === \"promise2\" because promise 2 became rejected before\n  // promise 1 became fulfilled\n});\n```\n\nAn example real-world use case is implementing timeouts:\n\n```javascript\nRSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n```",
          "itemtype": "method",
          "name": "race",
          "params": [
            {
              "name": "promises",
              "description": "array of promises to observe",
              "type": "Array"
            },
            {
              "name": "label",
              "description": "optional string for describing the promise returned.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a promise which settles in the same way as the first passed\npromise to settle.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1847,
          "description": "`RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  reject(new Error('WHOOPS'));\n});\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "reason",
              "description": "value that the returned promise will be rejected with.",
              "type": "Any"
            },
            {
              "name": "label",
              "description": "optional string for identifying the returned promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a promise rejected with the given `reason`.",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1895,
          "description": "`RSVP.Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  resolve(1);\n});\n\npromise.then(function(value){\n  // value === 1\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.resolve(1);\n\npromise.then(function(value){\n  // value === 1\n});\n```",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "value",
              "description": "value that the returned promise will be resolved with",
              "type": "Any"
            },
            {
              "name": "label",
              "description": "optional string for identifying the returned promise.\nUseful for tooling.",
              "type": "String"
            }
          ],
          "return": {
            "description": "a promise that will become fulfilled with the given\n`value`",
            "type": "Promise"
          },
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        },
        {
          "file": "../packages/rsvp/lib/main.js",
          "line": 1942,
          "description": "This is a convenient alias for `RSVP.Promise.race`.",
          "itemtype": "method",
          "name": "race",
          "params": [
            {
              "name": "array",
              "description": "Array of promises.",
              "type": "Array"
            },
            {
              "name": "label",
              "description": "An optional label. This is useful\nfor tooling.",
              "type": "String"
            }
          ],
          "static": 1,
          "class": "Ember.RSVP.Promise",
          "module": "RSVP",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.4.0-RSVP",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.4.0",
          "type": "project-version"
        }
      }
    }
  }
}