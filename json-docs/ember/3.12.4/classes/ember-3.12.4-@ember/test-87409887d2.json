{
  "data": {
    "id": "ember-3.12.4-@ember/test",
    "type": "class",
    "attributes": {
      "name": "@ember/test",
      "shortname": "@ember/test",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/test",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 51,
          "description": "<html><head></head><body><p>This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router&apos;s\nlocation to &apos;none&apos;, so that the window&apos;s location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework). <code>setupForTesting</code> should only be called after\nsetting a custom <code>router</code> class (for example <code>App.Router = Router.extend(</code>).</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>setup<span class=\"constructor\">ForTesting()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setupForTesting",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 90,
          "description": "<html><head></head><body><p>This injects the test helpers into the <code>helperContainer</code> object. If an object is provided\nit will be used as the helperContainer. If <code>helperContainer</code> is not set it will default\nto <code>window</code>. If a function of the same name has already been defined it will be cached\n(so that it can be reset if the helper is removed with <code>unregisterHelper</code> or\n<code>removeTestHelpers</code>).</p>\n<p>Any callbacks registered with <code>onInjectHelpers</code> will be called once the\nhelpers have been injected.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>inject<span class=\"constructor\">TestHelpers()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "injectTestHelpers",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 132,
          "description": "<html><head></head><body><p>This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>remove<span class=\"constructor\">TestHelpers()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "removeTestHelpers",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/helpers/click.js",
          "line": 6,
          "description": "<html><head></head><body><p>Clicks an element and triggers any actions triggered by the element&apos;s <code>click</code>\nevent.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>click(<span class=\"string\">&apos;.some-jQuery-selector&apos;</span>).then(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "click",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            },
            {
              "name": "context",
              "description": "A DOM Element, Document, or jQuery to use as context",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise<undefined>"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/current_path.js",
          "line": 6,
          "description": "<html><head></head><body><p>Returns the current path.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateURL</span><span class=\"params\">()</span> <span class=\"comment\">{\nequal(currentPath(), &apos;some.path.index&apos;, &quot;correct path was transitioned into.&quot;);\n}</span>\n\n<span class=\"title\">click</span><span class=\"params\">(<span class=\"string\">&apos;#some-link-id&apos;</span>)</span>.<span class=\"title\">then</span><span class=\"params\">(validateURL)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "currentPath",
          "return": {
            "description": "The currently active path.",
            "type": "Object"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/current_route_name.js",
          "line": 5,
          "description": "<html><head></head><body><p>Returns the currently active route name.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateRouteName</span><span class=\"params\">()</span> <span class=\"comment\">{\nequal(currentRouteName(), &apos;some.path&apos;, &quot;correct route was transitioned into.&quot;);\n}</span>\n<span class=\"title\">visit</span><span class=\"params\">(<span class=\"string\">&apos;/some/path&apos;</span>)</span>.<span class=\"title\">then</span><span class=\"params\">(validateRouteName)</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "currentRouteName",
          "return": {
            "description": "The name of the currently active route.",
            "type": "Object"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/current_url.js",
          "line": 6,
          "description": "<html><head></head><body><p>Returns the current URL.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateURL</span><span class=\"params\">()</span> <span class=\"comment\">{\nequal(currentURL(), &apos;/some/path&apos;, &quot;correct URL was transitioned into.&quot;);\n}</span>\n\n<span class=\"title\">click</span><span class=\"params\">(<span class=\"string\">&apos;#some-link-id&apos;</span>)</span>.<span class=\"title\">then</span><span class=\"params\">(validateURL)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "currentURL",
          "return": {
            "description": "The currently active URL.",
            "type": "Object"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/fill_in.js",
          "line": 7,
          "description": "<html><head></head><body><p>Fills in an input element with some text.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fill<span class=\"constructor\">In(&apos;#<span class=\"params\">email</span>&apos;, &apos;<span class=\"params\">you</span>@<span class=\"params\">example</span>.<span class=\"params\">com</span>&apos;)</span>.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n  <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "fillIn",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector finding an input element on the DOM\nto fill text with",
              "type": "String"
            },
            {
              "name": "text",
              "description": "text to place inside the input element",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise<undefined>"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/find.js",
          "line": 8,
          "description": "<html><head></head><body><p>Finds an element in the context of the app&apos;s container element. A simple alias\nfor <code>app.$(selector)</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> <span class=\"symbol\">$el</span> = <span class=\"built_in\">find</span>(<span class=\"string\">&apos;.my-selector&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>With the <code>context</code> param:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> <span class=\"symbol\">$el</span> = <span class=\"built_in\">find</span>(<span class=\"string\">&apos;.my-selector&apos;</span>, <span class=\"string\">&apos;.parent-element-class&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for element lookup",
              "type": "String"
            },
            {
              "name": "context",
              "description": "(optional) jQuery selector that will limit the selector\n                          argument to find only within the context's children",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "DOM element representing the results of the query",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/find_with_assert.js",
          "line": 4,
          "description": "<html><head></head><body><p>Like <code>find</code>, but throws an error if the element selector returns no results.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> <span class=\"symbol\">$el</span> = findWithAssert(<span class=\"string\">&apos;.doesnt-exist&apos;</span>); <span class=\"comment\">// throws error</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>With the <code>context</code> param:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>var $el = find<span class=\"constructor\">WithAssert(&apos;.<span class=\"params\">selector</span>-<span class=\"params\">id</span>&apos;, &apos;.<span class=\"params\">parent</span>-<span class=\"params\">element</span>-<span class=\"params\">class</span>&apos;)</span>; <span class=\"comment\">// assert will pass</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findWithAssert",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector string for finding an element within\nthe DOM",
              "type": "String"
            },
            {
              "name": "context",
              "description": "(optional) jQuery selector that will limit the\nselector argument to find only within the context's children",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "jQuery object representing the results of the query",
            "type": "Object"
          },
          "throws": {
            "description": "throws error if object returned has a length of 0",
            "type": "Error"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/key_event.js",
          "line": 4,
          "description": "<html><head></head><body><p>Simulates a key event, e.g. <code>keypress</code>, <code>keydown</code>, <code>keyup</code> with the desired keyCode\nExample:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>key<span class=\"constructor\">Event(&apos;.<span class=\"params\">some</span>-<span class=\"params\">jQuery</span>-<span class=\"params\">selector</span>&apos;, &apos;<span class=\"params\">keypress</span>&apos;, 13)</span>.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "keyEvent",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            },
            {
              "name": "type",
              "description": "the type of key event, e.g. `keypress`, `keydown`, `keyup`",
              "type": "String"
            },
            {
              "name": "keyCode",
              "description": "the keyCode of the simulated key event",
              "type": "Number"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise<undefined>"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/pause_test.js",
          "line": 9,
          "description": "<html><head></head><body><p>Resumes a test paused by <code>pauseTest</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "resumeTest",
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/pause_test.js",
          "line": 22,
          "description": "<html><head></head><body><p>Pauses the current test - this is useful for debugging while testing or for test-driving.\nIt allows you to inspect the state of your application at any point.\nExample (The test will pause before clicking the button):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"title\">visit</span>(<span class=\"string\">&apos;/&apos;</span>)</span>\n<span class=\"variable\">return</span> <span class=\"function\"><span class=\"title\">pauseTest</span>();\n<span class=\"title\">click</span>(<span class=\"string\">&apos;.btn&apos;</span>);</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You may want to turn off the timeout before pausing.</p>\n<p>qunit (timeout available to use as of 2.4.0):</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">visit</span>(&apos;/&apos;);\nassert<span class=\"selector-class\">.timeout</span>(<span class=\"number\">0</span>);\nreturn <span class=\"built_in\">pauseTest</span>();\n<span class=\"built_in\">click</span>(&apos;.btn&apos;);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>mocha (timeout happens automatically as of ember-mocha v0.14.0):</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">visit</span>(&apos;/&apos;);\nthis<span class=\"selector-class\">.timeout</span>(<span class=\"number\">0</span>);\nreturn <span class=\"built_in\">pauseTest</span>();\n<span class=\"built_in\">click</span>(&apos;.btn&apos;);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.9.0",
          "itemtype": "method",
          "name": "pauseTest",
          "return": {
            "description": "A promise that will never resolve",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/trigger_event.js",
          "line": 5,
          "description": "<html><head></head><body><p>Triggers the given DOM event on the element identified by the provided selector.\nExample:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>trigger<span class=\"constructor\">Event(&apos;#<span class=\"params\">some</span>-<span class=\"params\">elem</span>-<span class=\"params\">id</span>&apos;, &apos;<span class=\"params\">blur</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is actually used internally by the <code>keyEvent</code> helper like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>trigger<span class=\"constructor\">Event(&apos;#<span class=\"params\">some</span>-<span class=\"params\">elem</span>-<span class=\"params\">id</span>&apos;, &apos;<span class=\"params\">keypress</span>&apos;, { <span class=\"params\">keyCode</span>: 13 })</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "triggerEvent",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            },
            {
              "name": "context",
              "description": "jQuery selector that will limit the selector\n                         argument to find only within the context's children",
              "type": "String",
              "optional": true
            },
            {
              "name": "type",
              "description": "The event type to be triggered.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "The options to be passed to jQuery.Event.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise<undefined>"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/visit.js",
          "line": 3,
          "description": "<html><head></head><body><p>Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>visit(<span class=\"string\">&apos;posts/index&apos;</span>).then(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "visit",
          "params": [
            {
              "name": "url",
              "description": "the name of the route",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise<undefined>"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/helpers/wait.js",
          "line": 9,
          "description": "<html><head></head><body><p>Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.</p>\n<p>This is most often used as the return value for the helper functions (see &apos;click&apos;,\n&apos;fillIn&apos;,&apos;visit&apos;,etc). However, there is a method to register a test helper which\nutilizes this method without the need to actually call <code>wait()</code> in your helpers.</p>\n<p>The <code>wait</code> helper is built into <code>registerAsyncHelper</code> by default. You will not need\nto <code>return app.testHelpers.wait();</code> - the wait behavior is provided for you.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>import { registerAsyncHelper } from &apos;@ember/test&apos;;\n\nregister<span class=\"constructor\">AsyncHelper(&apos;<span class=\"params\">loginUser</span>&apos;, <span class=\"params\">function</span>(<span class=\"params\">app</span>, <span class=\"params\">username</span>, <span class=\"params\">password</span>)</span> {\n  visit(&apos;secured/path/here&apos;)\n    .fill<span class=\"constructor\">In(&apos;#<span class=\"params\">username</span>&apos;, <span class=\"params\">username</span>)</span>\n    .fill<span class=\"constructor\">In(&apos;#<span class=\"params\">password</span>&apos;, <span class=\"params\">password</span>)</span>\n    .click(&apos;.submit&apos;);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "wait",
          "params": [
            {
              "name": "value",
              "description": "The value to be returned.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "Promise that resolves to the passed value.",
            "type": "RSVP.Promise<any>"
          },
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "@ember/test",
          "module": "ember"
        },
        {
          "file": "packages/ember-testing/lib/test/helpers.js",
          "line": 8,
          "description": "<html><head></head><body><p><code>registerHelper</code> is used to register a test helper that will be injected\nwhen <code>App.injectTestHelpers</code> is called.</p>\n<p>The helper method will always be called with the current Application as\nthe first parameter.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerHelper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n<span class=\"keyword\">import</span> { run } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/runloop&apos;</span>;\n\n<span class=\"title function_\">registerHelper</span>(<span class=\"string\">&apos;boot&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">app</span>) {\n  <span class=\"title function_\">run</span>(app, app.<span class=\"property\">advanceReadiness</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This helper can later be called without arguments because it will be\ncalled with <code>app</code> as the first parameter.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/application&apos;</span>;\n\nApp = Application.<span class=\"keyword\">create</span>();\nApp.injectTestHelpers();\nboot();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "registerHelper",
          "params": [
            {
              "name": "name",
              "description": "The name of the helper method to add.",
              "type": "String"
            },
            {
              "name": "helperMethod",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "@ember/test",
          "module": "@ember/test"
        },
        {
          "file": "packages/ember-testing/lib/test/helpers.js",
          "line": 52,
          "description": "<html><head></head><body><p><code>registerAsyncHelper</code> is used to register an async test helper that will be injected\nwhen <code>App.injectTestHelpers</code> is called.</p>\n<p>The helper method will always be called with the current Application as\nthe first parameter.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerAsyncHelper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n<span class=\"keyword\">import</span> { run } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/runloop&apos;</span>;\n\n<span class=\"title function_\">registerAsyncHelper</span>(<span class=\"string\">&apos;boot&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">app</span>) {\n  <span class=\"title function_\">run</span>(app, app.<span class=\"property\">advanceReadiness</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The advantage of an async helper is that it will not run\nuntil the last async helper has completed.  All async helpers\nafter it will wait for it complete before running.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerAsyncHelper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n\n<span class=\"title function_\">registerAsyncHelper</span>(<span class=\"string\">&apos;deletePost&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">app, postId</span>) {\n  <span class=\"title function_\">click</span>(<span class=\"string\">&apos;.delete-&apos;</span> + postId);\n});\n\n<span class=\"comment\">// ... in your test</span>\n<span class=\"title function_\">visit</span>(<span class=\"string\">&apos;/post/2&apos;</span>);\n<span class=\"title function_\">deletePost</span>(<span class=\"number\">2</span>);\n<span class=\"title function_\">visit</span>(<span class=\"string\">&apos;/post/3&apos;</span>);\n<span class=\"title function_\">deletePost</span>(<span class=\"number\">3</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerAsyncHelper",
          "params": [
            {
              "name": "name",
              "description": "The name of the helper method to add.",
              "type": "String"
            },
            {
              "name": "helperMethod",
              "description": "",
              "type": "Function"
            }
          ],
          "since": "1.2.0",
          "class": "@ember/test",
          "module": "@ember/test"
        },
        {
          "file": "packages/ember-testing/lib/test/helpers.js",
          "line": 105,
          "description": "<html><head></head><body><p>Remove a previously added helper method.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { unregisterHelper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n\nunregisterHelper(<span class=\"string\">&apos;wait&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregisterHelper",
          "static": 1,
          "params": [
            {
              "name": "name",
              "description": "The helper to remove.",
              "type": "String"
            }
          ],
          "class": "@ember/test",
          "module": "@ember/test"
        },
        {
          "file": "packages/ember-testing/lib/test/waiters.js",
          "line": 7,
          "description": "<html><head></head><body><p>This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction. The waiter runs periodically\nafter each async helper (i.e. <code>click</code>, <code>andThen</code>, <code>visit</code>, etc) has executed,\nuntil the returning result is truthy. After the waiters finish, the next async helper\nis executed and the process repeats.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerWaiter } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n\n<span class=\"title function_\">registerWaiter</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n  <span class=\"keyword\">return</span> <span class=\"title function_\">myPendingTransactions</span>() === <span class=\"number\">0</span>;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>context</code> argument allows you to optionally specify the <code>this</code>\nwith which your callback will be invoked.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { registerWaiter } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/test&apos;</span>;\n\nregisterWaiter(MyDB, MyDB.hasPendingTransactions);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "registerWaiter",
          "params": [
            {
              "name": "context",
              "description": "(optional)",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "since": "1.2.0",
          "class": "@ember/test",
          "module": "@ember/test"
        },
        {
          "file": "packages/ember-testing/lib/test/waiters.js",
          "line": 55,
          "description": "<html><head></head><body><p><code>unregisterWaiter</code> is used to unregister a callback that was\nregistered with <code>registerWaiter</code>.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "unregisterWaiter",
          "params": [
            {
              "name": "context",
              "description": "(optional)",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "since": "1.2.0",
          "class": "@ember/test",
          "module": "@ember/test"
        },
        {
          "file": "packages/ember-testing/lib/test/waiters.js",
          "line": 83,
          "description": "<html><head></head><body><p>Iterates through each registered test waiter, and invokes\nits callback. If any waiter returns false, this method will return\ntrue indicating that the waiters have not settled yet.</p>\n<p>This is generally used internally from the acceptance/integration test\ninfrastructure.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "static": 1,
          "itemtype": "method",
          "name": "checkWaiters",
          "class": "@ember/test",
          "module": "@ember/test"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 10,
          "description": "<html><head></head><body><p>This property contains the testing helpers for the current application. These\nare created once you call <code>injectTestHelpers</code> on your <code>Application</code>\ninstance. The included helpers are also available on the <code>window</code> object by\ndefault, but can be used from this object on the individual application also.</p>\n</body></html>",
          "itemtype": "property",
          "name": "testHelpers",
          "type": "{Object}",
          "default": "{}",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 23,
          "description": "<html><head></head><body><p>This property will contain the original methods that were registered\non the <code>helperContainer</code> before <code>injectTestHelpers</code> is called.</p>\n<p>When <code>removeTestHelpers</code> is called, these methods are restored to the\n<code>helperContainer</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "originalMethods",
          "type": "{Object}",
          "default": "{}",
          "access": "private",
          "tagname": "",
          "since": "1.3.0",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 38,
          "description": "<html><head></head><body><p>This property indicates whether or not this application is currently in\ntesting mode. This is set when <code>setupForTesting</code> is called on the current\napplication.</p>\n</body></html>",
          "itemtype": "property",
          "name": "testing",
          "type": "{Boolean}",
          "default": "false",
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        },
        {
          "file": "packages/ember-testing/lib/ext/application.js",
          "line": 78,
          "description": "<html><head></head><body><p>This will be used as the container to inject the test helpers into. By\ndefault the helpers are injected into <code>window</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "helperContainer",
          "type": "{Object} The object to be used for test helpers.",
          "default": "window",
          "since": "1.2.0",
          "access": "private",
          "tagname": "",
          "class": "@ember/test",
          "module": "ember",
          "namespace": "Ember.Test"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.12.4-@ember/test",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.12.4",
          "type": "project-version"
        }
      }
    }
  }
}