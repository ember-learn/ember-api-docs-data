{
  "data": {
    "id": "ember-5.5.0-@ember/utils",
    "type": "class",
    "attributes": {
      "name": "@ember/utils",
      "shortname": "@ember/utils",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/utils/lib/compare.ts",
          "line": 53,
          "description": "<html><head></head><body><p>Compares two javascript values and returns:</p>\n<ul>\n<li>-1 if the first is smaller than the second,</li>\n<li>0 if both are equal,</li>\n<li>1 if the first is greater than the second.</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { compare } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/utils'</span>;\n\ncompare(<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>);  <span class=\"comment\">// 0</span>\ncompare(<span class=\"string\">'abc'</span>, <span class=\"string\">'dfg'</span>);      <span class=\"comment\">// -1</span>\ncompare(<span class=\"number\">2</span>, <span class=\"number\">1</span>);              <span class=\"comment\">// 1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered <code>&lt;</code> types\nlater in the list:</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>array</li>\n<li>object</li>\n<li>instance</li>\n<li>function</li>\n<li>class</li>\n<li>date</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { compare } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/utils'</span>;\n\ncompare(<span class=\"string\">'hello'</span>, <span class=\"number\">50</span>);       <span class=\"comment\">// 1</span>\ncompare(<span class=\"number\">50</span>, <span class=\"string\">'hello'</span>);       <span class=\"comment\">// -1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compare",
          "static": 1,
          "params": [
            {
              "name": "v",
              "description": "First value to compare",
              "type": "Object"
            },
            {
              "name": "w",
              "description": "Second value to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/is-equal.ts",
          "line": 4,
          "description": "<html><head></head><body><p>Compares two objects, returning true if they are equal.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { isEqual } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/utils'</span>;\n\nisEqual(<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>);                   <span class=\"comment\">// true</span>\nisEqual(<span class=\"number\">1</span>, <span class=\"number\">2</span>);                               <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>isEqual</code> is a more specific comparison than a triple equal comparison.\nIt will call the <code>isEqual</code> instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { isEqual } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/utils'</span>;\n<span class=\"keyword\">import</span> <span class=\"title class_\">EmberObject</span> <span class=\"keyword\">from</span> <span class=\"string\">'@ember/object'</span>;\n\n<span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">isEqual</span>(<span class=\"params\">other</span>) { <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ssn</span> == other.<span class=\"property\">ssn</span>; }\n});\n\n<span class=\"keyword\">let</span> personA = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({<span class=\"attr\">name</span>: <span class=\"string\">'Muhammad Ali'</span>, <span class=\"attr\">ssn</span>: <span class=\"string\">'123-45-6789'</span>});\n<span class=\"keyword\">let</span> personB = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({<span class=\"attr\">name</span>: <span class=\"string\">'Cassius Clay'</span>, <span class=\"attr\">ssn</span>: <span class=\"string\">'123-45-6789'</span>});\n\n<span class=\"title function_\">isEqual</span>(personA, personB); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Due to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { isEqual } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/utils'</span>;\n\nisEqual([<span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>]);                     <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEqual",
          "static": 1,
          "params": [
            {
              "name": "a",
              "description": "first object to compare",
              "type": "Object"
            },
            {
              "name": "b",
              "description": "second object to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/is_blank.ts",
          "line": 5,
          "description": "<html><head></head><body><p>A value is blank if it is empty or a whitespace string.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import { isBlank } from <span class=\"string\">'@ember/utils'</span>;\n\nisBlank(null);            <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank(undefined);       <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank(<span class=\"string\">''</span>);              <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank([]);              <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank(<span class=\"string\">'\\n\\t'</span>);          <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank(<span class=\"string\">'  '</span>);            <span class=\"regexp\">//</span> <span class=\"literal\">true</span>\nisBlank({});              <span class=\"regexp\">//</span> <span class=\"literal\">false</span>\nisBlank(<span class=\"string\">'\\n\\t Hello'</span>);    <span class=\"regexp\">//</span> <span class=\"literal\">false</span>\nisBlank(<span class=\"string\">'Hello world'</span>);   <span class=\"regexp\">//</span> <span class=\"literal\">false</span>\nisBlank([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);         <span class=\"regexp\">//</span> <span class=\"literal\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isBlank",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/is_empty.ts",
          "line": 6,
          "description": "<html><head></head><body><p>Verifies that a value is <code>null</code> or <code>undefined</code>, an empty string, or an empty\narray.</p>\n<p>Constrains the rules on <code>isNone</code> by returning true for empty strings and\nempty arrays.</p>\n<p>If the value is an object with a <code>size</code> property of type number, it is used\nto check emptiness.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>isEmpty(<span class=\"keyword\">null</span>);             // <span class=\"keyword\">true</span>\nisEmpty(undefined);        // <span class=\"keyword\">true</span>\nisEmpty(<span class=\"string\">''</span>);               // <span class=\"keyword\">true</span>\nisEmpty([]);               // <span class=\"keyword\">true</span>\nisEmpty({ size: <span class=\"number\">0</span>});       // <span class=\"keyword\">true</span>\nisEmpty({});               // <span class=\"keyword\">false</span>\nisEmpty(<span class=\"string\">'Adam Hawkins'</span>);   // <span class=\"keyword\">false</span>\nisEmpty([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);          // <span class=\"keyword\">false</span>\nisEmpty(<span class=\"string\">'\\n\\t'</span>);           // <span class=\"keyword\">false</span>\nisEmpty(<span class=\"string\">'  '</span>);             // <span class=\"keyword\">false</span>\nisEmpty({ size: <span class=\"number\">1</span> })       // <span class=\"keyword\">false</span>\nisEmpty({ size: () =&gt; <span class=\"number\">0</span> }) // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEmpty",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/is_none.ts",
          "line": 4,
          "description": "<html><head></head><body><p>Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">isNone</span>(null);          <span class=\"comment\">// true</span>\n<span class=\"built_in\">isNone</span>(undefined);     <span class=\"comment\">// true</span>\n<span class=\"built_in\">isNone</span>('');            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isNone</span>([]);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isNone</span>(function() {}); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isNone",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/is_present.ts",
          "line": 5,
          "description": "<html><head></head><body><p>A value is present if it not <code>isBlank</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">isPresent</span>(null);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(undefined);       <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>('');              <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>('  ');            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>('\\n\\t');          <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>([]);              <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>({ length: <span class=\"number\">0</span> });   <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(false);           <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(true);            <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>('string');        <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(<span class=\"number\">0</span>);               <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(function() {});   <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>({});              <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>('\\n\\t Hello');    <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);       <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isPresent",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.8.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/utils/lib/type-of.ts",
          "line": 40,
          "description": "<html><head></head><body><p>Returns a consistent type for the passed object.</p>\n<p>Use this instead of the built-in <code>typeof</code> to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| 'string'      | String primitive<span class=\"built_in\"> or </span>String object.                   |\n| 'number'      | Number primitive<span class=\"built_in\"> or </span>Number object.                   |\n| 'boolean'     | Boolean primitive<span class=\"built_in\"> or </span>Boolean object.                 |\n| 'null'        | Null value                                           |\n| 'undefined'   | Undefined value                                      |\n| 'function'    | A function                                           |\n| 'array'       | An<span class=\"built_in\"> instance </span>of Array                                 |\n| 'regexp'      | An<span class=\"built_in\"> instance </span>of RegExp                                |\n| 'date'        | An<span class=\"built_in\"> instance </span>of Date                                  |\n| 'filelist'    | An<span class=\"built_in\"> instance </span>of FileList                              |\n| 'class'       | An Ember class (created using EmberObject.extend())  |\n| 'instance'    | An Ember object<span class=\"built_in\"> instance </span>                            |\n| 'error'       | An<span class=\"built_in\"> instance </span>of the Error object                      |\n| 'object'      | A JavaScript object<span class=\"built_in\"> not </span>inheriting from EmberObject  |</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Examples:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td>\n              <td class=\"code\"><pre>import { A } from <span class=\"string\">'@ember/array'</span>;\nimport { typeOf } from <span class=\"string\">'@ember/utils'</span>;\nimport EmberObject from <span class=\"string\">'@ember/object'</span>;\n\ntypeOf();                       <span class=\"regexp\">//</span> <span class=\"string\">'undefined'</span>\ntypeOf(null);                   <span class=\"regexp\">//</span> <span class=\"string\">'null'</span>\ntypeOf(undefined);              <span class=\"regexp\">//</span> <span class=\"string\">'undefined'</span>\ntypeOf(<span class=\"string\">'michael'</span>);              <span class=\"regexp\">//</span> <span class=\"string\">'string'</span>\ntypeOf(new String(<span class=\"string\">'michael'</span>));  <span class=\"regexp\">//</span> <span class=\"string\">'string'</span>\ntypeOf(<span class=\"number\">101</span>);                    <span class=\"regexp\">//</span> <span class=\"string\">'number'</span>\ntypeOf(new Number(<span class=\"number\">101</span>));        <span class=\"regexp\">//</span> <span class=\"string\">'number'</span>\ntypeOf(true);                   <span class=\"regexp\">//</span> <span class=\"string\">'boolean'</span>\ntypeOf(new Boolean(true));      <span class=\"regexp\">//</span> <span class=\"string\">'boolean'</span>\ntypeOf(A);                      <span class=\"regexp\">//</span> <span class=\"string\">'function'</span>\ntypeOf(A());                    <span class=\"regexp\">//</span> <span class=\"string\">'array'</span>\ntypeOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">90</span>]);             <span class=\"regexp\">//</span> <span class=\"string\">'array'</span>\ntypeOf(<span class=\"regexp\">/abc/</span>);                  <span class=\"regexp\">//</span> <span class=\"string\">'regexp'</span>\ntypeOf(new Date());             <span class=\"regexp\">//</span> <span class=\"string\">'date'</span>\ntypeOf(event.target.files);     <span class=\"regexp\">//</span> <span class=\"string\">'filelist'</span>\ntypeOf(EmberObject.extend());   <span class=\"regexp\">//</span> <span class=\"string\">'class'</span>\ntypeOf(EmberObject.create());   <span class=\"regexp\">//</span> <span class=\"string\">'instance'</span>\ntypeOf(new Error(<span class=\"string\">'teamocil'</span>));  <span class=\"regexp\">//</span> <span class=\"string\">'error'</span>\n\n<span class=\"regexp\">//</span> <span class=\"string\">'normal'</span> JavaScript object\ntypeOf({ a: <span class=\"string\">'b'</span> });             <span class=\"regexp\">//</span> <span class=\"string\">'object'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "typeOf",
          "params": [
            {
              "name": "item",
              "description": "the item to check"
            }
          ],
          "return": {
            "description": "the type",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember/utils",
          "module": "@ember/utils"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.5.0-@ember/utils",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.5.0",
          "type": "project-version"
        }
      }
    }
  }
}