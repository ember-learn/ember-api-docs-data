{
  "data": {
    "id": "ember-3.15.0-@glimmer/component",
    "type": "module",
    "attributes": {
      "name": "@glimmer/component",
      "submodules": {},
      "elements": {},
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/glimmer-component-docs.ts",
      "line": 1,
      "description": "<html><head></head><body><p>A component is a reusable UI element that consists of a <code>.hbs</code> template and an\noptional JavaScript class that defines its behavior. For example, someone\nmight make a <code>button</code> in the template and handle the click behavior in the\nJavaScript file that shares the same name as the template.</p>\n<p>The APIs available in a component vary depending on whether they import from\n<code>@glimmer/component</code> or the older &quot;classic&quot; type, <code>@ember/component</code>. The\ndocumentation below covers 100% of the available methods, hooks, and\nproperties of <code>@glimmer/component</code>. The source code can be found in\n<a href=\"https://github.com/glimmerjs/glimmer.js/tree/master/packages/%40glimmer/component\"><code>@glimmer/component</code></a>.</p>\n<h2 id=\"defining-a-component\">Defining a component</h2>\n<p>To define a component, subclass <code>Component</code> and add your own properties,\nmethods and lifecycle hooks:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"comment\">// your code here</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"constructor\"><code>constructor</code></h2>\n<p>params: <code>owner</code> object and <code>args</code> object</p>\n<p>Constructs a new component and assigns itself the passed properties. The\nconstructor is run whenever a new instance of the component is created, and\ncan be used to setup the initial state of the component.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  constructor(owner, args) {\n    <span class=\"keyword\">super</span>(owner, args);\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.args.displayMode === <span class=\"symbol\">&apos;lis</span>t&apos;) {\n      <span class=\"keyword\">this</span>.items = [];\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Service injections and arguments are available in the constructor.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { inject as service } from &apos;<span class=\"meta\">@ember</span>/service&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@service</span> myAnimations;\n\n  constructor(owner, args) {\n    <span class=\"keyword\">super</span>(owner, args);\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.args.fadeIn === <span class=\"literal\">true</span>) {\n      <span class=\"keyword\">this</span>.myAnimations.register(<span class=\"keyword\">this</span>, <span class=\"symbol\">&apos;fade</span>-in&apos;);\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"willdestroy\"><code>willDestroy</code></h2>\n<p><code>willDestroy</code> is called after the component has been removed from the DOM, but\nbefore the component is fully destroyed. This lifecycle hook can be used to\ncleanup the component and any related state.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { inject as service } from &apos;<span class=\"meta\">@ember</span>/service&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@service</span> myAnimations;\n\n  willDestroy() {\n    <span class=\"keyword\">this</span>.myAnimations.unregister(<span class=\"keyword\">this</span>);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"args\"><code>args</code></h2>\n<p>The <code>args</code> property of Glimmer components is an object that contains the\n<em>arguments</em> that are passed to the component. For instance, the\nfollowing component usage:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> @<span class=\"attr\">fadeIn</span>=<span class=\"string\">{{true}}</span> /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in the following <code>args</code> object to be passed to the component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{ <span class=\"attribute\">fadeIn</span>: true }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>args</code> can be accessed at any point in the component lifecycle, including\n<code>constructor</code> and <code>willDestroy</code>. They are also automatically marked as tracked\nproperties, and they can be depended on as computed property dependencies:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@ember</span>/tracking&apos;;\n<span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n\n  <span class=\"meta\">@computed</span>(<span class=\"symbol\">&apos;args</span>.someValue&apos;)\n  get computedGetter() {\n    <span class=\"comment\">// updates whenever args.someValue updates</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.args.someValue;\n  }\n\n  get standardGetter() {\n    <span class=\"comment\">// updates whenever args.anotherValue updates (Ember 3.13+)</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.args.anotherValue;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"isdestroying\"><code>isDestroying</code></h2>\n<p>A boolean flag to tell if the component is in the process of destroying. This is set to\ntrue before <code>willDestroy</code> is called.</p>\n<h2 id=\"isdestroyed\"><code>isDestroyed</code></h2>\n<p>A boolean to tell if the component has been fully destroyed. This is set to true\nafter <code>willDestroy</code> is called.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "parent": null,
      "publicclasses": [],
      "privateclasses": [],
      "staticfunctions": {},
      "allstaticfunctions": {},
      "version": "3.15.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-3.15.0",
          "type": "project-version"
        }
      }
    }
  }
}