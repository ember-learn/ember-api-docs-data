{
  "data": {
    "id": "ember-1.5.0-ember",
    "type": "module",
    "attributes": {
      "name": "ember",
      "submodules": {
        "ember-application": 1,
        "ember-debug": 1,
        "ember-extension-support": 1,
        "ember-handlebars-compiler": 1,
        "ember-handlebars": 1,
        "ember-routing": 1,
        "ember-views": 1,
        "ember-runtime": 1,
        "ember-testing": 1
      },
      "fors": {
        "Ember.Handlebars": 1,
        "Ember.Handlebars.Compiler": 1,
        "Ember.Handlebars.helpers": 1,
        "Ember": 1,
        "Ember.String": 1,
        "String": 1,
        "Ember.ControllerMixin": 1,
        "Function": 1,
        "Ember.NativeArray": 1
      },
      "namespaces": {
        "Ember": 1,
        "Ember.Handlebars": 1,
        "Ember.Test": 1
      },
      "tag": "module",
      "file": "../packages/ember/lib/main.js",
      "line": 35,
      "description": "<html><head></head><body><p>Ember</p>\n</body></html>",
      "parent": null,
      "publicclasses": [
        "Ember.ControllerMixin",
        "Ember.Application",
        "Ember.DefaultResolver",
        "Ember.ContainerDebugAdapter",
        "Ember.DataAdapter",
        "Ember.Handlebars",
        "Ember.Handlebars.helpers",
        "Ember.Checkbox",
        "Ember.Select",
        "Ember.TextArea",
        "Ember.TextField",
        "Ember.Error",
        "Ember.Mixin",
        "Ember.LinkView",
        "Ember.HashLocation",
        "Ember.HistoryLocation",
        "Ember.NoneLocation",
        "Ember.Route",
        "Ember.Router",
        "Ember.ReduceComputedProperty",
        "Ember.ArrayController",
        "Ember.Controller",
        "Ember.ObjectController",
        "Ember.ActionHandler",
        "Ember.Array",
        "Ember.Comparable",
        "Ember.Copyable",
        "Ember.Deferred",
        "Ember.Enumerable",
        "Ember.Evented",
        "Ember.Freezable",
        "Ember.MutableArray",
        "Ember.MutableEnumerable",
        "Ember.Observable",
        "Ember.PromiseProxyMixin",
        "Ember.SortableMixin",
        "Ember.TargetActionSupport",
        "Ember.ArrayProxy",
        "Ember.CoreObject",
        "Ember.Namespace",
        "Ember.NativeArray",
        "Ember.Object",
        "Ember.ObjectProxy",
        "Ember.Set",
        "Ember.SubArray",
        "Ember.TrackedArray",
        "Ember.Test.Adapter",
        "Ember.Test.QUnitAdapter",
        "Ember.Test",
        "Ember.ComponentTemplateDeprecation",
        "Ember.ViewTargetActionSupport",
        "Ember.RenderBuffer",
        "Ember.CollectionView",
        "Ember.Component",
        "Ember.ContainerView",
        "Ember.CoreView",
        "Ember.View",
        "Ember.StateManager",
        "Ember.State"
      ],
      "privateclasses": [
        "Ember.Handlebars.Compiler",
        "Ember.Handlebars.JavaScriptCompiler",
        "Ember.TextSupport",
        "Ember._HandlebarsBoundView",
        "Ember._Metamorph",
        "Ember._MetamorphView",
        "Ember._SimpleMetamorphView",
        "Ember.EachProxy",
        "Ember.EventDispatcher"
      ],
      "staticfunctions": {},
      "allstaticfunctions": {
        "Ember.View": [
          {
            "file": "../packages/ember-views/lib/views/view.js",
            "line": 2437,
            "description": "Get the class name for a given value, based on the path, optional\n`className` and optional `falsyClassName`.\n\n- if a `className` or `falsyClassName` has been specified:\n  - if the value is truthy and `className` has been specified,\n    `className` is returned\n  - if the value is falsy and `falsyClassName` has been specified,\n    `falsyClassName` is returned\n  - otherwise `null` is returned\n- if the value is `true`, the dasherized last part of the supplied path\n  is returned\n- if the value is not `false`, `undefined` or `null`, the `value`\n  is returned\n- if none of the above rules apply, `null` is returned",
            "itemtype": "method",
            "name": "_classStringForValue",
            "params": [
              {
                "name": "path",
                "description": ""
              },
              {
                "name": "val",
                "description": ""
              },
              {
                "name": "className",
                "description": ""
              },
              {
                "name": "falsyClassName",
                "description": ""
              }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
          },
          {
            "file": "../packages/ember-views/lib/views/view.js",
            "line": 2394,
            "description": "Parse a path and return an object which holds the parsed properties.\n\nFor example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing object:\n\n```javascript\n{\n  path: \"content.isEnabled\",\n  className: \"enabled\",\n  falsyClassName: \"disabled\",\n  classNames: \":enabled:disabled\"\n}\n```",
            "itemtype": "method",
            "name": "_parsePropertyPath",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
          }
        ],
        "Ember.NativeArray": [
          {
            "file": "../packages/ember-runtime/lib/system/native_array.js",
            "line": 156,
            "description": "Activates the mixin on the Array.prototype if not already applied. Calling\nthis method more than once is safe. This will be called when ember is loaded\nunless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\nset to `false`.\n\nExample\n\n```js\nif (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {\n  Ember.NativeArray.activate();\n}\n```",
            "itemtype": "method",
            "name": "activate",
            "static": 1,
            "return": {
              "description": "",
              "type": "Void"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
          }
        ],
        "Ember.Handlebars": [
          {
            "file": "../packages/ember-handlebars/lib/loader.js",
            "line": 11,
            "description": "Find templates stored in the head tag as script tags and make them available\nto `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run\nas as jQuery DOM-ready callback.\n\nScript tags with `text/x-handlebars` will be compiled\nwith Ember's Handlebars and are suitable for use as a view's template.\nThose with type `text/x-raw-handlebars` will be compiled with regular\nHandlebars and are suitable for use in views' computed properties.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "bootstrap",
            "static": 1,
            "params": [
              {
                "name": "ctx",
                "description": ""
              }
            ],
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
          },
          {
            "file": "../packages/ember-handlebars-compiler/lib/main.js",
            "line": 276,
            "description": "The entry point for Ember Handlebars. This replaces the default\n`Handlebars.compile` and turns on template-local data and String\nparameters.",
            "itemtype": "method",
            "name": "compile",
            "static": 1,
            "params": [
              {
                "name": "string",
                "description": "The template to compile",
                "type": "String"
              }
            ],
            "return": {
              "description": "",
              "type": "Function"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
          },
          {
            "file": "../packages/ember-handlebars-compiler/lib/main.js",
            "line": 245,
            "description": "Used for precompilation of Ember Handlebars templates. This will not be used\nduring normal app execution.",
            "itemtype": "method",
            "name": "precompile",
            "static": 1,
            "params": [
              {
                "name": "string",
                "description": "The template to precompile",
                "type": "String"
              }
            ],
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
          }
        ],
        "Ember.Application": [
          {
            "file": "../packages/ember-application/lib/system/application.js",
            "line": 768,
            "description": "This creates a container with the default Ember naming conventions.\n\nIt also configures the container:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildContainer",
            "static": 1,
            "params": [
              {
                "name": "namespace",
                "description": "the application to build the\n  container for.",
                "type": "Ember.Application"
              }
            ],
            "return": {
              "description": "the built container",
              "type": "Ember.Container"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
          }
        ],
        "Ember.Mixin": [
          {
            "file": "../packages/ember-metal/lib/mixin.js",
            "line": 468,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
              {
                "name": "arguments",
                "description": "",
                "multiple": true
              }
            ],
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
          }
        ],
        "Ember.CoreObject": [
          {
            "file": "../packages/ember-runtime/lib/system/core_object.js",
            "line": 541,
            "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend` or use the `createWithMixins` shorthand.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
              {
                "name": "arguments",
                "description": "",
                "optional": true,
                "multiple": true
              }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
          },
          {
            "file": "../packages/ember-runtime/lib/system/core_object.js",
            "line": 527,
            "description": "Equivalent to doing `extend(arguments).create()`.\nIf possible use the normal `create` method instead.",
            "itemtype": "method",
            "name": "createWithMixins",
            "static": 1,
            "params": [
              {
                "name": "arguments",
                "description": "",
                "optional": true,
                "multiple": true
              }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
          },
          {
            "file": "../packages/ember-runtime/lib/system/core_object.js",
            "line": 425,
            "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Ember.Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Ember.Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
              {
                "name": "mixins",
                "description": "One or more Ember.Mixin classes",
                "type": "Ember.Mixin",
                "optional": true,
                "multiple": true
              },
              {
                "name": "arguments",
                "description": "Object containing values to use within the new class",
                "type": "Object",
                "optional": true,
                "multiple": true
              }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
          }
        ],
        "Ember.String": [
          {
            "file": "../packages/ember-handlebars/lib/string.js",
            "line": 1,
            "description": "Mark a string as safe for unescaped output with Handlebars. If you\nreturn HTML from a Handlebars helper, use this function to\nensure Handlebars does not escape the HTML.\n\n```javascript\nEmber.String.htmlSafe('<div>someString</div>')\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "static": 1,
            "return": {
              "description": "a string that will not be html escaped by Handlebars",
              "type": "Handlebars.SafeString"
            },
            "class": "Ember.String",
            "module": "ember"
          }
        ]
      },
      "version": "1.5.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-1.5.0",
          "type": "project-version"
        }
      }
    }
  }
}