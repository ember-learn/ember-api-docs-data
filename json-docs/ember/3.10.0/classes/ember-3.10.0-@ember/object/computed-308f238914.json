{
  "data": {
    "id": "ember-3.10.0-@ember/object/computed",
    "type": "class",
    "attributes": {
      "name": "@ember/object/computed",
      "shortname": "@ember/object/computed",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/expand_properties.ts",
          "line": 9,
          "description": "<html><head></head><body><p>Expands <code>pattern</code>, invoking <code>callback</code> for each expansion.</p>\n<p>The only pattern supported is brace-expansion, anything else will be passed\nonce to <code>callback</code> directly.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>import { expandProperties } from &apos;@ember/object/computed&apos;;\n\n<span class=\"keyword\">function</span> echo(arg){ console.log(arg); }\n\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.<span class=\"params\">bar</span>&apos;, <span class=\"params\">echo</span>)</span>;              <span class=\"comment\">//=&gt; &apos;foo.bar&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}&apos;, <span class=\"params\">echo</span>)</span>;            <span class=\"comment\">//=&gt; &apos;foo&apos;, &apos;bar&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.{<span class=\"params\">bar</span>,<span class=\"params\">baz</span>}&apos;, <span class=\"params\">echo</span>)</span>;        <span class=\"comment\">//=&gt; &apos;foo.bar&apos;, &apos;foo.baz&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}.<span class=\"params\">baz</span>&apos;, <span class=\"params\">echo</span>)</span>;        <span class=\"comment\">//=&gt; &apos;foo.baz&apos;, &apos;bar.baz&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;<span class=\"params\">foo</span>.{<span class=\"params\">bar</span>,<span class=\"params\">baz</span>}.[]&apos;, <span class=\"params\">echo</span>)</span>      <span class=\"comment\">//=&gt; &apos;foo.bar.[]&apos;, &apos;foo.baz.[]&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>,<span class=\"params\">bar</span>}.{<span class=\"params\">spam</span>,<span class=\"params\">eggs</span>}&apos;, <span class=\"params\">echo</span>)</span> <span class=\"comment\">//=&gt; &apos;foo.spam&apos;, &apos;foo.eggs&apos;, &apos;bar.spam&apos;, &apos;bar.eggs&apos;</span>\nexpand<span class=\"constructor\">Properties(&apos;{<span class=\"params\">foo</span>}.<span class=\"params\">bar</span>.{<span class=\"params\">baz</span>}&apos;)</span>             <span class=\"comment\">//=&gt; &apos;foo.bar.baz&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "expandProperties",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "pattern",
              "description": "The property pattern to expand.",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
              "type": "Function"
            }
          ],
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 63,
          "description": "<html><head></head><body><p>A computed property macro that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { empty } from &apos;@ember/object/computed&apos;;</p>\n<p>class ToDoList {\n  constructor(todos) {\n    set(this, &apos;todos&apos;, todos);\n  }</p>\n</body></html>",
          "empty": "('todos') isDone;\n}\n\nlet todoList = new ToDoList(\n  ['Unit Test', 'Documentation', 'Release']\n);\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { empty } from '@ember/object/computed';\n\nlet ToDoList = EmberObject.extend({\n  isDone: empty('todos')\n});\n\nlet todoList = ToDoList.create({\n  todos: ['Unit Test', 'Documentation', 'Release']\n});\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```",
          "since": "1.6.0",
          "itemtype": "method",
          "name": "empty",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if the value\nof the dependent property is null, an empty string, empty array, or empty\nfunction and false if the underlying value is not empty.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 131,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent property\nis NOT null, an empty string, empty array, or empty function.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { notEmpty } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(backpack) {\n    set(this, &apos;backpack&apos;, backpack);\n  }</p>\n</body></html>",
          "notempty": "('backpack') hasStuff\n}\n\nlet hamster = new Hamster(\n  ['Food', 'Sleeping Bag', 'Tent']\n);\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { notEmpty } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasStuff: notEmpty('backpack')\n});\n\nlet hamster = Hamster.create({\n  backpack: ['Food', 'Sleeping Bag', 'Tent']\n});\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```",
          "itemtype": "method",
          "name": "notEmpty",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if original\nvalue for property is not empty.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 196,
          "description": "<html><head></head><body><p>A computed property that returns true if the value of the dependent property\nis null or undefined. This avoids errors from JSLint complaining about use of\n==, which can be technically confusing.</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { none } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "none": "('food') isHungry;\n}\n\nlet hamster = new Hamster();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { none } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  isHungry: none('food')\n});\n\nlet hamster = Hamster.create();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```",
          "itemtype": "method",
          "name": "none",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns true if original\nvalue for property is null or undefined.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 260,
          "description": "<html><head></head><body><p>A computed property that returns the inverse boolean value of the original\nvalue for the dependent property.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { not } from &apos;@ember/object/computed&apos;;</p>\n<p>class User {\n  loggedIn = false;</p>\n</body></html>",
          "not": "('loggedIn') isAnonymous;\n}\n\nlet user = new User();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { not } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  loggedIn: false,\n\n  isAnonymous: not('loggedIn')\n});\n\nlet user = User.create();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```",
          "itemtype": "method",
          "name": "not",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which returns inverse of the\noriginal value for property",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 321,
          "description": "<html><head></head><body><p>A computed property that converts the provided dependent property into a\nboolean value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { bool } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "bool": "('numBananas') hasBananas\n}\n\nlet hamster = new Hamster();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { bool } from '@ember/object/computed';\n\n\nlet Hamster = EmberObject.extend({\n  hasBananas: bool('numBananas')\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```",
          "itemtype": "method",
          "name": "bool",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which converts to boolean the\noriginal value for property",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 394,
          "description": "<html><head></head><body><p>A computed property which matches the original value for the dependent\nproperty against a given RegExp, returning <code>true</code> if the value matches the\nRegExp and <code>false</code> if it does not.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { match } from &apos;@ember/object/computed&apos;;</p>\n<p>class User {</p>\n</body></html>",
          "match": "('email', /^.+@.+\\..+$/) hasValidEmail;\n}\n\nlet user = new User();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { match } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  hasValidEmail: match('email', /^.+@.+\\..+$/)\n});\n\nlet user = User.create();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```",
          "itemtype": "method",
          "name": "match",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "regexp",
              "description": "",
              "type": "RegExp"
            }
          ],
          "return": {
            "description": "computed property which match the original value\nfor property against a given RegExp",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 462,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property is\nequal to the given value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { equal } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "equal": "('percentCarrotsEaten', 100) satisfied;\n}\n\nlet hamster = new Hamster();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { equal } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  satisfied: equal('percentCarrotsEaten', 100)\n});\n\nlet hamster = Hamster.create();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```",
          "itemtype": "method",
          "name": "equal",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "String|Number|Object"
            }
          ],
          "return": {
            "description": "computed property which returns true if the\noriginal value for property is equal to the given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 528,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property is\ngreater than the provided value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { gt } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "gt": "('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { gt } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gt('numBananas', 10)\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```",
          "itemtype": "method",
          "name": "gt",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if the\noriginal value for property is greater than given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 594,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property is\ngreater than or equal to the provided value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { gte } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "gte": "('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { gte } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gte('numBananas', 10)\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```",
          "itemtype": "method",
          "name": "gte",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if the\noriginal value for property is greater or equal then given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 660,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property is\nless than the provided value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { lt } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "lt": "('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { lt } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lt('numBananas', 3)\n});\n\nlet hamster = Hamster.create();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```",
          "itemtype": "method",
          "name": "lt",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if the\noriginal value for property is less then given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 726,
          "description": "<html><head></head><body><p>A computed property that returns true if the provided dependent property is\nless than or equal to the provided value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { lte } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "lte": "('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { lte } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lte('numBananas', 3)\n});\n\nlet hamster = Hamster.create();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```",
          "itemtype": "method",
          "name": "lte",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Number"
            }
          ],
          "return": {
            "description": "computed property which returns true if the\noriginal value for property is less or equal than given value.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 792,
          "description": "<html><head></head><body><p>A computed property that performs a logical <code>and</code> on the original values for\nthe provided dependent properties.</p>\n<p>You may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first falsy value or last\ntruthy value just like JavaScript&apos;s <code>&amp;&amp;</code> operator.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { and } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "and": "('hasWalkingStick', 'hasBackpack') readyForHike;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { and } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  readyForCamp: and('hasTent', 'hasBackpack'),\n  readyForHike: and('hasWalkingStick', 'hasBackpack')\n});\n\nlet tomster = Hamster.create();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```",
          "itemtype": "method",
          "name": "and",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs a logical `and` on\nthe values of all the original values for properties.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 866,
          "description": "<html><head></head><body><p>A computed property which performs a logical <code>or</code> on the original values for\nthe provided dependent properties.</p>\n<p>You may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first truthy value or last\nfalsy value just like JavaScript&apos;s <code>||</code> operator.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { or } from &apos;@ember/object/computed&apos;;</p>\n<p>let Hamster = EmberObject.extend({</p>\n</body></html>",
          "or": "('hasSunscreen', 'hasUmbrella') readyForBeach;\n});\n\nlet tomster = new Hamster();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { or } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  readyForRain: or('hasJacket', 'hasUmbrella'),\n  readyForBeach: or('hasSunscreen', 'hasUmbrella')\n});\n\nlet tomster = Hamster.create();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```",
          "itemtype": "method",
          "name": "or",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which performs a logical `or` on\nthe values of all the original values for properties.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 934,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property on an object.\nCalls to <code>get</code> or <code>set</code> this property behave as though they were called on the\noriginal property.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { alias } from &apos;@ember/object/computed&apos;;</p>\n<p>class Person {\n  name = &apos;Alex Matchneer&apos;;</p>\n</body></html>",
          "alias": "('name') nomen;\n}\n\nlet alex = new Person();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { alias } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  name: 'Alex Matchneer',\n\n  nomen: alias('name')\n});\n\nlet alex = Person.create();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```",
          "itemtype": "method",
          "name": "alias",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates an alias to the\noriginal value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 990,
          "description": "<html><head></head><body><p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to become\nthe value set. This causes the downstream property to permanently diverge from\nthe upstream property.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { oneWay }from &apos;@ember/object/computed&apos;;</p>\n<p>class User {\n  constructor(firstName, lastName) {\n    set(this, &apos;firstName&apos;, firstName);\n    set(this, &apos;lastName&apos;, lastName);\n  }</p>\n</body></html>",
          "oneway": "('firstName') nickName;\n}\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear');\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { oneWay } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  firstName: null,\n  lastName: null,\n\n  nickName: oneWay('firstName')\n});\n\nlet teddy = User.create({\n  firstName: 'Teddy',\n  lastName: 'Zeenny'\n});\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // 'TeddyBear'\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```",
          "itemtype": "method",
          "name": "oneWay",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a one way computed\nproperty to the original value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 1063,
          "description": "<html><head></head><body><p>This is a more semantically meaningful alias of <code>computed.oneWay</code>, whose name\nis somewhat ambiguous as to which direction the data flows.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reads",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a one way computed\n  property to the original value for property.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 1076,
          "description": "<html><head></head><body><p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propagate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { readOnly } from &apos;@ember/object/computed&apos;;</p>\n<p>class User {\n  constructor(firstName, lastName) {\n    set(this, &apos;firstName&apos;, firstName);\n    set(this, &apos;lastName&apos;, lastName);\n  }</p>\n</body></html>",
          "readonly": "('firstName') nickName;\n});\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { readOnly } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  firstName: null,\n  lastName: null,\n\n  nickName: readOnly('firstName')\n});\n\nlet teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```",
          "itemtype": "method",
          "name": "readOnly",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computed property which creates a one way computed\nproperty to the original value for property.",
            "type": "ComputedProperty"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/computed_macros.js",
          "line": 1152,
          "description": "<html><head></head><body><p>Creates a new property that is an alias for another property on an object.\nCalls to <code>get</code> or <code>set</code> this property behave as though they were called on the\noriginal property, but also print a deprecation warning.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { deprecatingAlias } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "deprecatingalias": "('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n  bananaCount;\n}\n\nlet hamster = new Hamster();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { deprecatingAlias } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  bananaCount: deprecatingAlias('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n});\n\nlet hamster = Hamster.create();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```",
          "itemtype": "method",
          "name": "deprecatingAlias",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "Options for `deprecate`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "computed property which creates an alias with a\ndeprecation to the original value for property.",
            "type": "ComputedProperty"
          },
          "since": "1.7.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 63,
          "description": "<html><head></head><body><p>A computed property that returns the sum of the values in the dependent array.</p>\n<p>Example:</p>\n<p>```javascript\nimport { sum } from &apos;@ember/object/computed&apos;;</p>\n<p>class Invoice {\n  lineItems = [1.00, 2.50, 9.99];</p>\n</body></html>",
          "sum": "('lineItems') total;\n}\n\nlet invoice = new Invoice();\n\ninvoice.total; // 13.49\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { sum } from '@ember/object/computed';\n\nlet Invoice = EmberObject.extend({\n  lineItems: [1.00, 2.50, 9.99],\n\n  total: sum('lineItems')\n})\n\nlet invoice = Invoice.create();\n\ninvoice.total; // 13.49\n```",
          "itemtype": "method",
          "name": "sum",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the sum of all values in the\ndependentKey's array",
            "type": "ComputedProperty"
          },
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 117,
          "description": "<html><head></head><body><p>A computed property that calculates the maximum value in the dependent array.\nThis will return <code>-Infinity</code> when the dependent array is empty.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { mapBy, max } from &apos;@ember/object/computed&apos;;</p>\n<p>class Person {\n  children = [];</p>\n</body></html>",
          "mapby": "('children', 'age') childAges;",
          "max": "('childAges') maxChildAge;\n}\n\nlet lordByron = new Person();\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy, max } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age'),\n  maxChildAge: max('childAges')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe max of a list of Date objects will be the highest timestamp as a `Number`.\nThis behavior is consistent with `Math.max`.",
          "itemtype": "method",
          "name": "max",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the largest value in the dependentKey's\narray",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 217,
          "description": "<html><head></head><body><p>A computed property that calculates the minimum value in the dependent array.\nThis will return <code>Infinity</code> when the dependent array is empty.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { mapBy, min } from &apos;@ember/object/computed&apos;;</p>\n<p>class Person {\n  children = [];</p>\n</body></html>",
          "mapby": "('children', 'age') childAges;",
          "min": "('childAges') minChildAge;\n}\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy, min } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age'),\n  minChildAge: min('childAges')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe min of a list of Date objects will be the lowest timestamp as a `Number`.\nThis behavior is consistent with `Math.min`.",
          "itemtype": "method",
          "name": "min",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes the smallest value in the dependentKey's array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 316,
          "description": "<html><head></head><body><p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature:</p>\n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the integer index of the current item in the iteration.</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapCallback</span><span class=\"params\">(item, <span class=\"keyword\">index</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { map } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(chores) {\n    set(this, &apos;chores&apos;, chores);\n  }</p>\n</body></html>",
          "map": "('chores', ['shouldUpperCase'], function(chore, index) {\n    if (this.shouldUpperCase) {\n      return `${chore.toUpperCase()}!`;\n    } else {\n      return `${chore}!`;\n    }\n  })\n  excitingChores;\n}\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['clean!', 'write more unit tests!']\n\nset(hamster, 'shouldUpperCase', true);\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```",
          "itemtype": "method",
          "name": "map",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "additionalDependentKeys",
              "description": "optional array of additional\ndependent keys",
              "type": "Array",
              "optional": true
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "an array mapped via the callback",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 436,
          "description": "<html><head></head><body><p>Returns an array mapped to the specified key.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { mapBy } from &apos;@ember/object/computed&apos;;</p>\n<p>class Person {\n  children = [];</p>\n</body></html>",
          "mapby": "('children', 'age') childAges;\n}\n\nlet lordByron = new Person();\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```",
          "itemtype": "method",
          "name": "mapBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "an array mapped to the specified key",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 538,
          "description": "<html><head></head><body><p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature:</p>\n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the integer index of the current item in the iteration.</li>\n<li><code>array</code> is the dependant array itself.</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterCallback</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { filter } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(chores) {\n    set(this, &apos;chores&apos;, chores);\n  }</p>\n</body></html>",
          "filter": "('chores', ['doneKey'], function(chore, index, array) {\n    return !chore[this.doneKey];\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', finished: true },\n  { name: 'clean', finished: true },\n  { name: 'write more unit tests', finished: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', finished: false}]\n```",
          "itemtype": "method",
          "name": "filter",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "additionalDependentKeys",
              "description": "optional array of additional dependent keys",
              "type": "Array",
              "optional": true
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 692,
          "description": "<html><head></head><body><p>Filters the array by the property and value.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { filterBy } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(chores) {\n    set(this, &apos;chores&apos;, chores);\n  }</p>\n</body></html>",
          "filterby": "('chores', 'done', false) remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { filterBy } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  remainingChores: filterBy('chores', 'done', false)\n});\n\nlet hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```",
          "itemtype": "method",
          "name": "filterBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "*"
            }
          ],
          "return": {
            "description": "the filtered array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 769,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { uniq } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(fruits) {\n    set(this, &apos;fruits&apos;, fruits);\n  }</p>\n</body></html>",
          "uniq": "('fruits') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  'banana',\n  'grape',\n  'kale',\n  'banana'\n]);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { uniq } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: uniq('fruits')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana'\n  ]\n});\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```",
          "itemtype": "method",
          "name": "uniq",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 857,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique elements\nfrom an array, with uniqueness determined by specific key.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { uniqBy } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(fruits) {\n    set(this, &apos;fruits&apos;, fruits);\n  }</p>\n</body></html>",
          "uniqby": "('fruits', 'id') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  { id: 1, 'banana' },\n  { id: 2, 'grape' },\n  { id: 3, 'peach' },\n  { id: 1, 'banana' }\n]);\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { uniqBy } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: uniqBy('fruits', 'id')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    { id: 1, 'banana' },\n    { id: 2, 'grape' },\n    { id: 3, 'peach' },\n    { id: 1, 'banana' }\n  ]\n});\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```",
          "itemtype": "method",
          "name": "uniqBy",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "propertyKey",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the\nunique elements from the dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 933,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { union } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(fruits, vegetables) {\n    set(this, &apos;fruits&apos;, fruits);\n    set(this, &apos;vegetables&apos;, vegetables);\n  }</p>\n</body></html>",
          "union": "('fruits', 'vegetables') ediblePlants;\n});\n\nlet hamster = new, Hamster(\n  [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { union } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: union('fruits', 'vegetables')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  vegetables: [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n});\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```",
          "itemtype": "method",
          "name": "union",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the unique elements\nfrom one or more dependent arrays.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 1008,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the elements\ntwo or more dependent arrays have in common.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { intersect } from &apos;@ember/object/computed&apos;;</p>\n<p>class FriendGroups {\n  constructor(adaFriends, charlesFriends) {\n    set(this, &apos;adaFriends&apos;, adaFriends);\n    set(this, &apos;charlesFriends&apos;, charlesFriends);\n  }</p>\n</body></html>",
          "intersect": "('adaFriends', 'charlesFriends') friendsInCommon;\n}\n\nlet groups = new FriendGroups(\n  ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n);\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { intersect } from '@ember/object/computed';\n\nlet FriendGroups = EmberObject.extend({\n  friendsInCommon: intersect('adaFriends', 'charlesFriends')\n});\n\nlet groups = FriendGroups.create({\n  adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n});\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```",
          "itemtype": "method",
          "name": "intersect",
          "static": 1,
          "params": [
            {
              "name": "propertyKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computes a new array with all the duplicated\nelements from the dependent arrays",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 1100,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the properties from the\nfirst dependent array that are not in the second dependent array.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { setDiff } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {\n  constructor(likes, fruits) {\n    set(this, &apos;likes&apos;, likes);\n    set(this, &apos;fruits&apos;, fruits);\n  }</p>\n</body></html>",
          "setdiff": "('likes', 'fruits') wants;\n}\n\nlet hamster = new Hamster(\n  [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  [\n    'grape',\n    'kale',\n  ]\n);\n\nhamster.wants; // ['banana']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { setDiff } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  wants: setDiff('likes', 'fruits')\n});\n\nlet hamster = Hamster.create({\n  likes: [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  fruits: [\n    'grape',\n    'kale',\n  ]\n});\n\nhamster.wants; // ['banana']\n```",
          "itemtype": "method",
          "name": "setDiff",
          "static": 1,
          "params": [
            {
              "name": "setAProperty",
              "description": "",
              "type": "String"
            },
            {
              "name": "setBProperty",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "computes a new array with all the items from the\nfirst dependent array that are not in the second dependent array",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 1195,
          "description": "<html><head></head><body><p>A computed property that returns the array of values for the provided\ndependent properties.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { collect } from &apos;@ember/object/computed&apos;;</p>\n<p>class Hamster {</p>\n</body></html>",
          "collect": "('hat', 'shirt') clothes;\n}\n\nlet hamster = new Hamster();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { collect } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  clothes: collect('hat', 'shirt')\n});\n\nlet hamster = Hamster.create();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```",
          "itemtype": "method",
          "name": "collect",
          "static": 1,
          "params": [
            {
              "name": "dependentKey",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "computed property which maps values of all passed\nin properties to an array.",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        },
        {
          "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
          "line": 1265,
          "description": "<html><head></head><body><p>A computed property which returns a new array with all the properties from the\nfirst dependent array sorted based on a property or sort function. The sort\nmacro can be used in two different ways:</p>\n<ol>\n<li>By providing a sort callback function</li>\n<li>By providing an array of keys to sort the array</li>\n</ol>\n<p>In the first form, the callback method you provide should have the following\nsignature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> sort<span class=\"constructor\">Callback(<span class=\"params\">itemA</span>, <span class=\"params\">itemB</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should\ncome before <code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code>\nshould come after <code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function\nshould return <code>0</code>.</p>\n<p>Therefore, if this function is comparing some numeric values, simple <code>itemA -\nitemB</code> or <code>itemA.get( &apos;foo&apos; ) - itemB.get( &apos;foo&apos; )</code> can be used instead of\nseries of <code>if</code>.</p>\n<p>Example:</p>\n<p>```javascript\nimport { set } from &apos;@ember/object&apos;;\nimport { sort } from &apos;@ember/object/computed&apos;;</p>\n<p>class ToDoList {\n  constructor(todos) {\n    set(this, &apos;todos&apos;, todos);\n  }</p>\n<p>  // using a custom sort function</p>\n</body></html>",
          "sort": "('todos', 'todosSortingDesc') sortedTodosDesc;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.sortedTodos; // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.sortedTodosDesc; // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n```",
          "itemtype": "method",
          "name": "sort",
          "static": 1,
          "params": [
            {
              "name": "itemsKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "additionalDependentKeys",
              "description": "optional array of additional\ndependent keys",
              "type": "Array",
              "optional": true
            },
            {
              "name": "sortDefinition",
              "description": "a dependent key to an array of sort\nproperties (add `:desc` to the arrays sort properties to sort descending) or a\nfunction to use when sorting",
              "type": "String or Function"
            }
          ],
          "return": {
            "description": "computes a new sorted array based on the sort\nproperty array or callback function",
            "type": "ComputedProperty"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/object/computed",
          "module": "@ember/object"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.10.0-@ember/object",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.10.0",
          "type": "project-version"
        }
      }
    }
  }
}