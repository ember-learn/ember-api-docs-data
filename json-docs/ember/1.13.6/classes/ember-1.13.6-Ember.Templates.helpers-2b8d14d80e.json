{
  "data": {
    "id": "ember-1.13.6-Ember.Templates.helpers",
    "type": "class",
    "attributes": {
      "name": "Ember.Templates.helpers",
      "shortname": "Ember.Templates.helpers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-htmlbars/lib/helpers/each.js",
          "line": 6,
          "description": "<html><head></head><body><p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension\nof the base Handlebars <code>{{#each}}</code> helper.</p>\n<p>The default behavior of <code>{{#each}}</code> is to yield its inner block once for every\nitem in an array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>var developers = [{<span class=\"string\">name:</span> <span class=\"string\">&apos;Yehuda&apos;</span>},{<span class=\"string\">name:</span> <span class=\"string\">&apos;Tom&apos;</span>}, {<span class=\"string\">name:</span> <span class=\"string\">&apos;Paul&apos;</span>}];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developers <span class=\"attr\">key</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">as</span> |person|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">\n  </span><span class=\"comment\">{{! `this` is whatever it was outside the #each }}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The same rules apply to arrays of primitives.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">var</span> developerNames = [<span class=\"string\">&apos;Yehuda&apos;</span>, <span class=\"string\">&apos;Tom&apos;</span>, <span class=\"string\">&apos;Paul&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developerNames <span class=\"attr\">key</span>=<span class=\"string\">&quot;@index&quot;</span> <span class=\"keyword\">as</span> |name|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{name}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-keys\">Specifying Keys</h3>\n<p>The <code>key</code> option is used to tell Ember how to determine if the array being\niterated over with <code>{{#each}}</code> has changed between renders. By helping Ember\ndetect that some elements in the array are the same, DOM elements can be\nre-used, significantly improving rendering speed.</p>\n<p>For example, here&apos;s the <code>{{#each}}</code> helper with its <code>key</code> set to <code>id</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> model <span class=\"attr\">key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"keyword\">as</span> |item|}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When this <code>{{#each}}</code> re-renders, Ember will match up the previously rendered\nitems (and reorder the generated DOM elements) based on each item&apos;s <code>id</code>\nproperty.</p>\n<p>By default the item&apos;s own reference is used.</p>\n<h3 id=\"else-condition\">{{else}} condition</h3>\n<p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render\nif the collection is empty.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> developers <span class=\"keyword\">as</span> |person|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">else</span>}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Sorry, nobody is available for this task.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "each",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
          "line": 9,
          "description": "<html><head></head><body><p>Use the <code>if</code> block helper to conditionally render a block depending on a\nproperty. If the property is &quot;falsey&quot;, for example: <code>false</code>, <code>undefined</code>null<code>,</code>&quot;&quot;<code>,</code>0` or an empty array, the block will not be rendered.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! will not render if foo is falsey}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> foo}}</span><span class=\"xml\">\n  Welcome to the </span><span class=\"template-variable\">{{foo.bar}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also specify a template to show if the property is falsey by using\nthe <code>else</code> helper.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{!Is it raining outside?}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> isRaining}}</span><span class=\"xml\">\n  Yes, grab an umbrella!\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  No, it&apos;s lovely outside!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You are also able to combine <code>else</code> and <code>if</code> helpers to create more complex\nconditional logic.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> isMorning}}</span><span class=\"xml\">\n  Good morning\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> isAfternoon}}</span><span class=\"xml\">\n  Good afternoon\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  Good night\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can use <code>if</code> inline to conditionally render a single property or string.\nThis helper acts like a ternary operator. If the first property is truthy,\nthe second argument will be displayed, if not, the third argument will be\ndisplayed</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-variable\">{{<span class=\"built_in\">if</span> useLongGreeting <span class=\"string\">&quot;Hello&quot;</span> <span class=\"string\">&quot;Hi&quot;</span>}}</span><span class=\"xml\"> Dave</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Finally, you can use the <code>if</code> helper inside another helper as a subexpression.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{some-component height=(<span class=\"name\"><span class=\"builtin-name\">if</span></span> isBig <span class=\"string\">&quot;100&quot;</span> <span class=\"string\">&quot;10&quot;</span>)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "if",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
          "line": 69,
          "description": "<html><head></head><body><p>The <code>unless</code> helper is the inverse of the <code>if</code> helper. Its block will be\nrendered if the expression contains a falsey value.  All forms of the <code>if</code>\nhelper can also be used with <code>unless</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "unless",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/loc.js",
          "line": 8,
          "description": "<html><head></head><body><p>Calls <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> with the\nprovided string. This is a convenient way to localize text within a template.\nFor example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Ember.STRINGS = {\n  &apos;_welcome_&apos;: &apos;Bonjour&apos;\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> <span class=\"class\"><span class=\"keyword\">class</span>=&apos;<span class=\"title\">message</span>&apos;&gt;\n  </span>{{loc <span class=\"string\">&apos;_welcome_&apos;</span>}}\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;div <span class=\"keyword\">class</span>=&apos;<span class=\"symbol\">message</span>&apos;&gt;\n  <span class=\"symbol\">Bonjour</span>\n&lt;/<span class=\"symbol\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> for how to\nset up localized string references.</p>\n</body></html>",
          "itemtype": "method",
          "name": "loc",
          "params": [
            {
              "name": "str",
              "description": "The string to format",
              "type": "String"
            }
          ],
          "see": [
            "{Ember.String#loc}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/log.js",
          "line": 8,
          "description": "<html><head></head><body><p><code>log</code> allows you to output the value of variables in the current rendering\ncontext. <code>log</code> also accepts primitive types such as strings or numbers.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{log <span class=\"string\">&quot;myVariable:&quot;</span> myVariable }}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "log",
          "params": [
            {
              "name": "values",
              "description": "",
              "type": "*"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/helpers/with.js",
          "line": 9,
          "description": "<html><head></head><body><p>Use the <code>{{with}}</code> helper when you want to alias a property to a new name. This is helpful\nfor semantic clarity as it allows you to retain default scope or to reference a property from another\n<code>{{with}}</code> block.</p>\n<p>If the aliased property is &quot;falsey&quot;, for example: <code>false</code>, <code>undefined</code> <code>null</code>, <code>&quot;&quot;</code>, <code>0</code> or\nan empty array, the block will not be rendered.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! Will only render if user.posts contains items}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">with</span></span> user.posts <span class=\"keyword\">as</span> |blogPosts|}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;notice&quot;</span>&gt;</span>\n    There are </span><span class=\"template-variable\">{{blogPosts.length}}</span><span class=\"xml\"> blog posts written by </span><span class=\"template-variable\">{{user.name}}</span><span class=\"xml\">.\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> blogPosts <span class=\"keyword\">as</span> |post|}}</span><span class=\"xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{post.title}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Without the <code>as</code> operator, it would be impossible to reference <code>user.name</code> in the example above.</p>\n<p>NOTE: The alias should not reuse a name from the bound property path.\nFor example: <code>{{#with foo.bar as |foo|}}</code> is not supported because it attempts to alias using\nthe first part of the property path, <code>foo</code>. Instead, use <code>{{#with foo.bar as |baz|}}</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "with",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/keywords/component.js",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>{{component}}</code> helper lets you add instances of <code>Ember.Component</code> to a\ntemplate. See <a href=\"/api/classes/Ember.Component.html\">Ember.Component</a> for\nadditional information on how a <code>Component</code> functions.\n<code>{{component}}</code>&apos;s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges. The provided block will be applied as the template for the component.\nGiven an empty <code>&lt;body&gt;</code> the following template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{! application.hbs }}\n{{component infographicComponentName}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the following application code:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>export <span class=\"keyword\">default</span> Ember.Controller.extend({\n  infographicComponentName: computed(<span class=\"string\">&apos;isMarketOpen&apos;</span>, {\n    <span class=\"keyword\">get</span>() {\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;isMarketOpen&apos;</span>)) {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;live-updating-chart&apos;</span>;\n      } <span class=\"keyword\">else</span> {\n        <span class=\"keyword\">return</span> <span class=\"string\">&apos;market-close-summary&apos;</span>;\n      }\n    }\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is\n<code>true</code>, and the <code>market-close-summary</code> component will be appended when\n<code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>{{! application.hbs }}\n{{live-updating-chart}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "component",
          "since": "1.11.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-htmlbars/lib/keywords/debugger.js",
          "line": 9,
          "description": "<html><head></head><body><p>Execute the <code>debugger</code> statement in the current template&apos;s context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{debugger}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When using the debugger helper you will have access to a <code>get</code> function. This\nfunction retrieves values available in the context of the template.\nFor example, if you&apos;re wondering why a value <code>{{foo}}</code> isn&apos;t rendering as\nexpected within a template, you could place a <code>{{debugger}}</code> statement and,\nwhen the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"function\"><span class=\"title\">get</span>(<span class=\"string\">&apos;foo&apos;</span>)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p><code>get</code> is also aware of keywords. So in this situation</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">each</span></span> items <span class=\"keyword\">as</span> |item|}}</span><span class=\"xml\">\n  </span><span class=\"template-variable\">{{<span class=\"built_in\">debugger</span>}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You&apos;ll be able to get values from the current item:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"keyword\">get</span>(&apos;<span class=\"built_in\">item</span>.<span class=\"built_in\">name</span>&apos;)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>You can also access the context of the view to make sure it is the object that\nyou expect:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"quote\">&gt; context</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "debugger",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-htmlbars"
        },
        {
          "file": "packages/ember-routing-htmlbars/lib/helpers/query-params.js",
          "line": 9,
          "description": "<html><head></head><body><p>This is a helper to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.</p>\n<p>Example</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;posts&apos; (query-params <span class=\"attr\">direction</span>=<span class=\"string\">&quot;asc&quot;</span>)}}</span><span class=\"xml\">Sort</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "query-params",
          "params": [
            {
              "name": "hash",
              "description": "takes a hash of query parameters",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A `QueryParams` object for `{{link-to}}`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-routing-htmlbars"
        },
        {
          "file": "packages/ember-routing-htmlbars/lib/keywords/action.js",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>{{action}}</code> helper provides a way to pass triggers for behavior (usually\njust a function) between components, and into components from controllers.</p>\n<h3 id=\"passing-functions-with-the-action-helper\">Passing functions with the action helper</h3>\n<p>There are three contexts an action helper can be used in. The first two\ncontexts to discuss are attribute context, and Handlebars value context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"comment\">{{! Examples of Handlebars value context }}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">input</span> on-<span class=\"built_in\">input</span>=(<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>)}}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"built_in\">yield</span> (<span class=\"built_in\">action</span> <span class=\"string\">&quot;refreshData&quot;</span>) andAnotherParam}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In these contexts,\nthe helper is called a &quot;closure action&quot; helper. It&apos;s behavior is simple:\nIf passed a function name, read that function off the <code>actions</code> property\nof the current context. Once that function is read (or if a function was\npassed), create a closure over that function and any arguments.</p>\n<p>The resulting value of an action helper used this way is simply a function.\nFor example with this attribute context example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The resulting template render logic would be:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&apos;div&apos;</span>);\n<span class=\"keyword\">var</span> actionFunction = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>{\n  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> context.actions.save.apply(context, <span class=\"built_in\">arguments</span>);\n  };\n})(context);\ndiv.onclick = actionFunction;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Thus when the div is clicked, the action on that context is called.\nBecause the <code>actionFunction</code> is just a function, closure actions can be\npassed between components the still execute in the correct context.</p>\n<p>Here is an example action handler on a component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">export</span> <span class=\"selector-tag\">default</span> <span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.Component</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">actions</span>: {\n    <span class=\"built_in\">save</span>(/* event *\\/) {\n      this.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;model&apos;</span>).<span class=\"built_in\">save</span>();\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Actions are always looked up on the <code>actions</code> property of the current context.\nThis avoids collisions in the naming of common actions, such as <code>destroy</code>.</p>\n<p>Two options can be passed to the <code>action</code> helper when it is used in this way.</p>\n<ul>\n<li><code>target=someProperty</code> will look to <code>someProperty</code> instead of the current\ncontext for the <code>actions</code> hash. This can be useful when targetting a\nservice for actions.</li>\n<li><code>value=&quot;target.value&quot;</code> will read the path <code>target.value</code> off the first\nargument to the action when it is called and rewrite the first argument\nto be that value. This is useful when attaching actions to event listeners.</li>\n</ul>\n<h3 id=\"invoking-an-action\">Invoking an action</h3>\n<p>Closure actions curry both their scope and any arguments. When invoked, any\nadditional arguments are added to the already curried list.</p>\n<p>Actions should be invoked using the <a href=\"/api/classes/Ember.Component.html#method_sendAction\">sendAction</a>\nmethod. The first argument to <code>sendAction</code> is the action to be called, and\nadditional arguments are passed to the action function. This has interesting\nproperties combined with currying of arguments. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>export default <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Component</span>.</span></span>extend({\n  actions: {\n    <span class=\"comment\">// Usage {{input on-input=(action (action &apos;setName&apos; model) value=&quot;target.value&quot;)}}</span>\n    set<span class=\"constructor\">Name(<span class=\"params\">model</span>, <span class=\"params\">name</span>)</span> {\n      model.set(&apos;name&apos;, name);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The first argument (<code>model</code>) was curried over, and the run-time argument (<code>event</code>)\nbecomes a second argument. Action calls be nested this way because each simply\nreturns a function. Any function can be passed to the <code>{{action</code> helper, including\nother actions.</p>\n<p>Actions invoked with <code>sendAction</code> have the same currying behavior as demonstrated\nwith <code>on-input</code> above. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">export</span> <span class=\"selector-tag\">default</span> <span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.Component</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">actions</span>: {\n    <span class=\"built_in\">setName</span>(model, name) {\n      model.<span class=\"built_in\">set</span>(<span class=\"string\">&apos;name&apos;</span>, name);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{my-input submit=(<span class=\"name\">action</span> &apos;setName&apos; model)}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/components/my-component.js</span>\n<span class=\"keyword\">export</span> <span class=\"built_in\">default</span> Ember.Component.extend({\n  <span class=\"built_in\">click</span>() {\n    <span class=\"comment\">// Note that model is not passed, it was curried in the template</span>\n    <span class=\"keyword\">this</span>.sendAction(<span class=\"string\">&apos;submit&apos;</span>, <span class=\"string\">&apos;bob&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"attaching-actions-to-dom\">Attaching actions to DOM</h3>\n<p>The third context the <code>{{action</code> helper can be used in we call &quot;element space&quot;.\nFor example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! An example of element space }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Used this way, the <code>{{action}}</code> helper provides a useful shortcut for\nregistering an HTML element within a template for a single DOM event and\nforwarding that interaction to the template&apos;s context (controller or component).</p>\n<p>If the context of a template is a controller, actions used this way will\nbubble to routes when the controller does not implement the specified action.\nOnce an action hits a route, it will bubble through the route hierarchy.</p>\n<h3 id=\"event-propagation\">Event Propagation</h3>\n<p><code>{{action</code> helpers called in element space can control event bubbling.</p>\n<p>Events triggered through the action helper will automatically have\n<code>.preventDefault()</code> called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;sayHello&quot;</span> preventDefault=false}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"builtin-name\">action</span> &apos;edit&apos; post bubbles=false}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>\n&apos;Responding to Browser Events&apos; for more information.</p>\n<h3 id=\"specifying-dom-event-type\">Specifying DOM event type</h3>\n<p><code>{{action</code> helpers called in element space can specify an event type.</p>\n<p>By default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can\nsupply an <code>on</code> option to the helper to specify a different DOM event name:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> {{action <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"keyword\">on</span>=<span class=\"string\">&quot;double-click&quot;</span>}}&gt;\n  click <span class=\"keyword\">me</span>\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/api/classes/Ember.View.html#toc_event-names\">Event Names</a> for a list of\nacceptable DOM event names.</p>\n<h3 id=\"specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3>\n<p><code>{{action</code> helpers called in element space can specify modifier keys.</p>\n<p>By default the <code>{{action}}</code> helper will ignore click event with pressed modifier\nkeys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;anActionName&quot;</span> allowedKeys=<span class=\"string\">&quot;alt&quot;</span>}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This way the <code>{{action}}</code> will fire when clicking with the alt key pressed down.</p>\n<p>Alternatively, supply &quot;any&quot; to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">div</span> {{action <span class=\"string\">&quot;anActionName&quot;</span> allowedKeys=<span class=\"string\">&quot;any&quot;</span>}}&gt;\n  click <span class=\"keyword\">me</span> <span class=\"keyword\">with</span> any key pressed\n&lt;/<span class=\"keyword\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-a-target\">Specifying a Target</h3>\n<p>A <code>target</code> option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"comment\">{{! app/templates/application.hbs }}</span><span class=\"xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"built_in\">action</span> <span class=\"string\">&quot;anActionName&quot;</span> target=someService}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/controllers/application.js</span>\nexport default <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Controller</span>.</span></span>extend({\n  someService: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>inject.service<span class=\"literal\">()</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "action",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-templates"
        },
        {
          "file": "packages/ember-routing-htmlbars/lib/keywords/link-to.js",
          "line": 10,
          "description": "<html><head></head><body><p>The <code>{{link-to}}</code> helper renders a link to the supplied\n<code>routeName</code> passing an optionally supplied model to the\nroute as its <code>model</code> context of the route. The block\nfor <code>{{link-to}}</code> becomes the innerHTML of the rendered\nelement:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos;}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use an inline form of <code>{{link-to}}</code> helper by\npassing the link text as the first argument\nto the helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{link-<span class=\"keyword\">to</span> <span class=\"string\">&apos;Great Hamster Photos&apos;</span> <span class=\"string\">&apos;photoGallery&apos;</span>}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Both will result in:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-a-tagname\">Supplying a tagName</h3>\n<p>By default <code>{{link-to}}</code> renders an <code>&lt;a&gt;</code> element. This can\nbe overridden for a single use of <code>{{link-to}}</code> by supplying\na <code>tagName</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">tagName</span>=<span class=\"string\">&quot;li&quot;</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;li&gt;</span>\n  <span class=\"attribute\">Great</span> Hamster Photos\n<span class=\"section\">&lt;/li&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"disabling-the-link-to-helper\">Disabling the <code>link-to</code> helper</h3>\n<p>By default <code>{{link-to}}</code> is enabled.\nany passed value to <code>disabled</code> helper property will disable the <code>link-to</code> helper.</p>\n<p>static use: the <code>disabled</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">disabled</span>=true}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>dynamic use: the <code>disabledWhen</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery&apos; <span class=\"attr\">disabledWhen</span>=controller.someProperty}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>any passed value to <code>disabled</code> will disable it except <code>undefined</code>.\nto ensure that only <code>true</code> disable the <code>link-to</code> helper you can\noverride the global behaviour of <code>Ember.LinkComponent</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>Ember.LinkComponent.reopen({\n  disabled: Ember.computed(function(key, <span class=\"keyword\">value</span>) {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> !== undefined) {\n      <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;_isDisabled&apos;</span>, <span class=\"keyword\">value</span> === <span class=\"literal\">true</span>);\n    }\n    <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> === <span class=\"literal\">true</span> ? <span class=\"keyword\">get</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&apos;disabledClass&apos;</span>) : <span class=\"literal\">false</span>;\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>see &quot;Overriding Application-wide Defaults&quot; for more.</p>\n<h3 id=\"handling-href\">Handling <code>href</code></h3>\n<p><code>{{link-to}}</code> will use your application&apos;s Router to\nfill the element&apos;s <code>href</code> property with a url that\nmatches the path to the supplied <code>routeName</code> for your\nrouter&apos;s configured <code>Location</code> scheme, which defaults\nto Ember.HashLocation.</p>\n<h3 id=\"handling-current-route\">Handling current route</h3>\n<p><code>{{link-to}}</code> will apply a CSS class name of &apos;active&apos;\nwhen the application&apos;s current route matches\nthe supplied routeName. For example, if the application&apos;s\ncurrent route is &apos;photoGallery.recent&apos; the following\nuse of <code>{{link-to}}</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery.recent&apos;}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will result in</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;a href=<span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> <span class=\"keyword\">class</span>=&quot;<span class=\"symbol\">active</span>&quot;&gt;\n  <span class=\"symbol\">Great</span> <span class=\"symbol\">Hamster</span> <span class=\"symbol\">Photos</span>\n&lt;/<span class=\"symbol\">a</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The CSS class name used for active classes can be customized\nfor a single use of <code>{{link-to}}</code> by passing an <code>activeClass</code>\noption:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span> &apos;photoGallery.recent&apos; <span class=\"attr\">activeClass</span>=<span class=\"string\">&quot;current-url&quot;</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;current-url&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"supplying-a-model\">Supplying a model</h3>\n<p>An optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&quot;photoGallery&quot;</span>, {path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span>});\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-multiple-models\">Supplying multiple models</h3>\n<p>For deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&quot;photoGallery&quot;</span>, {path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span>}, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;comment&quot;</span>, {path: <span class=\"string\">&quot;comments/:comment_id&quot;</span>});\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This argument will become the model context of the linked route:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery.comment&apos; aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42/comments/718&quot;</span>&gt;</span>\n  A+++ would snuggle again.\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3>\n<p>If you don&apos;t have a model object available to pass to <code>{{link-to}}</code>,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&quot;photoGallery&quot;</span>, {path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span>});\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhotoId}}\n  {{aPhoto.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When transitioning into the linked route, the <code>model</code> hook will\nbe triggered with parameters including this passed identifier.</p>\n<h3 id=\"allowing-default-action\">Allowing Default Action</h3>\n<p> By default the <code>{{link-to}}</code> helper prevents the default browser action\n by calling <code>preventDefault()</code> as this sort of action bubbling is normally\n handled internally and we do not want to take the browser to a new URL (for\n example).</p>\n<p> If you need to override this behavior specify <code>preventDefault=false</code> in\n your template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>{{#link-to &apos;photoGallery&apos; aPhotoId preventDefault=false}}\n  {{aPhotoId.title}}\n{{/link-to}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"overriding-attributes\">Overriding attributes</h3>\n<p>You can override any given property of the Ember.LinkComponent\nthat is generated by the <code>{{link-to}}</code> helper by passing\nkey/value pairs, like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">link-to</span>  aPhoto <span class=\"attr\">tagName</span>=&apos;li&apos; <span class=\"attr\">title</span>=&apos;Following this link will change your life&apos; <span class=\"attr\">classNames</span>=&apos;pic sweet&apos;}}</span><span class=\"xml\">\n  Uh-mazing!\n</span><span class=\"template-tag\">{{/<span class=\"name\">link-to</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/api/classes/Ember.LinkComponent.html\">Ember.LinkComponent</a> for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of <code>LinkComponent</code>.</p>\n<h3 id=\"overriding-application-wide-defaults\">Overriding Application-wide Defaults</h3>\n<p><code>{{link-to}}</code> creates an instance of Ember.LinkComponent\nfor rendering. To override options for your entire\napplication, reopen Ember.LinkComponent and supply the\ndesired values:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.LinkComponent</span><span class=\"selector-class\">.reopen</span>({\n  <span class=\"attribute\">activeClass</span>: <span class=\"string\">&quot;is-active&quot;</span>,\n  tagName: <span class=\"string\">&apos;li&apos;</span>\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to override the default event in\nthis manner:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.LinkComponent</span><span class=\"selector-class\">.reopen</span>({\n  <span class=\"attribute\">eventName</span>: <span class=\"string\">&apos;customEventName&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "link-to",
          "params": [
            {
              "name": "routeName",
              "description": "",
              "type": "String"
            },
            {
              "name": "context",
              "description": "",
              "type": "Object",
              "optional": true,
              "multiple": true
            },
            {
              "name": "options",
              "description": "Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "see": [
            "{Ember.LinkComponent}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember",
          "submodule": "ember-routing-htmlbars"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.13.6-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.13.6",
          "type": "project-version"
        }
      }
    }
  }
}