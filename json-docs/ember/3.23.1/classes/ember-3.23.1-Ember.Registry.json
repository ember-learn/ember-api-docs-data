{
  "data": {
    "id": "ember-3.23.1-Ember.Registry",
    "type": "class",
    "attributes": {
      "name": "Ember.Registry",
      "shortname": "Registry",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 84,
      "description": "A registry used to store factory and option information keyed\nby type.\n\nA `Registry` stores the factory and option information needed by a\n`Container` to instantiate and cache objects.\n\nThe API for `Registry` is still in flux and should not be considered stable.",
      "access": "private",
      "tagname": "",
      "since": "1.11.0",
      "methods": [
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 192,
          "description": "Creates a container based on this registry.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "container",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "created container",
            "type": "Container"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 204,
          "description": "Registers a factory for later injection.\n\nExample:\n\n```javascript\nlet registry = new Registry();\n\nregistry.register('model:user', Person, {singleton: false });\nregistry.register('fruit:favorite', Orange);\nregistry.register('communication:main', Email, {singleton: false});\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 238,
          "description": "Unregister a fullName\n\n```javascript\nlet registry = new Registry();\nregistry.register('model:user', User);\n\nregistry.resolve('model:user').create() instanceof User //=> true\n\nregistry.unregister('model:user')\nregistry.resolve('model:user') === undefined //=> true\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 268,
          "description": "Given a fullName return the corresponding factory.\n\nBy default `resolve` will retrieve the factory from\nthe registry.\n\n```javascript\nlet registry = new Registry();\nregistry.register('api:twitter', Twitter);\n\nregistry.resolve('api:twitter') // => Twitter\n```\n\nOptionally the registry can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe opportunity to resolve the fullName, otherwise it will fallback\nto the registry.\n\n```javascript\nlet registry = new Registry();\nregistry.resolver = function(fullName) {\n   // lookup via the module system of choice\n };\n\n// the twitter factory is added to the module system\nregistry.resolve('api:twitter') // => Twitter\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true,
              "props": [
                {
                  "name": "source",
                  "description": "the fullname of the request source (used for local lookups)",
                  "type": "String",
                  "optional": true
                }
              ]
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 311,
          "description": "A hook that can be used to describe how the resolver will\nattempt to find the factory.\n\nFor example, the default Ember `.describe` returns the full\nclass name (including namespace) where Ember's resolver expects\nto find the `fullName`.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "describe",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "described fullName",
            "type": "String"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 334,
          "description": "A hook to enable custom fullName normalization behavior",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "normalizeFullName",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized fullName",
            "type": "String"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 352,
          "description": "Normalize a fullName based on the application's conventions",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized fullName",
            "type": "String"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 367,
          "itemtype": "method",
          "name": "makeToString",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "factory",
              "description": "",
              "type": "Any"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "toString function",
            "type": "Function"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 385,
          "description": "Given a fullName check if the container is aware of its factory\nor singleton instance.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true,
              "props": [
                {
                  "name": "source",
                  "description": "the fullname of the request source (used for local lookups)",
                  "type": "String",
                  "optional": true
                }
              ]
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 407,
          "description": "Allow registering options for all factories of a type.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\n// if all of type `connection` must not be singletons\nregistry.optionsForType('connection', { singleton: false });\n\nregistry.register('connection:twitter', TwitterConnection);\nregistry.register('connection:facebook', FacebookConnection);\n\nlet twitter = container.lookup('connection:twitter');\nlet twitter2 = container.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = container.lookup('connection:facebook');\nlet facebook2 = container.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "optionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 448,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "options",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 490,
          "description": "Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('router:main', Router);\nregistry.register('controller:user', UserController);\nregistry.register('controller:post', PostController);\n\nregistry.typeInjection('controller', 'router', 'router:main');\n\nlet user = container.lookup('controller:user');\nlet post = container.lookup('controller:post');\n\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "typeInjection",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 537,
          "description": "Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\n* Injecting one fullName on another fullName\n* Injecting one fullName on a type\n\nExample:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('source:main', Source);\nregistry.register('model:user', User);\nregistry.register('model:post', Post);\n\n// injecting one fullName on another fullName\n// eg. each user model gets a post model\nregistry.injection('model:user', 'post', 'model:post');\n\n// injecting one fullName on another type\nregistry.injection('model', 'source', 'source:main');\n\nlet user = container.lookup('model:user');\nlet post = container.lookup('model:post');\n\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\n\nuser.post instanceof Post; //=> true\n\n// and both models share the same source\nuser.source === post.source; //=> true\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "injection",
          "params": [
            {
              "name": "factoryName",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 603,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "knownForType",
          "params": [
            {
              "name": "type",
              "description": "the type to iterate over",
              "type": "String"
            }
          ],
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 664,
          "description": "Given a fullName and a source fullName returns the fully resolved\nfullName. Used to allow for local lookup.\n\n```javascript\nlet registry = new Registry();\n\n// the twitter factory is added to the module system\nregistry.expandLocalLookup('component:post-title', { source: 'template:post' }) // => component:post/post-title\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "expandLocalLookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true,
              "props": [
                {
                  "name": "source",
                  "description": "the fullname of the request source (used for local lookups)",
                  "type": "String",
                  "optional": true
                }
              ]
            }
          ],
          "return": {
            "description": "fullName",
            "type": "String"
          },
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 128,
          "description": "A backup registry for resolving registrations when no matches can be found.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "fallback",
          "type": "Registry",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 136,
          "description": "An object that has a `resolve` method that resolves a name.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "resolver",
          "type": "Resolver",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 144,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "registrations",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 150,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_typeInjections",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 157,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_injections",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 164,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_normalizeCache",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 171,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_resolveCache",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 178,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_options",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/container/lib/registry.ts",
          "line": 185,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_typeOptions",
          "type": "InheritingDict",
          "class": "Ember.Registry",
          "module": "ember",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.23.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.23.1",
          "type": "project-version"
        }
      }
    }
  }
}