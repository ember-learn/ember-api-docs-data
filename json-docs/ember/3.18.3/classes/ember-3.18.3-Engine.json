{
  "data": {
    "id": "ember-3.18.3-Engine",
    "type": "class",
    "attributes": {
      "name": "Engine",
      "shortname": "Engine",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/engine",
      "namespace": "",
      "file": "packages/@ember/engine/index.js",
      "line": 31,
      "description": "The `Engine` class contains core functionality for both applications and\nengines.\n\nEach engine manages a registry that's used for dependency injection and\nexposed through `RegistryProxy`.\n\nEngines also manage initializers and instance initializers.\n\nEngines can spawn `EngineInstance` instances via `buildInstance()`.",
      "extends": "Ember.Namespace",
      "uses": [
        "RegistryProxy"
      ],
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/engine/index.js",
          "line": 62,
          "description": "Ensure that initializers are run once, and only once, per engine.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "ensureInitializers",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 75,
          "description": "Create an EngineInstance for this engine.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "buildInstance",
          "return": {
            "description": "the engine instance",
            "type": "EngineInstance"
          },
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 88,
          "description": "Build and configure the registry for the current engine.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "buildRegistry",
          "return": {
            "description": "the configured registry",
            "type": "Ember.Registry"
          },
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 101,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "initializer",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 109,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "instanceInitializer",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 117,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "runInitializers",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 128,
          "access": "private",
          "tagname": "",
          "since": "1.12.0",
          "itemtype": "method",
          "name": "runInstanceInitializers",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 159,
          "description": "The goal of initializers should be to register dependencies and injections.\nThis phase runs once. Because these initializers may load code, they are\nallowed to defer application readiness and advance it. If you need to access\nthe container or store you should use an InstanceInitializer that will be run\nafter all initializers and therefore after all code is loaded and the app is\nready.\n\nInitializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.\n\n```js {data-filename=app/initializer/named-initializer.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Running namedInitializer!');\n}\n\nexport default {\n  name: 'named-initializer',\n  initialize\n};\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\nAn example of ordering initializers, we create an initializer named `first`:\n\n```js {data-filename=app/initializer/first.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('First initializer!');\n}\n\nexport default {\n  name: 'first',\n  initialize\n};\n```\n\n```bash\n// DEBUG: First initializer!\n```\n\nWe add another initializer named `second`, specifying that it should run\nafter the initializer named `first`:\n\n```js {data-filename=app/initializer/second.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Second initializer!');\n}\n\nexport default {\n  name: 'second',\n  after: 'first',\n  initialize\n};\n```\n\n```\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nAfterwards we add a further initializer named `pre`, this time specifying\nthat it should run before the initializer named `first`:\n\n```js {data-filename=app/initializer/pre.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Pre initializer!');\n}\n\nexport default {\n  name: 'pre',\n  before: 'first',\n  initialize\n};\n```\n\n```bash\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nFinally we add an initializer named `post`, specifying it should run after\nboth the `first` and the `second` initializers:\n\n```js {data-filename=app/initializer/post.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Post initializer!');\n}\n\nexport default {\n  name: 'post',\n  after: ['first', 'second'],\n  initialize\n};\n```\n\n```bash\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n// DEBUG: Post initializer!\n```\n\n* `initialize` is a callback function that receives one argument,\n  `application`, on which you can operate.\n\nExample of using `application` to register an adapter:\n\n```js {data-filename=app/initializer/api-adapter.js}\nimport ApiAdapter from '../utils/api-adapter';\n\nexport function initialize(application) {\n  application.register('api-adapter:main', ApiAdapter);\n}\n\nexport default {\n  name: 'post',\n  after: ['first', 'second'],\n  initialize\n};\n```",
          "itemtype": "method",
          "name": "initializer",
          "params": [
            {
              "name": "initializer",
              "description": "",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 306,
          "description": "Instance initializers run after all initializers have run. Because\ninstance initializers run after the app is fully set up. We have access\nto the store, container, and other items. However, these initializers run\nafter code has loaded and are not allowed to defer readiness.\n\nInstance initializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the instanceInitializer is\nregistered. This must be a unique name, as trying to register two\ninstanceInitializer with the same name will result in an error.\n\n```js {data-filename=app/initializer/named-instance-initializer.js}\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Running named-instance-initializer!');\n}\n\nexport default {\n  name: 'named-instance-initializer',\n  initialize\n};\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\n* See Application.initializer for discussion on the usage of before\nand after.\n\nExample instanceInitializer to preload data into the store.\n\n```js {data-filename=app/initializer/preload-data.js}\nimport $ from 'jquery';\n\nexport function initialize(application) {\n    var userConfig, userConfigEncoded, store;\n    // We have a HTML escaped JSON representation of the user's basic\n    // configuration generated server side and stored in the DOM of the main\n    // index.html file. This allows the app to have access to a set of data\n    // without making any additional remote calls. Good for basic data that is\n    // needed for immediate rendering of the page. Keep in mind, this data,\n    // like all local models and data can be manipulated by the user, so it\n    // should not be relied upon for security or authorization.\n\n    // Grab the encoded data from the meta tag\n    userConfigEncoded = $('head meta[name=app-user-config]').attr('content');\n\n    // Unescape the text, then parse the resulting JSON into a real object\n    userConfig = JSON.parse(unescape(userConfigEncoded));\n\n    // Lookup the store\n    store = application.lookup('service:store');\n\n    // Push the encoded JSON into the store\n    store.pushPayload(userConfig);\n}\n\nexport default {\n  name: 'named-instance-initializer',\n  initialize\n};\n```",
          "itemtype": "method",
          "name": "instanceInitializer",
          "params": [
            {
              "name": "instanceInitializer",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 380,
          "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
          "itemtype": "method",
          "name": "buildRegistry",
          "static": 1,
          "params": [
            {
              "name": "namespace",
              "description": "the application for which to\n  build the registry",
              "type": "Application"
            }
          ],
          "return": {
            "description": "the built registry",
            "type": "Ember.Registry"
          },
          "access": "private",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 438,
          "description": "This function defines the default lookup rules for container lookups:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after classifying the name.\n  For example, `controller:post` looks up `App.PostController` by default.\n* if the default lookup fails, look for registered classes on the container\n\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "resolverFor",
          "params": [
            {
              "name": "namespace",
              "description": "the namespace to look for classes",
              "type": "Ember.Namespace"
            }
          ],
          "return": {
            "description": "the resolved value for a given lookup",
            "type": "*"
          },
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 312,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 530,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 552,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 560,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 93,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 138,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 163,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 211,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 229,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 249,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 268,
          "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 286,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nThere are two common invocation patterns for `.addObserver()`:\n\n- Passing two arguments:\n  - the name of the property to observe (as a string)\n  - the function to invoke (an actual function)\n- Passing three arguments:\n  - the name of the property to observe (as a string)\n  - the target object (will be used to look up and invoke a\n    function on)\n  - the name of the function to invoke on the target object\n    (as a string).\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    // the following are equivalent:\n\n    // using three arguments\n    this.addObserver('foo', this, 'fooDidChange');\n\n    // using two arguments\n    this.addObserver('foo', (...args) => {\n      this.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    // your custom logic code\n  }\n});\n```\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is sync or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 374,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is async or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 392,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 407,
          "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 425,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 447,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 469,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 486,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/engine/index.js",
          "line": 54,
          "description": "A private flag indicating whether an engine's initializers have run yet.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_initializersRan",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 420,
          "description": "Set this to provide an alternate class to `DefaultResolver`",
          "deprecated": true,
          "deprecationMessage": "Use 'Resolver' instead",
          "itemtype": "property",
          "name": "resolver",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/engine/index.js",
          "line": 429,
          "description": "Set this to provide an alternate class to `DefaultResolver`",
          "itemtype": "property",
          "name": "resolver",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/engine"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 345,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 419,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 494,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 512,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Engine",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-3.18.3-Ember.Namespace",
          "type": "class"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-3.18.3-Application"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-3.18.3-@ember/engine",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.18.3",
          "type": "project-version"
        }
      }
    }
  }
}