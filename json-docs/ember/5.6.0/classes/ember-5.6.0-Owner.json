{
  "data": {
    "id": "ember-5.6.0-Owner",
    "type": "class",
    "attributes": {
      "name": "Owner",
      "shortname": "Owner",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/owner",
      "namespace": "",
      "file": "packages/@ember/-internals/owner/index.ts",
      "line": 294,
      "description": "<html><head></head><body><p>Framework objects in an Ember application (components, services, routes,\netc.) are created via a factory and dependency injection system. Each of\nthese objects is the responsibility of an \"owner\", which handles its\ninstantiation and manages its lifetime.</p>\n<p>An <code>Owner</code> is not a class you construct; it is one the framework constructs\nfor you. The normal way to get access to the relevant <code>Owner</code> is using the\n<code>getOwner</code> function.</p>\n</body></html>",
      "uses": [
        "BasicContainer",
        "BasicRegistry"
      ],
      "since": "4.10.0",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/owner/index.ts",
          "line": 198,
          "description": "<html><head></head><body><p>Given a fullName return a corresponding instance.</p>\n<p>The default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> registry = <span class=\"keyword\">new</span> Registry();\n<span class=\"keyword\">let</span> container = registry.container();\n\nregistry.register(<span class=\"string\">'api:twitter'</span>, Twitter);\n\n<span class=\"keyword\">let</span> twitter = container.lookup(<span class=\"string\">'api:twitter'</span>);\n\ntwitter <span class=\"keyword\">instanceof</span> Twitter; <span class=\"regexp\">// =&gt; true\n\n//</span> <span class=\"keyword\">by</span> <span class=\"keyword\">default</span> the container will <span class=\"keyword\">return</span> singletons\n<span class=\"keyword\">let</span> twitter2 = container.lookup(<span class=\"string\">'api:twitter'</span>);\ntwitter2 <span class=\"keyword\">instanceof</span> Twitter; <span class=\"regexp\">// =&gt; true\n\ntwitter === twitter2; //</span>=&gt; <span class=\"literal\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If singletons are not wanted an optional flag can be provided at lookup.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>let registry = <span class=\"keyword\">new</span> Registry();\nlet <span class=\"built_in\">container</span> = registry.<span class=\"built_in\">container</span>();\n\nregistry.register(<span class=\"string\">'api:twitter'</span>, Twitter);\n\nlet twitter = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">'api:twitter'</span>, { singleton: <span class=\"literal\">false</span> });\nlet twitter2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">'api:twitter'</span>, { singleton: <span class=\"literal\">false</span> });\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "RegisterOptions"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Owner",
          "module": "@ember/owner",
          "inherited": true,
          "inheritedFrom": "BasicContainer"
        },
        {
          "file": "packages/@ember/-internals/owner/index.ts",
          "line": 247,
          "description": "<html><head></head><body><p>Given a <code>FullName</code>, of the form <code>\"type:name\"</code> return a <code>FactoryManager</code>.</p>\n<p>This method returns a manager which can be used for introspection of the\nfactory's class or for the creation of factory instances with initial\nproperties. The manager is an object with the following properties:</p>\n<ul>\n<li><code>class</code> - The registered or resolved class.</li>\n<li><code>create</code> - A function that will create an instance of the class with\nany dependencies injected.</li>\n</ul>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>import { getOwner } from '@ember/application';\n\nlet owner = getOwner(otherInstance);\n// the owner is commonly the `applicationInstance`,<span class=\"built_in\"> and </span>can be accessed via\n// an<span class=\"built_in\"> instance </span>initializer.\n\nlet factory = owner.factoryFor('service:bespoke');\n\nfactory.class;\n// The registered<span class=\"built_in\"> or </span>resolved class. For example when used with an Ember-CLI\n// app, this would be the default export from `app/services/bespoke.js`.\n\nlet<span class=\"built_in\"> instance </span>= factory.create({\n  someProperty: 'an initial property value'\n});\n// Create an<span class=\"built_in\"> instance </span>with any injections<span class=\"built_in\"> and </span>the passed options as\n// initial properties.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Any instances created via the factory's <code>.create()</code> method <em>must</em> be destroyed\nmanually by the caller of <code>.create()</code>. Typically, this is done during the creating\nobjects own <code>destroy</code> or <code>willDestroy</code> methods.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "factoryFor",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "FactoryManager"
          },
          "class": "Owner",
          "module": "@ember/owner",
          "inherited": true,
          "inheritedFrom": "BasicContainer"
        },
        {
          "file": "packages/@ember/-internals/owner/index.ts",
          "line": 107,
          "description": "<html><head></head><body><p>Registers a factory that can be used for dependency injection (with\n<code>inject</code>) or for service lookup. Each factory is registered with\na full name including two parts: <code>type:name</code>.</p>\n<p>A simple example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">'@ember/application'</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">'@ember/object'</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register(<span class=\"string\">'fruit:favorite'</span>, App.Orange);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Ember will resolve factories from the <code>App</code> namespace automatically.\nFor example <code>App.CarsController</code> will be discovered and returned if\nan application requests <code>controller:cars</code>.</p>\n<p>An example of registering a controller with a non-standard name:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">'@ember/application'</span>;\n<span class=\"keyword\">import</span> Controller <span class=\"keyword\">from</span> <span class=\"string\">'@ember/controller'</span>;\n\n<span class=\"keyword\">let</span> App = Application.create();\n<span class=\"keyword\">let</span> Session = Controller.extend();\n\nApp.register(<span class=\"string\">'controller:session'</span>, Session);\n\n<span class=\"comment\">// The Session controller can now be treated like a normal controller,</span>\n<span class=\"comment\">// despite its non-standard name.</span>\nApp.ApplicationController = Controller.extend({\n  needs: [<span class=\"string\">'session'</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Registered factories are <strong>instantiated</strong> by having <code>create</code>\ncalled on them. Additionally they are <strong>singletons</strong>, each time\nthey are looked up they return the same instance.</p>\n<p>Some examples modifying that default behavior:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Application <span class=\"keyword\">from</span> <span class=\"string\">'@ember/application'</span>;\n<span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">'@ember/object'</span>;\n\nlet App = Application.<span class=\"keyword\">create</span>();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.<span class=\"keyword\">session</span> = EmberObject.<span class=\"keyword\">create</span>();\n\nApp.register(<span class=\"string\">'model:user'</span>, App.Person, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">'fruit:favorite'</span>, App.Orange);\nApp.register(<span class=\"string\">'communication:main'</span>, App.Email, { singleton: <span class=\"keyword\">false</span> });\nApp.register(<span class=\"string\">'session'</span>, App.<span class=\"keyword\">session</span>, { instantiate: <span class=\"keyword\">false</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "type:name (e.g., 'model:user')",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "(e.g., App.Person)",
              "type": "Factory|object"
            },
            {
              "name": "options",
              "description": "(optional) disable instantiation or singleton usage",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Owner",
          "module": "@ember/owner",
          "inherited": true,
          "inheritedFrom": "BasicRegistry"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.6.0-@ember/owner",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.6.0",
          "type": "project-version"
        }
      }
    }
  }
}