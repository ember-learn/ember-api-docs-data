{
  "data": {
    "id": "ember-5.6.0-@ember/object",
    "type": "module",
    "attributes": {
      "name": "@ember/object",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember/object": 1,
        "@ember/debug": 1,
        "@ember/object/events": 1,
        "@ember/object/evented": 1,
        "@ember/object/computed": 1,
        "@ember/object/observers": 1,
        "Ember": 1,
        "@ember/object/internals": 1,
        "@ember/object/compat": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/object/index.ts",
      "line": 30,
      "parent": null,
      "publicclasses": [
        "ComputedProperty",
        "EmberObject"
      ],
      "privateclasses": [
        "Descriptor"
      ],
      "staticfunctions": {
        "@ember/object": [
          {
            "file": "packages/@ember/object/index.ts",
            "line": 51,
            "description": "Decorator that turns the target function into an Action which can be accessed\ndirectly by reference.\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n```hbs\n<!-- template.hbs -->\n<button {{action this.toggleShowing}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nDecorated actions also interop with the string style template actions:\n\n```hbs\n<!-- template.hbs -->\n<button {{action \"toggleShowing\"}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nIt also binds the function directly to the instance, so it can be used in any\ncontext and will correctly refer to the class it came from:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert this.toggleShowing}}\n  {{on \"click\" this.toggleShowing}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThis can also be used in JavaScript code directly:\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  constructor() {\n    super(...arguments);\n\n    // this.toggleShowing is still bound correctly when added to\n    // the event listener\n    document.addEventListener('click', this.toggleShowing);\n  }\n\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n\nThis is considered best practice, since it means that methods will be bound\ncorrectly no matter where they are used. By contrast, the `{{action}}` helper\nand modifier can also be used to bind context, but it will be required for\nevery usage of the method:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert (action this.toggleShowing)}}\n  {{on \"click\" (action this.toggleShowing)}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThey also do not have equivalents in JavaScript directly, so they cannot be\nused for other situations where binding would be useful.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "action",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "The function to turn into an action,\n                                     when used in classic classes",
                "type": "Function|undefined"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "PropertyDecorator"
            },
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/computed.ts",
            "line": 731,
            "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties with\nnative decorator syntax, mixins, or via `defineProperty()`.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\nYou can also provide a setter, either directly on the class using native class\nsyntax, or by passing a hash with `get` and `set` functions.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  set fullName(value) {\n    let [firstName, lastName] = value.split(/\\s+/);\n\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n\n    return value;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  })\n});\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n```\n\nWhen passed as an argument, the `set` function should accept two parameters,\n`key` and `value`. The value returned from `set` will be the new value of the\nproperty.\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._",
            "itemtype": "method",
            "name": "computed",
            "static": 1,
            "params": [
              {
                "name": "dependentKeys*",
                "description": "Optional dependent keys that trigger this computed property.",
                "type": "String",
                "optional": true
              },
              {
                "name": "func",
                "description": "The computed property function.",
                "type": "Function"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "ComputedDecorator"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/properties.ts",
            "line": 13,
            "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\nimport { defineProperty, computed } from '@ember/object';\n\n// ES5 compatible mode\ndefineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\ndefineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\ndefineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "defineProperty",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "the object to define this property on. This may be a prototype.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "the name of the property",
                "type": "String"
              },
              {
                "name": "desc",
                "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
                "type": "Descriptor",
                "optional": true
              },
              {
                "name": "data",
                "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
                "type": "*",
                "optional": true
              }
            ],
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_get.ts",
            "line": 51,
            "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nimport { get } from '@ember/object';\nget(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to retrieve from.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "The property key to retrieve",
                "type": "String"
              }
            ],
            "return": {
              "description": "the property value or `null`.",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/get_properties.ts",
            "line": 6,
            "description": "To get multiple properties at once, call `getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "",
                "type": "Object"
              },
              {
                "name": "list",
                "description": "of keys to get",
                "type": "String...|Array"
              }
            ],
            "return": {
              "description": "",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/index.ts",
            "line": 289,
            "description": "Specify a method that observes property changes.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { observer } from '@ember/object';\n\nexport default EmberObject.extend({\n  valueObserver: observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "observer",
            "params": [
              {
                "name": "propertyNames",
                "description": "",
                "type": "String",
                "multiple": true
              },
              {
                "name": "func",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "func"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_set.ts",
            "line": 17,
            "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change.\nIf the specified property is not defined on the object and the object\nimplements the `setUnknownProperty` method, then instead of setting the\nvalue of the property on the object, its `setUnknownProperty` handler\nwill be invoked with the two parameters `keyName` and `value`.\n\n```javascript\nimport { set } from '@ember/object';\nset(obj, \"name\", value);\n```",
            "itemtype": "method",
            "name": "set",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to modify.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "The property key to set",
                "type": "String"
              },
              {
                "name": "value",
                "description": "The value to set",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the passed value.",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/set_properties.ts",
            "line": 6,
            "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nimport EmberObject from '@ember/object';\nlet anObject = EmberObject.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
            "itemtype": "method",
            "name": "setProperties",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "properties",
                "description": "",
                "type": "Object"
              }
            ],
            "return": {
              "description": "properties"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_set.ts",
            "line": 121,
            "description": "Error-tolerant form of `set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.\n\n```javascript\nimport { trySet } from '@ember/object';\n\nlet obj = { name: \"Zoey\" };\ntrySet(obj, \"contacts.twitter\", \"@emberjs\");\n```",
            "itemtype": "method",
            "name": "trySet",
            "static": 1,
            "params": [
              {
                "name": "root",
                "description": "The object to modify.",
                "type": "Object"
              },
              {
                "name": "path",
                "description": "The property path to set",
                "type": "String"
              },
              {
                "name": "value",
                "description": "The value to set",
                "type": "Object"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          }
        ],
        "@ember/object/events": [
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 28,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "A target object or a function",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "A function or the name of a function to be called on `target`",
                "type": "Function|String"
              },
              {
                "name": "once",
                "description": "A flag whether a function should only be called once",
                "type": "Boolean"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 162,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "hasListeners",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "if `obj` has listeners for event `eventName`",
              "type": "Boolean"
            },
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 62,
            "description": "Remove an event listener\n\nArguments should match those passed to `addListener`.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "A target object or a function",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "A function or the name of a function to be called on `target`",
                "type": "Function|String"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 105,
            "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
            "itemtype": "method",
            "name": "sendEvent",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "params",
                "description": "Optional parameters for each listener.",
                "type": "Array"
              }
            ],
            "return": {
              "description": "if the event was delivered to one or more actions",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          }
        ],
        "@ember/object/observers": [
          {
            "file": "packages/@ember/-internals/metal/lib/observer.ts",
            "line": 27,
            "itemtype": "method",
            "name": "addObserver",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "",
                "type": "Function|String",
                "optional": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/observers",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/observer.ts",
            "line": 55,
            "itemtype": "method",
            "name": "removeObserver",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "",
                "type": "Function|String",
                "optional": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/observers",
            "module": "@ember/object"
          }
        ],
        "@ember/object/computed": [
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 649,
            "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { alias } from '@ember/object/computed';\n\nclass Person {\n  name = 'Alex Matchneer';\n\n  @alias('name') nomen;\n}\n\nlet alex = new Person();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```",
            "itemtype": "method",
            "name": "alias",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates an alias to the\noriginal value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 560,
            "description": "A computed property that performs a logical `and` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first falsy value or last\ntruthy value just like JavaScript's `&&` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { and } from '@ember/object/computed';\n\nclass Hamster {\n  @and('hasTent', 'hasBackpack') readyForCamp;\n  @and('hasWalkingStick', 'hasBackpack') readyForHike;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```",
            "itemtype": "method",
            "name": "and",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which performs a logical `and` on\nthe values of all the original values for properties.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 240,
            "description": "A computed property that converts the provided dependent property into a\nboolean value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { bool } from '@ember/object/computed';\n\n\nclass Hamster {\n  @bool('numBananas') hasBananas\n}\n\nlet hamster = new Hamster();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```",
            "itemtype": "method",
            "name": "bool",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which converts to boolean the\noriginal value for property",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 980,
            "description": "A computed property that returns the array of values for the provided\ndependent properties.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { collect } from '@ember/object/computed';\n\nclass Hamster {\n  @collect('hat', 'shirt') clothes;\n}\n\nlet hamster = new Hamster();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```",
            "itemtype": "method",
            "name": "collect",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which maps values of all passed\nin properties to an array.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 796,
            "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property, but also print a deprecation warning.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { deprecatingAlias } from '@ember/object/computed';\n\nclass Hamster {\n  @deprecatingAlias('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n  bananaCount;\n}\n\nlet hamster = new Hamster();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```",
            "itemtype": "method",
            "name": "deprecatingAlias",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "options",
                "description": "Options for `deprecate`.",
                "type": "Object"
              }
            ],
            "return": {
              "description": "computed property which creates an alias with a\ndeprecation to the original value for property.",
              "type": "ComputedProperty"
            },
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 60,
            "description": "A computed property macro that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { empty } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  @empty('todos') isDone;\n}\n\nlet todoList = new ToDoList(\n  ['Unit Test', 'Documentation', 'Release']\n);\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```",
            "since": "1.6.0",
            "itemtype": "method",
            "name": "empty",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if the value\nof the dependent property is null, an empty string, empty array, or empty\nfunction and false if the underlying value is not empty.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 335,
            "description": "A computed property that returns true if the provided dependent property is\nequal to the given value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { equal } from '@ember/object/computed';\n\nclass Hamster {\n  @equal('percentCarrotsEaten', 100) satisfied;\n}\n\nlet hamster = new Hamster();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```",
            "itemtype": "method",
            "name": "equal",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "String|Number|Object"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is equal to the given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/expand_properties.ts",
            "line": 9,
            "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nimport { expandProperties } from '@ember/object/computed';\n\nfunction echo(arg){ console.log(arg); }\n\nexpandProperties('foo.bar', echo);              //=> 'foo.bar'\nexpandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nexpandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nexpandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\nexpandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\nexpandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nexpandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
            "itemtype": "method",
            "name": "expandProperties",
            "static": 1,
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "pattern",
                "description": "The property pattern to expand.",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
                "type": "Function"
              }
            ],
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 431,
            "description": "Filters the array by the callback, like the `Array.prototype.filter` method.\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n- `array` is the dependant array itself.\n\n```javascript\nfunction filterCallback(item, index, array);\n```\n\nIn the callback, return a truthy value that coerces to true to keep the\nelement, or a falsy to reject it.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = Hamster.create([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n```\n\nYou can also use `@each.property` in your dependent key, the callback will\nstill use the underlying array:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores.@each.done', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n\nset(hamster.chores[2], 'done', true);\nhamster.remainingChores; // []\n```\n\nFinally, you can optionally pass an array of additional dependent keys as the\nsecond parameter to the macro, if your filter function relies on any external\nvalues:\n\n```javascript\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  doneKey = 'finished';\n\n  @filter('chores', ['doneKey'], function(chore, index, array) {\n    return !chore[this.doneKey];\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', finished: true },\n  { name: 'clean', finished: true },\n  { name: 'write more unit tests', finished: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', finished: false}]\n```",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "additionalDependentKeys",
                "description": "optional array of additional dependent keys",
                "type": "Array",
                "optional": true
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "the filtered array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 601,
            "description": "Filters the array by the property and value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filterBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filterBy('chores', 'done', false) remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```",
            "itemtype": "method",
            "name": "filterBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "*"
              }
            ],
            "return": {
              "description": "the filtered array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 380,
            "description": "A computed property that returns true if the provided dependent property is\ngreater than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gt } from '@ember/object/computed';\n\nclass Hamster {\n  @gt('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```",
            "itemtype": "method",
            "name": "gt",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is greater than given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 425,
            "description": "A computed property that returns true if the provided dependent property is\ngreater than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gte } from '@ember/object/computed';\n\nclass Hamster {\n  @gte('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```",
            "itemtype": "method",
            "name": "gte",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is greater or equal then given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 829,
            "description": "A computed property which returns a new array with all the elements\ntwo or more dependent arrays have in common.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { intersect } from '@ember/object/computed';\n\nclass FriendGroups {\n  constructor(adaFriends, charlesFriends) {\n    set(this, 'adaFriends', adaFriends);\n    set(this, 'charlesFriends', charlesFriends);\n  }\n\n  @intersect('adaFriends', 'charlesFriends') friendsInCommon;\n}\n\nlet groups = new FriendGroups(\n  ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n);\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```",
            "itemtype": "method",
            "name": "intersect",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the duplicated\nelements from the dependent arrays",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 470,
            "description": "A computed property that returns true if the provided dependent property is\nless than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lt } from '@ember/object/computed';\n\nclass Hamster {\n  @lt('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```",
            "itemtype": "method",
            "name": "lt",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is less then given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 515,
            "description": "A computed property that returns true if the provided dependent property is\nless than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lte } from '@ember/object/computed';\n\nclass Hamster {\n  @lte('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```",
            "itemtype": "method",
            "name": "lte",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is less or equal than given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 240,
            "description": "Returns an array mapped via the callback\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n\n```javascript\nfunction mapCallback(item, index);\n```\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', function(chore, index) {\n    return `${chore.toUpperCase()}!`;\n  })\n  excitingChores;\n});\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```\n\nYou can optionally pass an array of additional dependent keys as the second\nparameter to the macro, if your map function relies on any external values:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  shouldUpperCase = false;\n\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', ['shouldUpperCase'], function(chore, index) {\n    if (this.shouldUpperCase) {\n      return `${chore.toUpperCase()}!`;\n    } else {\n      return `${chore}!`;\n    }\n  })\n  excitingChores;\n}\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['clean!', 'write more unit tests!']\n\nset(hamster, 'shouldUpperCase', true);\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```",
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "additionalDependentKeys",
                "description": "optional array of additional\ndependent keys",
                "type": "Array",
                "optional": true
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "an array mapped via the callback",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 364,
            "description": "Returns an array mapped to the specified key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n}\n\nlet lordByron = new Person();\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```",
            "itemtype": "method",
            "name": "mapBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "an array mapped to the specified key",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 288,
            "description": "A computed property which matches the original value for the dependent\nproperty against a given RegExp, returning `true` if the value matches the\nRegExp and `false` if it does not.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { match } from '@ember/object/computed';\n\nclass User {\n  @match('email', /^.+@.+\\..+$/) hasValidEmail;\n}\n\nlet user = new User();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```",
            "itemtype": "method",
            "name": "match",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "regexp",
                "description": "",
                "type": "RegExp"
              }
            ],
            "return": {
              "description": "computed property which match the original value\nfor property against a given RegExp",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 113,
            "description": "A computed property that calculates the maximum value in the dependent array.\nThis will return `-Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, max } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @max('childAges') maxChildAge;\n}\n\nlet lordByron = new Person();\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe max of a list of Date objects will be the highest timestamp as a `Number`.\nThis behavior is consistent with `Math.max`.",
            "itemtype": "method",
            "name": "max",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the largest value in the dependentKey's\narray",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 177,
            "description": "A computed property that calculates the minimum value in the dependent array.\nThis will return `Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, min } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @min('childAges') minChildAge;\n}\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe min of a list of Date objects will be the lowest timestamp as a `Number`.\nThis behavior is consistent with `Math.min`.",
            "itemtype": "method",
            "name": "min",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the smallest value in the dependentKey's array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 155,
            "description": "A computed property that returns true if the value of the dependent property\nis null or undefined. This avoids errors from JSLint complaining about use of\n==, which can be technically confusing.\n\n```javascript\nimport { set } from '@ember/object';\nimport { none } from '@ember/object/computed';\n\nclass Hamster {\n  @none('food') isHungry;\n}\n\nlet hamster = new Hamster();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```",
            "itemtype": "method",
            "name": "none",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if original\nvalue for property is null or undefined.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 198,
            "description": "A computed property that returns the inverse boolean value of the original\nvalue for the dependent property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { not } from '@ember/object/computed';\n\nclass User {\n  loggedIn = false;\n\n  @not('loggedIn') isAnonymous;\n}\n\nlet user = new User();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```",
            "itemtype": "method",
            "name": "not",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns inverse of the\noriginal value for property",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 109,
            "description": "A computed property that returns true if the value of the dependent property\nis NOT null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { notEmpty } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(backpack) {\n    set(this, 'backpack', backpack);\n  }\n\n  @notEmpty('backpack') hasStuff\n}\n\nlet hamster = new Hamster(\n  ['Food', 'Sleeping Bag', 'Tent']\n);\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```",
            "itemtype": "method",
            "name": "notEmpty",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if original\nvalue for property is not empty.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 684,
            "description": "Where the `alias` computed macro aliases `get` and `set`, and allows for\nbidirectional data flow, the `oneWay` computed macro only provides an aliased\n`get`. The `set` will not mutate the upstream property, rather causes the\ncurrent property to become the value set. This causes the downstream property\nto permanently diverge from the upstream property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { oneWay }from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @oneWay('firstName') nickName;\n}\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear');\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```",
            "itemtype": "method",
            "name": "oneWay",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\nproperty to the original value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 606,
            "description": "A computed property which performs a logical `or` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first truthy value or last\nfalsy value just like JavaScript's `||` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { or } from '@ember/object/computed';\n\nclass Hamster {\n  @or('hasJacket', 'hasUmbrella') readyForRain;\n  @or('hasSunscreen', 'hasUmbrella') readyForBeach;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```",
            "itemtype": "method",
            "name": "or",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which performs a logical `or` on\nthe values of all the original values for properties.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 745,
            "description": "Where `oneWay` computed macro provides oneWay bindings, the `readOnly`\ncomputed macro provides a readOnly one way binding. Very often when using\nthe `oneWay` macro one does not also want changes to propagate back up, as\nthey will replace the value.\n\nThis prevents the reverse flow, and also throws an exception when it occurs.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { readOnly } from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @readOnly('firstName') nickName;\n});\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```",
            "itemtype": "method",
            "name": "readOnly",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\nproperty to the original value for property.",
              "type": "ComputedProperty"
            },
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 732,
            "description": "This is a more semantically meaningful alias of the `oneWay` computed macro,\nwhose name is somewhat ambiguous as to which direction the data flows.",
            "itemtype": "method",
            "name": "reads",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\n  property to the original value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 910,
            "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array that are not in the second dependent array.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { setDiff } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(likes, fruits) {\n    set(this, 'likes', likes);\n    set(this, 'fruits', fruits);\n  }\n\n  @setDiff('likes', 'fruits') wants;\n}\n\nlet hamster = new Hamster(\n  [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  [\n    'grape',\n    'kale',\n  ]\n);\n\nhamster.wants; // ['banana']\n```",
            "itemtype": "method",
            "name": "setDiff",
            "static": 1,
            "params": [
              {
                "name": "setAProperty",
                "description": "",
                "type": "String"
              },
              {
                "name": "setBProperty",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes a new array with all the items from the\nfirst dependent array that are not in the second dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 1039,
            "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array sorted based on a property or sort function. The sort\nmacro can be used in two different ways:\n\n1. By providing a sort callback function\n2. By providing an array of keys to sort the array\n\nIn the first form, the callback method you provide should have the following\nsignature:\n\n```javascript\nfunction sortCallback(itemA, itemB);\n```\n\n- `itemA` the first item to compare.\n- `itemB` the second item to compare.\n\nThis function should return negative number (e.g. `-1`) when `itemA` should\ncome before `itemB`. It should return positive number (e.g. `1`) when `itemA`\nshould come after `itemB`. If the `itemA` and `itemB` are equal this function\nshould return `0`.\n\nTherefore, if this function is comparing some numeric values, simple `itemA -\nitemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of\nseries of `if`.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', function(a, b){\n    if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority < b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n  priorityTodos;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nYou can also optionally pass an array of additional dependent keys as the\nsecond parameter, if your sort function is dependent on additional values that\ncould changes:\n\n```js\nimport EmberObject, { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  sortKey = 'priority';\n\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', ['sortKey'], function(a, b){\n    if (a[this.sortKey] > b[this.sortKey]) {\n      return 1;\n    } else if (a[this.sortKey] < b[this.sortKey]) {\n      return -1;\n    }\n\n    return 0;\n  })\n  sortedTodos;\n});\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nIn the second form, you should provide the key of the array of sort values as\nthe second parameter:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using standard ascending sort\n  todosSorting = ['name'];\n  @sort('todos', 'todosSorting') sortedTodos;\n\n  // using descending sort\n  todosSortingDesc = ['name:desc'];\n  @sort('todos', 'todosSortingDesc') sortedTodosDesc;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.sortedTodos; // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.sortedTodosDesc; // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n```",
            "itemtype": "method",
            "name": "sort",
            "static": 1,
            "params": [
              {
                "name": "itemsKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "sortDefinitionOrDependentKeys",
                "description": "The key of the sort definition (an array of sort properties),\nthe sort function, or an array of additional dependent keys",
                "type": "String|Function|Array"
              },
              {
                "name": "sortDefinition",
                "description": "the sort function (when used with additional dependent keys)",
                "type": "Function?"
              }
            ],
            "return": {
              "description": "computes a new sorted array based on the sort\nproperty array or callback function",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 76,
            "description": "A computed property that returns the sum of the values in the dependent array.\n\nExample:\n\n```javascript\nimport { sum } from '@ember/object/computed';\n\nclass Invoice {\n  lineItems = [1.00, 2.50, 9.99];\n\n  @sum('lineItems') total;\n}\n\nlet invoice = new Invoice();\n\ninvoice.total; // 13.49\n```",
            "itemtype": "method",
            "name": "sum",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the sum of all values in the\ndependentKey's array",
              "type": "ComputedProperty"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 782,
            "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { union } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits, vegetables) {\n    set(this, 'fruits', fruits);\n    set(this, 'vegetables', vegetables);\n  }\n\n  @union('fruits', 'vegetables') uniqueFruits;\n});\n\nlet hamster = new, Hamster(\n  [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```",
            "itemtype": "method",
            "name": "union",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the unique elements\nfrom one or more dependent arrays.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 657,
            "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniq } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniq('fruits') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  'banana',\n  'grape',\n  'kale',\n  'banana'\n]);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```",
            "itemtype": "method",
            "name": "uniq",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the\nunique elements from the dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 728,
            "description": "A computed property which returns a new array with all the unique elements\nfrom an array, with uniqueness determined by specific key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniqBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniqBy('fruits', 'id') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  { id: 1, 'banana' },\n  { id: 2, 'grape' },\n  { id: 3, 'peach' },\n  { id: 1, 'banana' }\n]);\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```",
            "itemtype": "method",
            "name": "uniqBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes a new array with all the\nunique elements from the dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          }
        ],
        "@ember/object/compat": [
          {
            "file": "packages/@ember/object/compat.ts",
            "line": 40,
            "description": "`@dependentKeyCompat` is decorator that can be used on _native getters_ that\nuse tracked properties. It exposes the getter to Ember's classic computed\nproperty and observer systems, so they can watch it for changes. It can be\nused in both native and classic classes.\n\nNative Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  @tracked firstName;\n  @tracked lastName;\n\n  @dependentKeyCompat\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nclass Profile {\n  constructor(person) {\n    set(this, 'person', person);\n  }\n\n  @computed('person.fullName')\n  get helloMessage() {\n    return `Hello, ${this.person.fullName}!`;\n  }\n}\n```\n\nClassic Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport EmberObject, { computed, observer, set } from '@ember/object';\n\nconst Person = EmberObject.extend({\n  firstName: tracked(),\n  lastName: tracked(),\n\n  fullName: dependentKeyCompat(function() {\n    return `${this.firstName} ${this.lastName}`;\n  }),\n});\n\nconst Profile = EmberObject.extend({\n  person: null,\n\n  helloMessage: computed('person.fullName', function() {\n    return `Hello, ${this.person.fullName}!`;\n  }),\n\n  onNameUpdated: observer('person.fullName', function() {\n    console.log('person name updated!');\n  }),\n});\n```\n\n`dependentKeyCompat()` can receive a getter function or an object containing\n`get`/`set` methods when used in classic classes, like computed properties.\n\nIn general, only properties which you _expect_ to be watched by older,\nuntracked clases should be marked as dependency compatible. The decorator is\nmeant as an interop layer for parts of Ember's older classic APIs, and should\nnot be applied to every possible getter/setter in classes. The number of\ndependency compatible getters should be _minimized_ wherever possible. New\napplication code should not need to use `@dependentKeyCompat`, since it is\nonly for interoperation with older code.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "dependentKeyCompat",
            "static": 1,
            "params": [
              {
                "name": "desc",
                "description": "A property descriptor containing\n                                           the getter and setter (when used in\n                                           classic classes)",
                "type": "PropertyDescriptor|undefined"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "PropertyDecorator"
            },
            "class": "@ember/object/compat",
            "module": "@ember/object"
          }
        ],
        "@ember/object/internals": [
          {
            "file": "packages/@ember/-internals/utils/lib/guid.ts",
            "line": 83,
            "description": "Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n`EmberObject`-based or not.\n\nYou can also use this method on DOM Element objects.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "guidFor",
            "params": [
              {
                "name": "obj",
                "description": "any object, string, number, Element, or primitive",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the unique guid for this instance.",
              "type": "String"
            },
            "class": "@ember/object/internals",
            "module": "@ember/object"
          }
        ],
        "@ember/object/evented": [
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 180,
            "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n``` javascript\nimport EmberObject from '@ember/object';\nimport { on } from '@ember/object/evented';\nimport { sendEvent } from '@ember/object/events';\n\nlet Job = EmberObject.extend({\n  logCompleted: on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nlet job = Job.create();\n\nsendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
              {
                "name": "eventNames",
                "description": "",
                "type": "String",
                "multiple": true
              },
              {
                "name": "func",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "the listener function, passed as last argument to on(...)",
              "type": "Function"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/evented",
            "module": "@ember/object"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember/object": [
          {
            "file": "packages/@ember/object/index.ts",
            "line": 51,
            "description": "Decorator that turns the target function into an Action which can be accessed\ndirectly by reference.\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n```hbs\n<!-- template.hbs -->\n<button {{action this.toggleShowing}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nDecorated actions also interop with the string style template actions:\n\n```hbs\n<!-- template.hbs -->\n<button {{action \"toggleShowing\"}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nIt also binds the function directly to the instance, so it can be used in any\ncontext and will correctly refer to the class it came from:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert this.toggleShowing}}\n  {{on \"click\" this.toggleShowing}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThis can also be used in JavaScript code directly:\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  constructor() {\n    super(...arguments);\n\n    // this.toggleShowing is still bound correctly when added to\n    // the event listener\n    document.addEventListener('click', this.toggleShowing);\n  }\n\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n\nThis is considered best practice, since it means that methods will be bound\ncorrectly no matter where they are used. By contrast, the `{{action}}` helper\nand modifier can also be used to bind context, but it will be required for\nevery usage of the method:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert (action this.toggleShowing)}}\n  {{on \"click\" (action this.toggleShowing)}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThey also do not have equivalents in JavaScript directly, so they cannot be\nused for other situations where binding would be useful.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "action",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "The function to turn into an action,\n                                     when used in classic classes",
                "type": "Function|undefined"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "PropertyDecorator"
            },
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/computed.ts",
            "line": 731,
            "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties with\nnative decorator syntax, mixins, or via `defineProperty()`.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\nYou can also provide a setter, either directly on the class using native class\nsyntax, or by passing a hash with `get` and `set` functions.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  set fullName(value) {\n    let [firstName, lastName] = value.split(/\\s+/);\n\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n\n    return value;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  })\n});\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n```\n\nWhen passed as an argument, the `set` function should accept two parameters,\n`key` and `value`. The value returned from `set` will be the new value of the\nproperty.\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._",
            "itemtype": "method",
            "name": "computed",
            "static": 1,
            "params": [
              {
                "name": "dependentKeys*",
                "description": "Optional dependent keys that trigger this computed property.",
                "type": "String",
                "optional": true
              },
              {
                "name": "func",
                "description": "The computed property function.",
                "type": "Function"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "ComputedDecorator"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/properties.ts",
            "line": 13,
            "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\nimport { defineProperty, computed } from '@ember/object';\n\n// ES5 compatible mode\ndefineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\ndefineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\ndefineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "defineProperty",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "the object to define this property on. This may be a prototype.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "the name of the property",
                "type": "String"
              },
              {
                "name": "desc",
                "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
                "type": "Descriptor",
                "optional": true
              },
              {
                "name": "data",
                "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
                "type": "*",
                "optional": true
              }
            ],
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_get.ts",
            "line": 51,
            "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nimport { get } from '@ember/object';\nget(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to retrieve from.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "The property key to retrieve",
                "type": "String"
              }
            ],
            "return": {
              "description": "the property value or `null`.",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/get_properties.ts",
            "line": 6,
            "description": "To get multiple properties at once, call `getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "",
                "type": "Object"
              },
              {
                "name": "list",
                "description": "of keys to get",
                "type": "String...|Array"
              }
            ],
            "return": {
              "description": "",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/index.ts",
            "line": 289,
            "description": "Specify a method that observes property changes.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { observer } from '@ember/object';\n\nexport default EmberObject.extend({\n  valueObserver: observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "observer",
            "params": [
              {
                "name": "propertyNames",
                "description": "",
                "type": "String",
                "multiple": true
              },
              {
                "name": "func",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "func"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_set.ts",
            "line": 17,
            "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change.\nIf the specified property is not defined on the object and the object\nimplements the `setUnknownProperty` method, then instead of setting the\nvalue of the property on the object, its `setUnknownProperty` handler\nwill be invoked with the two parameters `keyName` and `value`.\n\n```javascript\nimport { set } from '@ember/object';\nset(obj, \"name\", value);\n```",
            "itemtype": "method",
            "name": "set",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "The object to modify.",
                "type": "Object"
              },
              {
                "name": "keyName",
                "description": "The property key to set",
                "type": "String"
              },
              {
                "name": "value",
                "description": "The value to set",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the passed value.",
              "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/set_properties.ts",
            "line": 6,
            "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nimport EmberObject from '@ember/object';\nlet anObject = EmberObject.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
            "itemtype": "method",
            "name": "setProperties",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "properties",
                "description": "",
                "type": "Object"
              }
            ],
            "return": {
              "description": "properties"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/property_set.ts",
            "line": 121,
            "description": "Error-tolerant form of `set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.\n\n```javascript\nimport { trySet } from '@ember/object';\n\nlet obj = { name: \"Zoey\" };\ntrySet(obj, \"contacts.twitter\", \"@emberjs\");\n```",
            "itemtype": "method",
            "name": "trySet",
            "static": 1,
            "params": [
              {
                "name": "root",
                "description": "The object to modify.",
                "type": "Object"
              },
              {
                "name": "path",
                "description": "The property path to set",
                "type": "String"
              },
              {
                "name": "value",
                "description": "The value to set",
                "type": "Object"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object",
            "module": "@ember/object"
          }
        ],
        "@ember/object/events": [
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 28,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "A target object or a function",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "A function or the name of a function to be called on `target`",
                "type": "Function|String"
              },
              {
                "name": "once",
                "description": "A flag whether a function should only be called once",
                "type": "Boolean"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 162,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "hasListeners",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "if `obj` has listeners for event `eventName`",
              "type": "Boolean"
            },
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 62,
            "description": "Remove an event listener\n\nArguments should match those passed to `addListener`.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "A target object or a function",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "A function or the name of a function to be called on `target`",
                "type": "Function|String"
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 105,
            "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
            "itemtype": "method",
            "name": "sendEvent",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "eventName",
                "description": "",
                "type": "String"
              },
              {
                "name": "params",
                "description": "Optional parameters for each listener.",
                "type": "Array"
              }
            ],
            "return": {
              "description": "if the event was delivered to one or more actions",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/events",
            "module": "@ember/object"
          }
        ],
        "@ember/object/observers": [
          {
            "file": "packages/@ember/-internals/metal/lib/observer.ts",
            "line": 27,
            "itemtype": "method",
            "name": "addObserver",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "",
                "type": "Function|String",
                "optional": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/observers",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/observer.ts",
            "line": 55,
            "itemtype": "method",
            "name": "removeObserver",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": ""
              },
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "target",
                "description": "",
                "type": "Object|Function"
              },
              {
                "name": "method",
                "description": "",
                "type": "Function|String",
                "optional": true
              }
            ],
            "access": "public",
            "tagname": "",
            "class": "@ember/object/observers",
            "module": "@ember/object"
          }
        ],
        "@ember/object/computed": [
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 649,
            "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { alias } from '@ember/object/computed';\n\nclass Person {\n  name = 'Alex Matchneer';\n\n  @alias('name') nomen;\n}\n\nlet alex = new Person();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```",
            "itemtype": "method",
            "name": "alias",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates an alias to the\noriginal value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 560,
            "description": "A computed property that performs a logical `and` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first falsy value or last\ntruthy value just like JavaScript's `&&` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { and } from '@ember/object/computed';\n\nclass Hamster {\n  @and('hasTent', 'hasBackpack') readyForCamp;\n  @and('hasWalkingStick', 'hasBackpack') readyForHike;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```",
            "itemtype": "method",
            "name": "and",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which performs a logical `and` on\nthe values of all the original values for properties.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 240,
            "description": "A computed property that converts the provided dependent property into a\nboolean value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { bool } from '@ember/object/computed';\n\n\nclass Hamster {\n  @bool('numBananas') hasBananas\n}\n\nlet hamster = new Hamster();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```",
            "itemtype": "method",
            "name": "bool",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which converts to boolean the\noriginal value for property",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 980,
            "description": "A computed property that returns the array of values for the provided\ndependent properties.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { collect } from '@ember/object/computed';\n\nclass Hamster {\n  @collect('hat', 'shirt') clothes;\n}\n\nlet hamster = new Hamster();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```",
            "itemtype": "method",
            "name": "collect",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which maps values of all passed\nin properties to an array.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 796,
            "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property, but also print a deprecation warning.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { deprecatingAlias } from '@ember/object/computed';\n\nclass Hamster {\n  @deprecatingAlias('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n  bananaCount;\n}\n\nlet hamster = new Hamster();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```",
            "itemtype": "method",
            "name": "deprecatingAlias",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "options",
                "description": "Options for `deprecate`.",
                "type": "Object"
              }
            ],
            "return": {
              "description": "computed property which creates an alias with a\ndeprecation to the original value for property.",
              "type": "ComputedProperty"
            },
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 60,
            "description": "A computed property macro that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { empty } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  @empty('todos') isDone;\n}\n\nlet todoList = new ToDoList(\n  ['Unit Test', 'Documentation', 'Release']\n);\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```",
            "since": "1.6.0",
            "itemtype": "method",
            "name": "empty",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if the value\nof the dependent property is null, an empty string, empty array, or empty\nfunction and false if the underlying value is not empty.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 335,
            "description": "A computed property that returns true if the provided dependent property is\nequal to the given value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { equal } from '@ember/object/computed';\n\nclass Hamster {\n  @equal('percentCarrotsEaten', 100) satisfied;\n}\n\nlet hamster = new Hamster();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```",
            "itemtype": "method",
            "name": "equal",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "String|Number|Object"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is equal to the given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/metal/lib/expand_properties.ts",
            "line": 9,
            "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nimport { expandProperties } from '@ember/object/computed';\n\nfunction echo(arg){ console.log(arg); }\n\nexpandProperties('foo.bar', echo);              //=> 'foo.bar'\nexpandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nexpandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nexpandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\nexpandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\nexpandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nexpandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
            "itemtype": "method",
            "name": "expandProperties",
            "static": 1,
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "pattern",
                "description": "The property pattern to expand.",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
                "type": "Function"
              }
            ],
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 431,
            "description": "Filters the array by the callback, like the `Array.prototype.filter` method.\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n- `array` is the dependant array itself.\n\n```javascript\nfunction filterCallback(item, index, array);\n```\n\nIn the callback, return a truthy value that coerces to true to keep the\nelement, or a falsy to reject it.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = Hamster.create([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n```\n\nYou can also use `@each.property` in your dependent key, the callback will\nstill use the underlying array:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores.@each.done', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n\nset(hamster.chores[2], 'done', true);\nhamster.remainingChores; // []\n```\n\nFinally, you can optionally pass an array of additional dependent keys as the\nsecond parameter to the macro, if your filter function relies on any external\nvalues:\n\n```javascript\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  doneKey = 'finished';\n\n  @filter('chores', ['doneKey'], function(chore, index, array) {\n    return !chore[this.doneKey];\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', finished: true },\n  { name: 'clean', finished: true },\n  { name: 'write more unit tests', finished: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', finished: false}]\n```",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "additionalDependentKeys",
                "description": "optional array of additional dependent keys",
                "type": "Array",
                "optional": true
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "the filtered array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 601,
            "description": "Filters the array by the property and value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filterBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filterBy('chores', 'done', false) remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```",
            "itemtype": "method",
            "name": "filterBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "*"
              }
            ],
            "return": {
              "description": "the filtered array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 380,
            "description": "A computed property that returns true if the provided dependent property is\ngreater than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gt } from '@ember/object/computed';\n\nclass Hamster {\n  @gt('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```",
            "itemtype": "method",
            "name": "gt",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is greater than given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 425,
            "description": "A computed property that returns true if the provided dependent property is\ngreater than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gte } from '@ember/object/computed';\n\nclass Hamster {\n  @gte('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```",
            "itemtype": "method",
            "name": "gte",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is greater or equal then given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 829,
            "description": "A computed property which returns a new array with all the elements\ntwo or more dependent arrays have in common.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { intersect } from '@ember/object/computed';\n\nclass FriendGroups {\n  constructor(adaFriends, charlesFriends) {\n    set(this, 'adaFriends', adaFriends);\n    set(this, 'charlesFriends', charlesFriends);\n  }\n\n  @intersect('adaFriends', 'charlesFriends') friendsInCommon;\n}\n\nlet groups = new FriendGroups(\n  ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n);\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```",
            "itemtype": "method",
            "name": "intersect",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the duplicated\nelements from the dependent arrays",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 470,
            "description": "A computed property that returns true if the provided dependent property is\nless than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lt } from '@ember/object/computed';\n\nclass Hamster {\n  @lt('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```",
            "itemtype": "method",
            "name": "lt",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is less then given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 515,
            "description": "A computed property that returns true if the provided dependent property is\nless than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lte } from '@ember/object/computed';\n\nclass Hamster {\n  @lte('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```",
            "itemtype": "method",
            "name": "lte",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "Number"
              }
            ],
            "return": {
              "description": "computed property which returns true if the\noriginal value for property is less or equal than given value.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 240,
            "description": "Returns an array mapped via the callback\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n\n```javascript\nfunction mapCallback(item, index);\n```\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', function(chore, index) {\n    return `${chore.toUpperCase()}!`;\n  })\n  excitingChores;\n});\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```\n\nYou can optionally pass an array of additional dependent keys as the second\nparameter to the macro, if your map function relies on any external values:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  shouldUpperCase = false;\n\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', ['shouldUpperCase'], function(chore, index) {\n    if (this.shouldUpperCase) {\n      return `${chore.toUpperCase()}!`;\n    } else {\n      return `${chore}!`;\n    }\n  })\n  excitingChores;\n}\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['clean!', 'write more unit tests!']\n\nset(hamster, 'shouldUpperCase', true);\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```",
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "additionalDependentKeys",
                "description": "optional array of additional\ndependent keys",
                "type": "Array",
                "optional": true
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "an array mapped via the callback",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 364,
            "description": "Returns an array mapped to the specified key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n}\n\nlet lordByron = new Person();\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```",
            "itemtype": "method",
            "name": "mapBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "an array mapped to the specified key",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 288,
            "description": "A computed property which matches the original value for the dependent\nproperty against a given RegExp, returning `true` if the value matches the\nRegExp and `false` if it does not.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { match } from '@ember/object/computed';\n\nclass User {\n  @match('email', /^.+@.+\\..+$/) hasValidEmail;\n}\n\nlet user = new User();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```",
            "itemtype": "method",
            "name": "match",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "regexp",
                "description": "",
                "type": "RegExp"
              }
            ],
            "return": {
              "description": "computed property which match the original value\nfor property against a given RegExp",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 113,
            "description": "A computed property that calculates the maximum value in the dependent array.\nThis will return `-Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, max } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @max('childAges') maxChildAge;\n}\n\nlet lordByron = new Person();\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe max of a list of Date objects will be the highest timestamp as a `Number`.\nThis behavior is consistent with `Math.max`.",
            "itemtype": "method",
            "name": "max",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the largest value in the dependentKey's\narray",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 177,
            "description": "A computed property that calculates the minimum value in the dependent array.\nThis will return `Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, min } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @min('childAges') minChildAge;\n}\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe min of a list of Date objects will be the lowest timestamp as a `Number`.\nThis behavior is consistent with `Math.min`.",
            "itemtype": "method",
            "name": "min",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the smallest value in the dependentKey's array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 155,
            "description": "A computed property that returns true if the value of the dependent property\nis null or undefined. This avoids errors from JSLint complaining about use of\n==, which can be technically confusing.\n\n```javascript\nimport { set } from '@ember/object';\nimport { none } from '@ember/object/computed';\n\nclass Hamster {\n  @none('food') isHungry;\n}\n\nlet hamster = new Hamster();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```",
            "itemtype": "method",
            "name": "none",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if original\nvalue for property is null or undefined.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 198,
            "description": "A computed property that returns the inverse boolean value of the original\nvalue for the dependent property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { not } from '@ember/object/computed';\n\nclass User {\n  loggedIn = false;\n\n  @not('loggedIn') isAnonymous;\n}\n\nlet user = new User();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```",
            "itemtype": "method",
            "name": "not",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns inverse of the\noriginal value for property",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 109,
            "description": "A computed property that returns true if the value of the dependent property\nis NOT null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { notEmpty } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(backpack) {\n    set(this, 'backpack', backpack);\n  }\n\n  @notEmpty('backpack') hasStuff\n}\n\nlet hamster = new Hamster(\n  ['Food', 'Sleeping Bag', 'Tent']\n);\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```",
            "itemtype": "method",
            "name": "notEmpty",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which returns true if original\nvalue for property is not empty.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 684,
            "description": "Where the `alias` computed macro aliases `get` and `set`, and allows for\nbidirectional data flow, the `oneWay` computed macro only provides an aliased\n`get`. The `set` will not mutate the upstream property, rather causes the\ncurrent property to become the value set. This causes the downstream property\nto permanently diverge from the upstream property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { oneWay }from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @oneWay('firstName') nickName;\n}\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear');\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```",
            "itemtype": "method",
            "name": "oneWay",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\nproperty to the original value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 606,
            "description": "A computed property which performs a logical `or` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first truthy value or last\nfalsy value just like JavaScript's `||` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { or } from '@ember/object/computed';\n\nclass Hamster {\n  @or('hasJacket', 'hasUmbrella') readyForRain;\n  @or('hasSunscreen', 'hasUmbrella') readyForBeach;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```",
            "itemtype": "method",
            "name": "or",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computed property which performs a logical `or` on\nthe values of all the original values for properties.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 745,
            "description": "Where `oneWay` computed macro provides oneWay bindings, the `readOnly`\ncomputed macro provides a readOnly one way binding. Very often when using\nthe `oneWay` macro one does not also want changes to propagate back up, as\nthey will replace the value.\n\nThis prevents the reverse flow, and also throws an exception when it occurs.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { readOnly } from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @readOnly('firstName') nickName;\n});\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```",
            "itemtype": "method",
            "name": "readOnly",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\nproperty to the original value for property.",
              "type": "ComputedProperty"
            },
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/computed_macros.ts",
            "line": 732,
            "description": "This is a more semantically meaningful alias of the `oneWay` computed macro,\nwhose name is somewhat ambiguous as to which direction the data flows.",
            "itemtype": "method",
            "name": "reads",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computed property which creates a one way computed\n  property to the original value for property.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 910,
            "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array that are not in the second dependent array.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { setDiff } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(likes, fruits) {\n    set(this, 'likes', likes);\n    set(this, 'fruits', fruits);\n  }\n\n  @setDiff('likes', 'fruits') wants;\n}\n\nlet hamster = new Hamster(\n  [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  [\n    'grape',\n    'kale',\n  ]\n);\n\nhamster.wants; // ['banana']\n```",
            "itemtype": "method",
            "name": "setDiff",
            "static": 1,
            "params": [
              {
                "name": "setAProperty",
                "description": "",
                "type": "String"
              },
              {
                "name": "setBProperty",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes a new array with all the items from the\nfirst dependent array that are not in the second dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 1039,
            "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array sorted based on a property or sort function. The sort\nmacro can be used in two different ways:\n\n1. By providing a sort callback function\n2. By providing an array of keys to sort the array\n\nIn the first form, the callback method you provide should have the following\nsignature:\n\n```javascript\nfunction sortCallback(itemA, itemB);\n```\n\n- `itemA` the first item to compare.\n- `itemB` the second item to compare.\n\nThis function should return negative number (e.g. `-1`) when `itemA` should\ncome before `itemB`. It should return positive number (e.g. `1`) when `itemA`\nshould come after `itemB`. If the `itemA` and `itemB` are equal this function\nshould return `0`.\n\nTherefore, if this function is comparing some numeric values, simple `itemA -\nitemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of\nseries of `if`.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', function(a, b){\n    if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority < b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n  priorityTodos;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nYou can also optionally pass an array of additional dependent keys as the\nsecond parameter, if your sort function is dependent on additional values that\ncould changes:\n\n```js\nimport EmberObject, { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  sortKey = 'priority';\n\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', ['sortKey'], function(a, b){\n    if (a[this.sortKey] > b[this.sortKey]) {\n      return 1;\n    } else if (a[this.sortKey] < b[this.sortKey]) {\n      return -1;\n    }\n\n    return 0;\n  })\n  sortedTodos;\n});\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nIn the second form, you should provide the key of the array of sort values as\nthe second parameter:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using standard ascending sort\n  todosSorting = ['name'];\n  @sort('todos', 'todosSorting') sortedTodos;\n\n  // using descending sort\n  todosSortingDesc = ['name:desc'];\n  @sort('todos', 'todosSortingDesc') sortedTodosDesc;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.sortedTodos; // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.sortedTodosDesc; // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n```",
            "itemtype": "method",
            "name": "sort",
            "static": 1,
            "params": [
              {
                "name": "itemsKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "sortDefinitionOrDependentKeys",
                "description": "The key of the sort definition (an array of sort properties),\nthe sort function, or an array of additional dependent keys",
                "type": "String|Function|Array"
              },
              {
                "name": "sortDefinition",
                "description": "the sort function (when used with additional dependent keys)",
                "type": "Function?"
              }
            ],
            "return": {
              "description": "computes a new sorted array based on the sort\nproperty array or callback function",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 76,
            "description": "A computed property that returns the sum of the values in the dependent array.\n\nExample:\n\n```javascript\nimport { sum } from '@ember/object/computed';\n\nclass Invoice {\n  lineItems = [1.00, 2.50, 9.99];\n\n  @sum('lineItems') total;\n}\n\nlet invoice = new Invoice();\n\ninvoice.total; // 13.49\n```",
            "itemtype": "method",
            "name": "sum",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes the sum of all values in the\ndependentKey's array",
              "type": "ComputedProperty"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 782,
            "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { union } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits, vegetables) {\n    set(this, 'fruits', fruits);\n    set(this, 'vegetables', vegetables);\n  }\n\n  @union('fruits', 'vegetables') uniqueFruits;\n});\n\nlet hamster = new, Hamster(\n  [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```",
            "itemtype": "method",
            "name": "union",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the unique elements\nfrom one or more dependent arrays.",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 657,
            "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniq } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniq('fruits') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  'banana',\n  'grape',\n  'kale',\n  'banana'\n]);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```",
            "itemtype": "method",
            "name": "uniq",
            "static": 1,
            "params": [
              {
                "name": "propertyKey",
                "description": "",
                "type": "String",
                "multiple": true
              }
            ],
            "return": {
              "description": "computes a new array with all the\nunique elements from the dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/object/lib/computed/reduce_computed_macros.ts",
            "line": 728,
            "description": "A computed property which returns a new array with all the unique elements\nfrom an array, with uniqueness determined by specific key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniqBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniqBy('fruits', 'id') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  { id: 1, 'banana' },\n  { id: 2, 'grape' },\n  { id: 3, 'peach' },\n  { id: 1, 'banana' }\n]);\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```",
            "itemtype": "method",
            "name": "uniqBy",
            "static": 1,
            "params": [
              {
                "name": "dependentKey",
                "description": "",
                "type": "String"
              },
              {
                "name": "propertyKey",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "computes a new array with all the\nunique elements from the dependent array",
              "type": "ComputedProperty"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/computed",
            "module": "@ember/object"
          }
        ],
        "@ember/object/compat": [
          {
            "file": "packages/@ember/object/compat.ts",
            "line": 40,
            "description": "`@dependentKeyCompat` is decorator that can be used on _native getters_ that\nuse tracked properties. It exposes the getter to Ember's classic computed\nproperty and observer systems, so they can watch it for changes. It can be\nused in both native and classic classes.\n\nNative Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  @tracked firstName;\n  @tracked lastName;\n\n  @dependentKeyCompat\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nclass Profile {\n  constructor(person) {\n    set(this, 'person', person);\n  }\n\n  @computed('person.fullName')\n  get helloMessage() {\n    return `Hello, ${this.person.fullName}!`;\n  }\n}\n```\n\nClassic Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport EmberObject, { computed, observer, set } from '@ember/object';\n\nconst Person = EmberObject.extend({\n  firstName: tracked(),\n  lastName: tracked(),\n\n  fullName: dependentKeyCompat(function() {\n    return `${this.firstName} ${this.lastName}`;\n  }),\n});\n\nconst Profile = EmberObject.extend({\n  person: null,\n\n  helloMessage: computed('person.fullName', function() {\n    return `Hello, ${this.person.fullName}!`;\n  }),\n\n  onNameUpdated: observer('person.fullName', function() {\n    console.log('person name updated!');\n  }),\n});\n```\n\n`dependentKeyCompat()` can receive a getter function or an object containing\n`get`/`set` methods when used in classic classes, like computed properties.\n\nIn general, only properties which you _expect_ to be watched by older,\nuntracked clases should be marked as dependency compatible. The decorator is\nmeant as an interop layer for parts of Ember's older classic APIs, and should\nnot be applied to every possible getter/setter in classes. The number of\ndependency compatible getters should be _minimized_ wherever possible. New\napplication code should not need to use `@dependentKeyCompat`, since it is\nonly for interoperation with older code.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "dependentKeyCompat",
            "static": 1,
            "params": [
              {
                "name": "desc",
                "description": "A property descriptor containing\n                                           the getter and setter (when used in\n                                           classic classes)",
                "type": "PropertyDescriptor|undefined"
              }
            ],
            "return": {
              "description": "property decorator instance",
              "type": "PropertyDecorator"
            },
            "class": "@ember/object/compat",
            "module": "@ember/object"
          }
        ],
        "@ember/object/internals": [
          {
            "file": "packages/@ember/-internals/utils/lib/guid.ts",
            "line": 55,
            "description": "Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall `guidFor(obj)`, which return an existing guid if available.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "generateGuid",
            "static": 1,
            "params": [
              {
                "name": "obj",
                "description": "Object the guid will be used for. If passed in, the guid will\n  be saved on the object and reused whenever you pass the same object\n  again.\n\n  If no object is passed, just generate a new guid.",
                "type": "Object",
                "optional": true
              },
              {
                "name": "prefix",
                "description": "Prefix to place in front of the guid. Useful when you want to\n  separate the guid into separate namespaces.",
                "type": "String",
                "optional": true
              }
            ],
            "return": {
              "description": "the guid",
              "type": "String"
            },
            "class": "@ember/object/internals",
            "module": "@ember/object"
          },
          {
            "file": "packages/@ember/-internals/utils/lib/guid.ts",
            "line": 83,
            "description": "Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n`EmberObject`-based or not.\n\nYou can also use this method on DOM Element objects.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "guidFor",
            "params": [
              {
                "name": "obj",
                "description": "any object, string, number, Element, or primitive",
                "type": "Object"
              }
            ],
            "return": {
              "description": "the unique guid for this instance.",
              "type": "String"
            },
            "class": "@ember/object/internals",
            "module": "@ember/object"
          }
        ],
        "@ember/debug": [
          {
            "file": "packages/@ember/-internals/metal/lib/computed.ts",
            "line": 919,
            "description": "Allows checking if a given property on an object is a computed property. For the most part,\nthis doesn't matter (you would normally just access the property directly and use its value),\nbut for some tooling specific scenarios (e.g. the ember-inspector) it is important to\ndifferentiate if a property is a computed property or a \"normal\" property.\n\nThis will work on either a class's prototype or an instance itself.",
            "static": 1,
            "itemtype": "method",
            "name": "isComputed",
            "access": "private",
            "tagname": "",
            "class": "@ember/debug",
            "module": "@ember/object"
          }
        ],
        "@ember/object/evented": [
          {
            "file": "packages/@ember/-internals/metal/lib/events.ts",
            "line": 180,
            "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n``` javascript\nimport EmberObject from '@ember/object';\nimport { on } from '@ember/object/evented';\nimport { sendEvent } from '@ember/object/events';\n\nlet Job = EmberObject.extend({\n  logCompleted: on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nlet job = Job.create();\n\nsendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
              {
                "name": "eventNames",
                "description": "",
                "type": "String",
                "multiple": true
              },
              {
                "name": "func",
                "description": "",
                "type": "Function"
              }
            ],
            "return": {
              "description": "the listener function, passed as last argument to on(...)",
              "type": "Function"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/object/evented",
            "module": "@ember/object"
          }
        ]
      },
      "version": "5.6.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-5.6.0",
          "type": "project-version"
        }
      }
    }
  }
}