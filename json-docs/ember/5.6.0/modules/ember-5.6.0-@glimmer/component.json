{
  "data": {
    "id": "ember-5.6.0-@glimmer/component",
    "type": "module",
    "attributes": {
      "name": "@glimmer/component",
      "submodules": {},
      "elements": {},
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/glimmer-component-docs.ts",
      "line": 1,
      "description": "<html><head></head><body><p>A component is a reusable UI element that consists of a <code>.hbs</code> template and an\noptional JavaScript class that defines its behavior. For example, someone\nmight make a <code>button</code> in the template and handle the click behavior in the\nJavaScript file that shares the same name as the template.</p>\n<p>Components are broken down into two categories:</p>\n<ul>\n<li>Components <em>without</em> JavaScript, that are based only on a template. These\nare called Template-only or TO components.</li>\n<li>Components <em>with</em> JavaScript, which consist of a template and a backing\nclass.</li>\n</ul>\n<p>Ember ships with two types of JavaScript classes for components:</p>\n<ol>\n<li>Glimmer components, imported from <code>@glimmer/component</code>, which are the\ndefault components for Ember Octane (3.15) and more recent editions.</li>\n<li>Classic components, imported from <code>@ember/component</code>, which were the\ndefault for older editions of Ember (pre 3.15).</li>\n</ol>\n<p>Below is the documentation for Template-only and Glimmer components. If you\nare looking for the API documentation for Classic components, it is\n<a href=\"/ember/release/classes/Component\">available here</a>. The source code for\nGlimmer components can be found in <a href=\"https://github.com/glimmerjs/glimmer.js/tree/master/packages/%40glimmer/component\"><code>@glimmer/component</code></a>.</p>\n<h2 id=\"defining-a-template-only-component\">Defining a Template-only Component</h2>\n<p>The simplest way to create a component is to create a template file in\n<code>app/templates/components</code>. For example, if you name a template\n<code>app/templates/components/person-profile.hbs</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{@<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">person.avatar</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">'signature'</span>&gt;</span></span><span class=\"template-variable\">{{@<span class=\"name\">person.signature</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You will be able to use <code>&lt;PersonProfile /&gt;</code> to invoke this component elsewhere\nin your application:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that component names are capitalized here in order to distinguish them\nfrom regular HTML elements, but they are dasherized in the file system.</p>\n<p>While the angle bracket invocation form is generally preferred, it is also\npossible to invoke the same component with the <code>{{person-profile}}</code> syntax:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">person-profile</span> <span class=\"attr\">person</span>=this.currentUser}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that with this syntax, you use dashes in the component name and\narguments are passed without the <code>@</code> sign.</p>\n<p>In both cases, Ember will render the content of the component template we\ncreated above. The end result will be something like this:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;h1&gt;Tomster&lt;/h1&gt;\n&lt;img src=<span class=\"string\">\"https://emberjs.com/tomster.jpg\"</span>&gt;\n&lt;p <span class=\"keyword\">class</span>='<span class=\"symbol\">signature</span>'&gt;<span class=\"symbol\">Out</span> <span class=\"symbol\">of</span> <span class=\"symbol\">office</span> <span class=\"symbol\">this</span> <span class=\"symbol\">week</span>&lt;/<span class=\"symbol\">p</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"file-system-nesting\">File System Nesting</h2>\n<p>Components can be nested inside sub-folders for logical groupping. For\nexample, if we placed our template in\n<code>app/templates/components/person/short-profile.hbs</code>, we can invoke it as\n<code>&lt;Person::ShortProfile /&gt;</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\">&lt;Person::ShortProfile @person=</span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"> /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Or equivalently, <code>{{person/short-profile}}</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">person/short-profile</span> <span class=\"attr\">person</span>=this.currentUser}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"using-blocks\">Using Blocks</h2>\n<p>You can use <code>yield</code> inside a template to include the <strong>contents</strong> of any block\nattached to the component. For instance, if we added a <code>{{yield}}</code> to our\ncomponent like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{@<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>We could then invoke it like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Admin mode<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or with curly syntax like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">person-profile</span> <span class=\"attr\">person</span>=this.currentUser}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Admin mode<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\">person-profile</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the content passed in between the brackets of the component would be\nrendered in the same place as the <code>{{yield}}</code> within it, replacing it.</p>\n<p>Blocks are executed in their original context, meaning they have access to the\nscope and any in-scope variables where they were defined.</p>\n<h3 id=\"passing-parameters-to-blocks\">Passing parameters to blocks</h3>\n<p>You can also pass positional parameters to <code>{{yield}}</code>, which are then made\navailable in the block:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{@<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.signature}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>We can then use this value in the block like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">signature</span>|&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">signature</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"passing-multiple-blocks\">Passing multiple blocks</h3>\n<p>You can pass multiple blocks to a component by giving them names, and\nspecifying which block you are yielding to with <code>{{yield}}</code>. For instance, if\nwe wanted to add a way for users to customize the title of our\n<code>&lt;PersonProfile&gt;</code> component, we could add a named block inside of the header:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> <span class=\"attr\">to</span>=<span class=\"string\">\"title\"</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This component could then be invoked like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  &lt;:title&gt;</span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser.name</span>}}</span><span class=\"language-xml\">&lt;/:title&gt;\n  &lt;:default&gt;</span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser.signature</span>}}</span><span class=\"language-xml\">&lt;/:default&gt;\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When passing named blocks, you must name every block, including the <code>default</code>\nblock, which is the block that is defined if you do not pass a <code>to</code> parameter\nto <code>{{yield}}</code>. Whenever you invoke a component without passing explicitly\nnamed blocks, the passed block is considered the <code>default</code> block.</p>\n<h3 id=\"passing-parameters-to-named-blocks\">Passing parameters to named blocks</h3>\n<p>You can also pass parameters to named blocks:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.name <span class=\"attr\">to</span>=<span class=\"string\">\"title\"</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.signature}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>These parameters can then be used like so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  &lt;:title as |name|&gt;</span><span class=\"template-variable\">{{<span class=\"name\">name</span>}}</span><span class=\"language-xml\">&lt;/:title&gt;\n  &lt;:default as |signature|&gt;</span><span class=\"template-variable\">{{<span class=\"name\">signature</span>}}</span><span class=\"language-xml\">&lt;/:default&gt;\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"checking-to-see-if-a-block-exists\">Checking to see if a block exists</h3>\n<p>You can also check to see if a block exists using the <code>(has-block)</code> keyword,\nand conditionally use it, or provide a default template instead.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">has-block</span> <span class=\"string\">\"title\"</span>)}}</span><span class=\"language-xml\">\n    </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.name <span class=\"attr\">to</span>=<span class=\"string\">\"title\"</span>}}</span><span class=\"language-xml\">\n  </span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n    </span><span class=\"template-variable\">{{@<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\">\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">has-block</span>)}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.signature}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{@<span class=\"name\">person.signature</span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>With this template, we can then optionally pass in one block, both blocks, or\nnone at all:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! passing both blocks }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  &lt;:title as |name|&gt;</span><span class=\"template-variable\">{{<span class=\"name\">name</span>}}</span><span class=\"language-xml\">&lt;/:title&gt;\n  &lt;:default as |signature|&gt;</span><span class=\"template-variable\">{{<span class=\"name\">signature</span>}}</span><span class=\"language-xml\">&lt;/:default&gt;\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span>\n\n</span><span class=\"comment\">{{! passing just the title block }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  &lt;:title as |name|&gt;</span><span class=\"template-variable\">{{<span class=\"name\">name</span>}}</span><span class=\"language-xml\">&lt;/:title&gt;\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span>\n\n</span><span class=\"comment\">{{! passing just the default block }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">signature</span>|&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">signature</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">PersonProfile</span>&gt;</span>\n\n</span><span class=\"comment\">{{! not passing any blocks }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">PersonProfile</span> @<span class=\"attr\">person</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.currentUser</span>}}</span><span class=\"language-xml\"><span class=\"tag\">/&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"checking-to-see-if-a-block-has-parameters\">Checking to see if a block has parameters</h3>\n<p>We can also check if a block receives parameters using the <code>(has-block-params)</code>\nkeyword, and conditionally yield different values if so.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">has-block-params</span>)}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> @person.signature}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"customizing-components-with-javascript\">Customizing Components With JavaScript</h2>\n<p>To add JavaScript to a component, create a JavaScript file in the same\nlocation as the template file, with the same name, and export a subclass\nof <code>Component</code> as the default value. For example, to add Javascript to the\n<code>PersonProfile</code> component which we defined above, we would create\n<code>app/components/person-profile.js</code> and export our class as the default, like\nso:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonProfileComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  get displayName() {\n    let { title, firstName, lastName } = <span class=\"keyword\">this</span>.args.person;\n\n    <span class=\"keyword\">if</span> (title) {\n      <span class=\"keyword\">return</span> `${title} ${lastName}`;\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> `${firstName} ${lastName}`;\n    }\n  })\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can add your own properties, methods, and lifecycle hooks to this\nsubclass to customize its behavior, and you can reference the instance of the\nclass in your template using <code>{{this}}</code>. For instance, we could access the\n<code>displayName</code> property of our <code>PersonProfile</code> component instance in the\ntemplate like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">profile.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">this.displayName</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"constructor\"><code>constructor</code></h2>\n<p>params: <code>owner</code> object and <code>args</code> object</p>\n<p>Constructs a new component and assigns itself the passed properties. The\nconstructor is run whenever a new instance of the component is created, and\ncan be used to setup the initial state of the component.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  constructor(owner, args) {\n    <span class=\"keyword\">super</span>(owner, args);\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.args.displayMode === 'list') {\n      <span class=\"keyword\">this</span>.items = [];\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Service injections and arguments are available in the constructor.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n<span class=\"keyword\">import</span> { service } from '<span class=\"meta\">@ember</span>/service';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@service</span> myAnimations;\n\n  constructor(owner, args) {\n    <span class=\"keyword\">super</span>(owner, args);\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.args.fadeIn === <span class=\"literal\">true</span>) {\n      <span class=\"keyword\">this</span>.myAnimations.register(<span class=\"keyword\">this</span>, 'fade-in');\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"willdestroy\"><code>willDestroy</code></h2>\n<p><code>willDestroy</code> is called after the component has been removed from the DOM, but\nbefore the component is fully destroyed. This lifecycle hook can be used to\ncleanup the component and any related state.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n<span class=\"keyword\">import</span> { service } from '<span class=\"meta\">@ember</span>/service';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@service</span> myAnimations;\n\n  willDestroy() {\n    <span class=\"keyword\">super</span>.willDestroy(...arguments);\n\n    <span class=\"keyword\">this</span>.myAnimations.unregister(<span class=\"keyword\">this</span>);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"args\"><code>args</code></h2>\n<p>The <code>args</code> property of Glimmer components is an object that contains the\n<em>arguments</em> that are passed to the component. For instance, the\nfollowing component usage:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SomeComponent</span> @<span class=\"attr\">fadeIn</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">true</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in the following <code>args</code> object to be passed to the component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{ <span class=\"attr\">fadeIn:</span> <span class=\"literal\">true</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>args</code> can be accessed at any point in the component lifecycle, including\n<code>constructor</code> and <code>willDestroy</code>. They are also automatically marked as tracked\nproperties, and they can be depended on as computed property dependencies:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n<span class=\"keyword\">import</span> { computed } from '<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>'</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n\n  <span class=\"meta\">@computed</span>('args.someValue')\n  get computedGetter() {\n    <span class=\"comment\">// updates whenever args.someValue updates</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.args.someValue;\n  }\n\n  get standardGetter() {\n    <span class=\"comment\">// updates whenever args.anotherValue updates (Ember 3.13+)</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.args.anotherValue;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"isdestroying\"><code>isDestroying</code></h2>\n<p>A boolean flag to tell if the component is in the process of destroying. This is set to\ntrue before <code>willDestroy</code> is called.</p>\n<h2 id=\"isdestroyed\"><code>isDestroyed</code></h2>\n<p>A boolean to tell if the component has been fully destroyed. This is set to true\nafter <code>willDestroy</code> is called.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "parent": null,
      "publicclasses": [],
      "privateclasses": [],
      "staticfunctions": {},
      "allstaticfunctions": {},
      "version": "5.6.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-5.6.0",
          "type": "project-version"
        }
      }
    }
  }
}