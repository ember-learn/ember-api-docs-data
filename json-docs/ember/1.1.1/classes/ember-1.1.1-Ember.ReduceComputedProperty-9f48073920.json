{
  "data": {
    "id": "ember-1.1.1-Ember.ReduceComputedProperty",
    "type": "class",
    "attributes": {
      "name": "Ember.ReduceComputedProperty",
      "shortname": "Ember.ReduceComputedProperty",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "../packages/ember-runtime/lib/computed/reduce_computed.js",
      "line": 386,
      "description": "<html><head></head><body><p>A computed property whose dependent keys are arrays and which is updated with\n&quot;one at a time&quot; semantics.</p>\n</body></html>",
      "extends": "Ember.ComputedProperty",
      "is_constructor": 1,
      "methods": [
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 195,
          "description": "<html><head></head><body><p>Properties are cacheable by default. Computed property will automatically\ncache the return value of your function until one of the dependent keys changes.</p>\n<p>Call <code>volatile()</code> to set it into non-cached mode. When in this mode\nthe computed property will not automatically cache the return value.</p>\n<p>However, if a property is properly observable, there is no reason to disable\ncaching.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheable",
          "params": [
            {
              "name": "aFlag",
              "description": "optional set to `false` to disable caching",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "this",
            "type": "Ember.ComputedProperty"
          },
          "chainable": 1,
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 215,
          "description": "<html><head></head><body><p>Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyApp</span>.</span></span>outsideService = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>create({\n  value: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">OutsideService</span>.</span></span>get<span class=\"constructor\">Value()</span>;\n  }.property<span class=\"literal\">()</span>.volatile<span class=\"literal\">()</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "volatile",
          "return": {
            "description": "this",
            "type": "Ember.ComputedProperty"
          },
          "chainable": 1,
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 235,
          "description": "<html><head></head><body><p>Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyApp</span>.</span></span>person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>create({\n  guid: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    return &apos;guid-guid-guid&apos;;\n  }.property<span class=\"literal\">()</span>.read<span class=\"constructor\">Only()</span>\n});\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyApp</span>.</span></span>person.set(&apos;guid&apos;, &apos;<span class=\"keyword\">new</span>-guid&apos;); <span class=\"comment\">// will throw an exception</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readOnly",
          "return": {
            "description": "this",
            "type": "Ember.ComputedProperty"
          },
          "chainable": 1,
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 258,
          "description": "<html><head></head><body><p>Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>MyApp.president = Ember.Object.create({\n  fullName: Ember.computed(function() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n\n    <span class=\"comment\">// Tell Ember that this computed property depends on firstName</span>\n    <span class=\"comment\">// and lastName</span>\n  }).property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "property",
          "params": [
            {
              "name": "path",
              "description": "zero or more property paths",
              "type": "String",
              "multiple": true
            }
          ],
          "return": {
            "description": "this",
            "type": "Ember.ComputedProperty"
          },
          "chainable": 1,
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 287,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>The hash that you pass to the <code>meta()</code> function will be saved on the\ncomputed property descriptor under the <code>_meta</code> key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the <code>metaForProperty()</code> function.</p>\n</body></html>",
          "itemtype": "method",
          "name": "meta",
          "params": [
            {
              "name": "meta",
              "description": "",
              "type": "Hash"
            }
          ],
          "chainable": 1,
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 341,
          "description": "<html><head></head><body><p>Access the value of the function backing the computed property.\nIf this property has already been cached, return the cached result.\nOtherwise, call the function passing the property name as an argument.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>Person = Ember.Object.extend({\n  fullName: function(keyName) {\n    <span class=\"comment\">// the keyName parameter is &apos;fullName&apos; in this case.</span>\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n  }.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)\n});\n\n\n<span class=\"keyword\">var</span> tom = Person.create({\n  firstName: <span class=\"string\">&quot;Tom&quot;</span>,\n  lastName: <span class=\"string\">&quot;Dale&quot;</span>\n});\n\ntom.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>) <span class=\"comment\">// &quot;Tom Dale&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The key being accessed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The return value of the function backing the CP.",
            "type": "Object"
          },
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        },
        {
          "file": "../packages/ember-metal/lib/computed.js",
          "line": 384,
          "description": "<html><head></head><body><p>Set the value of a computed property. If the function that backs your\ncomputed property does not accept arguments then the default action for\nsetting would be to define the property on the current object, and set\nthe value of the property to the value being set.</p>\n<p>Generally speaking if you intend for your computed property to be set\nyour backing function should accept either two or three arguments.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The key being accessed.",
              "type": "String"
            },
            {
              "name": "newValue",
              "description": "The new value being assigned.",
              "type": "Object"
            },
            {
              "name": "oldValue",
              "description": "The old value being replaced.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The return value of the function backing the CP.",
            "type": "Object"
          },
          "class": "Ember.ReduceComputedProperty",
          "module": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ComputedProperty"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.1.1-Ember.ComputedProperty",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.1.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.1.1",
          "type": "project-version"
        }
      }
    }
  }
}