{
  "data": {
    "id": "ember-1.1.1-Ember.PromiseProxyMixin",
    "type": "class",
    "attributes": {
      "name": "Ember.PromiseProxyMixin",
      "shortname": "Ember.PromiseProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "",
      "file": "../packages/ember-runtime/lib/mixins/promise_proxy.js",
      "line": 24,
      "description": "<html><head></head><body><p>A low level mixin making ObjectProxy, ObjectController or ArrayController&apos;s promise aware.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>var ObjectPromiseController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ObjectController</span>.</span></span>extend(Ember.PromiseProxyMixin);\n\nvar controller = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">ObjectPromiseController</span>.</span></span>create({\n  promise: $.get<span class=\"constructor\">JSON(&apos;<span class=\"operator\">/</span><span class=\"params\">some</span><span class=\"operator\">/</span><span class=\"params\">remote</span><span class=\"operator\">/</span><span class=\"params\">data</span>.<span class=\"params\">json</span>&apos;)</span>\n});\n\ncontroller.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(json){\n   <span class=\"comment\">// the json</span>\n}, <span class=\"keyword\">function</span>(reason) {\n   <span class=\"comment\">// the reason why you have no json</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>the controller has bindable attributes which\ntrack the promises life cycle</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>controller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isPending&apos;</span>)   <span class=\"comment\">//=&gt; true</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isSettled&apos;</span>)  <span class=\"comment\">//=&gt; false</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isRejected&apos;</span>)  <span class=\"comment\">//=&gt; false</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isFulfilled&apos;</span>) <span class=\"comment\">//=&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When the the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>controller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isPending&apos;</span>)   <span class=\"comment\">//=&gt; false</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isSettled&apos;</span>)   <span class=\"comment\">//=&gt; true</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isRejected&apos;</span>)  <span class=\"comment\">//=&gt; false</span>\ncontroller.<span class=\"built_in\">get</span>(<span class=\"string\">&apos;isFulfilled&apos;</span>) <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>As the controller is an ObjectController, and the json now its content,\nall the json properties will be available directly from the controller.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Assuming the following json:</span>\n{\n  <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Stefan&apos;</span>,\n  <span class=\"attribute\">lastName</span>: <span class=\"string\">&apos;Penner&apos;</span>\n}\n\n<span class=\"comment\">// both properties will accessible on the controller</span>\n<span class=\"selector-tag\">controller</span><span class=\"selector-class\">.get</span>(<span class=\"string\">&apos;firstName&apos;</span>) <span class=\"comment\">//=&gt; &apos;Stefan&apos;</span>\n<span class=\"selector-tag\">controller</span><span class=\"selector-class\">.get</span>(<span class=\"string\">&apos;lastName&apos;</span>)  <span class=\"comment\">//=&gt; &apos;Penner&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the controller is backing a template, the attributes are \nbindable from within that template</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"builtin-name\">if</span></span> isPending}}</span><span class=\"xml\">\n  loading...\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">else</span>}}</span><span class=\"xml\">\n  firstName: </span><span class=\"template-variable\">{{firstName}}</span><span class=\"xml\">\n  lastName: </span><span class=\"template-variable\">{{lastName}}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"builtin-name\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.1.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.1.1",
          "type": "project-version"
        }
      }
    }
  }
}