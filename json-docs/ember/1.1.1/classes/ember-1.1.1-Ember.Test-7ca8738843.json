{
  "data": {
    "id": "ember-1.1.1-Ember.Test",
    "type": "class",
    "attributes": {
      "name": "Ember.Test",
      "shortname": "Ember.Test",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-testing",
      "namespace": "Ember",
      "file": "../packages/ember-testing/lib/test.js",
      "line": 10,
      "description": "<html><head></head><body><p>This is a container for an assortment of testing related functionality:</p>\n<ul>\n<li>Choose your default test adapter (for your framework of choice).</li>\n<li>Register/Unregister additional test helpers.</li>\n<li>Setup callbacks to be fired when the test helpers are injected into\nyour application.</li>\n</ul>\n</body></html>",
      "methods": [
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 185,
          "description": "<html><head></head><body><p>Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>visit(<span class=\"string\">&apos;posts/index&apos;</span>).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> {\n  // <span class=\"built_in\">assert</span> something\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "visit",
          "params": [
            {
              "name": "url",
              "description": "the name of the route",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 204,
          "description": "<html><head></head><body><p>Clicks an element and triggers any actions triggered by the element&apos;s <code>click</code>\nevent.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>click(<span class=\"string\">&apos;.some-jQuery-selector&apos;</span>).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> {\n // <span class=\"built_in\">assert</span> something\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "click",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 222,
          "description": "<html><head></head><body><p>Simulates a key event, e.g. <code>keypress</code>, <code>keydown</code>, <code>keyup</code> with the desired keyCode</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>key<span class=\"constructor\">Event(&apos;.<span class=\"params\">some</span>-<span class=\"params\">jQuery</span>-<span class=\"params\">selector</span>&apos;, &apos;<span class=\"params\">keypress</span>&apos;, 13)</span>.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "keyEvent",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            },
            {
              "name": "the",
              "description": "type of key event, e.g. `keypress`, `keydown`, `keyup`",
              "type": "String"
            },
            {
              "name": "the",
              "description": "keyCode of the simulated key event",
              "type": "Number"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 241,
          "description": "<html><head></head><body><p>Fills in an input element with some text.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fill<span class=\"constructor\">In(&apos;#<span class=\"params\">email</span>&apos;, &apos;<span class=\"params\">you</span>@<span class=\"params\">example</span>.<span class=\"params\">com</span>&apos;)</span>.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n  <span class=\"comment\">// assert something</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "fillIn",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector finding an input element on the DOM\nto fill text with",
              "type": "String"
            },
            {
              "name": "text",
              "description": "text to place inside the input element",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 260,
          "description": "<html><head></head><body><p>Finds an element in the context of the app&apos;s container element. A simple alias\nfor <code>app.$(selector)</code>.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">var</span> <span class=\"variable\">$el</span> = find(<span class=\"string\">&apos;.my-selector);</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "selector",
              "description": "jQuery string selector for element lookup",
              "type": "String"
            }
          ],
          "return": {
            "description": "jQuery object representing the results of the query",
            "type": "Object"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 276,
          "description": "<html><head></head><body><p>Like <code>find</code>, but throws an error if the element selector returns no results\nExample:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">var</span> <span class=\"symbol\">$el</span> = findWithAssert(<span class=\"string\">&apos;.doesnt-exist&apos;</span>); <span class=\"comment\">// throws error</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "findWithAssert",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector string for finding an element within\n the DOM",
              "type": "String"
            }
          ],
          "return": {
            "description": "jQuery object representing the results of the query",
            "type": "Object"
          },
          "throws": [
            "{Error} throws error if jQuery object returned has a length of 0"
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 294,
          "description": "<html><head></head><body><p>Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.</p>\n<p>This is most often used as the return value for the helper functions (see &apos;click&apos;,\n&apos;fillIn&apos;,&apos;visit&apos;,etc).</p>\n<p>Example:</p>\n<p>```\nEmber.Test.registerHelper(&apos;loginUser&apos;, function(app, username, password) {\n  visit(&apos;secured/path/here&apos;)\n  .fillIn(&apos;#username&apos;, username)\n  .fillIn(&apos;#password&apos;, username)\n  .click(&apos;.submit&apos;)</p>\n<p>  return wait(app);\n});</p>\n</body></html>",
          "itemtype": "method",
          "name": "wait",
          "params": [
            {
              "name": "value",
              "description": "The value to be returned.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "\n```",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/support.js",
          "line": 8,
          "description": "<html><head></head><body><p>This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "testCheckboxClick",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 23,
          "description": "<html><head></head><body><p><code>registerHelper</code> is used to register a test helper that will be injected\nwhen <code>App.injectTestHelpers</code> is called.</p>\n<p>The helper method will always be called with the current Application as\nthe first parameter.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>register<span class=\"constructor\">Helper(&apos;<span class=\"params\">boot</span>&apos;, <span class=\"params\">function</span>(<span class=\"params\">app</span>)</span> {\n    <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>run(app, app.deferReadiness);\n  });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This helper can later be called without arguments because it will be\ncalled with <code>app</code> as the first parameter.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>  App = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Application</span>.</span></span>create<span class=\"literal\">()</span>;\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>inject<span class=\"constructor\">TestHelpers()</span>;\n  boot<span class=\"literal\">()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Whenever you register a helper that performs async operations, make sure\nyou <code>return wait();</code> at the end of the helper.</p>\n<p>If an async helper also needs to return a value, pass it to the <code>wait</code>\nhelper as a first argument:\n<code>return wait(val);</code></p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerHelper",
          "params": [
            {
              "name": "name",
              "description": "The name of the helper method to add.",
              "type": "String"
            },
            {
              "name": "helperMethod",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 61,
          "description": "<html><head></head><body><p>Remove a previously added helper method.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>unregister<span class=\"constructor\">Helper(&apos;<span class=\"params\">wait</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregisterHelper",
          "params": [
            {
              "name": "name",
              "description": "The helper to remove.",
              "type": "String"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 81,
          "description": "<html><head></head><body><p>Used to register callbacks to be fired whenever <code>App.injectTestHelpers</code>\nis called.</p>\n<p>The callback will receive the current application as an argument.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>on<span class=\"constructor\">InjectHelpers(<span class=\"params\">function</span>()</span> {\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"constructor\">$(<span class=\"params\">document</span>)</span>.ajax<span class=\"constructor\">Start(<span class=\"params\">function</span>()</span> {\n    <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>pendingAjaxRequests++;\n  });\n\n  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span><span class=\"constructor\">$(<span class=\"params\">document</span>)</span>.ajax<span class=\"constructor\">Stop(<span class=\"params\">function</span>()</span> {\n    <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>pendingAjaxRequests--;\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "onInjectHelpers",
          "params": [
            {
              "name": "callback",
              "description": "The function to be called.",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 108,
          "description": "<html><head></head><body><p>This returns a thenable tailored for testing.  It catches failed\n<code>onSuccess</code> callbacks and invokes the <code>Ember.Test.adapter.exception</code>\ncallback in the last chained then.</p>\n<p>This method should be returned by async helpers such as <code>wait</code>.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "promise",
          "params": [
            {
              "name": "resolver",
              "description": "The function used to resolve the promise.",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 183,
          "description": "<html><head></head><body><p>This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router&apos;s\nlocation to &apos;none&apos;, so that the window&apos;s location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework).</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>setup<span class=\"constructor\">ForTesting()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "setupForTesting",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 212,
          "description": "<html><head></head><body><p>This injects the test helpers into the window&apos;s scope. If a function of the\nsame name has already been defined it will be cached (so that it can be reset\nif the helper is removed with <code>unregisterHelper</code> or <code>removeTestHelpers</code>).</p>\n<p>   Any callbacks registered with <code>onInjectHelpers</code> will be called once the\n   helpers have been injected.</p>\n<p>  Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>inject<span class=\"constructor\">TestHelpers()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "injectTestHelpers",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 239,
          "description": "<html><head></head><body><p>This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span></span>remove<span class=\"constructor\">TestHelpers()</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "removeTestHelpers",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 146,
          "description": "<html><head></head><body><p>Used to allow ember-testing to communicate with a specific testing\nframework.</p>\n<p>You can manually set it before calling <code>App.setupForTesting()</code>.</p>\n<p>Example:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Test</span>.</span></span>adapter = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyCustomAdapter</span>.</span></span>create<span class=\"literal\">()</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If you do not set it, ember-testing will default to <code>Ember.Test.QUnitAdapter</code>.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "adapter",
          "type": "{Class} The adapter to be used.",
          "default": "Ember.Test.QUnitAdapter",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 176,
          "itemtype": "property",
          "name": "testHelpers",
          "type": "{Object}",
          "default": "{}",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.1.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.1.1",
          "type": "project-version"
        }
      }
    }
  }
}