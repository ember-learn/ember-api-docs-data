{
  "data": {
    "id": "ember-2.17.2-Component",
    "type": "class",
    "attributes": {
      "name": "Component",
      "shortname": "Component",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/ember-glimmer/lib/component.js",
      "line": 35,
      "description": "A `Component` is a view that is completely\nisolated. Properties accessed in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.\n\nThe easiest way to create a `Component` is via\na template. If you name a template\n`app/components/my-foo.hbs`, you will be able to use\n`{{my-foo}}` in other templates, which will make\nan instance of the isolated component.\n\n```handlebars {data-filename=app/components/my-foo.hbs}\n{{person-profile person=currentUser}}\n```\n\n```handlebars {data-filename=app/components/person-profile.hbs}\n<h1>{{person.title}}</h1>\n<img src={{person.avatar}}>\n<p class='signature'>{{person.signature}}</p>\n```\n\nYou can use `yield` inside a template to\ninclude the **contents** of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:\n\n```handlebars\n{{#person-profile person=currentUser}}\n  <p>Admin mode</p>\n  {{! Executed in the controller's context. }}\n{{/person-profile}}\n```\n\n```handlebars {data-filename=app/components/person-profile.hbs}\n<h1>{{person.title}}</h1>\n{{! Executed in the component's context. }}\n{{yield}} {{! block contents }}\n```\n\nIf you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof `Component` named after the name of the\ncomponent.\n\nFor example, you could implement the action\n`hello` for the `person-profile` component:\n\n```js {data-filename=app/components/person-profile.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  actions: {\n    hello(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```handlebars {data-filename=app/templates/components/person-profile.hbs}\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block contents -->\n<button {{action 'hello' person.name}}>\n  Say Hello to {{person.name}}\n</button>\n```\n\nComponents must have a `-` in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.\n\n\n## HTML Tag\n\nThe default HTML tag name used for a component's DOM representation is `div`.\nThis can be customized by setting the `tagName` property.\nThe following component class:\n\n```js {data-filename=app/components/emphasized-paragraph.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n\n## HTML `class` Attribute\n\nThe HTML `class` attribute of a component's tag can be set by providing a\n`classNames` property that is set to an array of strings:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be set by providing a `classNameBindings`\nproperty set to an array of properties names for the component. The return value\nof these properties will be added as part of the value for the components's `class`\nattribute. These properties can be computed properties:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\nimport { computed } from '@ember/object';\n\nexport default Component.extend({\n  classNameBindings: ['propertyA', 'propertyB'],\n\n  propertyA: 'from-a',\n  propertyB: computed(function() {\n    if (someLogic) { return 'from-b'; }\n  })\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true.\nThe class name will not be added if the value is `false` or `undefined`.\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['hovered'],\n\n  hovered: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings you can supply a string value other\nthan the property name for use as the `class` HTML attribute by appending the\npreferred value after a \":\" character when defining the binding:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n\n  awesome: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['isUrgent'],\n\n  isUrgent: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer to object values that are found by\ntraversing a path relative to the component itself:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\nimport EmberObject from '@ember/object';\n\nexport default Component.extend({\n  classNameBindings: ['messages.empty'],\n\n  messages: EmberObject.create({\n    empty: true\n  })\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view empty\"></div>\n```\n\nIf you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['isEnabled:enabled:disabled'],\n  isEnabled: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting HTML representation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class if a property is `false`:\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\n// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nexport default Component.extend({\n  classNameBindings: ['isEnabled::disabled'],\n  isEnabled: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the component is set to `false`, it will result\nin component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates to the value of a class name binding will result in automatic\nupdate of the  HTML `class` attribute in the component's rendered HTML\nrepresentation. If the value becomes `false` or `undefined` the class name\nwill be removed.\nBoth `classNames` and `classNameBindings` are concatenated properties. See\n[EmberObject](/api/classes/Ember.Object.html) documentation for more\ninformation about concatenated properties.\n\n\n## HTML Attributes\n\nThe HTML attribute section of a component's tag can be set by providing an\n`attributeBindings` property set to an array of property names on the component.\nThe return value of these properties will be used as the value of the component's\nHTML associated attribute:\n\n```js {data-filename=app/components/my-anchor.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n\n  href: 'http://google.com'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nOne property can be mapped on to another by placing a \":\" between\nthe source property and the destination property:\n\n```js {data-filename=app/components/my-anchor.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n\n  url: 'http://google.com'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nNamespaced attributes (e.g. `xlink:href`) are supported, but have to be\nmapped, since `:` is not a valid character for properties in Javascript:\n\n```js {data-filename=app/components/my-use.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'use',\n  attributeBindings: ['xlinkHref:xlink:href'],\n\n  xlinkHref: '#triangle'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<use xlink:href=\"#triangle\"></use>\n```\n\nIf the return value of an `attributeBindings` monitored property is a boolean\nthe attribute will be present or absent depending on the value:\n\n```js {data-filename=app/components/my-text-input.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n\n  disabled: false\n});\n```\n\nWill result in a component instance with an HTML representation of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```js {data-filename=app/components/my-text-input.js}\nimport Component from '@ember/component';\nimport { computed } from '@ember/object';\n\nexport default Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n\n  disabled: computed(function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  })\n});\n```\n\nTo prevent setting an attribute altogether, use `null` or `undefined` as the\nreturn value of the `attributeBindings` monitored property:\n\n```js {data-filename=app/components/my-text-input.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  novalidate: null\n});\n```\n\nUpdates to the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the component's rendered HTML representation.\n`attributeBindings` is a concatenated property. See [EmberObject](/api/classes/Ember.Object.html)\ndocumentation for more information about concatenated properties.\n\n\n## Layouts\n\nSee [Ember.Templates.helpers.yield](/api/classes/Ember.Templates.helpers.html#method_yield)\nfor more information.\n\nLayout can be used to wrap content in a component. In addition\nto wrapping content in a Component's template, you can also use\nthe public layout API in your Component JavaScript.\n\n```handlebars {data-filename=app/templates/components/person-profile.hbs}\n  <h1>Person's Title</h1>\n  <div class='details'>{{yield}}</div>\n```\n\n```js {data-filename=app/components/person-profile.js}\n  import Component from '@ember/component';\n  import layout from '../templates/components/person-profile';\n\n  export default Component.extend({\n    layout\n  });\n```\n\nThe above will result in the following HTML output:\n\n```html\n  <h1>Person's Title</h1>\n  <div class=\"details\">\n    <h2>Chief Basket Weaver</h2>\n    <h3>Fisherman Industries</h3>\n  </div>\n```\n\n\n## Responding to Browser Events\n\nComponents can respond to user-initiated events in one of three ways: method\nimplementation, through an event manager, and through `{{action}}` helper use\nin their template or layout.\n\n\n### Method Implementation\n\nComponents can respond to user-initiated events by implementing a method that\nmatches the event name. A `jQuery.Event` object will be passed as the\nargument to this method.\n\n```js {data-filename=app/components/my-widget.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click(event) {\n    // will be called when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n\n### `{{action}}` Helper\n\nSee [Ember.Templates.helpers.action](/api/classes/Ember.Templates.helpers.html#method_action).\n\n\n### Event Names\n\nAll of the event handling approaches described above respond to the same set\nof events. The names of the built-in events are listed below. (The hash of\nbuilt-in events exists in `Ember.EventDispatcher`.) Additional, custom events\ncan be registered by using `Ember.Application.customEvents`.\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard events:\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events:\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `mouseMove`\n* `focusIn`\n* `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm events:\n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5 drag and drop events:\n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `dragOver`\n* `dragEnd`\n* `drop`",
      "extends": "Ember.CoreView",
      "uses": [
        "Ember.ViewStateSupport",
        "Ember.ViewMixin",
        "Ember.ActionSupport",
        "Ember.ClassNamesSupport",
        "Ember.TargetActionSupport"
      ],
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 645,
          "description": "Normally, Ember's component model is \"write-only\". The component takes a\nbunch of attributes that it got passed in, and uses them to render its\ntemplate.\n\nOne nice thing about this model is that if you try to set a value to the\nsame thing as last time, Ember (through HTMLBars) will avoid doing any\nwork on the DOM.\n\nThis is not just a performance optimization. If an attribute has not\nchanged, it is important not to clobber the element's \"hidden state\".\nFor example, if you set an input's `value` to the same value as before,\nit will clobber selection state and cursor position. In other words,\nsetting an attribute is not **always** idempotent.\n\nThis method provides a way to read an element's attribute and also\nupdate the last value Ember knows about at the same time. This makes\nsetting an attribute idempotent.\n\nIn particular, what this means is that if you get an `<input>` element's\n`value` attribute and then re-render the template with the same value,\nit will avoid clobbering the cursor and selection position.\nSince most attribute sets are idempotent in the browser, you typically\ncan get away with reading attributes using jQuery, but the most reliable\nway to do so is through this method.",
          "itemtype": "method",
          "name": "readDOMAttr",
          "params": [
            {
              "name": "name",
              "description": "the name of the attribute",
              "type": "String"
            }
          ],
          "return": {
            "description": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 758,
          "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
          "itemtype": "method",
          "name": "didReceiveAttrs",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 778,
          "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
          "itemtype": "method",
          "name": "didRender",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 794,
          "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
          "itemtype": "method",
          "name": "willRender",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 810,
          "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "method",
          "name": "didUpdateAttrs",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 826,
          "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "method",
          "name": "willUpdate",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 842,
          "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "method",
          "name": "didUpdate",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 875,
          "description": "Returns a jQuery object for this component's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\nFor example, calling `component.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this component.",
          "itemtype": "method",
          "name": "$",
          "params": [
            {
              "name": "selector",
              "description": "a jQuery-compatible selector string",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the jQuery object for the DOM node",
            "type": "JQuery"
          },
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 24,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRootViews",
          "params": [
            {
              "name": "owner",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 45,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewId",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 60,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewElement",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 79,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getChildViews",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 116,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewBounds",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 125,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewRange",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 140,
          "description": "`getViewClientRects` provides information about the position of the border\nbox edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewClientRects",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 156,
          "description": "`getViewBoundingClientRect` provides information about the position of the\nbounding border box edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewBoundingClientRect",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 172,
          "description": "Determines if the element matches the specified selector.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "matches",
          "params": [
            {
              "name": "el",
              "description": "",
              "type": "DOMElement"
            },
            {
              "name": "selector",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/views/core_view.js",
          "line": 61,
          "description": "Override the default event firing from `Ember.Evented` to\nalso call methods with the given name.",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 81,
          "description": "Return the nearest ancestor that is an instance of the provided\nclass or mixin.",
          "itemtype": "method",
          "name": "nearestOfType",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself),\n       or an instance of Ember.Mixin.",
              "type": "Class,Mixin"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "deprecated": true,
          "deprecationMessage": "use `yield` and contextual components for composition instead.",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 104,
          "description": "Return the nearest ancestor that has a given property.",
          "itemtype": "method",
          "name": "nearestWithProperty",
          "params": [
            {
              "name": "property",
              "description": "A property name",
              "type": "String"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "deprecated": true,
          "deprecationMessage": "use `yield` and contextual components for composition instead.",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 122,
          "description": "Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.\n\nIf children were added during the rendering process using `appendChild`,\n`rerender` will remove them, because they will be added again\nif needed by the next `render`.\n\nIn general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling `rerender`, which can\nbe slow.",
          "itemtype": "method",
          "name": "rerender",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 162,
          "description": "Returns a jQuery object for this view's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\n\nFor example, calling `view.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this view.",
          "itemtype": "method",
          "name": "$",
          "params": [
            {
              "name": "selector",
              "description": "a jQuery-compatible selector string",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the jQuery object for the DOM node",
            "type": "JQuery"
          },
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 182,
          "description": "Appends the view's element to the specified parent element.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.\n\nThis is not typically a function that you will need to call directly when\nbuilding your application. If you do need to use `appendTo`, be sure that\nthe target element you are providing is associated with an `Ember.Application`\nand does not have an ancestor element that is associated with an Ember view.",
          "itemtype": "method",
          "name": "appendTo",
          "params": [
            {
              "name": "A",
              "description": "selector, element, HTML string, or jQuery object",
              "type": "String|DOMElement|jQuery"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 232,
          "description": "Appends the view's element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.\n\nIf your application uses the `rootElement` property, you must append\nthe view within that element. Rendering views outside of the `rootElement`\nis not supported.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.",
          "itemtype": "method",
          "name": "append",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 286,
          "description": "Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of `elementId` (or the\nview's guid if `elementId` is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.",
          "itemtype": "method",
          "name": "findElementInParentElement",
          "params": [
            {
              "name": "parentElement",
              "description": "The parent's DOM element",
              "type": "DOMElement"
            }
          ],
          "return": {
            "description": "The discovered element",
            "type": "DOMElement"
          },
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 334,
          "description": "You must call `destroy` on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.",
          "itemtype": "method",
          "name": "destroy",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 394,
          "description": "Setup a view, but do not finish waking it up.\n\n* configure `childViews`\n* register the view with the global views hash, which is used for event\n  dispatch",
          "itemtype": "method",
          "name": "init",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 456,
          "description": "Handle events from `EventDispatcher`",
          "itemtype": "method",
          "name": "handleEvent",
          "params": [
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "evt",
              "description": "",
              "type": "Event"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/action_support.js",
          "line": 27,
          "description": "Calls an action passed to a component.\n\nFor example a component for playing or pausing music may translate click events\ninto action notifications of \"play\" or \"stop\" depending on some internal state\nof the component:\n\n```js {data-filename=app/components/play-button.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    if (this.get('isPlaying')) {\n      this.sendAction('play');\n    } else {\n      this.sendAction('stop');\n    }\n  }\n});\n```\n\nThe actions \"play\" and \"stop\" must be passed to this `play-button` component:\n\n```handlebars\n{{! app/templates/application.hbs }}\n{{play-button play=(action \"musicStarted\") stop=(action \"musicStopped\")}}\n```\n\nWhen the component receives a browser `click` event it translate this\ninteraction into application-specific semantics (\"play\" or \"stop\") and\ncalls the specified action.\n\n```js {data-filename=app/controller/application.js}\nimport Controller from '@ember/controller';\n\nexport default Controller.extend({\n  actions: {\n    musicStarted() {\n      // called when the play button is clicked\n      // and the music started playing\n    },\n    musicStopped() {\n      // called when the play button is clicked\n      // and the music stopped playing\n    }\n  }\n});\n```\n\nIf no action is passed to `sendAction` a default name of \"action\"\nis assumed.\n\n```js {data-filename=app/components/next-button.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    this.sendAction();\n  }\n});\n```\n\n```handlebars\n{{! app/templates/application.hbs }}\n{{next-button action=(action \"playNextSongInAlbum\")}}\n```\n\n```js {data-filename=app/controllers/application.js}\nimport Controller from '@ember/controller';\n\nexport default Controller.extend({\n  actions: {\n    playNextSongInAlbum() {\n      ...\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "sendAction",
          "params": [
            {
              "name": "action",
              "description": "the action to call",
              "type": "String",
              "optional": true
            },
            {
              "name": "params",
              "description": "arguments for the action",
              "type": "*",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionSupport"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
          "line": 41,
          "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  action: 'save',\n  actionContext: Ember.computed.alias('context'),\n  click() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click() {\n    this.triggerAction({\n      action: 'save',\n      target: this.get('controller'),\n      actionContext: this.get('context')\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  click() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with a reference to `this`,\n        // to the current controller\n  }\n});\n```",
          "itemtype": "method",
          "name": "triggerAction",
          "params": [
            {
              "name": "opts",
              "description": "(optional, with the optional keys action, target and/or actionContext)",
              "type": "Object"
            }
          ],
          "return": {
            "description": "true if the action was sent successfully and did not return false",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.TargetActionSupport"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 167,
          "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```js {data-filename=app/routes/welcome.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    playTheme() {\n      this.send('playMusic', 'theme.mp3');\n    },\n    playMusic(track) {\n      // ...\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "actionName",
              "description": "The action to trigger",
              "type": "String"
            },
            {
              "name": "context",
              "description": "a context to send with the action",
              "type": "*"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 386,
          "itemtype": "method",
          "name": "mixin",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "mixins",
              "description": "",
              "multiple": true
            }
          ],
          "return": {
            "description": "obj"
          },
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Mixin"
        }
      ],
      "events": [
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 768,
          "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
          "itemtype": "event",
          "name": "didReceiveAttrs",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 786,
          "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
          "itemtype": "event",
          "name": "didRender",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 802,
          "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
          "itemtype": "event",
          "name": "willRender",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 818,
          "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "event",
          "name": "didUpdateAttrs",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 834,
          "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "event",
          "name": "willUpdate",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 850,
          "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
          "itemtype": "event",
          "name": "didUpdate",
          "access": "public",
          "tagname": "",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 303,
          "description": "Called when a view is going to insert an element into the DOM.",
          "itemtype": "event",
          "name": "willInsertElement",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 311,
          "description": "Called when the element of the view has been inserted into the DOM.\nOverride this function to do any set up that requires an element\nin the document body.\n\nWhen a view has children, didInsertElement will be called on the\nchild view(s) first and on itself afterwards.",
          "itemtype": "event",
          "name": "didInsertElement",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 324,
          "description": "Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state",
          "itemtype": "event",
          "name": "willClearRender",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 348,
          "description": "Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.\n\nPlease note: any property changes made during this event will have no\neffect on object observers.",
          "itemtype": "event",
          "name": "willDestroyElement",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 361,
          "description": "Called when the parentView property has changed.",
          "itemtype": "event",
          "name": "parentViewDidChange",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        }
      ],
      "properties": [
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 681,
          "description": "The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type 'button', or a pane may have a role of\ntype 'alertdialog'. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.\n\nThe full list of valid WAI-ARIA roles is available at:\n[http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)",
          "itemtype": "property",
          "name": "ariaRole",
          "type": "String",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 696,
          "description": "Enables components to take a list of parameters as arguments.\nFor example, a component that takes two parameters with the names\n`name` and `age`:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nlet MyComponent = Component.extend();\n\nMyComponent.reopenClass({\n  positionalParams: ['name', 'age']\n});\n\nexport default MyComponent;\n```\n\nIt can then be invoked like this:\n\n```handlebars\n{{my-component \"John\" 38}}\n```\n\nThe parameters can be referred to just like named parameters:\n\n```handlebars\nName: {{name}}, Age: {{age}}.\n```\n\nUsing a string instead of an array allows for an arbitrary number of\nparameters:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nlet MyComponent = Component.extend();\n\nMyComponent.reopenClass({\n  positionalParams: 'names'\n});\n\nexport default MyComponent;\n```\n\nIt can then be invoked like this:\n\n```handlebars\n{{my-component \"John\" \"Michael\" \"Scott\"}}\n```\nThe parameters can then be referred to by enumerating over the list:\n\n```handlebars\n{{#each names as |name|}}{{name}}{{/each}}\n```",
          "static": 1,
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "positionalParams",
          "since": "1.13.0",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 858,
          "description": "Layout can be used to wrap content in a component.",
          "itemtype": "property",
          "name": "layout",
          "type": "Function",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 865,
          "description": "The name of the layout to lookup if no layout is provided.\nBy default `Component` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
          "itemtype": "property",
          "name": "layoutName",
          "type": "String",
          "default": "null",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 887,
          "description": "The HTML `id` of the component's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n{{my-component elementId=\"a-really-cool-id\"}}\n```\nIf not manually set a default value will be provided by the framework.\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```javascript\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    var index = this.get('index');\n    this.set('elementId', `component-id${index}`);\n  }\n});\n```",
          "itemtype": "property",
          "name": "elementId",
          "type": "String",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-glimmer/lib/component.js",
          "line": 916,
          "description": "If `false`, the view will appear hidden in DOM.",
          "itemtype": "property",
          "name": "isVisible",
          "type": "Boolean",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "@ember/component"
        },
        {
          "file": "packages/ember-views/lib/views/core_view.js",
          "line": 43,
          "description": "If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.",
          "itemtype": "property",
          "name": "parentView",
          "type": "Ember.View",
          "default": "null",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 18,
          "description": "A list of properties of the view to apply as attributes. If the property\nis a string value, the value of that string will be applied as the value\nfor an attribute of the property's name.\n\nThe following example creates a tag like `<div priority=\"high\" />`.\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  attributeBindings: ['priority'],\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the attribute is treated as\nan HTML Boolean attribute. It will be present if the property is `true`\nand omitted if the property is `false`.\n\nThe following example creates markup like `<div visible />`.\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  attributeBindings: ['visible'],\n  visible: true\n});\n```\n\nIf you would prefer to use a custom value instead of the property name,\nyou can create the same markup as the last example with a binding like\nthis:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  attributeBindings: ['isVisible:visible'],\n  isVisible: true\n});\n```\n\nThis list of attributes is inherited from the component's superclasses,\nas well.",
          "itemtype": "property",
          "name": "attributeBindings",
          "type": "Array",
          "default": "[]",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 147,
          "description": "Returns the current DOM element for the view.",
          "itemtype": "property",
          "name": "element",
          "type": "DOMElement",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 253,
          "description": "The HTML `id` of the view's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n  {{my-component elementId=\"a-really-cool-id\"}}\n```\n\nIf not manually set a default value will be provided by the framework.\n\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    let index = this.get('index');\n    this.set('elementId', 'component-id' + index);\n  }\n});\n```",
          "itemtype": "property",
          "name": "elementId",
          "type": "String",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 373,
          "description": "Tag name for the view's outer element. The tag name is only used when an\nelement is first created. If you change the `tagName` for an element, you\nmust destroy and recreate the view element.\n\nBy default, the render buffer will use a `<div>` tag for views.",
          "itemtype": "property",
          "name": "tagName",
          "type": "String",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ViewMixin"
        },
        {
          "file": "packages/ember-views/lib/mixins/child_views_support.js",
          "line": 21,
          "description": "Array of child views. You should never edit this array directly.",
          "itemtype": "property",
          "name": "childViews",
          "type": "Array",
          "default": "[]",
          "access": "private",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "Ember.ClassNamesSupport"
        },
        {
          "file": "packages/ember-views/lib/mixins/class_names_support.js",
          "line": 25,
          "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
          "itemtype": "property",
          "name": "classNames",
          "type": "Array",
          "default": "['ember-view']",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ClassNamesSupport"
        },
        {
          "file": "packages/ember-views/lib/mixins/class_names_support.js",
          "line": 37,
          "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nEmber.Component.extend({\n  classNameBindings: ['priority'],\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nEmber.Component.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nEmber.Component.extend({\n  classNameBindings: ['isUrgent:urgent'],\n  isUrgent: true\n});\n```\n\nThis list of properties is inherited from the component's superclasses as well.",
          "itemtype": "property",
          "name": "classNameBindings",
          "type": "Array",
          "default": "[]",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ClassNamesSupport"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 22,
          "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js {data-filename=app/mixins/can-display-banner.js}\nimport Mixin from '@ember/mixin';\n\nexport default Mixin.create({\n  actions: {\n    displayBanner(msg) {\n      // ...\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/welcome.js}\nimport Route from '@ember/routing/route';\nimport CanDisplayBanner from '../mixins/can-display-banner';\n\nexport default Route.extend(CanDisplayBanner, {\n  actions: {\n    playMusic() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route or Component's action handler,\nthe value of the `this` context is the Controller, Route or\nComponent object:\n\n```js {data-filename=app/routes/song.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    myAction() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super(...arguments)` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js {data-filename=app/mixins/debug-route.js}\nimport Mixin from '@ember/mixin';\n\nexport default Ember.Mixin.create({\n  actions: {\n    debugRouteInformation() {\n      console.debug(\"It's a-me, console.debug!\");\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/annoying-debug.js}\nimport Route from '@ember/routing/route';\nimport DebugRoute from '../mixins/debug-route';\n\nexport default Route.extend(DebugRoute, {\n  actions: {\n    debugRouteInformation() {\n      // also call the debugRouteInformation of mixed in DebugRoute\n      this._super(...arguments);\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js {data-filename=app/router.js}\nRouter.map(function() {\n  this.route(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n```\n\n```js {data-filename=app/routes/album.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/album-song.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
          "itemtype": "property",
          "name": "actions",
          "type": "Object",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Component",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-2.17.2-Ember.CoreView",
          "type": "class"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-2.17.2-Checkbox"
          },
          {
            "type": "class",
            "id": "ember-2.17.2-LinkComponent"
          },
          {
            "type": "class",
            "id": "ember-2.17.2-TextArea"
          },
          {
            "type": "class",
            "id": "ember-2.17.2-TextField"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-2.17.2-@ember/component",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.17.2",
          "type": "project-version"
        }
      }
    }
  }
}