{
  "data": {
    "id": "ember-2.17.2-Ember.CoreView",
    "type": "class",
    "attributes": {
      "name": "Ember.CoreView",
      "shortname": "Ember.CoreView",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/ember-views/lib/views/core_view.js",
      "line": 10,
      "description": "`Ember.CoreView` is an abstract class that exists to give view-like behavior\nto both Ember's main view class `Ember.Component` and other classes that don't need\nthe full functionality of `Ember.Component`.\n\nUnless you have specific needs for `CoreView`, you will use `Ember.Component`\nin your applications.",
      "extends": "Ember.Object",
      "deprecated": true,
      "deprecationMessage": "Use `Ember.Component` instead.",
      "uses": [
        "Ember.Evented",
        "Ember.ActionHandler"
      ],
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 24,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRootViews",
          "params": [
            {
              "name": "owner",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 45,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewId",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 60,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewElement",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 79,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getChildViews",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 116,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewBounds",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 125,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewRange",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 140,
          "description": "`getViewClientRects` provides information about the position of the border\nbox edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewClientRects",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 156,
          "description": "`getViewBoundingClientRect` provides information about the position of the\nbounding border box edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getViewBoundingClientRect",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/system/utils.js",
          "line": 172,
          "description": "Determines if the element matches the specified selector.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "matches",
          "params": [
            {
              "name": "el",
              "description": "",
              "type": "DOMElement"
            },
            {
              "name": "selector",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.CoreView",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/views/core_view.js",
          "line": 61,
          "description": "Override the default event firing from `Ember.Evented` to\nalso call methods with the given name.",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.CoreView",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 167,
          "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```js {data-filename=app/routes/welcome.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    playTheme() {\n      this.send('playMusic', 'theme.mp3');\n    },\n    playMusic(track) {\n      // ...\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "actionName",
              "description": "The action to trigger",
              "type": "String"
            },
            {
              "name": "context",
              "description": "a context to send with the action",
              "type": "*"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreView",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-views/lib/views/core_view.js",
          "line": 43,
          "description": "If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.",
          "itemtype": "property",
          "name": "parentView",
          "type": "Ember.View",
          "default": "null",
          "access": "private",
          "tagname": "",
          "class": "Ember.CoreView",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 22,
          "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js {data-filename=app/mixins/can-display-banner.js}\nimport Mixin from '@ember/mixin';\n\nexport default Mixin.create({\n  actions: {\n    displayBanner(msg) {\n      // ...\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/welcome.js}\nimport Route from '@ember/routing/route';\nimport CanDisplayBanner from '../mixins/can-display-banner';\n\nexport default Route.extend(CanDisplayBanner, {\n  actions: {\n    playMusic() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route or Component's action handler,\nthe value of the `this` context is the Controller, Route or\nComponent object:\n\n```js {data-filename=app/routes/song.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    myAction() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super(...arguments)` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js {data-filename=app/mixins/debug-route.js}\nimport Mixin from '@ember/mixin';\n\nexport default Ember.Mixin.create({\n  actions: {\n    debugRouteInformation() {\n      console.debug(\"It's a-me, console.debug!\");\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/annoying-debug.js}\nimport Route from '@ember/routing/route';\nimport DebugRoute from '../mixins/debug-route';\n\nexport default Route.extend(DebugRoute, {\n  actions: {\n    debugRouteInformation() {\n      // also call the debugRouteInformation of mixed in DebugRoute\n      this._super(...arguments);\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js {data-filename=app/router.js}\nRouter.map(function() {\n  this.route(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n```\n\n```js {data-filename=app/routes/album.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n```\n\n```js {data-filename=app/routes/album-song.js}\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
          "itemtype": "property",
          "name": "actions",
          "type": "Object",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Ember.CoreView",
          "module": "ember",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "Ember.Object",
          "type": "missing"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-2.17.2-Component"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-2.17.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.17.2",
          "type": "project-version"
        }
      }
    }
  }
}