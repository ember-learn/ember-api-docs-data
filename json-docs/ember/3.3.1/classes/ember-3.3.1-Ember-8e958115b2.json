{
  "data": {
    "id": "ember-3.3.1-Ember",
    "type": "class",
    "attributes": {
      "name": "Ember",
      "shortname": "Ember",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": "",
      "methods": [
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 29,
          "itemtype": "method",
          "name": "propertyWillChange",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 50,
          "itemtype": "method",
          "name": "propertyDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 73,
          "description": "<html><head></head><body><p>This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.</p>\n<p>Normally you will not need to call this method directly but if for some\nreason you can&apos;t directly watch a property you can invoke this method\nmanually.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "The objects meta.",
              "type": "Meta"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 196,
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 205,
          "itemtype": "method",
          "name": "endPropertyChanges",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/property_events.ts",
          "line": 216,
          "description": "<html><head></head><body><p>Make a series of property changes together in an\nexception-safe way.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>Ember.changeProperties(<span class=\"function\"><span class=\"keyword\">function</span></span>() {\n  obj1.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;foo&apos;</span>, mayBlowUpWhenSet);\n  obj2.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;bar&apos;</span>, baz);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "changeProperties",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/watching.ts",
          "line": 9,
          "description": "<html><head></head><body><p>Starts watching a property on an object. Whenever the property changes,\ninvokes <code>Ember.notifyPropertyChange</code>. This is the primitive used by observers\nand dependent keys; usually you will never call this method directly but instead\nuse higher level methods like <code>addObserver()</code>.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "keyPath",
              "description": "",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/watching.ts",
          "line": 39,
          "description": "<html><head></head><body><p>Stops watching a property on an object. Usually you will never call this method directly but instead\nuse higher level methods like <code>removeObserver()</code>.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "unwatch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "keyPath",
              "description": "",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/system/controller_for.js",
          "line": 5,
          "description": "<html><head></head><body><p>Finds a controller instance.</p>\n</body></html>",
          "itemtype": "method",
          "name": "controllerFor",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/system/generate_controller.js",
          "line": 8,
          "description": "<html><head></head><body><p>Generates a controller factory</p>\n</body></html>",
          "itemtype": "method",
          "name": "generateControllerFactory",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-routing/lib/system/generate_controller.js",
          "line": 32,
          "description": "<html><head></head><body><p>Generates and instantiates a controller extending from <code>controller:basic</code>\nif present, or <code>Controller</code> if not.</p>\n</body></html>",
          "itemtype": "method",
          "name": "generateController",
          "access": "private",
          "tagname": "",
          "since": "1.3.0",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/inspect.ts",
          "line": 14,
          "description": "<html><head></head><body><p>Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.</p>\n<p>It is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: <a href=\"https://github.com/NV/jsDump\">https://github.com/NV/jsDump</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "inspect",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "The object you want to inspect.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A description of the object",
            "type": "String"
          },
          "since": "1.4.0",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-utils/lib/invoke.ts",
          "line": 1,
          "description": "<html><head></head><body><p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> foo = { bar: <span class=\"keyword\">function</span><span class=\"literal\">()</span> { return &apos;bar&apos;; }, baz: null };\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">bar</span>&apos;)</span>; <span class=\"comment\">// true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">baz</span>&apos;)</span>; <span class=\"comment\">// false</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span></span>can<span class=\"constructor\">Invoke(<span class=\"params\">foo</span>, &apos;<span class=\"params\">bat</span>&apos;)</span>; <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "canInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "@ember/debug"
        },
        {
          "file": "packages/ember-utils/lib/spec.ts",
          "line": 1,
          "description": "<html><head></head><body><p>Returns whether Type(value) is Object.</p>\n<p>Useful for checking whether a value is a valid WeakMap key.</p>\n<p>Refs: <a href=\"https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation\">https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation</a>\n      <a href=\"https://tc39.github.io/ecma262/#sec-weakmap.prototype.set\">https://tc39.github.io/ecma262/#sec-weakmap.prototype.set</a></p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "isObject",
          "class": "Ember",
          "module": "@ember/array"
        },
        {
          "file": "packages/ember-utils/lib/super.ts",
          "line": 65,
          "description": "<html><head></head><body><p>Wraps the passed function so that <code>this._super</code> will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrap",
          "params": [
            {
              "name": "func",
              "description": "The function to call",
              "type": "Function"
            },
            {
              "name": "superFunc",
              "description": "The super function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "wrapped function.",
            "type": "Function"
          },
          "class": "Ember",
          "module": "@ember/array"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-utils/lib/guid.ts",
          "line": 29,
          "description": "<html><head></head><body><p>Prefix used for guids through out Ember.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_PREFIX",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "@ember/object"
        },
        {
          "file": "packages/ember-utils/lib/guid.ts",
          "line": 42,
          "description": "<html><head></head><body><p>A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.</p>\n<p>On browsers that support it, these properties are added with enumeration\ndisabled so they won&apos;t show up when you iterate over your properties.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_KEY",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "@ember/object"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.3.1-@ember/utils",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.3.1",
          "type": "project-version"
        }
      }
    }
  }
}