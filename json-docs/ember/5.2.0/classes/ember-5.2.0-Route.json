{
  "data": {
    "id": "ember-5.2.0-Route",
    "type": "class",
    "attributes": {
      "name": "Route",
      "shortname": "Route",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing/route",
      "namespace": "",
      "file": "packages/@ember/routing/route.ts",
      "line": 69,
      "description": "The `Route` class is used to define individual routes. Refer to\nthe [routing guide](https://guides.emberjs.com/release/routing/) for documentation.",
      "extends": "EmberObject",
      "uses": [
        "Evented",
        "ActionHandler"
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 293,
          "description": "A hook you can implement to convert the route's model into parameters\nfor the URL.\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\n```\n\n```js {data-filename=app/routes/post.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  model({ post_id }) {\n    // the server returns `{ id: 12 }`\n    return fetch(`/posts/${post_id}`;\n  }\n\n  serialize(model) {\n    // this will make the URL `/posts/12`\n    return { post_id: model.id };\n  }\n}\n```\n\nThe default `serialize` method will insert the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple dynamic segments or does not contain '_id', `serialize`\nwill return `getProperties(model, params)`\n\nThis method is called when `transitionTo` is called with a context\nin order to populate the URL.",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "model",
              "description": "the routes model",
              "type": "Object"
            },
            {
              "name": "params",
              "description": "an Array of parameter names for the current\n  route (in the example, `['post_id']`.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "the serialized parameters",
            "type": "Object"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 530,
          "description": "Sets the name for this route, including a fully resolved name for routes\ninside engines.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_setRouteName",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 545,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_stashNames",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 588,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_updatingQPChanged",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 596,
          "description": "Returns a hash containing the parameters of an ancestor route.\n\nYou may notice that `this.paramsFor` sometimes works when referring to a\nchild route, but this behavior should not be relied upon as only ancestor\nroutes are certain to be loaded in time.\n\nExample\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('member', { path: ':name' }, function() {\n    this.route('interest', { path: ':interest' });\n  });\n});\n```\n\n```js {data-filename=app/routes/member.js}\nimport Route from '@ember/routing/route';\n\nexport default class MemberRoute extends Route {\n  queryParams = {\n    memberQp: { refreshModel: true }\n  }\n}\n```\n\n```js {data-filename=app/routes/member/interest.js}\nimport Route from '@ember/routing/route';\n\nexport default class MemberInterestRoute extends Route {\n  queryParams = {\n    interestQp: { refreshModel: true }\n  }\n\n  model() {\n    return this.paramsFor('member');\n  }\n}\n```\n\nIf we visit `/turing/maths?memberQp=member&interestQp=interest` the model for\nthe `member.interest` route is a hash with:\n\n* `name`: `turing`\n* `memberQp`: `member`",
          "itemtype": "method",
          "name": "paramsFor",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "hash containing the parameters of the route `name`",
            "type": "Object"
          },
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 677,
          "description": "Serializes the query parameter key",
          "itemtype": "method",
          "name": "serializeQueryParamKey",
          "params": [
            {
              "name": "controllerPropertyName",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 688,
          "description": "Serializes value of the query parameter based on defaultValueType",
          "itemtype": "method",
          "name": "serializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "urlKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "defaultValueType",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 704,
          "description": "Deserializes value of the query parameter based on defaultValueType",
          "itemtype": "method",
          "name": "deserializeQueryParam",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            },
            {
              "name": "urlKey",
              "description": "",
              "type": "String"
            },
            {
              "name": "defaultValueType",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 736,
          "description": "A hook you can use to reset controller values either when the model\nchanges or the route is exiting.\n\n```js {data-filename=app/routes/articles.js}\nimport Route from '@ember/routing/route';\n\nexport default class ArticlesRoute extends Route {\n  resetController(controller, isExiting, transition) {\n    if (isExiting && transition.targetName !== 'error') {\n      controller.set('page', 1);\n    }\n  }\n}\n```",
          "itemtype": "method",
          "name": "resetController",
          "params": [
            {
              "name": "controller",
              "description": "instance",
              "type": "Controller"
            },
            {
              "name": "isExiting",
              "description": "",
              "type": "Boolean"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Object"
            }
          ],
          "since": "1.7.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 766,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "exit",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 777,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_internalReset",
          "since": "3.6.0",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 791,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "enter",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 842,
          "description": "This hook is executed when the router completely exits this route. It is\nnot executed when the model for the route changes.",
          "itemtype": "method",
          "name": "deactivate",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 853,
          "description": "This hook is executed when the router enters the route. It is not executed\nwhen the model for the route changes.",
          "itemtype": "method",
          "name": "activate",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 864,
          "description": "Perform a synchronous transition into another route without attempting\nto resolve promises, update the URL, or abort any currently active\nasynchronous transitions (i.e. regular transitions caused by\n`transitionTo` or URL changes).\n\nThis method is handy for performing intermediate transitions on the\nway to a final destination route, and is called internally by the\ndefault implementations of the `error` and `loading` handlers.",
          "itemtype": "method",
          "name": "intermediateTransitionTo",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) to be used while transitioning\nto the route.",
              "type": "...Object"
            }
          ],
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 886,
          "description": "Refresh the model on this route and any child routes, firing the\n`beforeModel`, `model`, and `afterModel` hooks in a similar fashion\nto how routes are entered when transitioning in from other route.\nThe current route params (e.g. `article_id`) will be passed in\nto the respective model hooks, and if a different model is returned,\n`setupController` and associated route hooks will re-fire as well.\n\nAn example usage of this method is re-querying the server for the\nlatest information using the same parameters as when the route\nwas first entered.\n\nNote that this will cause `model` hooks to fire even on routes\nthat were provided a model object when the route was initially\nentered.",
          "itemtype": "method",
          "name": "refresh",
          "return": {
            "description": "the transition object associated with this\n  attempted transition",
            "type": "Transition"
          },
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 912,
          "description": "This hook is the entry point for router.js",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "setup",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 987,
          "description": "This hook is the first of the route entry validation hooks\ncalled when an attempt is made to transition into a route\nor one of its children. It is called before `model` and\n`afterModel`, and is appropriate for cases when:\n\n1) A decision can be made to redirect elsewhere without\n   needing to resolve the model first.\n2) Any async operations need to occur first before the\n   model is attempted to be resolved.\n\nThis hook is provided the current `transition` attempt\nas a parameter, which can be used to `.abort()` the transition,\nsave it for a later `.retry()`, or retrieve values set\non it from a previous hook. You can also just call\n`this.transitionTo` to another route to implicitly\nabort the `transition`.\n\nYou can return a promise from this hook to pause the\ntransition until the promise resolves (or rejects). This could\nbe useful, for instance, for retrieving async code from\nthe server that is required to enter a route.",
          "itemtype": "method",
          "name": "beforeModel",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "return": {
            "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
            "type": "Any | Promise<any>"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1022,
          "description": "This hook is called after this route's model has resolved.\nIt follows identical async/promise semantics to `beforeModel`\nbut is provided the route's resolved model in addition to\nthe `transition`, and is therefore suited to performing\nlogic that can only take place after the model has already\nresolved.\n\n```js {data-filename=app/routes/posts.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostsRoute extends Route {\n  afterModel(posts, transition) {\n    if (posts.get('length') === 1) {\n      this.transitionTo('post.show', posts.get('firstObject'));\n    }\n  }\n}\n```\n\nRefer to documentation for `beforeModel` for a description\nof transition-pausing semantics when a promise is returned\nfrom this hook.",
          "itemtype": "method",
          "name": "afterModel",
          "params": [
            {
              "name": "resolvedModel",
              "description": "the value returned from `model`,\n  or its resolved value if it was a promise",
              "type": "Object"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "return": {
            "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
            "type": "Any | Promise<any>"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1063,
          "description": "A hook you can implement to optionally redirect to another route.\n\nCalling `this.transitionTo` from inside of the `redirect` hook will\nabort the current transition (into the route that has implemented `redirect`).\n\n`redirect` and `afterModel` behave very similarly and are\ncalled almost at the same time, but they have an important\ndistinction when calling `this.transitionTo` to a child route\nof the current route. From `afterModel`, this new transition\ninvalidates the current transition, causing `beforeModel`,\n`model`, and `afterModel` hooks to be called again. But the\nsame transition started from `redirect` does _not_ invalidate\nthe current transition. In other words, by the time the `redirect`\nhook has been called, both the resolved model and the attempted\nentry into this route are considered fully validated.",
          "itemtype": "method",
          "name": "redirect",
          "params": [
            {
              "name": "model",
              "description": "the model for this route",
              "type": "Object"
            },
            {
              "name": "transition",
              "description": "the transition object associated with the current transition",
              "type": "Transition"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1088,
          "description": "Called when the context is changed by router.js.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "contextDidChange",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1098,
          "description": "A hook you can implement to convert the URL into the model for\nthis route.\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nexport default Router;\n```\n\nThe model for the `post` route is `store.findRecord('post', params.post_id)`.\n\nBy default, if your route has a dynamic segment ending in `_id`:\n\n* The model class is determined from the segment (`post_id`'s\n  class is `App.Post`)\n* The find method is called on the model class with the value of\n  the dynamic segment.\n\nNote that for routes with dynamic segments, this hook is not always\nexecuted. If the route is entered through a transition (e.g. when\nusing the `link-to` Handlebars helper or the `transitionTo` method\nof routes), and a model context is already provided this hook\nis not called.\n\nA model context does not include a primitive string or number,\nwhich does cause the model hook to be called.\n\nRoutes without dynamic segments will always execute the model hook.\n\n```javascript\n// no dynamic segment, model hook always called\nthis.transitionTo('posts');\n\n// model passed in, so model hook not called\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost);\n\n// integer passed in, model hook is called\nthis.transitionTo('post', 1);\n\n// model id passed in, model hook is called\n// useful for forcing the hook to execute\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost.id);\n```\n\nThis hook follows the asynchronous/promise semantics\ndescribed in the documentation for `beforeModel`. In particular,\nif a promise returned from `model` fails, the error will be\nhandled by the `error` hook on `Route`.\n\nExample\n\n```js {data-filename=app/routes/post.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  model(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n}\n```",
          "itemtype": "method",
          "name": "model",
          "params": [
            {
              "name": "params",
              "description": "the parameters extracted from the URL",
              "type": "Object"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "return": {
            "description": "the model for this route. If\n  a promise is returned, the transition will pause until\n  the promise resolves, and the resolved value of the promise\n  will be used as the model for this route.",
            "type": "Any | Promise<any>"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1216,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "deserialize",
          "params": [
            {
              "name": "params",
              "description": "the parameters extracted from the URL",
              "type": "Object"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "return": {
            "description": "the model for this route.\n\nRouter.js hook.",
            "type": "Any | Promise<any>"
          },
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1229,
          "itemtype": "method",
          "name": "findModel",
          "params": [
            {
              "name": "type",
              "description": "the model type",
              "type": "String"
            },
            {
              "name": "value",
              "description": "the value passed to find",
              "type": "Object"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1246,
          "description": "A hook you can use to setup the controller for the current route.\n\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook.\n\nBy default, the `setupController` hook sets the `model` property of\nthe controller to the specified `model` when it is not `undefined`.\n\nIf you implement the `setupController` hook in your Route, it will\nprevent this default behavior. If you want to preserve that behavior\nwhen implementing your `setupController` function, make sure to call\n`super`:\n\n```js {data-filename=app/routes/photos.js}\nimport Route from '@ember/routing/route';\n\nexport default class PhotosRoute extends Route {\n  model() {\n    return this.store.findAll('photo');\n  }\n\n  setupController(controller, model) {\n    super.setupController(controller, model);\n\n    this.controllerFor('application').set('showingPhotos', true);\n  }\n}\n```\n\nThe provided controller will be one resolved based on the name\nof this route.\n\nIf no explicit controller is defined, Ember will automatically create one.\n\nAs an example, consider the router:\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nexport default Router;\n```\n\nIf you have defined a file for the post controller,\nthe framework will use it.\nIf it is not defined, a basic `Controller` instance would be used.",
          "example": [
            " Behavior of a basic Controller\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  setupController(controller, model) {\n    controller.set('model', model);\n  }\n});\n```"
          ],
          "itemtype": "method",
          "name": "setupController",
          "params": [
            {
              "name": "controller",
              "description": "instance",
              "type": "Controller"
            },
            {
              "name": "model",
              "description": "",
              "type": "Object"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Transition",
              "optional": true
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1322,
          "description": "Returns the controller of the current route, or a parent (or any ancestor)\nroute in a route hierarchy.\n\nThe controller instance must already have been created, either through entering the\nassociated route or using `generateController`.\n\n```js {data-filename=app/routes/post.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  setupController(controller, post) {\n    super.setupController(controller, post);\n\n    this.controllerFor('posts').set('currentPost', post);\n  }\n}\n```",
          "itemtype": "method",
          "name": "controllerFor",
          "params": [
            {
              "name": "name",
              "description": "the name of the route or controller",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Controller | undefined"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1376,
          "description": "Generates a controller for a route.\n\nExample\n\n```js {data-filename=app/routes/post.js}\nimport Route from '@ember/routing/route';\n\nexport default class Post extends Route {\n  setupController(controller, post) {\n    super.setupController(controller, post);\n\n    this.generateController('posts');\n  }\n}\n```",
          "itemtype": "method",
          "name": "generateController",
          "params": [
            {
              "name": "name",
              "description": "the name of the controller",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1404,
          "description": "Returns the resolved model of a parent (or any ancestor) route\nin a route hierarchy.  During a transition, all routes\nmust resolve a model object, and if a route\nneeds access to a parent route's model in order to\nresolve a model (or just reuse the model from a parent),\nit can call `this.modelFor(theNameOfParentRoute)` to\nretrieve it. If the ancestor route's model was a promise,\nits resolved result is returned.\n\nExample\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' }, function() {\n    this.route('comments');\n  });\n});\n\nexport default Router;\n```\n\n```js {data-filename=app/routes/post/comments.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostCommentsRoute extends Route {\n  model() {\n    let post = this.modelFor('post');\n\n    return post.comments;\n  }\n}\n```",
          "itemtype": "method",
          "name": "modelFor",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model object",
            "type": "Object"
          },
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1476,
          "description": "`this[RENDER]` is used to render a template into a region of another template\n(indicated by an `{{outlet}}`).",
          "itemtype": "method",
          "name": "this[RENDER]",
          "params": [
            {
              "name": "name",
              "description": "the name of the template to render",
              "type": "String"
            },
            {
              "name": "options",
              "description": "the options",
              "type": "Object",
              "optional": true,
              "props": [
                {
                  "name": "into",
                  "description": "the template to render into,\n                referenced by name. Defaults to the parent template",
                  "type": "String",
                  "optional": true
                },
                {
                  "name": "outlet",
                  "description": "the outlet inside `options.into` to render into.\n                Defaults to 'main'",
                  "type": "String",
                  "optional": true
                },
                {
                  "name": "controller",
                  "description": "the controller to use for this template,\n                referenced by name or as a controller instance. Defaults to the Route's paired controller",
                  "type": "String|Object",
                  "optional": true
                },
                {
                  "name": "model",
                  "description": "the model object to set on `options.controller`.\n                Defaults to the return value of the Route's model hook",
                  "type": "Object",
                  "optional": true
                }
              ]
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1503,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "teardownViews",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1516,
          "description": "Allows you to produce custom metadata for the route.\nThe return value of this method will be attached to\nits corresponding RouteInfoWithAttributes object.\n\nExample\n\n```js {data-filename=app/routes/posts/index.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostsIndexRoute extends Route {\n  buildRouteInfoMetadata() {\n    return { title: 'Posts Page' }\n  }\n}\n```\n\n```js {data-filename=app/routes/application.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class ApplicationRoute extends Route {\n  @service router\n\n  constructor() {\n    super(...arguments);\n\n    this.router.on('routeDidChange', transition => {\n      document.title = transition.to.metadata.title;\n      // would update document's title to \"Posts Page\"\n    });\n  }\n}\n```",
          "itemtype": "method",
          "name": "buildRouteInfoMetadata",
          "return": {
            "description": "any"
          },
          "since": "3.10.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1768,
          "description": "Sends an action to the router, which will delegate it to the currently\nactive route hierarchy per the bubbling rules explained under `actions`.\n\nExample\n\n```js {data-filename=app/router.js}\n// ...\n\nRouter.map(function() {\n  this.route('index');\n});\n\nexport default Router;\n```\n\n```js {data-filename=app/routes/application.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  track(arg) {\n    console.log(arg, 'was clicked');\n  }\n}\n```\n\n```js {data-filename=app/routes/index.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class IndexRoute extends Route {\n  @action\n  trackIfDebug(arg) {\n    if (debug) {\n      this.send('track', arg);\n    }\n  }\n}\n```",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "name",
              "description": "the name of the action to trigger",
              "type": "String"
            },
            {
              "name": "args",
              "description": "",
              "type": "...*"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 2182,
          "description": "This action is called when one or more query params have changed. Bubbles.",
          "itemtype": "method",
          "name": "queryParamsDidChange",
          "params": [
            {
              "name": "changed",
              "description": "Keys are names of query params that have changed.",
              "type": "Object"
            },
            {
              "name": "totalPresent",
              "description": "Keys are names of query params that are currently set.",
              "type": "Object"
            },
            {
              "name": "removed",
              "description": "Keys are names of query params that have been removed.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/object/evented.ts",
          "line": 51,
          "description": "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad', function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target can be passed in as the 2nd argument that will\nbe set as the \"this\" for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback method becomes the third argument.",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/evented",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/@ember/object/evented.ts",
          "line": 78,
          "description": "Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use ``one`` when\nyou only care about the first time an event has taken place.\n\nThis function takes an optional 2nd argument that will become the \"this\"\nvalue for the callback. When the target parameter is used the callback method\nbecomes the third argument.",
          "itemtype": "method",
          "name": "one",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/evented",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/@ember/object/evented.ts",
          "line": 100,
          "description": "Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat', function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\n// outputs: person ate some broccoli\n```",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "args",
              "description": "Optional arguments to pass on",
              "type": "Object..."
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/evented",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/@ember/object/evented.ts",
          "line": 121,
          "description": "Cancels subscription for given name, target, and method.",
          "itemtype": "method",
          "name": "off",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target of the subscription",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The function or the name of a function of the subscription",
              "type": "Function|String"
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/evented",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/@ember/object/evented.ts",
          "line": 137,
          "description": "Checks to see if object has any subscriptions for named event.",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            }
          ],
          "return": {
            "description": "does the object have a subscription for event",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/evented",
          "inherited": true,
          "inheritedFrom": "Evented"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 322,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Component`\nfrom `@ember/component`, be sure to call `this._super(...arguments)`\nin your `init` declaration!\nIf you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 541,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 568,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 576,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 93,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 137,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 164,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 212,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 229,
          "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.\n\nNotify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 247,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nThere are two common invocation patterns for `.addObserver()`:\n\n- Passing two arguments:\n  - the name of the property to observe (as a string)\n  - the function to invoke (an actual function)\n- Passing three arguments:\n  - the name of the property to observe (as a string)\n  - the target object (will be used to look up and invoke a\n    function on)\n  - the name of the function to invoke on the target object\n    (as a string).\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    // the following are equivalent:\n\n    // using three arguments\n    this.addObserver('foo', this, 'fooDidChange');\n\n    // using two arguments\n    this.addObserver('foo', (...args) => {\n      this.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    // your custom logic code\n  }\n});\n```\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is sync or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 333,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is async or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 354,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 371,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 388,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 403,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 433,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 453,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 497,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 81,
          "description": "The `willTransition` action is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```js {data-filename=app/routes/contact-form.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ContactFormRoute extends Route {\n  @action\n  willTransition(transition) {\n    if (this.controller.get('userHasEnteredData')) {\n      this.controller.displayNavigationConfirm();\n      transition.abort();\n    }\n  }\n}\n```\n\nYou can also redirect elsewhere by calling\n`this.transitionTo('elsewhere')` from within `willTransition`.\nNote that `willTransition` will not be fired for the\nredirecting `transitionTo`, since `willTransition` doesn't\nfire when there is already a transition underway. If you want\nsubsequent `willTransition` actions to fire for the redirecting\ntransition, you must first explicitly call\n`transition.abort()`.\n\nTo allow the `willTransition` event to continue bubbling to the parent\nroute, use `return true;`. When the `willTransition` method has a\nreturn value of `true` then the parent route's `willTransition` method\nwill be fired, enabling \"bubbling\" behavior for the event.",
          "itemtype": "event",
          "name": "willTransition",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 126,
          "description": "The `didTransition` action is fired after a transition has\nsuccessfully been completed. This occurs after the normal model\nhooks (`beforeModel`, `model`, `afterModel`, `setupController`)\nhave resolved. The `didTransition` action has no arguments,\nhowever, it can be useful for tracking page views or resetting\nstate on the controller.\n\n```js {data-filename=app/routes/login.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class LoginRoute extends Route {\n  @action\n  didTransition() {\n    // your code there\n    return true; // Bubble the didTransition event\n  }\n}\n```",
          "itemtype": "event",
          "name": "didTransition",
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 153,
          "description": "The `loading` action is fired on the route when a route's `model`\nhook returns a promise that is not already resolved. The current\n`Transition` object is the first parameter and the route that\ntriggered the loading event is the second parameter.\n\n```js {data-filename=app/routes/application.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  loading(transition, route) {\n    let controller = this.controllerFor('foo');\n\n    // The controller may not be instantiated when initially loading\n    if (controller) {\n      controller.currentlyLoading = true;\n\n      transition.finally(function() {\n        controller.currentlyLoading = false;\n      });\n    }\n  }\n}\n```",
          "itemtype": "event",
          "name": "loading",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            },
            {
              "name": "route",
              "description": "The route that triggered the loading event",
              "type": "Route"
            }
          ],
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 188,
          "description": "When attempting to transition into a route, any of the hooks\nmay return a promise that rejects, at which point an `error`\naction will be fired on the partially-entered routes, allowing\nfor per-route error handling logic, or shared error handling\nlogic defined on a parent route.\n\nHere is an example of an error handler that will be invoked\nfor rejected promises from the various hooks on the route,\nas well as any unhandled errors from child routes:\n\n```js {data-filename=app/routes/admin.js}\nimport { reject } from 'rsvp';\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class AdminRoute extends Route {\n  beforeModel() {\n    return reject('bad things!');\n  }\n\n  @action\n  error(error, transition) {\n    // Assuming we got here due to the error in `beforeModel`,\n    // we can expect that error === \"bad things!\",\n    // but a promise model rejecting would also\n    // call this hook, as would any errors encountered\n    // in `afterModel`.\n\n    // The `error` hook is also provided the failed\n    // `transition`, which can be stored and later\n    // `.retry()`d if desired.\n\n    this.transitionTo('login');\n  }\n}\n```\n\n`error` actions that bubble up all the way to `ApplicationRoute`\nwill fire a default error handler that logs the error. You can\nspecify your own global default error handler by overriding the\n`error` handler on `ApplicationRoute`:\n\n```js {data-filename=app/routes/application.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  error(error, transition) {\n    this.controllerFor('banner').displayError(error.message);\n  }\n}\n```",
          "itemtype": "event",
          "name": "error",
          "params": [
            {
              "name": "error",
              "description": "",
              "type": "Error"
            },
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 802,
          "description": "This event is triggered when the router enters the route. It is\nnot executed when the model for the route changes.\n\n```js {data-filename=app/routes/application.js}\nimport { on } from '@ember/object/evented';\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  collectAnalytics: on('activate', function(){\n    collectAnalytics();\n  })\n});\n```",
          "itemtype": "event",
          "name": "activate",
          "since": "1.9.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 822,
          "description": "This event is triggered when the router completely exits this\nroute. It is not executed when the model for the route changes.\n\n```js {data-filename=app/routes/index.js}\nimport { on } from '@ember/object/evented';\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  trackPageLeaveAnalytics: on('deactivate', function(){\n    trackPageLeaveAnalytics();\n  })\n});\n```",
          "itemtype": "event",
          "name": "deactivate",
          "since": "1.9.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        }
      ],
      "properties": [
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 361,
          "description": "Configuration hash for this route's queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose controller property is `page`):\n\n```javascript\nqueryParams = {\n  page: {\n    // By default, controller query param properties don't\n    // cause a full transition when they are changed, but\n    // rather only cause the URL to update. Setting\n    // `refreshModel` to true will cause an \"in-place\"\n    // transition to occur, whereby the model hooks for\n    // this route (and any child routes) will re-fire, allowing\n    // you to reload models (e.g., from the server) using the\n    // updated query param values.\n    refreshModel: false,\n\n    // By default, changes to controller query param properties\n    // cause the URL to update via `pushState`, which means an\n    // item will be added to the browser's history, allowing\n    // you to use the back button to restore the app to the\n    // previous state before the query param property was changed.\n    // Setting `replace` to true will use `replaceState` (or its\n    // hash location equivalent), which causes no browser history\n    // item to be added. This options name and default value are\n    // the same as the `link-to` helper's `replace` option.\n    replace: false,\n\n    // By default, the query param URL key is the same name as\n    // the controller property name. Use `as` to specify a\n    // different URL key.\n    as: 'page'\n  }\n};\n```",
          "itemtype": "property",
          "name": "queryParams",
          "type": "Object",
          "since": "1.6.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 414,
          "description": "The name of the template to use by default when rendering this route's\ntemplate.\n\n```js {data-filename=app/routes/posts/list.js}\nimport Route from '@ember/routing/route';\n\nexport default class PostsListRoute extends Route {\n  templateName = 'posts/list';\n}\n```\n\n```js {data-filename=app/routes/posts/index.js}\nimport PostsListRoute from '../posts/list';\n\nexport default class PostsIndexRoute extends PostsListRoute {};\n```\n\n```js {data-filename=app/routes/posts/archived.js}\nimport PostsListRoute from '../posts/list';\n\nexport default class PostsArchivedRoute extends PostsListRoute {};\n```",
          "itemtype": "property",
          "name": "templateName",
          "type": "String",
          "default": "null",
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 447,
          "description": "The name of the controller to associate with this route.\n\nBy default, Ember will lookup a route's controller that matches the name\nof the route (i.e. `posts.new`). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.\n\nThis is useful in many ways, as the controller specified will be:\n\n* passed to the `setupController` method.\n* used as the controller for the template being rendered by the route.\n* returned from a call to `controllerFor` for the route.",
          "itemtype": "property",
          "name": "controllerName",
          "type": "String",
          "default": "null",
          "since": "1.4.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 470,
          "description": "The controller associated with this route.\n\nExample\n\n```js {data-filename=app/routes/form.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class FormRoute extends Route {\n  @action\n  willTransition(transition) {\n    if (this.controller.get('userHasEnteredData') &&\n        !confirm('Are you sure you want to abandon progress?')) {\n      transition.abort();\n    } else {\n      // Bubble the `willTransition` action so that\n      // parent routes can decide whether or not to abort.\n      return true;\n    }\n  }\n}\n```",
          "itemtype": "property",
          "name": "controller",
          "type": "Controller",
          "since": "1.6.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 501,
          "description": "The name of the route, dot-delimited.\n\nFor example, a route found at `app/routes/posts/post.js` will have\na `routeName` of `posts.post`.",
          "itemtype": "property",
          "name": "routeName",
          "type": "String",
          "since": "1.0.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 515,
          "description": "The name of the route, dot-delimited, including the engine prefix\nif applicable.\n\nFor example, a route found at `addon/routes/posts/post.js` within an\nengine named `admin` will have a `fullRouteName` of `admin.posts.post`.",
          "itemtype": "property",
          "name": "fullRouteName",
          "type": "String",
          "since": "2.10.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 579,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_activeQPChanged",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 720,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_optionsForQueryParam",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1567,
          "description": "Store property provides a hook for data persistence libraries to inject themselves.\n\nBy default, this store property provides the exact same functionality previously\nin the model hook.\n\nCurrently, the required interface is:\n\n`store.find(modelName, findArguments)`",
          "itemtype": "property",
          "name": "store",
          "type": "{Object}",
          "access": "private",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 1629,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_qp",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/routing/route.ts",
          "line": 2151,
          "description": "The controller associated with this route.\n\nExample\n\n```js {data-filename=app/routes/form.js}\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class FormRoute extends Route {\n  @action\n  willTransition(transition) {\n    if (this.controller.get('userHasEnteredData') &&\n        !confirm('Are you sure you want to abandon progress?')) {\n      transition.abort();\n    } else {\n      // Bubble the `willTransition` action so that\n      // parent routes can decide whether or not to abort.\n      return true;\n    }\n  }\n}\n```",
          "itemtype": "property",
          "name": "controller",
          "type": "Controller",
          "since": "1.6.0",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/routing/route"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 356,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Component` from `@ember/component`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 430,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 505,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 523,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "Route",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-5.2.0-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.2.0-@ember/routing/route",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.2.0",
          "type": "project-version"
        }
      }
    }
  }
}