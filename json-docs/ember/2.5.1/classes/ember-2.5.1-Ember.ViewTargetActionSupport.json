{
  "data": {
    "id": "ember-2.5.1-Ember.ViewTargetActionSupport",
    "type": "class",
    "attributes": {
      "name": "Ember.ViewTargetActionSupport",
      "shortname": "Ember.ViewTargetActionSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.Component"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
      "line": 5,
      "description": "`Ember.ViewTargetActionSupport` is a mixin that can be included in a\nview class to add a `triggerAction` method with semantics similar to\nthe Handlebars `{{action}}` helper. It provides intelligent defaults\nfor the action's target: the view's controller; and the context that is\nsent with the action: the view's context.\n\nNote: In normal Ember usage, the `{{action}}` helper is usually the best\nchoice. This mixin is most often useful when you are doing more complex\nevent handling in custom View subclasses.\n\nFor example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `action` can be provided as properties of an optional object argument\nto `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```",
      "extends": "Ember.TargetActionSupport",
      "access": "private",
      "tagname": "",
      "methods": [
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 45,
          "description": "Removes the child view from the parent view.",
          "itemtype": "method",
          "name": "removeChild",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 71,
          "description": "Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding `createChildViews()`. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.",
          "itemtype": "method",
          "name": "createChildView",
          "params": [
            {
              "name": "viewClass",
              "description": "",
              "type": "Class|String"
            },
            {
              "name": "attrs",
              "description": "Attributes to add",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "new instance",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 132,
          "description": "Return the nearest ancestor that is an instance of the provided\nclass or mixin.",
          "itemtype": "method",
          "name": "nearestOfType",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself),\n       or an instance of Ember.Mixin.",
              "type": "Class,Mixin"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 154,
          "description": "Return the nearest ancestor that has a given property.",
          "itemtype": "method",
          "name": "nearestWithProperty",
          "params": [
            {
              "name": "property",
              "description": "A property name",
              "type": "String"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 171,
          "description": "Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.\n\nIf children were added during the rendering process using `appendChild`,\n`rerender` will remove them, because they will be added again\nif needed by the next `render`.\n\nIn general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling `rerender`, which can\nbe slow.",
          "itemtype": "method",
          "name": "rerender",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 205,
          "description": "Returns a jQuery object for this view's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\n\nFor example, calling `view.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this view.",
          "itemtype": "method",
          "name": "$",
          "params": [
            {
              "name": "selector",
              "description": "a jQuery-compatible selector string",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the jQuery object for the DOM node",
            "type": "JQuery"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 239,
          "description": "Appends the view's element to the specified parent element.\n\nIf the view does not have an HTML representation yet, `createElement()`\nwill be called automatically.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.\n\nThis is not typically a function that you will need to call directly when\nbuilding your application. You might consider using `Ember.ContainerView`\ninstead. If you do need to use `appendTo`, be sure that the target element\nyou are providing is associated with an `Ember.Application` and does not\nhave an ancestor element that is associated with an Ember view.",
          "itemtype": "method",
          "name": "appendTo",
          "params": [
            {
              "name": "A",
              "description": "selector, element, HTML string, or jQuery object",
              "type": "String|DOMElement|jQuery"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 291,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "renderToElement",
          "params": [
            {
              "name": "tagName",
              "description": "The tag of the element to create and render into. Defaults to \"body\".",
              "type": "String"
            }
          ],
          "return": {
            "description": "element",
            "type": "HTMLBodyElement"
          },
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 344,
          "description": "Replaces the content of the specified parent element with this view's\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing",
          "itemtype": "method",
          "name": "replaceIn",
          "params": [
            {
              "name": "target",
              "description": "A selector, element, HTML string, or jQuery object",
              "type": "String|DOMElement|jQuery"
            }
          ],
          "return": {
            "description": "received",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 369,
          "description": "Appends the view's element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.\n\nIf your application uses the `rootElement` property, you must append\nthe view within that element. Rendering views outside of the `rootElement`\nis not supported.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.",
          "itemtype": "method",
          "name": "append",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 390,
          "description": "Removes the view's element from the element to which it is attached.",
          "itemtype": "method",
          "name": "remove",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 439,
          "description": "Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of `elementId` (or the\nview's guid if `elementId` is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.",
          "itemtype": "method",
          "name": "findElementInParentElement",
          "params": [
            {
              "name": "parentElement",
              "description": "The parent's DOM element",
              "type": "DOMElement"
            }
          ],
          "return": {
            "description": "The discovered element",
            "type": "DOMElement"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 456,
          "description": "Creates a DOM representation of the view and all of its child views by\nrecursively calling the `render()` method. Once the element is created,\nit sets the `element` property of the view to the rendered element.\n\nAfter the element has been inserted into the DOM, `didInsertElement` will\nbe called on this view and all of its child views.",
          "itemtype": "method",
          "name": "createElement",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 507,
          "description": "Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.\n\nIf you implement `willDestroyElement()` on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.\n\nIf you write a `willDestroyElement()` handler, you can assume that your\n`didInsertElement()` handler was called earlier for the same element.\n\nYou should not call or override this method yourself, but you may\nwant to implement the above callbacks.",
          "itemtype": "method",
          "name": "destroyElement",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 580,
          "description": "Normally, Ember's component model is \"write-only\". The component takes a\nbunch of attributes that it got passed in, and uses them to render its\ntemplate.\n\nOne nice thing about this model is that if you try to set a value to the\nsame thing as last time, Ember (through HTMLBars) will avoid doing any\nwork on the DOM.\n\nThis is not just a performance optimization. If an attribute has not\nchanged, it is important not to clobber the element's \"hidden state\".\nFor example, if you set an input's `value` to the same value as before,\nit will clobber selection state and cursor position. In other words,\nsetting an attribute is not **always** idempotent.\n\nThis method provides a way to read an element's attribute and also\nupdate the last value Ember knows about at the same time. This makes\nsetting an attribute idempotent.\n\nIn particular, what this means is that if you get an `<input>` element's\n`value` attribute and then re-render the template with the same value,\nit will avoid clobbering the cursor and selection position.\n\nSince most attribute sets are idempotent in the browser, you typically\ncan get away with reading attributes using jQuery, but the most reliable\nway to do so is through this method.",
          "itemtype": "method",
          "name": "readDOMAttr",
          "params": [
            {
              "name": "name",
              "description": "the name of the attribute",
              "type": "String"
            }
          ],
          "return": {
            "description": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 622,
          "description": "Setup a view, but do not finish waking it up.\n\n* configure `childViews`\n* register the view with the global views hash, which is used for event\n  dispatch",
          "itemtype": "method",
          "name": "init",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 711,
          "description": "Removes the view from its `parentView`, if one is found. Otherwise\ndoes nothing.",
          "itemtype": "method",
          "name": "removeFromParent",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 729,
          "description": "You must call `destroy` on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.",
          "itemtype": "method",
          "name": "destroy",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 762,
          "description": "Handle events from `Ember.EventDispatcher`",
          "itemtype": "method",
          "name": "handleEvent",
          "params": [
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "evt",
              "description": "",
              "type": "Event"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 774,
          "description": "Registers the view in the view registry, keyed on the view's `elementId`.\nThis is used by the EventDispatcher to locate the view in response to\nevents.\n\nThis method should only be called once the view has been inserted into the\nDOM.",
          "itemtype": "method",
          "name": "_register",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 790,
          "description": "Removes the view from the view registry. This should be called when the\nview is removed from DOM.",
          "itemtype": "method",
          "name": "_unregister",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
          "line": 63,
          "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  action: 'save',\n  actionContext: Ember.computed.alias('context'),\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save',\n      target: this.get('controller'),\n      actionContext: this.get('context')\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with a reference to `this`,\n        // to the current controller\n  }\n});\n```",
          "itemtype": "method",
          "name": "triggerAction",
          "params": [
            {
              "name": "opts",
              "description": "(optional, with the optional keys action, target and/or actionContext)",
              "type": "Object"
            }
          ],
          "return": {
            "description": "true if the action was sent successfully and did not return false",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.TargetActionSupport"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 524,
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 540,
          "itemtype": "method",
          "name": "reopen",
          "params": [
            {
              "name": "arguments",
              "description": "",
              "multiple": true
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 578,
          "itemtype": "method",
          "name": "apply",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "applied object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 611,
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-metal",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Mixin"
        }
      ],
      "events": [
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 476,
          "description": "Called when a view is going to insert an element into the DOM.",
          "itemtype": "event",
          "name": "willInsertElement",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 484,
          "description": "Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.\n\nWhen a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.",
          "itemtype": "event",
          "name": "didInsertElement",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 497,
          "description": "Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state",
          "itemtype": "event",
          "name": "willClearRender",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 530,
          "description": "Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.\n\nPlease note: any property changes made during this event will have no\neffect on object observers.",
          "itemtype": "event",
          "name": "willDestroyElement",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 543,
          "description": "Called when the parentView property has changed.",
          "itemtype": "event",
          "name": "parentViewDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        }
      ],
      "properties": [
        {
          "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
          "line": 16,
          "description": "Array of child views. You should never edit this array directly.\nInstead, use `appendChild` and `removeFromParent`.",
          "itemtype": "property",
          "name": "childViews",
          "type": "Array",
          "default": "[]",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 14,
          "description": "The object from which templates should access properties.\n\nThis object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.\n\nBy default, this will be the view's controller.",
          "itemtype": "property",
          "name": "context",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 37,
          "description": "Private copy of the view's template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.\n\nThe context of a view is looked up as follows:\n\n1. Supplied context (usually by Handlebars)\n2. Specified controller\n3. `parentView`'s context (for a child of a ContainerView)\n\nThe code in Handlebars that overrides the `_context` property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.",
          "itemtype": "property",
          "name": "_context",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_context_support.js",
          "line": 76,
          "description": "The controller managing this view. If this property is set, it will be\nmade available for use by the template.",
          "itemtype": "property",
          "name": "controller",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "submodule": "ember-views"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 23,
          "itemtype": "property",
          "name": "isView",
          "type": "Boolean",
          "default": "true",
          "static": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 36,
          "description": "The name of the template to lookup if no template is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
          "itemtype": "property",
          "name": "templateName",
          "type": "String",
          "default": "null",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 49,
          "description": "The name of the layout to lookup if no layout is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
          "itemtype": "property",
          "name": "layoutName",
          "type": "String",
          "default": "null",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 62,
          "description": "The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.\n\nIn general, you should set the `templateName` property instead of setting\nthe template yourself.",
          "itemtype": "property",
          "name": "template",
          "type": "Function",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 87,
          "description": "A view may contain a layout. A layout is a regular template but\nsupersedes the `template` property during rendering. It is the\nresponsibility of the layout template to retrieve the `template`\nproperty from the view (or alternatively, call `Handlebars.helpers.yield`,\n`{{yield}}`) to render it in the correct location.\n\nThis is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the `template` property\non a subclass.",
          "itemtype": "property",
          "name": "layout",
          "type": "Function",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 196,
          "description": "Returns the current DOM element for the view.",
          "itemtype": "property",
          "name": "element",
          "type": "DOMElement",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 409,
          "description": "The HTML `id` of the view's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n  {{my-component elementId=\"a-really-cool-id\"}}\n```\n\nIf not manually set a default value will be provided by the framework.\n\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```javascript\n  export default Ember.Component.extend({\n    setElementId: Ember.on('init', function() {\n      var index = this.get('index');\n      this.set('elementId', 'component-id' + index);\n    })\n  });\n```",
          "itemtype": "property",
          "name": "elementId",
          "type": "String",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_support.js",
          "line": 555,
          "description": "Tag name for the view's outer element. The tag name is only used when an\nelement is first created. If you change the `tagName` for an element, you\nmust destroy and recreate the view element.\n\nBy default, the render buffer will use a `<div>` tag for views.",
          "itemtype": "property",
          "name": "tagName",
          "type": "String",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
          "line": 48,
          "itemtype": "property",
          "name": "target",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
          "line": 53,
          "itemtype": "property",
          "name": "actionContext",
          "access": "private",
          "tagname": "",
          "class": "Ember.ViewTargetActionSupport",
          "module": "ember",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-2.5.1-Ember.TargetActionSupport",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.5.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.5.1",
          "type": "project-version"
        }
      }
    }
  }
}