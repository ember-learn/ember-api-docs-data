{
  "data": {
    "id": "ember-5.8.0-Ember.ClassNamesSupport",
    "type": "class",
    "attributes": {
      "name": "Ember.ClassNamesSupport",
      "shortname": "Ember.ClassNamesSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Component"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.ts",
      "line": 10,
      "access": "private",
      "tagname": "",
      "methods": [],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/views/lib/mixins/child_views_support.ts",
          "line": 14,
          "description": "Array of child views. You should never edit this array directly.",
          "itemtype": "property",
          "name": "childViews",
          "type": "Array",
          "default": "[]",
          "access": "private",
          "tagname": "",
          "class": "Ember.ClassNamesSupport",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.ts",
          "line": 36,
          "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
          "itemtype": "property",
          "name": "classNames",
          "type": "Array",
          "default": "['ember-view']",
          "access": "public",
          "tagname": "",
          "class": "Ember.ClassNamesSupport",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.ts",
          "line": 48,
          "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['priority'],\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isUrgent:urgent'],\n  isUrgent: true\n});\n```\n\nIf you would like to specify a class that should only be added when the\nproperty is false, you can declare a binding like this:\n\n```javascript\n// Applies the 'disabled' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isEnabled::disabled'],\n  isEnabled: false\n});\n```\n\nThis list of properties is inherited from the component's superclasses as well.",
          "itemtype": "property",
          "name": "classNameBindings",
          "type": "Array",
          "default": "[]",
          "access": "public",
          "tagname": "",
          "class": "Ember.ClassNamesSupport",
          "module": "ember",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.8.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.8.0",
          "type": "project-version"
        }
      }
    }
  }
}