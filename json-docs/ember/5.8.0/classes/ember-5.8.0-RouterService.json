{
  "data": {
    "id": "ember-5.8.0-RouterService",
    "type": "class",
    "attributes": {
      "name": "RouterService",
      "shortname": "RouterService",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing/router-service",
      "namespace": "",
      "file": "packages/@ember/routing/router-service.ts",
      "line": 27,
      "description": "The Router service is the public API that provides access to the router.\n\nThe immediate benefit of the Router service is that you can inject it into components,\ngiving them a friendly way to initiate transitions and ask questions about the current\nglobal router state.\n\nIn this example, the Router service is injected into a component to initiate a transition\nto a dedicated route:\n\n```js {data-filename=app/components/example.js}\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { service } from '@ember/service';\n\nexport default class ExampleComponent extends Component {\n  @service router;\n\n  @action\n  next() {\n    this.router.transitionTo('other.route');\n  }\n}\n```\n\nLike any service, it can also be injected into helpers, routes, etc.",
      "access": "public",
      "tagname": "",
      "extends": "Service",
      "methods": [
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 89,
          "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\nCalling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.\nThis behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.\nSee the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.\n\nIn the following example we use the Router service to navigate to a route with a\nspecific model from a Component in the first action, and in the second we trigger\na query-params only transition.\n\n```js {data-filename=app/components/example.js}\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  @action\n  goToComments(post) {\n    this.router.transitionTo('comments', post);\n  }\n\n  @action\n  fetchMoreComments(latestComment) {\n    this.router.transitionTo({\n      queryParams: { commentsAfter: latestComment }\n    });\n  }\n}\n```",
          "itemtype": "method",
          "name": "transitionTo",
          "params": [
            {
              "name": "routeNameOrUrl",
              "description": "the name of the route or a URL",
              "type": "String",
              "optional": true
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
              "type": "...Object",
              "optional": true
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters. May be supplied as the only\n parameter to trigger a query-parameter-only transition.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "the transition object associated with this\n  attempted transition",
            "type": "Transition"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 148,
          "description": "Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,\nit replaces the entry for the current route.\nWhen the user clicks the \"back\" button in the browser, there will be fewer steps.\nThis is most commonly used to manage redirects in a way that does not cause confusing additions\nto the user's browsing history.\n\nCalling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.\nThis behavior is different from calling `replaceWith` on a route.\nSee the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.\n\nUsage example:\n\n```js {data-filename=app/routes/application.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n  beforeModel() {\n    if (!authorized()){\n      this.router.replaceWith('unauthorized');\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "replaceWith",
          "params": [
            {
              "name": "routeNameOrUrl",
              "description": "the name of the route or a URL of the desired destination",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route i.e. an object of params to pass to the destination route",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "the transition object associated with this\n  attempted transition",
            "type": "Transition"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 189,
          "description": "Generate a URL based on the supplied route name and optionally a model. The\nURL is returned as a string that can be used for any purpose.\n\nIn this example, the URL for the `author.books` route for a given author\nis copied to the clipboard.\n\n```handlebars {data-filename=app/templates/application.hbs}\n<CopyLink @author={{hash id=\"tomster\" name=\"Tomster\"}} />\n```\n\n```js {data-filename=app/components/copy-link.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\nimport { action } from '@ember/object';\n\nexport default class CopyLinkComponent extends Component {\n  @service router;\n  @service clipboard;\n\n  @action\n  copyBooksURL() {\n    if (this.author) {\n      const url = this.router.urlFor('author.books', this.args.author);\n      this.clipboard.set(url);\n      // Clipboard now has /author/tomster/books\n    }\n  }\n}\n```\n\nJust like with `transitionTo` and `replaceWith`, `urlFor` can also handle\nquery parameters.\n\n```handlebars {data-filename=app/templates/application.hbs}\n<CopyLink @author={{hash id=\"tomster\" name=\"Tomster\"}} />\n```\n\n```js {data-filename=app/components/copy-link.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\nimport { action } from '@ember/object';\n\nexport default class CopyLinkComponent extends Component {\n  @service router;\n  @service clipboard;\n\n  @action\n  copyOnlyEmberBooksURL() {\n    if (this.author) {\n      const url = this.router.urlFor('author.books', this.author, {\n        queryParams: { filter: 'emberjs' }\n      });\n      this.clipboard.set(url);\n      // Clipboard now has /author/tomster/books?filter=emberjs\n    }\n  }\n}\n```",
          "itemtype": "method",
          "name": "urlFor",
          "params": [
            {
              "name": "routeName",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) for the route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n   containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "the string representing the generated URL",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 265,
          "description": "Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.\nSee [model](api/ember/release/classes/Route/methods/model?anchor=model) and\n[queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.\n\nIn the following example, `isActive` will return `true` if the current route is `/posts`.\n\n```js {data-filename=app/components/posts.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  displayComments() {\n    return this.router.isActive('posts');\n  }\n});\n```\n\nThe next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,\nassuming the post has an id of 1:\n\n```js {data-filename=app/components/posts.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  displayComments(post) {\n    return this.router.isActive('posts', post.id);\n  }\n});\n```\n\nWhere `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].\nIf `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.",
          "itemtype": "method",
          "name": "isActive",
          "params": [
            {
              "name": "routeName",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) or identifier(s) to be used when determining the active route.",
              "type": "...Object"
            },
            {
              "name": "options",
              "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "true if the provided routeName/models/queryParams are active",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 369,
          "description": "Takes a string URL and returns a `RouteInfo` for the leafmost route represented\nby the URL. Returns `null` if the URL is not recognized. This method expects to\nreceive the actual URL as seen by the browser including the app's `rootURL`.\n\nSee [RouteInfo](/ember/release/classes/RouteInfo) for more info.\n\nIn the following example `recognize` is used to verify if a path belongs to our\napplication before transitioning to it.\n\n```\nimport Component from '@ember/component';\nimport { service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n  path = '/';\n\n  click() {\n    if (this.router.recognize(this.path)) {\n      this.router.transitionTo(this.path);\n    }\n  }\n}\n```",
          "itemtype": "method",
          "name": "recognize",
          "params": [
            {
              "name": "url",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RouteInfo | null"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 410,
          "description": "Takes a string URL and returns a promise that resolves to a\n`RouteInfoWithAttributes` for the leafmost route represented by the URL.\nThe promise rejects if the URL is not recognized or an unhandled exception\nis encountered. This method expects to receive the actual URL as seen by\nthe browser including the app's `rootURL`.",
          "itemtype": "method",
          "name": "recognizeAndLoad",
          "params": [
            {
              "name": "url",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RouteInfo"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 432,
          "description": "You can register a listener for events emitted by this service with `.on()`:\n\n```js {data-filename=app/routes/contact-form.js}\nimport Route from '@ember/routing';\nimport { service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n\n  activate() {\n    this.router.on('routeWillChange', (transition) => {\n      if (!transition.to.find(route => route.name === this.routeName)) {\n        alert(\"Please save or cancel your changes.\");\n        transition.abort();\n      }\n    })\n  }\n}\n```",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 459,
          "description": "You can unregister a listener for events emitted by this service with `.off()`:\n\n```js {data-filename=app/routes/contact-form.js}\nimport Route from '@ember/routing';\nimport { service } from '@ember/service';\n\nexport default class ContactFormRoute extends Route {\n  @service router;\n\n  callback = (transition) => {\n    if (!transition.to.find(route => route.name === this.routeName)) {\n      alert('Please save or cancel your changes.');\n      transition.abort();\n    }\n  };\n\n  activate() {\n    this.router.on('routeWillChange', this.callback);\n  }\n\n  deactivate() {\n    this.router.off('routeWillChange', this.callback);\n  }\n}\n```",
          "itemtype": "method",
          "name": "off",
          "params": [
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 566,
          "description": "Refreshes all currently active routes, doing a full transition.\nIf a route name is provided and refers to a currently active route,\nit will refresh only that route and its descendents.\nReturns a promise that will be resolved once the refresh is complete.\nAll resetController, beforeModel, model, afterModel, redirect, and setupController\nhooks will be called again. You will get new data from the model hook.",
          "itemtype": "method",
          "name": "refresh",
          "params": [
            {
              "name": "routeName",
              "description": "the route to refresh (along with all child routes)",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "Transition"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 321,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Component`\nfrom `@ember/component`, be sure to call `this._super(...arguments)`\nin your `init` declaration!\nIf you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 540,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 567,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 575,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 93,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 137,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 164,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 212,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 229,
          "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.\n\nNotify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 247,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nThere are two common invocation patterns for `.addObserver()`:\n\n- Passing two arguments:\n  - the name of the property to observe (as a string)\n  - the function to invoke (an actual function)\n- Passing three arguments:\n  - the name of the property to observe (as a string)\n  - the target object (will be used to look up and invoke a\n    function on)\n  - the name of the function to invoke on the target object\n    (as a string).\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    // the following are equivalent:\n\n    // using three arguments\n    this.addObserver('foo', this, 'fooDidChange');\n\n    // using two arguments\n    this.addObserver('foo', (...args) => {\n      this.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    // your custom logic code\n  }\n});\n```\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is sync or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 333,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is async or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 354,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 371,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 388,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 403,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 433,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 453,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 497,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 492,
          "description": "The `routeWillChange` event is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```js {data-filename=app/routes/contact-form.js}\nimport Route from '@ember/routing';\nimport { service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n\n  activate() {\n    this.router.on('routeWillChange', (transition) => {\n      if (!transition.to.find(route => route.name === this.routeName)) {\n        alert(\"Please save or cancel your changes.\");\n        transition.abort();\n      }\n    })\n  }\n}\n```\n\nThe `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.",
          "itemtype": "event",
          "name": "routeWillChange",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 526,
          "description": "The `routeDidChange` event only fires once a transition has settled.\nThis includes aborts and error substates. Like the `routeWillChange` event\nit receives a Transition as the sole argument.\n\nA good example is sending some analytics when the route has transitioned:\n\n```js {data-filename=app/routes/contact-form.js}\nimport Route from '@ember/routing';\nimport { service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n\n  activate() {\n    this.router.on('routeDidChange', (transition) => {\n      ga.send('pageView', {\n        current: transition.to.name,\n        from: transition.from.name\n      });\n    })\n  }\n}\n```\n\n`routeDidChange` will be called after any `Route`'s\n[didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)\naction has been fired.\nThe updates of properties\n[currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),\n[currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)\nand\n[currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)\nare completed at the time `routeDidChange` is called.",
          "itemtype": "event",
          "name": "routeDidChange",
          "params": [
            {
              "name": "transition",
              "description": "",
              "type": "Transition"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        }
      ],
      "properties": [
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 594,
          "description": "Name of the current route.\n\n This property represents the logical name of the route,\n which is dot separated.\n For the following router:\n\n ```js {data-filename=app/router.js}\n Router.map(function() {\n   this.route('about');\n   this.route('blog', function () {\n     this.route('post', { path: ':post_id' });\n   });\n });\n ```\n\n It will return:\n\n * `index` when you visit `/`\n * `about` when you visit `/about`\n * `blog.index` when you visit `/blog`\n * `blog.post` when you visit `/blog/some-post-id`",
          "itemtype": "property",
          "name": "currentRouteName",
          "type": "{String | null}",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 624,
          "description": "Current URL for the application.\n\n  This property represents the URL path for this route.\n  For the following router:\n\n ```js {data-filename=app/router.js}\n Router.map(function() {\n   this.route('about');\n   this.route('blog', function () {\n     this.route('post', { path: ':post_id' });\n   });\n });\n ```\n\n It will return:\n\n * `/` when you visit `/`\n * `/about` when you visit `/about`\n * `/blog` when you visit `/blog`\n * `/blog/some-post-id` when you visit `/blog/some-post-id`",
          "itemtype": "property",
          "name": "currentURL",
          "type": "String",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 653,
          "description": "The `location` property returns what implementation of the `location` API\nyour application is using, which determines what type of URL is being used.\n\nSee [Location](/ember/release/classes/Location) for more information.\n\nTo force a particular `location` API implementation to be used in your\napplication you can set a location type on your `config/environment`.\nFor example, to set the `history` type:\n\n```js {data-filename=config/environment.js}\n'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'router-service',\n    environment,\n    rootURL: '/',\n    locationType: 'history',\n    ...\n  }\n}\n```\n\nThe following location types are available by default:\n`hash`, `history`, `none`.\n\nSee [HashLocation](/ember/release/classes/HashLocation).\nSee [HistoryLocation](/ember/release/classes/HistoryLocation).\nSee [NoneLocation](/ember/release/classes/NoneLocation).",
          "itemtype": "property",
          "name": "location",
          "default": "'hash'",
          "see": [
            "{Location}"
          ],
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 692,
          "description": "The `rootURL` property represents the URL of the root of\nthe application, '/' by default.\nThis prefix is assumed on all routes defined on this app.\n\nIf you change the `rootURL` in your environment configuration\nlike so:\n\n```js {data-filename=config/environment.js}\n'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'router-service',\n    environment,\n    rootURL: '/my-root',\n  …\n  }\n]\n```\n\nThis property will return `/my-root`.",
          "itemtype": "property",
          "name": "rootURL",
          "default": "'/'",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/routing/router-service.ts",
          "line": 722,
          "description": "The `currentRoute` property contains metadata about the current leaf route.\nIt returns a `RouteInfo` object that has information like the route name,\nparams, query params and more.\n\nSee [RouteInfo](/ember/release/classes/RouteInfo) for more info.\n\nThis property is guaranteed to change whenever a route transition\nhappens (even when that transition only changes parameters\nand doesn't change the active route).\n\nUsage example:\n```js {data-filename=app/components/header.js}\n  import Component from '@glimmer/component';\n  import { service } from '@ember/service';\n  import { notEmpty } from '@ember/object/computed';\n\n  export default class extends Component {\n    @service router;\n\n    @notEmpty('router.currentRoute.child') isChildRoute;\n  });\n```",
          "itemtype": "property",
          "name": "currentRoute",
          "type": "RouteInfo",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/routing/router-service"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 355,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Component` from `@ember/component`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 429,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 504,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 522,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "RouterService",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-5.8.0-Service",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.8.0-@ember/routing/router-service",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.8.0",
          "type": "project-version"
        }
      }
    }
  }
}