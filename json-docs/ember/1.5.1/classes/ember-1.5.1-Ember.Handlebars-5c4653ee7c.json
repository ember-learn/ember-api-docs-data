{
  "data": {
    "id": "ember-1.5.1-Ember.Handlebars",
    "type": "class",
    "attributes": {
      "name": "Ember.Handlebars",
      "shortname": "Ember.Handlebars",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-handlebars-compiler",
      "namespace": "Ember",
      "file": "../packages/ember-handlebars-compiler/lib/main.js",
      "line": 27,
      "description": "<html><head></head><body><p>Prepares the Handlebars templating library for use inside Ember&apos;s view\nsystem.</p>\n<p>The <code>Ember.Handlebars</code> object is the standard Handlebars library, extended to\nuse Ember&apos;s <code>get()</code> method instead of direct property access, which allows\ncomputed properties to be used inside templates.</p>\n<p>To create an <code>Ember.Handlebars</code> template, call <code>Ember.Handlebars.compile()</code>.\nThis will return a function that can be used by <code>Ember.View</code> for rendering.</p>\n</body></html>",
      "methods": [
        {
          "file": "../packages/ember-handlebars-compiler/lib/main.js",
          "line": 43,
          "description": "<html><head></head><body><p>Register a bound helper or custom view helper.</p>\n<h2 id=\"simple-bound-helper-example\">Simple bound helper example</h2>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Ember.Handlebars.helper(<span class=\"string\">&apos;capitalize&apos;</span>, <span class=\"keyword\">function</span><span class=\"params\">(value)</span> {\n  <span class=\"keyword\">return</span> value.toUpperCase();\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above bound helper can be used inside of templates as follows:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">capitalize</span> name}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, when the <code>name</code> property of the template&apos;s context changes,\nthe rendered value of the helper will update to reflect this change.</p>\n<p>For more examples of bound helpers, see documentation for\n<code>Ember.Handlebars.registerBoundHelper</code>.</p>\n<h2 id=\"custom-view-helper-example\">Custom view helper example</h2>\n<p>Assuming a view subclass named <code>App.CalendarView</code> were defined, a helper\nfor rendering instances of this view could be registered as follows:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>Ember<span class=\"selector-class\">.Handlebars</span><span class=\"selector-class\">.helper</span>(<span class=\"string\">&apos;calendar&apos;</span>, App.CalendarView):</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above bound helper can be used inside of templates as follows:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">calendar</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Which is functionally equivalent to:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">view</span></span> App.CalendarView}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Options in the helper will be passed to the view in exactly the same\nmanner as with the <code>view</code> helper.</p>\n</body></html>",
          "itemtype": "method",
          "name": "helper",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "function",
              "description": "or view class constructor",
              "type": "Function|Ember.View"
            },
            {
              "name": "dependentKeys",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars-compiler",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars-compiler/lib/main.js",
          "line": 106,
          "description": "<html><head></head><body><p>Returns a helper function that renders the provided ViewClass.</p>\n<p>Used internally by Ember.Handlebars.helper and other methods\ninvolving helper/component registration.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "makeViewHelper",
          "params": [
            {
              "name": "ViewClass",
              "description": "view class constructor",
              "type": "Function"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars-compiler",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars-compiler/lib/main.js",
          "line": 245,
          "description": "<html><head></head><body><p>Used for precompilation of Ember Handlebars templates. This will not be used\nduring normal app execution.</p>\n</body></html>",
          "itemtype": "method",
          "name": "precompile",
          "static": 1,
          "params": [
            {
              "name": "string",
              "description": "The template to precompile",
              "type": "String"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars-compiler",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars-compiler/lib/main.js",
          "line": 276,
          "description": "<html><head></head><body><p>The entry point for Ember Handlebars. This replaces the default\n<code>Handlebars.compile</code> and turns on template-local data and String\nparameters.</p>\n</body></html>",
          "itemtype": "method",
          "name": "compile",
          "static": 1,
          "params": [
            {
              "name": "string",
              "description": "The template to compile",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Function"
          },
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars-compiler",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/helpers/binding.js",
          "line": 694,
          "description": "<html><head></head><body><p>Helper that, given a space-separated string of property paths and a context,\nreturns an array of class names. Calling this method also has the side\neffect of setting up observers at those property paths, such that if they\nchange, the correct class name will be reapplied to the DOM element.</p>\n<p>For example, if you pass the string &quot;fooBar&quot;, it will first look up the\n&quot;fooBar&quot; value of the context. If that value is true, it will add the\n&quot;foo-bar&quot; class to the current element (i.e., the dasherized form of\n&quot;fooBar&quot;). If the value is a string, it will add that string as the class.\nOtherwise, it will not add any new class name.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "bindClasses",
          "params": [
            {
              "name": "context",
              "description": "The context from which to lookup properties",
              "type": "Ember.Object"
            },
            {
              "name": "classBindings",
              "description": "A string, space-separated, of class bindings\n  to use",
              "type": "String"
            },
            {
              "name": "view",
              "description": "The view in which observers should look for the\n  element to update",
              "type": "Ember.View"
            },
            {
              "name": "bindAttrId",
              "description": "Optional bindAttr id used to lookup elements",
              "type": "Srting"
            }
          ],
          "return": {
            "description": "An array of class names to add",
            "type": "Array"
          },
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 48,
          "description": "<html><head></head><body><p>Lookup both on root and on window. If the path starts with\na keyword, the corresponding object will be looked up in the\ntemplate&apos;s data hash and used to resolve the path.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "root",
              "description": "The object to look up the property on",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The path to be lookedup",
              "type": "String"
            },
            {
              "name": "options",
              "description": "The template's option hash",
              "type": "Object"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 92,
          "description": "<html><head></head><body><p>This method uses <code>Ember.Handlebars.get</code> to lookup a value, then ensures\nthat the value is escaped properly.</p>\n<p>If <code>unescaped</code> is a truthy value then the escaping will not be performed.</p>\n</body></html>",
          "itemtype": "method",
          "name": "getEscaped",
          "params": [
            {
              "name": "root",
              "description": "The object to look up the property on",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The path to be lookedup",
              "type": "String"
            },
            {
              "name": "options",
              "description": "The template's option hash",
              "type": "Object"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 221,
          "description": "<html><head></head><body><p>Register a bound handlebars helper. Bound helpers behave similarly to regular\nhandlebars helpers, with the added ability to re-render when the underlying data\nchanges.</p>\n<h2 id=\"simple-example\">Simple example</h2>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Handlebars</span>.</span></span>register<span class=\"constructor\">BoundHelper(&apos;<span class=\"params\">capitalize</span>&apos;, <span class=\"params\">function</span>(<span class=\"params\">value</span>)</span> {\n  return value.<span class=\"keyword\">to</span><span class=\"constructor\">UpperCase()</span>;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The above bound helper can be used inside of templates as follows:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">capitalize</span> name}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, when the <code>name</code> property of the template&apos;s context changes,\nthe rendered value of the helper will update to reflect this change.</p>\n<h2 id=\"example-with-options\">Example with options</h2>\n<p>Like normal handlebars helpers, bound helpers have access to the options\npassed into the helper call.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>Ember.Handlebars.registerBoundHelper(<span class=\"string\">&apos;repeat&apos;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">value, options</span>) {\n  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = options.<span class=\"built_in\">hash</span>.<span class=\"built_in\">count</span>;\n  <span class=\"keyword\">var</span> a = [];\n  <span class=\"keyword\">while</span>(a.<span class=\"built_in\">length</span> &lt; <span class=\"built_in\">count</span>) {\n      a.<span class=\"built_in\">push</span>(value);\n  }\n  <span class=\"keyword\">return</span> a.join(<span class=\"string\">&apos;&apos;</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This helper could be used in a template as follows:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">repeat</span> text <span class=\"attr\">count</span>=<span class=\"number\">3</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"example-with-bound-options\">Example with bound options</h2>\n<p>Bound hash options are also supported. Example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">repeat</span> text <span class=\"attr\">countBinding</span>=<span class=\"string\">&quot;numRepeats&quot;</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, count will be bound to the value of\nthe <code>numRepeats</code> property on the context. If that property\nchanges, the helper will be re-rendered.</p>\n<h2 id=\"example-with-extra-dependencies\">Example with extra dependencies</h2>\n<p>The <code>Ember.Handlebars.registerBoundHelper</code> method takes a variable length\nthird parameter which indicates extra dependencies on the passed in value.\nThis allows the handlebars helper to update when these dependencies change.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Handlebars</span>.</span></span>register<span class=\"constructor\">BoundHelper(&apos;<span class=\"params\">capitalizeName</span>&apos;, <span class=\"params\">function</span>(<span class=\"params\">value</span>)</span> {\n  return value.get(&apos;name&apos;).<span class=\"keyword\">to</span><span class=\"constructor\">UpperCase()</span>;\n}, &apos;name&apos;);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"example-with-multiple-bound-properties\">Example with multiple bound properties</h2>\n<p><code>Ember.Handlebars.registerBoundHelper</code> supports binding to\nmultiple properties, e.g.:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>Ember.Handlebars.registerBoundHelper(<span class=\"string\">&apos;concatenate&apos;</span>, <span class=\"keyword\">function</span>() {\n  var <span class=\"keyword\">values</span> = <span class=\"keyword\">Array</span>.prototype.<span class=\"keyword\">slice</span>.<span class=\"keyword\">call</span>(arguments, <span class=\"number\">0</span>, <span class=\"number\">-1</span>);\n  <span class=\"keyword\">return</span> <span class=\"keyword\">values</span>.<span class=\"keyword\">join</span>(<span class=\"string\">&apos;||&apos;</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Which allows for template syntax such as <code>{{concatenate prop1 prop2}}</code> or\n<code>{{concatenate prop1 prop2 prop3}}</code>. If any of the properties change,\nthe helpr will re-render.  Note that dependency keys cannot be\nusing in conjunction with multi-property helpers, since it is ambiguous\nwhich property the dependent keys would belong to.</p>\n<h2 id=\"use-with-unbound-helper\">Use with unbound helper</h2>\n<p>The <code>{{unbound}}</code> helper can be used with bound helper invocations\nto render them in their unbound form, e.g.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">unbound</span></span> capitalize name}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, if the name property changes, the helper\nwill not re-render.</p>\n<h2 id=\"use-with-blocks-not-supported\">Use with blocks not supported</h2>\n<p>Bound helpers do not support use with Handlebars blocks or\nthe addition of child views of any kind.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerBoundHelper",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "function",
              "description": "",
              "type": "Function"
            },
            {
              "name": "dependentKeys",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 336,
          "description": "<html><head></head><body><p>A (mostly) private helper function to <code>registerBoundHelper</code>. Takes the\nprovided Handlebars helper function fn and returns it in wrapped\nbound helper form.</p>\n<p>The main use case for using this outside of <code>registerBoundHelper</code>\nis for registering helpers on the container:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>var boundHelperFn = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Handlebars</span>.</span></span>make<span class=\"constructor\">BoundHelper(<span class=\"params\">function</span>(<span class=\"params\">word</span>)</span> {\n  return word.<span class=\"keyword\">to</span><span class=\"constructor\">UpperCase()</span>;\n});\n\ncontainer.register(&apos;helper:my-bound-helper&apos;, boundHelperFn);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In the above example, if the helper function hadn&apos;t been wrapped in\n<code>makeBoundHelper</code>, the registered helper would be unbound.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "makeBoundHelper",
          "params": [
            {
              "name": "function",
              "description": "",
              "type": "Function"
            },
            {
              "name": "dependentKeys",
              "description": "",
              "type": "String",
              "multiple": true
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 482,
          "description": "<html><head></head><body><p>Renders the unbound form of an otherwise bound helper function.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "evaluateUnboundHelper",
          "params": [
            {
              "name": "fn",
              "description": "",
              "type": "Function"
            },
            {
              "name": "context",
              "description": "",
              "type": "Object"
            },
            {
              "name": "normalizedProperties",
              "description": "",
              "type": "Array"
            },
            {
              "name": "options",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/ext.js",
          "line": 521,
          "description": "<html><head></head><body><p>Overrides Handlebars.template so that we can distinguish\nuser-created, top-level templates from inner contexts.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "template",
          "params": [
            {
              "name": "spec",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-handlebars/lib/loader.js",
          "line": 11,
          "description": "<html><head></head><body><p>Find templates stored in the head tag as script tags and make them available\nto <code>Ember.CoreView</code> in the global <code>Ember.TEMPLATES</code> object. This will be run\nas as jQuery DOM-ready callback.</p>\n<p>Script tags with <code>text/x-handlebars</code> will be compiled\nwith Ember&apos;s Handlebars and are suitable for use as a view&apos;s template.\nThose with type <code>text/x-raw-handlebars</code> will be compiled with regular\nHandlebars and are suitable for use in views&apos; computed properties.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "bootstrap",
          "static": 1,
          "params": [
            {
              "name": "ctx",
              "description": ""
            }
          ],
          "class": "Ember.Handlebars",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.5.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.5.1",
          "type": "project-version"
        }
      }
    }
  }
}