{
  "data": {
    "id": "ember-1.5.1-Ember._HandlebarsBoundView",
    "type": "class",
    "attributes": {
      "name": "Ember._HandlebarsBoundView",
      "shortname": "Ember._HandlebarsBoundView",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-handlebars",
      "namespace": "Ember",
      "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
      "line": 137,
      "description": "<html><head></head><body><p><code>Ember._HandlebarsBoundView</code> is a private view created by the Handlebars\n<code>{{bind}}</code> helpers that is used to keep track of bound properties.</p>\n<p>Every time a property is bound using a <code>{{mustache}}</code>, an anonymous subclass\nof <code>Ember._HandlebarsBoundView</code> is created with the appropriate sub-template\nand context set up. When the associated property changes, just the template\nfor this view will re-render.</p>\n</body></html>",
      "extends": "Ember._MetamorphView",
      "access": "private",
      "tagname": "",
      "version": "1.5.1",
      "since": "1.5.1",
      "methods": [
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 259,
          "description": "<html><head></head><body><p>Determines which template to invoke, sets up the correct state based on\nthat logic, then invokes the default <code>Ember.View</code> <code>render</code> implementation.</p>\n<p>This method will first look up the <code>path</code> key on <code>pathRoot</code>,\nthen pass that value to the <code>shouldDisplayFunc</code> function. If that returns\n<code>true,</code> the <code>displayTemplate</code> function will be rendered to DOM. Otherwise,\n<code>inverseTemplate</code>, if specified, will be rendered.</p>\n<p>For example, if this <code>Ember._HandlebarsBoundView</code> represented the <code>{{#with\nfoo}}</code> helper, it would look up the <code>foo</code> property of its context, and\n<code>shouldDisplayFunc</code> would always return true. The object found by looking\nup <code>foo</code> would be passed to <code>displayTemplate</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "render",
          "params": [
            {
              "name": "buffer",
              "description": "",
              "type": "Ember.RenderBuffer"
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1026,
          "description": "<html><head></head><body><p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_contextDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1077,
          "description": "<html><head></head><body><p>Return the nearest ancestor that is an instance of the provided\nclass.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nearestInstanceOf",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself)",
              "type": "Class"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "deprecated": true,
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1096,
          "description": "<html><head></head><body><p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nearestOfType",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself),\n       or an instance of Ember.Mixin.",
              "type": "Class,Mixin"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1117,
          "description": "<html><head></head><body><p>Return the nearest ancestor that has a given property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nearestWithProperty",
          "params": [
            {
              "name": "property",
              "description": "A property name",
              "type": "String"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1133,
          "description": "<html><head></head><body><p>Return the nearest ancestor whose parent is an instance of\n<code>klass</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nearestChildOf",
          "params": [
            {
              "name": "klass",
              "description": "Subclass of Ember.View (or Ember.View itself)",
              "type": "Class"
            }
          ],
          "return": {
            "description": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1150,
          "description": "<html><head></head><body><p>When the parent view changes, recursively invalidate <code>controller</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "_parentViewDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1187,
          "description": "<html><head></head><body><p>Called on your view when it should push strings of HTML into a\n<code>Ember.RenderBuffer</code>. Most users will want to override the <code>template</code>\nor <code>templateName</code> properties instead of this method.</p>\n<p>By default, <code>Ember.View</code> will look for a function in the <code>template</code>\nproperty and invoke it with the value of <code>context</code>. The value of\n<code>context</code> will be the view&apos;s controller unless you override it.</p>\n</body></html>",
          "itemtype": "method",
          "name": "render",
          "params": [
            {
              "name": "buffer",
              "description": "The render buffer",
              "type": "Ember.RenderBuffer"
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1233,
          "description": "<html><head></head><body><p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rerender",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1268,
          "description": "<html><head></head><body><p>Iterates over the view&apos;s <code>classNameBindings</code> array, inserts the value\nof the specified property into the <code>classNames</code> array, then creates an\nobserver to update the view&apos;s element if the bound property ever changes\nin the future.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_applyClassNameBindings",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1349,
          "description": "<html><head></head><body><p>Iterates through the view&apos;s attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_applyAttributeBindings",
          "params": [
            {
              "name": "buffer",
              "description": "",
              "type": "Ember.RenderBuffer"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1398,
          "description": "<html><head></head><body><p>We&apos;re using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren&apos;t defined on a view at initialization time.</p>\n<p>Note: setUnknownProperty will only be called once for each property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setUnknownProperty",
          "params": [
            {
              "name": "key",
              "description": ""
            },
            {
              "name": "value",
              "description": ""
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1421,
          "description": "<html><head></head><body><p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_classStringForProperty",
          "params": [
            {
              "name": "property",
              "description": ""
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1462,
          "description": "<html><head></head><body><p>Returns a jQuery object for this view&apos;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&apos;li&apos;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n</body></html>",
          "itemtype": "method",
          "name": "$",
          "params": [
            {
              "name": "selector",
              "description": "a jQuery-compatible selector string",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the jQuery object for the DOM node",
            "type": "JQuery"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1507,
          "description": "<html><head></head><body><p>Appends the view&apos;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n</body></html>",
          "itemtype": "method",
          "name": "appendTo",
          "params": [
            {
              "name": "A",
              "description": "selector, element, HTML string, or jQuery object",
              "type": "String|DOMElement|jQuery"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1539,
          "description": "<html><head></head><body><p>Replaces the content of the specified parent element with this view&apos;s\nelement. If the view does not have an HTML representation yet,\n<code>createElement()</code> will be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n</body></html>",
          "itemtype": "method",
          "name": "replaceIn",
          "params": [
            {
              "name": "target",
              "description": "A selector, element, HTML string, or jQuery object",
              "type": "String|DOMElement|jQuery"
            }
          ],
          "return": {
            "description": "received",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1564,
          "description": "<html><head></head><body><p>Schedules a DOM operation to occur during the next render phase. This\nensures that all bindings have finished synchronizing before the view is\nrendered.</p>\n<p>To use, pass a function that performs a DOM operation.</p>\n<p>Before your function is called, this view and all child views will receive\nthe <code>willInsertElement</code> event. After your function is invoked, this view\nand all of its child views will receive the <code>didInsertElement</code> event.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>view._insertElementLater(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">this</span>.createElement();\n  <span class=\"keyword\">this</span>.$().appendTo(<span class=\"string\">&apos;body&apos;</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "_insertElementLater",
          "params": [
            {
              "name": "fn",
              "description": "the function that inserts the element into the DOM",
              "type": "Function"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1595,
          "description": "<html><head></head><body><p>Appends the view&apos;s element to the document body. If the view does\nnot have an HTML representation yet, <code>createElement()</code> will be called\nautomatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n</body></html>",
          "itemtype": "method",
          "name": "append",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1615,
          "description": "<html><head></head><body><p>Removes the view&apos;s element from the element to which it is attached.</p>\n</body></html>",
          "itemtype": "method",
          "name": "remove",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1635,
          "description": "<html><head></head><body><p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&apos;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findElementInParentElement",
          "params": [
            {
              "name": "parentElement",
              "description": "The parent's DOM element",
              "type": "DOMElement"
            }
          ],
          "return": {
            "description": "The discovered element",
            "type": "DOMElement"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1651,
          "description": "<html><head></head><body><p>Creates a DOM representation of the view and all of its\nchild views by recursively calling the <code>render()</code> method.</p>\n<p>After the element has been created, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createElement",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1695,
          "description": "<html><head></head><body><p>Run this callback on the current view (unless includeSelf is false) and recursively on child views.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invokeRecursively",
          "params": [
            {
              "name": "fn",
              "description": "",
              "type": "Function"
            },
            {
              "name": "includeSelf",
              "description": "Includes itself if true.",
              "type": "Boolean"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1754,
          "description": "<html><head></head><body><p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroyElement",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1785,
          "description": "<html><head></head><body><p>Triggers the <code>willDestroyElement</code> event (which invokes the\n<code>willDestroyElement()</code> method if it exists) on this view and all child\nviews.</p>\n<p>Before triggering <code>willDestroyElement</code>, it first triggers the\n<code>willClearRender</code> event recursively.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_notifyWillDestroyElement",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1803,
          "description": "<html><head></head><body><p>If this view&apos;s element changes, we need to invalidate the caches of our\nchild views so that we do not retain references to DOM elements that are\nno longer needed.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_elementDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2002,
          "description": "<html><head></head><body><p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2031,
          "description": "<html><head></head><body><p>Removes the child view from the parent view.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeChild",
          "params": [
            {
              "name": "view",
              "description": "",
              "type": "Ember.View"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2057,
          "description": "<html><head></head><body><p>Removes all children from the <code>parentView</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeAllChildren",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2075,
          "description": "<html><head></head><body><p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeFromParent",
          "return": {
            "description": "receiver",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2092,
          "description": "<html><head></head><body><p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2127,
          "description": "<html><head></head><body><p>Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding <code>createChildViews()</code>. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createChildView",
          "params": [
            {
              "name": "viewClass",
              "description": "",
              "type": "Class|String"
            },
            {
              "name": "attrs",
              "description": "Attributes to add",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "new instance",
            "type": "Ember.View"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2188,
          "description": "<html><head></head><body><p>When the view&apos;s <code>isVisible</code> property changes, toggle the visibility\nelement of the actual DOM element.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_isVisibleDidChange",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2280,
          "description": "<html><head></head><body><p>Handle events from <code>Ember.EventDispatcher</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "handleEvent",
          "params": [
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "evt",
              "description": "",
              "type": "Event"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2394,
          "description": "<html><head></head><body><p>Parse a path and return an object which holds the parsed properties.</p>\n<p>For example a path like &quot;content.isEnabled:enabled:disabled&quot; will return the\nfollowing object:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attribute\">path</span>: <span class=\"string\">&quot;content.isEnabled&quot;</span>,\n  className: <span class=\"string\">&quot;enabled&quot;</span>,\n  falsyClassName: <span class=\"string\">&quot;disabled&quot;</span>,\n  classNames: <span class=\"string\">&quot;:enabled:disabled&quot;</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "_parsePropertyPath",
          "static": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2437,
          "description": "<html><head></head><body><p>Get the class name for a given value, based on the path, optional\n<code>className</code> and optional <code>falsyClassName</code>.</p>\n<ul>\n<li>if a <code>className</code> or <code>falsyClassName</code> has been specified:<ul>\n<li>if the value is truthy and <code>className</code> has been specified,\n<code>className</code> is returned</li>\n<li>if the value is falsy and <code>falsyClassName</code> has been specified,\n<code>falsyClassName</code> is returned</li>\n<li>otherwise <code>null</code> is returned</li>\n</ul>\n</li>\n<li>if the value is <code>true</code>, the dasherized last part of the supplied path\nis returned</li>\n<li>if the value is not <code>false</code>, <code>undefined</code> or <code>null</code>, the <code>value</code>\nis returned</li>\n<li>if none of the above rules apply, <code>null</code> is returned</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "_classStringForValue",
          "params": [
            {
              "name": "path",
              "description": ""
            },
            {
              "name": "val",
              "description": ""
            },
            {
              "name": "className",
              "description": ""
            },
            {
              "name": "falsyClassName",
              "description": ""
            }
          ],
          "static": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 120,
          "description": "<html><head></head><body><p>Invoked by the view system when this view needs to produce an HTML\nrepresentation. This method will create a new render buffer, if needed,\nthen apply any default attributes, such as class names and visibility.\nFinally, the <code>render()</code> method is invoked, which is responsible for\ndoing the bulk of the rendering.</p>\n<p>You should not need to override this method; instead, implement the\n<code>template</code> property, or if you need more control, override the <code>render</code>\nmethod.</p>\n</body></html>",
          "itemtype": "method",
          "name": "renderToBuffer",
          "params": [
            {
              "name": "buffer",
              "description": "the render buffer. If no buffer is\n  passed, a default buffer, using the current view's `tagName`, will\n  be used.",
              "type": "Ember.RenderBuffer"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 169,
          "description": "<html><head></head><body><p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n</body></html>",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "",
              "type": "String"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 146,
          "description": "<html><head></head><body><p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "willMergeMixin",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 175,
          "description": "<html><head></head><body><p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&apos;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n       <span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;playMusic&apos;</span>, <span class=\"string\">&apos;theme.mp3&apos;</span>);\n    },\n    playMusic: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(track)</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "send",
          "params": [
            {
              "name": "actionName",
              "description": "The action to trigger",
              "type": "String"
            },
            {
              "name": "context",
              "description": "a context to send with the action",
              "type": "*"
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/evented.js",
          "line": 43,
          "description": "<html><head></head><body><p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>person.on(<span class=\"string\">&apos;didLoad&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"comment\">// fired once the person has loaded</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n</body></html>",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Evented"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/evented.js",
          "line": 68,
          "description": "<html><head></head><body><p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n</body></html>",
          "itemtype": "method",
          "name": "one",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The \"this\" binding for the callback",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The callback to execute",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Evented"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/evented.js",
          "line": 93,
          "description": "<html><head></head><body><p>Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>person.on(<span class=\"string\">&apos;didEat&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">&apos;person ate some &apos;</span> + food);\n});\n\nperson.trigger(<span class=\"string\">&apos;didEat&apos;</span>, <span class=\"string\">&apos;broccoli&apos;</span>);\n\n<span class=\"comment\">// outputs: person ate some broccoli</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "trigger",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "args",
              "description": "Optional arguments to pass on",
              "type": "Object..."
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Evented"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/evented.js",
          "line": 119,
          "description": "<html><head></head><body><p>Cancels subscription for given name, target, and method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "off",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target of the subscription",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The function of the subscription",
              "type": "Function"
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Evented"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/evented.js",
          "line": 133,
          "description": "<html><head></head><body><p>Checks to see if object has any subscriptions for named event.</p>\n</body></html>",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "name",
              "description": "The name of the event",
              "type": "String"
            }
          ],
          "return": {
            "description": "does the object have a subscription for event",
            "type": "Boolean"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Evented"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 190,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  init: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"string\">&apos;Name is &apos;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"string\">&quot;Steve&quot;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super()</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 310,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 332,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 339,
          "description": "<html><head></head><body><p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 358,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App<span class=\"selector-class\">.Person</span> = Em<span class=\"selector-class\">.Object</span><span class=\"selector-class\">.extend</span>()\nperson = App<span class=\"selector-class\">.Person</span><span class=\"selector-class\">.create</span>()\nperson.toString() <span class=\"comment\">//=&gt; &quot;&lt;App.Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=&gt; <span class=\"string\">&quot;&lt;(subclass of App.Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;fullName&apos;</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"comment\">//=&gt; &quot;&lt;App.Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 425,
          "description": "<html><head></head><body><p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>App.<span class=\"keyword\">Person</span> = Ember.Object.extend({\n  <span class=\"keyword\">say</span>: function(<span class=\"keyword\">thing</span>) {\n    alert(<span class=\"keyword\">thing</span>);\n   }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&apos;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>App.PersonView = Ember.View.extend({\n  tagName: <span class=\"string\">&apos;li&apos;</span>,\n  classNameBindings: [<span class=\"string\">&apos;isAdministrator&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>);\n    alert(name + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">this</span>._super(thing + <span class=\"string\">&quot;, sir!&quot;</span>);\n  },\n  march: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; marches for &apos;</span> + numberOfHours + <span class=\"string\">&apos; hours.&apos;</span>)\n  }\n});\n\n<span class=\"keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"string\">&quot;Yehuda Katz&quot;</span>\n});\n\nyehuda.say(<span class=\"string\">&quot;Yes&quot;</span>);  <span class=\"comment\">// alerts &quot;Yehuda Katz says: Yes, sir!&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Ember.Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.SingingMixin = Ember.Mixin.create({\n  sing: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span></span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; sings: la la la &apos;</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; dances: tap tap tap tap &apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Ember.Mixin classes",
              "type": "Ember.Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 527,
          "description": "<html><head></head><body><p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 541,
          "description": "<html><head></head><body><p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"string\">&quot;Hi, my name is &quot;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"string\">&apos;Tom Dale&apos;</span>\n});\n\ntom.helloWorld(); <span class=\"comment\">// alerts &quot;Hi, my name is Tom Dale&quot;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> noName = <span class=\"keyword\">App</span>.Person.create();\nnoName.helloWorld(); <span class=\"comment\">// alerts undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 584,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>MyObject = Ember.Object.extend({\n  name: <span class=\"string\">&apos;an object&apos;</span>\n});\n\no = MyObject.<span class=\"built_in\">create</span>();\no.get(<span class=\"string\">&apos;name&apos;</span>); // <span class=\"string\">&apos;an object&apos;</span>\n\nMyObject.reopen({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span></span>{\n    console.<span class=\"built_in\">log</span>(msg);\n  }\n})\n\no2 = MyObject.<span class=\"built_in\">create</span>();\no2.say(<span class=\"string\">&quot;hello&quot;</span>); // logs <span class=\"string\">&quot;hello&quot;</span>\n\no.say(<span class=\"string\">&quot;goodbye&quot;</span>); // logs <span class=\"string\">&quot;goodbye&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 619,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s own properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">MyObject</span> <span class=\"string\">=</span> <span class=\"string\">Ember.Object.extend({</span>\n<span class=\"attr\">  name:</span> <span class=\"string\">&apos;an object&apos;</span>\n<span class=\"string\">});</span>\n\n<span class=\"string\">MyObject.reopenClass({</span>\n<span class=\"attr\">  canBuild:</span> <span class=\"literal\">false</span>\n<span class=\"string\">});</span>\n\n<span class=\"string\">MyObject.canBuild;</span> <span class=\"string\">//</span> <span class=\"literal\">false</span>\n<span class=\"string\">o</span> <span class=\"string\">=</span> <span class=\"string\">MyObject.create();</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  name : <span class=\"string\">&quot;&quot;</span>,\n  sayHello : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n    alert(<span class=\"string\">&quot;Hello. My name is &quot;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"string\">&quot;Homo sapiens&quot;</span>,\n  createPerson: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(newPersonsName)</span></span>{\n    <span class=\"keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"string\">&quot;Tom Dale&quot;</span>\n});\n<span class=\"keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"string\">&quot;Yehuda Katz&quot;</span>);\n\ntom.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Tom Dale&quot;</span>\nyehuda.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Yehuda Katz&quot;</span>\nalert(App.Person.species); <span class=\"comment\">// &quot;Homo sapiens&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&apos;s prototype\nsee <code>reopen</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 693,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Once you&apos;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">MyClass</span><span class=\"selector-class\">.metaForProperty</span>(<span class=\"string\">&apos;person&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will return the original hash that was passed to <code>meta()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 728,
          "description": "<html><head></head><body><p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 78,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n}.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 120,
          "description": "<html><head></head><body><p>To get multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Hash"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 142,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;Charles&apos;</span>).<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Jolley&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 196,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 213,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 232,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 250,
          "description": "<html><head></head><body><p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 273,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 296,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 314,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "self",
            "type": "Ember.Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Observable"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 381,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 395,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 412,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 432,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 452,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of it&apos;s\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 469,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        }
      ],
      "events": [
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1670,
          "description": "<html><head></head><body><p>Called when a view is going to insert an element into the DOM.</p>\n</body></html>",
          "itemtype": "event",
          "name": "willInsertElement",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1677,
          "description": "<html><head></head><body><p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n</body></html>",
          "itemtype": "event",
          "name": "didInsertElement",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1686,
          "description": "<html><head></head><body><p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n</body></html>",
          "itemtype": "event",
          "name": "willClearRender",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1776,
          "description": "<html><head></head><body><p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n</body></html>",
          "itemtype": "event",
          "name": "willDestroyElement",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1817,
          "description": "<html><head></head><body><p>Called when the parentView property has changed.</p>\n</body></html>",
          "itemtype": "event",
          "name": "parentViewDidChange",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        }
      ],
      "properties": [
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 155,
          "description": "<html><head></head><body><p>The function used to determine if the <code>displayTemplate</code> or\n<code>inverseTemplate</code> should be rendered. This should be a function that takes\na value and returns a Boolean.</p>\n</body></html>",
          "itemtype": "property",
          "name": "shouldDisplayFunc",
          "type": "Function",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 166,
          "description": "<html><head></head><body><p>Whether the template rendered by this view gets passed the context object\nof its parent template, or gets passed the value of retrieving <code>path</code>\nfrom the <code>pathRoot</code>.</p>\n<p>For example, this is true when using the <code>{{#if}}</code> helper, because the\ntemplate inside the helper should look up properties relative to the same\nobject as outside the block. This would be <code>false</code> when used with <code>{{#with\nfoo}}</code> because the template should receive the object found by evaluating\n<code>foo</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "preserveContext",
          "type": "Boolean",
          "default": "false",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 183,
          "description": "<html><head></head><body><p>If <code>preserveContext</code> is true, this is the object that will be used\nto render the template.</p>\n</body></html>",
          "itemtype": "property",
          "name": "previousContext",
          "type": "Object",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 192,
          "description": "<html><head></head><body><p>The template to render when <code>shouldDisplayFunc</code> evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "displayTemplate",
          "type": "Function",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 201,
          "description": "<html><head></head><body><p>The template to render when <code>shouldDisplayFunc</code> evaluates to <code>false</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "inverseTemplate",
          "type": "Function",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 211,
          "description": "<html><head></head><body><p>The path to look up on <code>pathRoot</code> that is passed to\n<code>shouldDisplayFunc</code> to determine which template to render.</p>\n<p>In addition, if <code>preserveContext</code> is <code>false,</code> the object at this path will\nbe passed to the template when rendering.</p>\n</body></html>",
          "itemtype": "property",
          "name": "path",
          "type": "String",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-handlebars/lib/views/handlebars_bound_view.js",
          "line": 224,
          "description": "<html><head></head><body><p>The object from which the <code>path</code> will be looked up. Sometimes this is the\nsame as the <code>previousContext</code>, but in cases where this view has been\ngenerated for paths that start with a keyword such as <code>view</code> or\n<code>controller</code>, the path root will be that resolved object.</p>\n</body></html>",
          "itemtype": "property",
          "name": "pathRoot",
          "type": "Object",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-handlebars",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 865,
          "itemtype": "property",
          "name": "isView",
          "type": "Boolean",
          "default": "true",
          "static": 1,
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 877,
          "description": "<html><head></head><body><p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n</body></html>",
          "itemtype": "property",
          "name": "templateName",
          "type": "String",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 889,
          "description": "<html><head></head><body><p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n</body></html>",
          "itemtype": "property",
          "name": "layoutName",
          "type": "String",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 901,
          "description": "<html><head></head><body><p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n</body></html>",
          "itemtype": "property",
          "name": "template",
          "type": "Function",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 923,
          "description": "<html><head></head><body><p>The controller managing this view. If this property is set, it will be\nmade available for use by the template.</p>\n</body></html>",
          "itemtype": "property",
          "name": "controller",
          "type": "Object",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 935,
          "description": "<html><head></head><body><p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n</body></html>",
          "itemtype": "property",
          "name": "layout",
          "type": "Function",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 972,
          "description": "<html><head></head><body><p>The object from which templates should access properties.</p>\n<p>This object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.</p>\n<p>By default, this will be the view&apos;s controller.</p>\n</body></html>",
          "itemtype": "property",
          "name": "context",
          "type": "Object",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 993,
          "description": "<html><head></head><body><p>Private copy of the view&apos;s template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.</p>\n<p>The context of a view is looked up as follows:</p>\n<ol>\n<li>Supplied context (usually by Handlebars)</li>\n<li>Specified controller</li>\n<li><code>parentView</code>&apos;s context (for a child of a ContainerView)</li>\n</ol>\n<p>The code in Handlebars that overrides the <code>_context</code> property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.</p>\n</body></html>",
          "itemtype": "property",
          "name": "_context",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1037,
          "description": "<html><head></head><body><p>If <code>false</code>, the view will appear hidden in DOM.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isVisible",
          "type": "Boolean",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1046,
          "description": "<html><head></head><body><p>Array of child views. You should never edit this array directly.\nInstead, use <code>appendChild</code> and <code>removeFromParent</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "childViews",
          "type": "Array",
          "default": "[]",
          "access": "private",
          "tagname": "",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1448,
          "description": "<html><head></head><body><p>Returns the current DOM element for the view.</p>\n</body></html>",
          "itemtype": "property",
          "name": "element",
          "type": "DOMElement",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1885,
          "description": "<html><head></head><body><p>Tag name for the view&apos;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n</body></html>",
          "itemtype": "property",
          "name": "tagName",
          "type": "String",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1901,
          "description": "<html><head></head><body><p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &apos;button&apos;, or a pane may have a role of\ntype &apos;alertdialog&apos;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n</body></html>",
          "itemtype": "property",
          "name": "ariaRole",
          "type": "String",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1916,
          "description": "<html><head></head><body><p>Standard CSS class names to apply to the view&apos;s outer element. This\nproperty automatically inherits any class names defined by the view&apos;s\nsuperclasses as well.</p>\n</body></html>",
          "itemtype": "property",
          "name": "classNames",
          "type": "Array",
          "default": "['ember-view']",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1927,
          "description": "<html><head></head><body><p>A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Applies the &apos;high&apos; class to the view element</span>\n<span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.View</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">classNameBindings</span>: [<span class=\"string\">&apos;priority&apos;</span>]\n  <span class=\"attribute\">priority</span>: <span class=\"string\">&apos;high&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Applies the &apos;is-urgent&apos; class to the view element</span>\n<span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.View</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">classNameBindings</span>: [<span class=\"string\">&apos;isUrgent&apos;</span>]\n  <span class=\"attribute\">isUrgent</span>: true\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Applies the &apos;urgent&apos; class to the view element</span>\n<span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.View</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">classNameBindings</span>: [<span class=\"string\">&apos;isUrgent:urgent&apos;</span>]\n  <span class=\"attribute\">isUrgent</span>: true\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This list of properties is inherited from the view&apos;s superclasses as well.</p>\n</body></html>",
          "itemtype": "property",
          "name": "classNameBindings",
          "type": "Array",
          "default": "[]",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 1970,
          "description": "<html><head></head><body><p>A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Applies the type attribute to the element</span>\n<span class=\"comment\">// with the value &quot;button&quot;, like &lt;div type=&quot;button&quot;&gt;</span>\nEmber.View.extend({\n  attributeBindings: [&apos;<span class=\"class\"><span class=\"keyword\">type</span>&apos;],</span>\n  <span class=\"class\"><span class=\"keyword\">type</span>: &apos;<span class=\"title\">button</span>&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the value of the property is a Boolean, the name of that property is\nadded as an attribute.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// Renders something like &lt;div enabled=&quot;enabled&quot;&gt;</span>\n<span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.View</span><span class=\"selector-class\">.extend</span>({\n  <span class=\"attribute\">attributeBindings</span>: [<span class=\"string\">&apos;enabled&apos;</span>],\n  <span class=\"attribute\">enabled</span>: true\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "attributeBindings",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 2511,
          "description": "<html><head></head><body><p>Global views hash</p>\n</body></html>",
          "itemtype": "property",
          "name": "views",
          "static": 1,
          "type": "Hash",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.View"
        },
        {
          "file": "../packages/ember-views/lib/views/view.js",
          "line": 86,
          "description": "<html><head></head><body><p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n</body></html>",
          "itemtype": "property",
          "name": "parentView",
          "type": "Ember.View",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-views",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreView"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/action_handler.js",
          "line": 26,
          "description": "<html><head></head><body><p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&apos;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;displayBanner&apos;</span>);\n<span class=\"keyword\">this</span>.send(<span class=\"string\">&apos;playMusic&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Within a Controller, Route, View or Component&apos;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"keyword\">this</span>.controllerFor(<span class=\"string\">&quot;song&quot;</span>);\n      <span class=\"keyword\">this</span>.transitionTo(<span class=\"string\">&quot;other.route&quot;</span>);\n      ...\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It is also possible to call <code>this._super()</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>App.DebugRoute = Ember.Mixin.create({\n  <span class=\"attr\">actions</span>: {\n    <span class=\"attr\">debugRouteInformation</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n      <span class=\"built_in\">console</span>.debug(<span class=\"string\">&quot;trololo&quot;</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  <span class=\"attr\">actions</span>: {\n    <span class=\"attr\">debugRouteInformation</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n      <span class=\"comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"keyword\">this</span>._super();\n\n      <span class=\"comment\">// show additional annoyance</span>\n      <span class=\"built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre>App.Router.map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">this</span>.resource(<span class=\"string\">&quot;album&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;song&quot;</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// ...</span>\n\n      <span class=\"keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "actions",
          "type": "Hash",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.ActionHandler"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 220,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">View</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  classNames: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span> = <span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  classNames: [<span class=\"string\">&apos;foo&apos;</span>],\n});\n\nvar fooBarView = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create();\nfooBarView.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBarView.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var view = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  classNames: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nview.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\nview.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var view = App.FooBarView.create({\n  classNames: <span class=\"string\">&apos;baz&apos;</span>\n})\nview.get(<span class=\"string\">&apos;classNames&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell to Ember that mix\nthe content of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 288,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 299,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember._HandlebarsBoundView",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.5.1",
          "since": "1.5.1",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.5.1-Ember._MetamorphView",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.5.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.5.1",
          "type": "project-version"
        }
      }
    }
  }
}