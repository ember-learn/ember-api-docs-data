{
  "data": {
    "id": "ember-1.5.1-Ember.SortableMixin",
    "type": "class",
    "attributes": {
      "name": "Ember.SortableMixin",
      "shortname": "Ember.SortableMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.ArrayController"
      ],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "../packages/ember-runtime/lib/mixins/sortable.js",
      "line": 8,
      "description": "`Ember.SortableMixin` provides a standard interface for array proxies\nto specify a sort order and maintain this sorting when objects are added,\nremoved, or updated without changing the implicit order of their underlying\ncontent array:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n  {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title: 'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  content: songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');  // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber: 1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber: 1, title: 'Dear Prudence'}\n```\n\nIf you add or remove the properties to sort by or change the sort direction the content\nsort order will be automatically updated.\n\n```javascript\nsongsController.set('sortProperties', ['title']);\nsongsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.toggleProperty('sortAscending');\nsongsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n```\n\nSortableMixin works by sorting the arrangedContent array, which is the array that\narrayProxy displays. Due to the fact that the underlying 'content' array is not changed, that\narray will not display the sorted list:\n\n ```javascript\nsongsController.get('content').get('firstObject'); // Returns the unsorted original content\nsongsController.get('firstObject'); // Returns the sorted content.\n``` \n\nAlthough the sorted content can also be accessed through the arrangedContent property,\nit is preferable to use the proxied class and not the arrangedContent array directly.",
      "uses": [
        "Ember.MutableEnumerable"
      ],
      "methods": [
        {
          "file": "../packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 51,
          "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "object",
              "description": "The object to add to the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 67,
          "description": "Adds each object in the passed enumerable to the receiver.",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 81,
          "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "object",
              "description": "The object to remove from the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 98,
          "description": "Removes each object in the passed enumerable from the receiver.",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 74,
          "description": "Implement this method to make your class enumerable.\n\nThis method will be call repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don't have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.\n\nThe `previousObject` is the object that was returned from the last call\nto `nextObject` for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.\n\nFinally the context parameter will always contain a hash you can use as\na \"scratchpad\" to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.\n\nGenerally iterators will continue to call `nextObject` until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.\n\nThe default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 168,
          "description": "Returns `true` if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.contains(\"a\"); // true\narr.contains(\"z\"); // false\n```",
          "itemtype": "method",
          "name": "contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 187,
          "description": "Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 228,
          "description": "Alias for `mapBy`",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 239,
          "description": "Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 256,
          "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the mapped value.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 290,
          "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 304,
          "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
          "itemtype": "method",
          "name": "mapProperty",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `mapBy` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 316,
          "description": "Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to `filter()` defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 352,
          "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns false for. This method is the inverse of filter().\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *enumerable* is the enumerable object itself.\n\nIt should return the a falsey value to include the item in the results.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 384,
          "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 398,
          "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
          "itemtype": "method",
          "name": "filterProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `filterBy` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 411,
          "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 429,
          "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
          "itemtype": "method",
          "name": "rejectProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "deprecated": true,
          "deprecationMessage": "Use `rejectBy` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 442,
          "description": "Returns the first item in the array for which the callback returns true.\nThis method works similar to the `filter()` method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 486,
          "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 502,
          "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
          "itemtype": "method",
          "name": "findProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `findBy` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 517,
          "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `every()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` or `false`.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nif (people.every(isEngineer)) { Paychecks.addBigBonus(); }\n```",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 555,
          "itemtype": "method",
          "name": "everyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 564,
          "itemtype": "method",
          "name": "everyProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `isEvery` instead",
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 573,
          "description": "Returns `true` if the passed property resolves to `true` for all items in\nthe enumerable. This method is often simpler/faster than using a callback.",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 586,
          "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.any(isManager)) { Paychecks.addBiggerBonus(); }\n```",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 639,
          "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.some(isManager)) { Paychecks.addBiggerBonus(); }\n```",
          "itemtype": "method",
          "name": "some",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `any` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 675,
          "description": "Returns `true` if the passed property resolves to `true` for any item in\nthe enumerable. This method is often simpler/faster than using a callback.",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 688,
          "itemtype": "method",
          "name": "anyBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 697,
          "itemtype": "method",
          "name": "someProperty",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "deprecated": true,
          "deprecationMessage": "Use `isAny` instead",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 706,
          "description": "This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(previousValue, item, index, enumerable);\n```\n\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\n\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 751,
          "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 775,
          "description": "Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 788,
          "description": "Returns a copy of the array with all null and undefined elements removed.\n\n```javascript\nvar arr = [\"a\", null, \"c\", undefined];\narr.compact();  // [\"a\", \"c\"]\n```",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 803,
          "description": "Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.\n\n```javascript\nvar arr = [\"a\", \"b\", \"a\", \"c\"];\narr.without(\"a\");  // [\"b\", \"c\"]\n```",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 826,
          "description": "Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nvar arr = [\"a\", \"a\", \"b\", \"b\"];\narr.uniq();  // [\"a\", \"b\"]\n```",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 866,
          "description": "Registers an enumerable observer. Must implement `Ember.EnumerableObserver`\nmixin.",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 887,
          "description": "Removes a registered enumerable observer.",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Hash",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 919,
          "description": "Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 955,
          "description": "Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If your are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 992,
          "description": "Converts the enumerable into an array and sorts by the keys\nspecified in the argument.\n\nYou may provide multiple arguments to sort by multiple properties.",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/ember-runtime/lib/mixins/sortable.js",
          "line": 62,
          "description": "Specifies which properties dictate the arrangedContent's sort order.\n\nWhen specifying multiple properties the sorting will use properties\nfrom the `sortProperties` array prioritized from first to last.",
          "itemtype": "property",
          "name": "sortProperties",
          "type": "Array",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/sortable.js",
          "line": 72,
          "description": "Specifies the arrangedContent's sort direction",
          "itemtype": "property",
          "name": "sortAscending",
          "type": "Boolean",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/sortable.js",
          "line": 79,
          "description": "The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.\n  return 0 if the two parameters are equal,\n  return a negative value if the first parameter is smaller than the second or\n  return a positive value otherwise:\n\n```javascript\nfunction(x,y) { // These are assumed to be integers\n  if (x === y)\n    return 0;\n  return x < y ? -1 : 1;\n}\n```",
          "itemtype": "property",
          "name": "sortFunction",
          "type": "{Function}",
          "default": "Ember.compare",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/sortable.js",
          "line": 138,
          "description": "Overrides the default arrangedContent from arrayProxy in order to sort by sortFunction.\nAlso sets up observers for each sortProperty on each item in the content Array.",
          "itemtype": "property",
          "name": "arrangedContent",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 109,
          "description": "Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.\n\nIf you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('firstObject');  // \"a\"\n\nvar arr = [];\narr.get('firstObject');  // undefined\n```",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 140,
          "description": "Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('lastObject');  // \"c\"\n\nvar arr = [];\narr.get('lastObject');  // undefined\n```",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 846,
          "description": "This property will trigger anytime the enumerable's content changes.\nYou can observe this property to be notified of changes to the enumerables\ncontent.\n\nFor plain enumerables, this property is read only. `Ember.Array` overrides\nthis method.",
          "itemtype": "property",
          "name": "[]",
          "type": "Ember.Array",
          "return": {
            "description": "this"
          },
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 907,
          "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "class": "Ember.SortableMixin",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.5.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.5.1",
          "type": "project-version"
        }
      }
    }
  }
}