{
  "data": {
    "id": "ember-1.5.1-Ember.EnumerableUtils",
    "type": "namespace",
    "attributes": {
      "name": "Ember.EnumerableUtils",
      "shortname": "Ember.EnumerableUtils",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "../packages/ember-metal/lib/enumerable_utils.js",
      "line": 10,
      "description": "Defines some convenience methods for working with Enumerables.\n`Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.",
      "static": 1,
      "methods": [
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 19,
          "description": "Calls the map function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-map method when necessary.",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "obj",
              "description": "The object that should be mapped",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "thisArg",
              "description": "Value to use as this when executing *callback*",
              "type": "Object"
            }
          ],
          "return": {
            "description": "An array of mapped values.",
            "type": "Array"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 34,
          "description": "Calls the forEach function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-forEach method when necessary.",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "obj",
              "description": "The object to call forEach on",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "thisArg",
              "description": "Value to use as this when executing *callback*",
              "type": "Object"
            }
          ],
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 48,
          "description": "Calls the filter function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-filter method when necessary.",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "obj",
              "description": "The object to call filter on",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "thisArg",
              "description": "Value to use as this when executing *callback*",
              "type": "Object"
            }
          ],
          "return": {
            "description": "An array containing the filtered values",
            "type": "Array"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 63,
          "description": "Calls the indexOf function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-indexOf method when necessary.",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "obj",
              "description": "The object to call indexOn on",
              "type": "Object"
            },
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "index",
              "description": "The index to start searching from",
              "type": "Object"
            }
          ],
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 77,
          "description": "Returns an array of indexes of the first occurrences of the passed elements\non the passed object.\n\n```javascript\n var array = [1, 2, 3, 4, 5];\n Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]\n\n var fubar = \"Fubarr\";\n Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]\n```",
          "itemtype": "method",
          "name": "indexesOf",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for element indexes",
              "type": "Object"
            },
            {
              "name": "elements",
              "description": "The elements to search for on *obj*",
              "type": "Array"
            }
          ],
          "return": {
            "description": "An array of indexes.",
            "type": "Array"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 102,
          "description": "Adds an object to an array. If the array already includes the object this\nmethod has no effect.",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "array",
              "description": "The array the passed item should be added to",
              "type": "Array"
            },
            {
              "name": "item",
              "description": "The item to add to the passed array",
              "type": "Object"
            }
          ],
          "return": {
            "description": "'undefined'"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 117,
          "description": "Removes an object from an array. If the array does not contain the passed\nobject this method has no effect.",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "array",
              "description": "The array to remove the item from.",
              "type": "Array"
            },
            {
              "name": "item",
              "description": "The item to remove from the passed array.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "'undefined'"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 152,
          "description": "Replaces objects in an array with the passed objects.\n\n```javascript\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]\n\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]\n\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]\n```",
          "itemtype": "method",
          "name": "replace",
          "params": [
            {
              "name": "array",
              "description": "The array the objects should be inserted into.",
              "type": "Array"
            },
            {
              "name": "idx",
              "description": "Starting index in the array to replace. If *idx* >=\nlength, then append to the end of the array.",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "Number of elements that should be removed from the array,\nstarting at *idx*",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "An array of zero or more objects that should be\ninserted into the array at *idx*",
              "type": "Array"
            }
          ],
          "return": {
            "description": "The modified array.",
            "type": "Array"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-metal/lib/enumerable_utils.js",
          "line": 185,
          "description": "Calculates the intersection of two arrays. This method returns a new array\nfilled with the records that the two passed arrays share with each other. \nIf there is no intersection, an empty array will be returned.\n\n```javascript\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [1, 3, 5, 6, 7];\n\nEmber.EnumerableUtils.intersection(array1, array2); // [1, 3, 5]\n\nvar array1 = [1, 2, 3];\nvar array2 = [4, 5, 6];\n\nEmber.EnumerableUtils.intersection(array1, array2); // []\n```",
          "itemtype": "method",
          "name": "intersection",
          "params": [
            {
              "name": "array1",
              "description": "The first array",
              "type": "Array"
            },
            {
              "name": "array2",
              "description": "The second array",
              "type": "Array"
            }
          ],
          "return": {
            "description": "The intersection of the two passed arrays.",
            "type": "Array"
          },
          "class": "Ember.EnumerableUtils",
          "module": "ember",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.5.1-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.5.1",
          "type": "project-version"
        }
      }
    }
  }
}