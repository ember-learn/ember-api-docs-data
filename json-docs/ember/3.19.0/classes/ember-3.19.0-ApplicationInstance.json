{
  "data": {
    "id": "ember-3.19.0-ApplicationInstance",
    "type": "class",
    "attributes": {
      "name": "ApplicationInstance",
      "shortname": "ApplicationInstance",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "file": "packages/@ember/application/instance.js",
      "line": 12,
      "description": "The `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.",
      "access": "public",
      "tagname": "",
      "extends": "EngineInstance",
      "methods": [
        {
          "file": "packages/@ember/application/instance.js",
          "line": 292,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "setupRegistry",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Registry"
            },
            {
              "name": "options",
              "description": "",
              "type": "BootOptions"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 62,
          "description": "Initialize the `EngineInstance` and return a promise that resolves\nwith the instance itself when the boot process is complete.\n\nThe primary task here is to run any registered instance initializers.\n\nSee the documentation on `BootOptions` for the options it takes.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "boot",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Promise<EngineInstance,Error>"
          },
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 124,
          "description": "Unregister a factory.\n\nOverrides `RegistryProxy#unregister` in order to clear any cached instances\nof the unregistered factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 139,
          "description": "Build a new `EngineInstance` that's a child of this instance.\n\nEngines must be registered by name with their parent engine\n(or application).",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "buildChildEngineInstance",
          "params": [
            {
              "name": "name",
              "description": "the registered name of the engine.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "options provided to the engine instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "EngineInstance,Error"
          },
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 167,
          "description": "Clone dependencies shared between an engine instance and its parent.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "cloneParentDependencies",
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 203,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "setupRegistry",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Registry"
            },
            {
              "name": "options",
              "description": "",
              "type": "BootOptions"
            }
          ],
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 23,
          "description": "Returns an object that can be used to provide an owner to a\nmanually created instance.\n\nExample:\n\n```\nimport { getOwner } from '@ember/application';\n\nlet owner = getOwner(this);\n\nUser.create(\n  owner.ownerInjection(),\n  { username: 'rwjblue' }\n)\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "ownerInjection",
          "since": "2.3.0",
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 49,
          "description": "Given a fullName return a corresponding instance.\n\nThe default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter');\n\ntwitter instanceof Twitter; // => true\n\n// by default the container will return singletons\nlet twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // => true\n\ntwitter === twitter2; //=> true\n```\n\nIf singletons are not wanted an optional flag can be provided at lookup.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter', { singleton: false });\nlet twitter2 = container.lookup('api:twitter', { singleton: false });\n\ntwitter === twitter2; //=> false\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 110,
          "description": "Given a fullName return a factory manager.\n\n This method returns a manager which can be used for introspection of the\n factory's class or for the creation of factory instances with initial\n properties. The manager is an object with the following properties:\n\n * `class` - The registered or resolved class.\n * `create` - A function that will create an instance of the class with\n   any dependencies injected.\n\n For example:\n\n ```javascript\n import { getOwner } from '@ember/application';\n\n let owner = getOwner(otherInstance);\n // the owner is commonly the `applicationInstance`, and can be accessed via\n // an instance initializer.\n\n let factory = owner.factoryFor('service:bespoke');\n\n factory.class;\n // The registered or resolved class. For example when used with an Ember-CLI\n // app, this would be the default export from `app/services/bespoke.js`.\n\n let instance = factory.create({\n   someProperty: 'an initial property value'\n });\n // Create an instance with any injections and the passed options as\n // initial properties.\n ```\n\n Any instances created via the factory's `.create()` method *must* be destroyed\n manually by the caller of `.create()`. Typically, this is done during the creating\n objects own `destroy` or `willDestroy` methods.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "factoryFor",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "FactoryManager"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 18,
          "description": "Given a fullName return the corresponding factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "resolveRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 31,
          "description": "Registers a factory that can be used for dependency injection (with\n`inject`) or for service lookup. Each factory is registered with\na full name including two parts: `type:name`.\n\nA simple example:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register('fruit:favorite', App.Orange);\n```\n\nEmber will resolve factories from the `App` namespace automatically.\nFor example `App.CarsController` will be discovered and returned if\nan application requests `controller:cars`.\n\nAn example of registering a controller with a non-standard name:\n\n```javascript\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\n\nlet App = Application.create();\nlet Session = Controller.extend();\n\nApp.register('controller:session', Session);\n\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Controller.extend({\n  needs: ['session']\n});\n```\n\nRegistered factories are **instantiated** by having `create`\ncalled on them. Additionally they are **singletons**, each time\nthey are looked up they return the same instance.\n\nSome examples modifying that default behavior:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.session = EmberObject.create();\n\nApp.register('model:user', App.Person, { singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, { singleton: false });\nApp.register('session', App.session, { instantiate: false });\n```",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "type:name (e.g., 'model:user')",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "(e.g., App.Person)",
              "type": "Any"
            },
            {
              "name": "options",
              "description": "(optional) disable instantiation or singleton usage",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 101,
          "description": "Unregister a factory.\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet User = EmberObject.extend();\nApp.register('model:user', User);\n\nApp.resolveRegistration('model:user').create() instanceof User //=> true\n\nApp.unregister('model:user')\nApp.resolveRegistration('model:user') === undefined //=> true\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 124,
          "description": "Check if a factory is registered.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "hasRegistration",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 134,
          "description": "Return a specific registered option for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOption",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "optionName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 145,
          "description": "Register options for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 155,
          "description": "Return registered options for a particular factory.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptions",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 165,
          "description": "Allow registering options for all factories of a type.\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create();\nlet appInstance = App.buildInstance();\n\n// if all of type `connection` must not be singletons\nappInstance.registerOptionsForType('connection', { singleton: false });\n\nappInstance.register('connection:twitter', TwitterConnection);\nappInstance.register('connection:facebook', FacebookConnection);\n\nlet twitter = appInstance.lookup('connection:twitter');\nlet twitter2 = appInstance.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = appInstance.lookup('connection:facebook');\nlet facebook2 = appInstance.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 198,
          "description": "Return the registered options for all factories of a type.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registeredOptionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "options",
            "type": "Object"
          },
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
          "line": 208,
          "description": "Define a dependency injection onto a specific factory or all factories\nof a type.\n\nWhen Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.\n\nAn example of providing a session object to all controllers:\n\n```javascript\nimport { alias } from '@ember/object/computed';\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet Session = EmberObject.extend({ isAuthenticated: false });\n\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\n\nApp.IndexController = Controller.extend({\n  isLoggedIn: alias('session.isAuthenticated')\n});\n```\n\nInjections can also be performed on specific factories.\n\n```javascript\nApp.inject(<full_name or type>, <property name>, <full_name>)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n```\n\nIt is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via `create` or `new`) bypasses the dependency injection\nsystem.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "inject",
          "params": [
            {
              "name": "factoryNameOrType",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "RegistryProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 312,
          "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 530,
          "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 552,
          "description": "Override to implement teardown.",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 560,
          "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 93,
          "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 138,
          "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 163,
          "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 211,
          "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 229,
          "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 249,
          "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 268,
          "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 286,
          "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nThere are two common invocation patterns for `.addObserver()`:\n\n- Passing two arguments:\n  - the name of the property to observe (as a string)\n  - the function to invoke (an actual function)\n- Passing three arguments:\n  - the name of the property to observe (as a string)\n  - the target object (will be used to look up and invoke a\n    function on)\n  - the name of the function to invoke on the target object\n    (as a string).\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    // the following are equivalent:\n\n    // using three arguments\n    this.addObserver('foo', this, 'fooDidChange');\n\n    // using two arguments\n    this.addObserver('foo', (...args) => {\n      this.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    // your custom logic code\n  }\n});\n```\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```js {data-filename=app/components/my-component.js}\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is sync or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 374,
          "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is async or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 392,
          "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 407,
          "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 425,
          "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 447,
          "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 469,
          "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
          "line": 486,
          "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/application/instance.js",
          "line": 38,
          "description": "The `Application` for which this is an instance.",
          "itemtype": "property",
          "name": "application",
          "type": "Application",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/@ember/application/instance.js",
          "line": 46,
          "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "customEvents",
          "type": "Object",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/@ember/application/instance.js",
          "line": 59,
          "description": "The root DOM element of the Application as an element or a\n[jQuery-compatible selector\nstring](http://api.jquery.com/category/selectors/).",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "rootElement",
          "type": "String|DOMElement",
          "class": "ApplicationInstance",
          "module": "@ember/application"
        },
        {
          "file": "packages/@ember/engine/instance.js",
          "line": 29,
          "description": "The base `Engine` for which this is an instance.",
          "itemtype": "property",
          "name": "engine",
          "type": "Engine",
          "access": "private",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/engine",
          "inherited": true,
          "inheritedFrom": "EngineInstance"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
          "line": 15,
          "description": "The container stores state.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "__container__",
          "type": "Ember.Container",
          "class": "ApplicationInstance",
          "module": "ember",
          "inherited": true,
          "inheritedFrom": "ContainerProxyMixin"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 345,
          "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 419,
          "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 494,
          "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
          "line": 512,
          "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ApplicationInstance",
          "module": "@ember/object",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-3.19.0-EngineInstance",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.19.0-@ember/application",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.19.0",
          "type": "project-version"
        }
      }
    }
  }
}