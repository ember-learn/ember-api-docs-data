{
  "data": {
    "id": "ember-3.17.1-EmberArray",
    "type": "class",
    "attributes": {
      "name": "EmberArray",
      "shortname": "EmberArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "MutableArray"
      ],
      "module": "@ember/array",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 185,
      "description": "<html><head></head><body><p>This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.</p>\n<p>For example, ArrayProxy is a concrete class that can be instantiated to\nimplement array-like behavior. This class uses the Array Mixin by way of\nthe MutableArray mixin, which allows observable changes to be made to the\nunderlying array.</p>\n<p>This mixin defines methods specifically for collections that provide\nindex-ordered access to their contents. When you are designing code that\nneeds to accept any kind of Array-like object, you should use these methods\ninstead of Array primitives because these will properly notify observers of\nchanges to the array.</p>\n<p>Although these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and &quot;virtual&quot; arrays such\nas controllers and collections.</p>\n<p>You can use the methods defined in this module to access and modify array\ncontents in an observable-friendly way. You can also be notified whenever\nthe membership of an array changes by using <code>.observes(&apos;myArray.[]&apos;)</code>.</p>\n<p>To support <code>EmberArray</code> in your own class, you must override two\nprimitives to use it: <code>length()</code> and <code>objectAt()</code>.</p>\n</body></html>",
      "uses": [
        "Enumerable"
      ],
      "since": "Ember 0.9.0",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 231,
          "description": "<html><head></head><body><p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>EmberArray</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectAt<span class=\"comment\">(0)</span>;   <span class=\"comment\">// &apos;a&apos;</span>\narr.objectAt<span class=\"comment\">(3)</span>;   <span class=\"comment\">// &apos;d&apos;</span>\narr.objectAt<span class=\"comment\">(-1)</span>;  <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(4)</span>;   <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(5)</span>;   <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectAt",
          "params": [
            {
              "name": "idx",
              "description": "The index of the item to return.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "item at index or undefined",
            "type": "*"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 256,
          "description": "<html><head></head><body><p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectsAt([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);  // [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]\narr.objectsAt([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);  // [<span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, undefined]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectsAt",
          "params": [
            {
              "name": "indexes",
              "description": "An array of indexes of items to return.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 340,
          "description": "<html><head></head><body><p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\narr.slice(<span class=\"number\">0</span>);       // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\narr.slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);    // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]\narr.slice(<span class=\"number\">1</span>, <span class=\"number\">100</span>);  // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "slice",
          "params": [
            {
              "name": "beginIndex",
              "description": "(Optional) index to begin slicing from.",
              "type": "Number"
            },
            {
              "name": "endIndex",
              "description": "(Optional) index to end the slice at (but not included).",
              "type": "Number"
            }
          ],
          "return": {
            "description": "New array with specified slice",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 380,
          "description": "<html><head></head><body><p>Used to determine the passed object&apos;s first occurrence in the array.\nReturns the index if found, -1 if no match is found.</p>\n<p>The optional <code>startAt</code> argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it&apos;s negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to <code>-1 * array.length</code> the entire array is searched.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = <span class=\"literal\">[&apos;<span class=\"identifier\">a</span>&apos;, &apos;<span class=\"identifier\">b</span>&apos;, &apos;<span class=\"identifier\">c</span>&apos;, &apos;<span class=\"identifier\">d</span>&apos;, &apos;<span class=\"identifier\">a</span>&apos;]</span>;\n\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;)</span>;       <span class=\"comment\">//  0</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">z</span>&apos;)</span>;       <span class=\"comment\">// -1</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, 2)</span>;    <span class=\"comment\">//  4</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, -1)</span>;   <span class=\"comment\">//  4, equivalent to indexOf(&apos;a&apos;, 4)</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, -100)</span>; <span class=\"comment\">//  0, searches entire array</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">b</span>&apos;, 3)</span>;    <span class=\"comment\">// -1</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, 100)</span>;  <span class=\"comment\">// -1</span>\n\n<span class=\"keyword\">let</span> people = <span class=\"literal\">[{ <span class=\"identifier\">name</span>: &apos;Z<span class=\"identifier\">oey</span>&apos; }, { <span class=\"identifier\">name</span>: &apos;B<span class=\"identifier\">ob</span>&apos; }]</span>\n<span class=\"keyword\">let</span> newPerson = { name: &apos;Tom&apos; };\npeople = <span class=\"literal\">[<span class=\"identifier\">newPerson</span>, <span class=\"operator\">...</span><span class=\"identifier\">people</span>, <span class=\"identifier\">newPerson</span>]</span>;\n\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>)</span>;     <span class=\"comment\">//  0</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, 1)</span>;  <span class=\"comment\">//  3</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, -4)</span>; <span class=\"comment\">//  0</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, 10)</span>; <span class=\"comment\">// -1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 422,
          "description": "<html><head></head><body><p>Returns the index of the given <code>object</code>&apos;s last occurrence.</p>\n<ul>\n<li>If no <code>startAt</code> argument is given, the search starts from\nthe last position.</li>\n<li>If it&apos;s greater than or equal to the length of the array,\nthe search starts from the last position.</li>\n<li>If it&apos;s negative, it is taken as the offset from the end\nof the array i.e. <code>startAt + array.length</code>.</li>\n<li>If it&apos;s any other positive number, will search backwards\nfrom that index of the array.</li>\n</ul>\n<p>Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = <span class=\"literal\">[&apos;<span class=\"identifier\">a</span>&apos;, &apos;<span class=\"identifier\">b</span>&apos;, &apos;<span class=\"identifier\">c</span>&apos;, &apos;<span class=\"identifier\">d</span>&apos;, &apos;<span class=\"identifier\">a</span>&apos;]</span>;\n\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;)</span>;       <span class=\"comment\">//  4</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">z</span>&apos;)</span>;       <span class=\"comment\">// -1</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, 2)</span>;    <span class=\"comment\">//  0</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, -1)</span>;   <span class=\"comment\">//  4</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, -3)</span>;   <span class=\"comment\">//  0</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">b</span>&apos;, 3)</span>;    <span class=\"comment\">//  1</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, 100)</span>;  <span class=\"comment\">//  4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lastIndexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search from\nbackwards, defaults to `(array.length - 1)`",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The last index of the `object` in the array or -1\nif not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 480,
          "description": "<html><head></head><body><p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>willChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>didChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well as a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The observer object.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "example": [
            "\n    import Service from '@ember/service';\n\n    export default Service.extend({\n      data: Ember.A(),\n\n      init() {\n        this._super(...arguments);\n\n        this.data.addArrayObserver(this, {\n          willChange: 'dataWillChange',\n          didChange: 'dataDidChange'\n        });\n      },\n\n      dataWillChange(array, start, removeCount, addCount) {\n        console.log('array will change', array, start, removeCount, addCount);\n      },\n\n      dataDidChange(array, start, removeCount, addCount) {\n        console.log('array did change', array, start, removeCount, addCount);\n      }\n    });"
          ],
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 533,
          "description": "<html><head></head><body><p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The object observing the array.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 576,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>EmberArray</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n<div class=\"highlight post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component from <span class=\"string\">&apos;@ember/component&apos;</span>;\n<span class=\"keyword\">import</span> EmberObject from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Post = EmberObject.extend({\n  body: <span class=\"string\">&apos;&apos;</span>,\n  save() {}\n})\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  attemptsToModify: <span class=\"number\">0</span>,\n  successfulModifications: <span class=\"number\">0</span>,\n  posts: <span class=\"literal\">null</span>,\n\n  <span class=\"keyword\">init</span>() {\n    <span class=\"keyword\">this</span>._super(...arguments);\n\n    <span class=\"keyword\">this</span>.posts = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(i =&gt; Post.create({ body: i }));\n    <span class=\"keyword\">this</span>.posts.addArrayObserver(<span class=\"keyword\">this</span>, {\n      willChange() {\n        <span class=\"keyword\">this</span>.incrementProperty(<span class=\"string\">&apos;attemptsToModify&apos;</span>);\n      },\n      didChange() {\n        <span class=\"keyword\">this</span>.incrementProperty(<span class=\"string\">&apos;successfulModifications&apos;</span>);\n      }\n    });\n  },\n\n  actions: {\n    editPost(post, newContent) {\n      let oldContent = post.body,\n          postIndex = <span class=\"keyword\">this</span>.posts.indexOf(post);\n\n      <span class=\"keyword\">this</span>.posts.arrayContentWillChange(postIndex, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// attemptsToModify = 1</span>\n      post.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;body&apos;</span>, newContent);\n\n      post.save()\n        .then(response =&gt; {\n          <span class=\"keyword\">this</span>.posts.arrayContentDidChange(postIndex, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// successfulModifications = 1</span>\n        })\n        .<span class=\"keyword\">catch</span>(error =&gt; {\n          post.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;body&apos;</span>, oldContent);\n        })\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "arrayContentWillChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that will change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 643,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>EmberArray</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\narr.copyWithin(<span class=\"number\">-2</span>); <span class=\"comment\">// [1, 2, 3, 1, 2]</span>\n<span class=\"comment\">// arr.lastObject = 5</span>\narr.<span class=\"built_in\">array</span>ContentDidChange(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>);\n<span class=\"comment\">// arr.lastObject = 2</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "arrayContentDidChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that did change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 671,
          "description": "<html><head></head><body><p>Iterates through the array, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> foods = [\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;apple&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> },\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;banana&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> },\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;carrot&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> }\n];\n\nfoods.forEach(<span class=\"function\">(<span class=\"params\">food</span>) =&gt;</span> food.eaten = <span class=\"literal\">true</span>);\n\n<span class=\"keyword\">let</span> output = <span class=\"string\">&apos;&apos;</span>;\nfoods.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span>\n  output += <span class=\"string\">`<span class=\"subst\">${index + <span class=\"number\">1</span>}</span>/<span class=\"subst\">${array.length}</span> <span class=\"subst\">${item.name}</span>\\n`</span>;\n);\n<span class=\"built_in\">console</span>.log(output);\n<span class=\"comment\">// 1/3 apple</span>\n<span class=\"comment\">// 2/3 banana</span>\n<span class=\"comment\">// 3/3 carrot</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 731,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code>.</p>\n<p>Returns the value of the named\nproperty on all items in the enumeration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let people = [{name: <span class=\"string\">&apos;Joe&apos;</span>}, {name: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.getEach(<span class=\"string\">&apos;name&apos;</span>);\n// [<span class=\"string\">&apos;Joe&apos;</span>, <span class=\"string\">&apos;Matt&apos;</span>];\n\npeople.getEach(<span class=\"string\">&apos;nonexistentProperty&apos;</span>);\n// [undefined, undefined];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 754,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let people = [{<span class=\"type\">name</span>: <span class=\"string\">&apos;Joe&apos;</span>}, {<span class=\"type\">name</span>: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.setEach(<span class=\"string\">&apos;zipCode&apos;</span>, <span class=\"string\">&apos;10011);\n// [{name: &apos;</span>Jo<span class=\"string\">e&apos;, zipCode: &apos;</span><span class=\"number\">10011</span><span class=\"string\">&apos;}, {name: &apos;</span>Matt<span class=\"string\">&apos;, zipCode: &apos;</span><span class=\"number\">10011</span><span class=\"string\">&apos;}];</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 777,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span>(<span class=\"type\">item</span>, index, <span class=\"keyword\">array</span>);\n<span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\narr.<span class=\"keyword\">map</span>(<span class=\"keyword\">element</span> =&gt; <span class=\"keyword\">element</span> * <span class=\"keyword\">element</span>);\n// [1, 4, 9, 16, 25, 36];\n\narr.map((<span class=\"keyword\">element</span>, index) =&gt; <span class=\"keyword\">element</span> + index);\n// [1, 3, 5, 7, 9, 11];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 821,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let people = [{name: <span class=\"string\">&apos;Joe&apos;</span>}, {name: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.mapBy(<span class=\"string\">&apos;name&apos;</span>);\n// [<span class=\"string\">&apos;Joe&apos;</span>, <span class=\"string\">&apos;Matt&apos;</span>];\n\npeople.mapBy(<span class=\"string\">&apos;unknownProperty&apos;</span>);\n// [undefined, undefined];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 842,
          "description": "<html><head></head><body><p>Returns a new array with all of the items in the enumeration that the provided\ncallback function returns true for. This method corresponds to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter()</a>.</p>\n<p>The callback method should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>All parameters are optional. The function should return <code>true</code> to include the item\nin the results, and <code>false</code> otherwise.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> isAdult(person) {\n  <span class=\"keyword\">return</span> person.age &gt; <span class=\"number\">18</span>;\n};\n\nlet people = Ember.A([{ <span class=\"type\">name</span>: <span class=\"string\">&apos;John&apos;</span>, age: <span class=\"number\">14</span> }, { <span class=\"type\">name</span>: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }]);\n\npeople.<span class=\"keyword\">filter</span>(isAdult); // <span class=\"keyword\">returns</span> [{ <span class=\"type\">name</span>: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that in addition to a callback, you can pass an optional target object\nthat will be set as <code>this</code> on the context. This is a good way to give your\niterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 895,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>array</em> is the array itself.</li>\n</ul>\n<p>It should return a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">const</span> <span class=\"string\">food</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;apple&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;bread&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;banana&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">}</span>\n<span class=\"string\">];</span>\n<span class=\"string\">const</span> <span class=\"string\">nonFruits</span> <span class=\"string\">=</span> <span class=\"string\">food.reject(function(thing)</span> <span class=\"string\">{</span>\n  <span class=\"string\">return</span> <span class=\"string\">thing.isFruit;</span>\n<span class=\"string\">});</span> <span class=\"string\">//</span> <span class=\"string\">[{food:</span> <span class=\"string\">&apos;bread&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span><span class=\"string\">}]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 942,
          "description": "<html><head></head><body><p>Filters the array by the property and an optional value. If a value is given, it returns\nthe items that have said value for the property. If not, it returns all the items that\nhave a truthy value for the property.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> things = Ember.<span class=\"constructor\">A([{ <span class=\"params\">food</span>: &apos;<span class=\"params\">apple</span>&apos;, <span class=\"params\">isFruit</span>: <span class=\"params\">true</span> }, { <span class=\"params\">food</span>: &apos;<span class=\"params\">beans</span>&apos;, <span class=\"params\">isFruit</span>: <span class=\"params\">false</span> }])</span>;\n\nthings.filter<span class=\"constructor\">By(&apos;<span class=\"params\">food</span>&apos;, &apos;<span class=\"params\">beans</span>&apos;)</span>; <span class=\"comment\">// [{ food: &apos;beans&apos; }]</span>\nthings.filter<span class=\"constructor\">By(&apos;<span class=\"params\">isFruit</span>&apos;)</span>; <span class=\"comment\">// [{ food: &apos;apple&apos; }]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 966,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for the provided key.\nYou can pass an optional second argument with a target value to reject for the key.\nOtherwise this will reject objects where the provided property evaluates to false.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"string\">let</span> <span class=\"string\">food</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;apple&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;carrot&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">];</span>\n  <span class=\"string\">food.rejectBy(&apos;isFruit&apos;);</span> <span class=\"string\">//</span> <span class=\"string\">[{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;carrot&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span> <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">}]</span>\n  <span class=\"string\">food.rejectBy(&apos;name&apos;,</span> <span class=\"string\">&apos;carrot&apos;</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">[{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;apple&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">}},</span> <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">}]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 993,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method is similar to the <code>find()</code> method defined in ECMAScript 2015.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> users = [\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">1</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Yehuda&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Tom&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Melanie&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">4</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Leah&apos;</span> }\n];\n\nusers.find((user) =&gt; user<span class=\"built_in\">.name</span> == <span class=\"string\">&apos;Tom&apos;</span>); // [{<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Tom&apos;</span> }]\nusers.find(({<span class=\"built_in\"> id</span> }) =&gt;<span class=\"built_in\"> id</span> == <span class=\"number\">3</span>); // [{<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Melanie&apos;</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1040,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">let</span> <span class=\"string\">users</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">1</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Yehuda&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">2</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Tom&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">3</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Leah&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">];</span>\n\n<span class=\"string\">users.findBy(&apos;id&apos;,</span> <span class=\"number\">4</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Leah&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">users.findBy(&apos;name&apos;,</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">3</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">users.findBy(&apos;isTom&apos;);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">2</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Tom&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">true</span> <span class=\"string\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1072,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>Array.prototype.every()</code> method defined in ES5.</p>\n<p>The callback method should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>All params are optional. The method should return <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAdult</span><span class=\"params\">(person)</span> </span>{\n  <span class=\"keyword\">return</span> person.age &gt; <span class=\"number\">18</span>;\n};\n\n<span class=\"keyword\">const</span> people = Ember.A([{ name: <span class=\"string\">&apos;John&apos;</span>, age: <span class=\"number\">24</span> }, { name: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }]);\n<span class=\"keyword\">const</span> areAllAdults = people.every(isAdult);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1114,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for all items in the array. This method is often simpler/faster\nthan using a callback.</p>\n<p>Note that like the native <code>Array.every</code>, <code>isEvery</code> will return true when called\non any empty array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"keyword\">Language</span> {\n  constructor(<span class=\"type\">name</span>, isProgrammingLanguage) {\n    this.name = <span class=\"type\">name</span>;\n    this.programmingLanguage = isProgrammingLanguage;\n  }\n}\n\nconst compiledLanguages = [\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Java&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Go&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Rust&apos;</span>, <span class=\"keyword\">true</span>)\n]\n\nconst languagesKnownByMe = [\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Javascript&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;English&apos;</span>, <span class=\"keyword\">false</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Ruby&apos;</span>, <span class=\"keyword\">true</span>)\n]\n\ncompiledLanguages.isEvery(<span class=\"string\">&apos;programmingLanguage&apos;</span>); // <span class=\"keyword\">true</span>\nlanguagesKnownByMe.isEvery(<span class=\"string\">&apos;programmingLanguage&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1156,
          "description": "<html><head></head><body><p>The any() method executes the callback function once for each element\npresent in the array until it finds the one where callback returns a truthy\nvalue (i.e. <code>true</code>). If such an element is found, any() immediately returns\ntrue. Otherwise, any() returns false.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. It can be a good way\nto give your iterator function access to an object in cases where an ES6\narrow function would not be appropriate.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> includesManager = people.any(<span class=\"keyword\">this</span>.findPersonInManagersList, <span class=\"keyword\">this</span>);\n\n<span class=\"keyword\">let</span> includesStockHolder = people.any(<span class=\"function\"><span class=\"params\">person</span> =&gt;</span> {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.findPersonInStockHoldersList(person)\n});\n\n<span class=\"keyword\">if</span> (includesManager || includesStockHolder) {\n  Paychecks.addBiggerBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1200,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for any item in the array. This method is often simpler/faster\nthan using a callback.</p>\n<p>Example usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>const food = [\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;apple&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">true</span> },\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;bread&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">false</span> },\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">true</span> }\n];\n\nfood.isAny(<span class=\"string\">&apos;isFruit&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1228,
          "description": "<html><head></head><body><p>This will combine the values of the array into a single value. It\nis a useful way to collect a summary value from an array. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n  numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">summation, current</span>) </span>{\n    <span class=\"keyword\">return</span> summation + current;\n  }); <span class=\"comment\">// 15 (1 + 2 + 3 + 4 + 5)</span>\n\n  numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">summation, current</span>) </span>{\n    <span class=\"keyword\">return</span> summation + current;\n  }, <span class=\"number\">-15</span>); <span class=\"comment\">// 0 (-15 + 1 + 2 + 3 + 4 + 5)</span>\n\n\n  <span class=\"keyword\">let</span> binaryValues = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>];\n\n  binaryValues.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">truthValue, current</span>) </span>{\n    <span class=\"keyword\">return</span> truthValue &amp;&amp; current;\n  }); <span class=\"comment\">// false (true &amp;&amp; false &amp;&amp; false)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1294,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>{\n  name = <span class=\"literal\">null</span>;\n\n  <span class=\"keyword\">constructor</span>(name) {\n    <span class=\"keyword\">this</span>.name = name;\n  }\n\n  greet(prefix=<span class=\"string\">&apos;Hello&apos;</span>) {\n    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${prefix}</span> <span class=\"subst\">${<span class=\"keyword\">this</span>.name}</span>`</span>;\n  }\n}\n\n<span class=\"keyword\">let</span> people = [<span class=\"keyword\">new</span> Person(<span class=\"string\">&apos;Joe&apos;</span>), <span class=\"keyword\">new</span> Person(<span class=\"string\">&apos;Matt&apos;</span>)];\n\npeople.invoke(<span class=\"string\">&apos;greet&apos;</span>); <span class=\"comment\">// [&apos;Hello Joe&apos;, &apos;Hello Matt&apos;]</span>\npeople.invoke(<span class=\"string\">&apos;greet&apos;</span>, <span class=\"string\">&apos;Bonjour&apos;</span>); <span class=\"comment\">// [&apos;Bonjour Joe&apos;, &apos;Bonjour Matt&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1332,
          "description": "<html><head></head><body><p>Simply converts the object into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the object as an array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1344,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1360,
          "description": "<html><head></head><body><p>Used to determine if the array contains the passed object.\nReturns <code>true</code> if found, <code>false</code> otherwise.</p>\n<p>The optional <code>startAt</code> argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it&apos;s negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to <code>-1 * array.length</code> the entire array is searched.</p>\n<p>This method has the same behavior of JavaScript&apos;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.includes</a>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-4</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, NaN].includes(NaN); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "object",
              "description": "The object to search for.",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "`true` if object is found in the array.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1393,
          "description": "<html><head></head><body><p>Sorts the array by the keys specified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>   <span class=\"keyword\">let</span> colors = [\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span> },\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span> },\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span> }\n];\n\n   colors.sortBy(<span class=\"string\">&apos;name&apos;</span>);\n   // [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span>}]\n\n   colors.sortBy(<span class=\"string\">&apos;weight&apos;</span>, <span class=\"string\">&apos;name&apos;</span>);\n   // [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1437,
          "description": "<html><head></head><body><p>Returns a new array that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1456,
          "description": "<html><head></head><body><p>Returns a new array that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [{ <span class=\"keyword\">value</span>: <span class=\"string\">&apos;a&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;a&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;b&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;b&apos;</span> }];\narr.uniqBy(<span class=\"string\">&apos;value&apos;</span>);  <span class=\"comment\">// [{ value: &apos;a&apos; }, { value: &apos;b&apos; }]</span>\n\n<span class=\"keyword\">let</span> arr = [<span class=\"number\">2.2</span>, <span class=\"number\">2.1</span>, <span class=\"number\">3.2</span>, <span class=\"number\">3.3</span>];\narr.uniqBy(Math.floor);  <span class=\"comment\">// [2.2, 3.2];</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniqBy",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String,Function"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 1478,
          "description": "<html><head></head><body><p>Returns a new array that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 221,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n</body></html>",
          "itemtype": "property",
          "name": "length",
          "type": "Number",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 275,
          "description": "<html><head></head><body><p>This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let peopleToMoon = [<span class=\"string\">&apos;Armstrong&apos;</span>, <span class=\"string\">&apos;Aldrin&apos;</span>];\n\npeopleToMoon.get(<span class=\"string\">&apos;[]&apos;</span>); // [<span class=\"string\">&apos;Armstrong&apos;</span>, <span class=\"string\">&apos;Aldrin&apos;</span>]\n\npeopleToMoon.set(<span class=\"string\">&apos;[]&apos;</span>, [<span class=\"string\">&apos;Collins&apos;</span>]); // [<span class=\"string\">&apos;Collins&apos;</span>]\npeopleToMoon.get(<span class=\"string\">&apos;[]&apos;</span>); // [<span class=\"string\">&apos;Collins&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 303,
          "description": "<html><head></head><body><p>The first object in the array, or <code>undefined</code> if the array is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>let vowels = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;e&apos;</span>, <span class=\"string\">&apos;i&apos;</span>, <span class=\"string\">&apos;o&apos;</span>, <span class=\"string\">&apos;u&apos;</span>];\nvowels.firstObject; <span class=\"comment\">// &apos;a&apos;</span>\n\nvowels.shiftObject<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// &apos;e&apos;</span>\n\nvowels.reverseObjects<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// &apos;u&apos;</span>\n\nvowels.clear<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "The first object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 328,
          "description": "<html><head></head><body><p>The last object in the array, or <code>undefined</code> if the array is empty.</p>\n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "The last object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
          "line": 549,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\narr.hasArrayObservers; <span class=\"comment\">// false</span>\n\narr.addArrayObserver(<span class=\"keyword\">this</span>, {\n  willChange() {\n    console.log(<span class=\"string\">&apos;willChange&apos;</span>);\n  }\n});\narr.hasArrayObservers; <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "hasArrayObservers",
          "type": "Boolean",
          "access": "public",
          "tagname": "",
          "class": "EmberArray",
          "module": "@ember/array"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-3.17.1-@ember/array",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-3.17.1",
          "type": "project-version"
        }
      }
    }
  }
}