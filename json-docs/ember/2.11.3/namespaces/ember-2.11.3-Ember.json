{
  "data": {
    "id": "ember-2.11.3-Ember",
    "type": "namespace",
    "attributes": {
      "name": "Ember",
      "shortname": "Ember",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/ember-metal/lib/core.js",
      "line": 8,
      "submodule": "ember-metal",
      "access": "public",
      "tagname": "",
      "description": "This namespace contains all Ember methods and functions. Future versions of\nEmber may overwrite this namespace and therefore, you should avoid adding any\nnew properties.\n\nAt the heart of Ember is Ember-Runtime, a set of core functions that provide\ncross-platform compatibility and object property observing.  Ember-Runtime is\nsmall and performance-focused so you can use it alongside other\ncross-platform libraries such as jQuery. For more details, see\n[Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html).",
      "static": 1,
      "methods": [
        {
          "file": "packages/ember-application/lib/system/engine-parent.js",
          "line": 5,
          "description": "`getEngineParent` retrieves an engine instance's parent instance.",
          "itemtype": "method",
          "name": "getEngineParent",
          "params": [
            {
              "name": "engine",
              "description": "An engine instance.",
              "type": "EngineInstance"
            }
          ],
          "return": {
            "description": "The parent engine instance.",
            "type": "EngineInstance"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-application/lib/system/engine-parent.js",
          "line": 18,
          "description": "`setEngineParent` sets an engine instance's parent instance.",
          "itemtype": "method",
          "name": "setEngineParent",
          "params": [
            {
              "name": "engine",
              "description": "An engine instance.",
              "type": "EngineInstance"
            },
            {
              "name": "parent",
              "description": "The parent engine instance.",
              "type": "EngineInstance"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-debug/lib/deprecate.js",
          "line": 97,
          "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only).\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
          "itemtype": "method",
          "name": "deprecate",
          "params": [
            {
              "name": "message",
              "description": "A description of the deprecation.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "A boolean. If falsy, the deprecation will be displayed.",
              "type": "Boolean"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "props": [
                {
                  "name": "id",
                  "description": "A unique id for this deprecation. The id can be\n  used by Ember debugging tools to change the behavior (raise, log or silence)\n  for that specific deprecation. The id should be namespaced by dots, e.g.\n  \"view.helper.select\".",
                  "type": "String"
                },
                {
                  "name": "until",
                  "description": "The version of Ember when this deprecation\n  warning will be removed.",
                  "type": "String"
                },
                {
                  "name": "url",
                  "description": "An optional url to the transition guide on the\n  emberjs.com website.",
                  "type": "String",
                  "optional": true
                }
              ]
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 33,
          "description": "Define an assertion that will throw an exception if the condition is not met.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\n// Test for truthiness\nEmber.assert('Must pass a valid object', obj);\n\n// Fail unconditionally\nEmber.assert('This code path should never be run');\n```",
          "itemtype": "method",
          "name": "assert",
          "params": [
            {
              "name": "desc",
              "description": "A description of the assertion. This will become\n  the text of the Error thrown if the assertion fails.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
              "type": "Boolean"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 61,
          "description": "Display a debug notice.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nEmber.debug('I\\'m a debug notice!');\n```",
          "itemtype": "method",
          "name": "debug",
          "params": [
            {
              "name": "message",
              "description": "A debug message to display.",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 79,
          "description": "Display an info notice.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
          "itemtype": "method",
          "name": "info",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 92,
          "description": "Alias an old, deprecated method with its new counterpart.\n\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\n\n* In a production build, this method is defined as an empty function (NOP).\n\n```javascript\nEmber.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n```",
          "itemtype": "method",
          "name": "deprecateFunc",
          "params": [
            {
              "name": "message",
              "description": "A description of the deprecation.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "The options object for Ember.deprecate.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "func",
              "description": "The new function called to replace its deprecated counterpart.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "A new function that wraps the original function with a deprecation warning",
            "type": "Function"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 128,
          "description": "Run a function meant for debugging.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nEmber.runInDebug(() => {\n  Ember.Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n```",
          "itemtype": "method",
          "name": "runInDebug",
          "params": [
            {
              "name": "func",
              "description": "The function to be executed.",
              "type": "Function"
            }
          ],
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/index.js",
          "line": 165,
          "description": "Will call `Ember.warn()` if ENABLE_OPTIONAL_FEATURES or\nany specific FEATURES flag is truthy.\n\nThis method is called automatically in debug canary builds.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_warnIfUsingStrippedFeatureFlags",
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-debug/lib/warn.js",
          "line": 26,
          "description": "Display a warning with the provided message.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
          "itemtype": "method",
          "name": "warn",
          "params": [
            {
              "name": "message",
              "description": "A warning to display.",
              "type": "String"
            },
            {
              "name": "test",
              "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
              "type": "Boolean"
            },
            {
              "name": "options",
              "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "since": "1.0.0",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-debug"
        },
        {
          "file": "packages/ember-metal/lib/binding.js",
          "line": 486,
          "description": "Global helper method to create a new binding. Just pass the root object\nalong with a `to` and `from` path to create and connect the binding.",
          "itemtype": "method",
          "name": "bind",
          "params": [
            {
              "name": "obj",
              "description": "The root object of the transform.",
              "type": "Object"
            },
            {
              "name": "to",
              "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
              "type": "String"
            },
            {
              "name": "from",
              "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
              "type": "String"
            }
          ],
          "return": {
            "description": "binding instance",
            "type": "Ember.Binding"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/computed.js",
          "line": 552,
          "description": "Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "obj",
              "description": "the object whose property you want to check",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "the name of the property whose cached value you want\n  to return",
              "type": "String"
            }
          ],
          "return": {
            "description": "the cached value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 70,
          "description": "Add an event listener",
          "itemtype": "method",
          "name": "addListener",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "once",
              "description": "A flag whether a function should only be called once",
              "type": "Boolean"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 112,
          "description": "Remove an event listener\n\nArguments should match those passed to `Ember.addListener`.",
          "itemtype": "method",
          "name": "removeListener",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 140,
          "description": "Suspend listener during callback.\n\nThis should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.",
          "itemtype": "method",
          "name": "suspendListener",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 162,
          "description": "Suspends multiple listeners during a callback.",
          "itemtype": "method",
          "name": "suspendListeners",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventNames",
              "description": "Array of event names",
              "type": "Array"
            },
            {
              "name": "target",
              "description": "A target object or a function",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "A function or the name of a function to be called on `target`",
              "type": "Function|String"
            },
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 183,
          "description": "Return a list of currently watched events",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watchedEvents",
          "params": [
            {
              "name": "obj",
              "description": ""
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 195,
          "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
          "itemtype": "method",
          "name": "sendEvent",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            },
            {
              "name": "params",
              "description": "Optional parameters for each listener.",
              "type": "Array"
            },
            {
              "name": "actions",
              "description": "Optional array of actions (listeners).",
              "type": "Array"
            }
          ],
          "return": {
            "description": "true"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 244,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "hasListeners",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 257,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "listenersFor",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "eventName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/events.js",
          "line": 280,
          "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n\n``` javascript\nlet Job = Ember.Object.extend({\n  logCompleted: Ember.on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nlet job = Job.create();\n\nEmber.sendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
          "itemtype": "method",
          "name": "on",
          "params": [
            {
              "name": "eventNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/expand_properties.js",
          "line": 11,
          "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nfunction echo(arg){ console.log(arg); }\n\nEmber.expandProperties('foo.bar', echo);              //=> 'foo.bar'\nEmber.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nEmber.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nEmber.expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\nEmber.expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\nEmber.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nEmber.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
          "itemtype": "method",
          "name": "expandProperties",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "pattern",
              "description": "The property pattern to expand.",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/get_properties.js",
          "line": 3,
          "description": "To get multiple properties at once, call `Ember.getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nEmber.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nEmber.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "obj",
              "description": "",
              "type": "Object"
            },
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/is_blank.js",
          "line": 3,
          "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nEmber.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n```",
          "itemtype": "method",
          "name": "isBlank",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/is_empty.js",
          "line": 4,
          "description": "Verifies that a value is `null` or an empty string, empty array,\nor empty function.\n\nConstrains the rules on `Ember.isNone` by returning true for empty\nstring and empty arrays.\n\n```javascript\nEmber.isEmpty();                // true\nEmber.isEmpty(null);            // true\nEmber.isEmpty(undefined);       // true\nEmber.isEmpty('');              // true\nEmber.isEmpty([]);              // true\nEmber.isEmpty({});              // false\nEmber.isEmpty('Adam Hawkins');  // false\nEmber.isEmpty([0,1,2]);         // false\nEmber.isEmpty('\\n\\t');          // false\nEmber.isEmpty('  ');            // false\n```",
          "itemtype": "method",
          "name": "isEmpty",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/is_none.js",
          "line": 1,
          "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nEmber.isNone();              // true\nEmber.isNone(null);          // true\nEmber.isNone(undefined);     // true\nEmber.isNone('');            // false\nEmber.isNone([]);            // false\nEmber.isNone(function() {}); // false\n```",
          "itemtype": "method",
          "name": "isNone",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/is_present.js",
          "line": 3,
          "description": "A value is present if it not `isBlank`.\n\n```javascript\nEmber.isPresent();                // false\nEmber.isPresent(null);            // false\nEmber.isPresent(undefined);       // false\nEmber.isPresent('');              // false\nEmber.isPresent('  ');            // false\nEmber.isPresent('\\n\\t');          // false\nEmber.isPresent([]);              // false\nEmber.isPresent({ length: 0 })    // false\nEmber.isPresent(false);           // true\nEmber.isPresent(true);            // true\nEmber.isPresent('string');        // true\nEmber.isPresent(0);               // true\nEmber.isPresent(function() {})    // true\nEmber.isPresent({});              // true\nEmber.isPresent(false);           // true\nEmber.isPresent('\\n\\t Hello');    // true\nEmber.isPresent([1,2,3]);         // true\n```",
          "itemtype": "method",
          "name": "isPresent",
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.8.0",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/merge.js",
          "line": 1,
          "description": "Merge the contents of two objects together into the first object.\n\n```javascript\nEmber.merge({ first: 'Tom' }, { last: 'Dale' }); // { first: 'Tom', last: 'Dale' }\nvar a = { first: 'Yehuda' };\nvar b = { last: 'Katz' };\nEmber.merge(a, b); // a == { first: 'Yehuda', last: 'Katz' }, b == { last: 'Katz' }\n```",
          "itemtype": "method",
          "name": "merge",
          "params": [
            {
              "name": "original",
              "description": "The object to merge into",
              "type": "Object"
            },
            {
              "name": "updates",
              "description": "The object to copy properties from",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-metal/lib/meta.js",
          "line": 540,
          "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\n\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
          "itemtype": "method",
          "name": "meta",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve meta for",
              "type": "Object"
            },
            {
              "name": "writable",
              "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
              "type": "Boolean",
              "optional": true,
              "optdefault": "true"
            }
          ],
          "return": {
            "description": "the meta hash for an object",
            "type": "Object"
          },
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 403,
          "itemtype": "method",
          "name": "mixin",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "mixins",
              "description": "",
              "multiple": true
            }
          ],
          "return": {
            "description": "obj"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 667,
          "description": "Denotes a required property for a mixin",
          "itemtype": "method",
          "name": "required",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 690,
          "description": "Makes a method available via an additional name.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name: function() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: Ember.aliasMethod('name')\n});\n\nlet goodGuy = App.Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
          "itemtype": "method",
          "name": "aliasMethod",
          "params": [
            {
              "name": "methodName",
              "description": "name of the method to alias",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 720,
          "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
          "itemtype": "method",
          "name": "observer",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 772,
          "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.immediateObserver('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nIn the future, `Ember.observer` may become asynchronous. In this event,\n`Ember.immediateObserver` will maintain the synchronous behavior.\n\nAlso available as `Function.prototype.observesImmediately` if prototype extensions are\nenabled.",
          "itemtype": "method",
          "name": "_immediateObserver",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "deprecated": true,
          "deprecationMessage": "Use `Ember.observer` instead.",
          "return": {
            "description": "func"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/mixin.js",
          "line": 811,
          "description": "When observers fire, they are called with the arguments `obj`, `keyName`.\n\nNote, `@each.property` observer is called per each add or replace of an element\nand it's not called with a specific enumeration item.\n\nA `_beforeObserver` fires before a property changes.",
          "itemtype": "method",
          "name": "beforeObserver",
          "params": [
            {
              "name": "propertyNames",
              "description": "",
              "type": "String",
              "multiple": true
            },
            {
              "name": "func",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "func"
          },
          "deprecated": true,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/observer.js",
          "line": 27,
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "_path",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "",
              "type": "Function|String",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/observer.js",
          "line": 47,
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "path",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "",
              "type": "Function|String",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/observer.js",
          "line": 63,
          "itemtype": "method",
          "name": "_addBeforeObserver",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "path",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "",
              "type": "Function|String",
              "optional": true
            }
          ],
          "deprecated": true,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/observer.js",
          "line": 93,
          "itemtype": "method",
          "name": "removeBeforeObserver",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "path",
              "description": "",
              "type": "String"
            },
            {
              "name": "target",
              "description": "",
              "type": "Object|Function"
            },
            {
              "name": "method",
              "description": "",
              "type": "Function|String",
              "optional": true
            }
          ],
          "deprecated": true,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/properties.js",
          "line": 84,
          "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\nEmber.defineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\nEmber.defineProperty(contact, 'fullName', Ember.computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "defineProperty",
          "params": [
            {
              "name": "obj",
              "description": "the object to define this property on. This may be a prototype.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "the name of the property",
              "type": "String"
            },
            {
              "name": "desc",
              "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
              "type": "Descriptor",
              "optional": true
            },
            {
              "name": "data",
              "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
              "type": "*",
              "optional": true
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_events.js",
          "line": 26,
          "description": "This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyDidChange()` which you should call just\nafter the property value changes.",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_events.js",
          "line": 64,
          "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyWillChange()` which you should call just\nbefore the property value changes.",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "obj",
              "description": "The object with the property that will change",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key (or path) that will change.",
              "type": "String"
            },
            {
              "name": "meta",
              "description": "The objects meta.",
              "type": "Meta"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_events.js",
          "line": 213,
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_events.js",
          "line": 222,
          "itemtype": "method",
          "name": "endPropertyChanges",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_events.js",
          "line": 234,
          "description": "Make a series of property changes together in an\nexception-safe way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo', mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```",
          "itemtype": "method",
          "name": "changeProperties",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "optional": true
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_get.js",
          "line": 21,
          "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nEmber.get(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve from.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "the property value or `null`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_get.js",
          "line": 106,
          "description": "Retrieves the value of a property from an Object, or a default value in the\ncase that the property returns `undefined`.\n\n```javascript\nEmber.getWithDefault(person, 'lastName', 'Doe');\n```",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "obj",
              "description": "The object to retrieve from.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_set.js",
          "line": 19,
          "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the `setUnknownProperty`\nmethod then that will be invoked as well.\n\n```javascript\nEmber.set(obj, \"name\", value);\n```",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "obj",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "keyName",
              "description": "The property key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/property_set.js",
          "line": 131,
          "description": "Error-tolerant form of `Ember.set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.",
          "itemtype": "method",
          "name": "trySet",
          "params": [
            {
              "name": "root",
              "description": "The object to modify.",
              "type": "Object"
            },
            {
              "name": "path",
              "description": "The property path to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set",
              "type": "Object"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/set_properties.js",
          "line": 4,
          "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nlet anObject = Ember.Object.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "properties",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "properties"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/watching.js",
          "line": 21,
          "description": "Starts watching a property on an object. Whenever the property changes,\ninvokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the\nprimitive used by observers and dependent keys; usually you will never call\nthis method directly but instead use higher level methods like\n`Ember.addObserver()`",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "watch",
          "params": [
            {
              "name": "obj",
              "description": ""
            },
            {
              "name": "_keyPath",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-metal/lib/watching.js",
          "line": 65,
          "description": "Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.",
          "itemtype": "method",
          "name": "destroy",
          "params": [
            {
              "name": "obj",
              "description": "the object to destroy",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember-metal"
        },
        {
          "file": "packages/ember-routing/lib/system/controller_for.js",
          "line": 6,
          "description": "Finds a controller instance.",
          "itemtype": "method",
          "name": "controllerFor",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "packages/ember-routing/lib/system/generate_controller.js",
          "line": 11,
          "description": "Generates a controller factory",
          "itemtype": "method",
          "name": "generateControllerFactory",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "packages/ember-routing/lib/system/generate_controller.js",
          "line": 34,
          "description": "Generates and instantiates a controller extending from `controller:basic`\nif present, or `Ember.Controller` if not.",
          "itemtype": "method",
          "name": "generateController",
          "access": "private",
          "tagname": "",
          "since": "1.3.0",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-routing"
        },
        {
          "file": "packages/ember-runtime/lib/system/lazy_load.js",
          "line": 14,
          "description": "Detects when a specific package of Ember (e.g. 'Ember.Application')\nhas fully loaded and is available for extension.\n\nThe provided `callback` will be called with the `name` passed\nresolved from a string into the object:\n\n``` javascript\nEmber.onLoad('Ember.Application' function(hbars) {\n  hbars.registerHelper(...);\n});\n```",
          "itemtype": "method",
          "name": "onLoad",
          "params": [
            {
              "name": "name",
              "description": "name of hook",
              "type": "String"
            },
            {
              "name": "callback",
              "description": "callback to be called",
              "type": "Function"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "packages/ember-runtime/lib/system/lazy_load.js",
          "line": 44,
          "description": "Called when an Ember.js package (e.g Ember.Application) has finished\nloading. Triggers any callbacks registered for this event.",
          "itemtype": "method",
          "name": "runLoadHooks",
          "params": [
            {
              "name": "name",
              "description": "name of hook",
              "type": "String"
            },
            {
              "name": "object",
              "description": "object to pass to callbacks",
              "type": "Object"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "packages/ember-runtime/lib/system/native_array.js",
          "line": 109,
          "description": "Creates an `Ember.NativeArray` from an Array like object.\nDoes not modify the original object. Ember.A is not needed if\n`EmberENV.EXTEND_PROTOTYPES` is `true` (the default value). However,\nit is recommended that you use Ember.A when creating addons for\nember or when you can not guarantee that `EmberENV.EXTEND_PROTOTYPES`\nwill be `true`.\n\nExample\n\n```js\nexport default Ember.Component.extend({\n  tagName: 'ul',\n  classNames: ['pagination'],\n\n  init() {\n    this._super(...arguments);\n\n    if (!this.get('content')) {\n      this.set('content', Ember.A());\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "A",
          "return": {
            "description": "",
            "type": "Ember.NativeArray"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "packages/ember-runtime/lib/compare.js",
          "line": 40,
          "description": "Compares two javascript values and returns:\n\n - -1 if the first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first is greater than the second.\n\n ```javascript\n Ember.compare('hello', 'hello');  // 0\n Ember.compare('abc', 'dfg');      // -1\n Ember.compare(2, 1);              // 1\n ```\n\nIf the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered `<` types\nlater in the list:\n\n - undefined\n - null\n - boolean\n - number\n - string\n - array\n - object\n - instance\n - function\n - class\n - date\n\n ```javascript\n Ember.compare('hello', 50);       // 1\n Ember.compare(50, 'hello');       // -1\n ```",
          "itemtype": "method",
          "name": "compare",
          "params": [
            {
              "name": "v",
              "description": "First value to compare",
              "type": "Object"
            },
            {
              "name": "w",
              "description": "Second value to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/copy.js",
          "line": 66,
          "description": "Creates a shallow copy of the passed object. A deep copy of the object is\nreturned if the optional `deep` argument is `true`.\n\nIf the passed object implements the `Ember.Copyable` interface, then this\nfunction will delegate to the object's `copy()` method and return the\nresult. See `Ember.Copyable` for further details.\n\nFor primitive values (which are immutable in JavaScript), the passed object\nis simply returned.",
          "itemtype": "method",
          "name": "copy",
          "params": [
            {
              "name": "obj",
              "description": "The object to clone",
              "type": "Object"
            },
            {
              "name": "deep",
              "description": "If true, a deep copy of the object is made.",
              "type": "Boolean",
              "optional": true,
              "optdefault": "false"
            }
          ],
          "return": {
            "description": "The copied object",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/inject.js",
          "line": 21,
          "description": "This method allows other Ember modules to register injection helpers for a\ngiven container type. Helpers are exported to the `inject` namespace as the\ncontainer type itself.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "createInjectionHelper",
          "since": "1.10.0",
          "params": [
            {
              "name": "type",
              "description": "The container type the helper will inject",
              "type": "String"
            },
            {
              "name": "validator",
              "description": "A validation callback that is executed at mixin-time",
              "type": "Function"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/inject.js",
          "line": 41,
          "description": "Validation function that runs per-type validation functions once for each\ninjected type encountered.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "validatePropertyInjections",
          "since": "1.10.0",
          "params": [
            {
              "name": "factory",
              "description": "The factory object",
              "type": "Object"
            }
          ],
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/is-equal.js",
          "line": 1,
          "description": "Compares two objects, returning true if they are equal.\n\n```javascript\nEmber.isEqual('hello', 'hello');                   // true\nEmber.isEqual(1, 2);                               // false\n```\n\n`isEqual` is a more specific comparison than a triple equal comparison.\nIt will call the `isEqual` instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.\n\n```javascript\nlet Person = Ember.Object.extend({\n  isEqual(other) { return this.ssn == other.ssn; }\n});\n\nlet personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\nlet personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n\nEmber.isEqual(personA, personB); // true\n```\n\nDue to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.\n\n```javascript\nEmber.isEqual([4, 2], [4, 2]);                     // false\n```",
          "itemtype": "method",
          "name": "isEqual",
          "params": [
            {
              "name": "a",
              "description": "first object to compare",
              "type": "Object"
            },
            {
              "name": "b",
              "description": "second object to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/utils.js",
          "line": 21,
          "description": "Returns true if the passed object is an array or Array-like.\n\nObjects are considered Array-like if any of the following are true:\n\n  - the object is a native Array\n  - the object has an objectAt property\n  - the object is an Object, and has a length property\n\nUnlike `Ember.typeOf` this method returns true even if the passed object is\nnot formally an array but appears to be array-like (i.e. implements `Ember.Array`)\n\n```javascript\nEmber.isArray();                                          // false\nEmber.isArray([]);                                        // true\nEmber.isArray(Ember.ArrayProxy.create({ content: [] }));  // true\n```",
          "itemtype": "method",
          "name": "isArray",
          "params": [
            {
              "name": "obj",
              "description": "The object to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "true if the passed object is an array or Array-like",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-runtime/lib/utils.js",
          "line": 56,
          "description": "Returns a consistent type for the passed object.\n\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n\n    | Return Value  | Meaning                                              |\n    |---------------|------------------------------------------------------|\n    | 'string'      | String primitive or String object.                   |\n    | 'number'      | Number primitive or Number object.                   |\n    | 'boolean'     | Boolean primitive or Boolean object.                 |\n    | 'null'        | Null value                                           |\n    | 'undefined'   | Undefined value                                      |\n    | 'function'    | A function                                           |\n    | 'array'       | An instance of Array                                 |\n    | 'regexp'      | An instance of RegExp                                |\n    | 'date'        | An instance of Date                                  |\n    | 'filelist'    | An instance of FileList                              |\n    | 'class'       | An Ember class (created using Ember.Object.extend()) |\n    | 'instance'    | An Ember object instance                             |\n    | 'error'       | An instance of the Error object                      |\n    | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\nExamples:\n\n```javascript\nEmber.typeOf();                       // 'undefined'\nEmber.typeOf(null);                   // 'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');              // 'string'\nEmber.typeOf(new String('michael'));  // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(new Number(101));        // 'number'\nEmber.typeOf(true);                   // 'boolean'\nEmber.typeOf(new Boolean(true));      // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1, 2, 90]);             // 'array'\nEmber.typeOf(/abc/);                  // 'regexp'\nEmber.typeOf(new Date());             // 'date'\nEmber.typeOf(event.target.files);     // 'filelist'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());  // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\nEmber.typeOf({ a: 'b' });             // 'object'\n```",
          "itemtype": "method",
          "name": "typeOf",
          "params": [
            {
              "name": "item",
              "description": "the item to check",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the type",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/assign.js",
          "line": 1,
          "description": "Copy properties from a source object to a target object.\n\n```javascript\nvar a = { first: 'Yehuda' };\nvar b = { last: 'Katz' };\nvar c = { company: 'Tilde Inc.' };\nEmber.assign(a, b, c); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' }, b === { last: 'Katz' }, c === { company: 'Tilde Inc.' }\n```",
          "itemtype": "method",
          "name": "assign",
          "params": [
            {
              "name": "original",
              "description": "The object to assign into",
              "type": "Object"
            },
            {
              "name": "args",
              "description": "The objects to copy properties from",
              "type": "Object",
              "multiple": true
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/guid.js",
          "line": 73,
          "description": "Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall `Ember.guidFor(obj)`, which return an existing guid if available.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "generateGuid",
          "params": [
            {
              "name": "obj",
              "description": "Object the guid will be used for. If passed in, the guid will\n  be saved on the object and reused whenever you pass the same object\n  again.\n\n  If no object is passed, just generate a new guid.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "prefix",
              "description": "Prefix to place in front of the guid. Useful when you want to\n  separate the guid into separate namespaces.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "the guid",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/guid.js",
          "line": 111,
          "description": "Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n`Ember.Object`-based or not, but be aware that it will add a `_guid`\nproperty.\n\nYou can also use this method on DOM Element objects.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "guidFor",
          "params": [
            {
              "name": "obj",
              "description": "any object, string, number, Element, or primitive",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the unique guid for this instance.",
            "type": "String"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/inspect.js",
          "line": 3,
          "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\n\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
          "itemtype": "method",
          "name": "inspect",
          "params": [
            {
              "name": "obj",
              "description": "The object you want to inspect.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A description of the object",
            "type": "String"
          },
          "since": "1.4.0",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/invoke.js",
          "line": 3,
          "description": "Checks to see if the `methodName` exists on the `obj`.\n\n```javascript\nlet foo = { bar: function() { return 'bar'; }, baz: null };\n\nEmber.canInvoke(foo, 'bar'); // true\nEmber.canInvoke(foo, 'baz'); // false\nEmber.canInvoke(foo, 'bat'); // false\n```",
          "itemtype": "method",
          "name": "canInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/invoke.js",
          "line": 25,
          "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n\n```javascript\nlet d = new Date('03/15/2013');\n\nEmber.tryInvoke(d, 'getTime');              // 1363320000000\nEmber.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\nEmber.tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
          "itemtype": "method",
          "name": "tryInvoke",
          "params": [
            {
              "name": "obj",
              "description": "The object to check for the method",
              "type": "Object"
            },
            {
              "name": "methodName",
              "description": "The method name to check for",
              "type": "String"
            },
            {
              "name": "args",
              "description": "The arguments to pass to the method",
              "type": "Array",
              "optional": true
            }
          ],
          "return": {
            "description": "the return value of the invoked method or undefined if it cannot be invoked",
            "type": "*"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/make-array.js",
          "line": 1,
          "description": "Forces the passed object to be part of an array. If the object is already\nan array, it will return the object. Otherwise, it will add the object to\nan array. If obj is `null` or `undefined`, it will return an empty array.\n\n```javascript\nEmber.makeArray();            // []\nEmber.makeArray(null);        // []\nEmber.makeArray(undefined);   // []\nEmber.makeArray('lindsay');   // ['lindsay']\nEmber.makeArray([1, 2, 42]);  // [1, 2, 42]\n\nlet controller = Ember.ArrayProxy.create({ content: [] });\n\nEmber.makeArray(controller) === controller;  // true\n```",
          "itemtype": "method",
          "name": "makeArray",
          "params": [
            {
              "name": "obj",
              "description": "the object",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/owner.js",
          "line": 10,
          "description": "Framework objects in an Ember application (components, services, routes, etc.)\nare created via a factory and dependency injection system. Each of these\nobjects is the responsibility of an \"owner\", which handled its\ninstantiation and manages its lifetime.\n\n`getOwner` fetches the owner object responsible for an instance. This can\nbe used to lookup or resolve other class instances, or register new factories\ninto the owner.\n\nFor example, this component dynamically looks up a service based on the\n`audioType` passed as an attribute:\n\n```js {data-filename=app/components/play-audio.js}\nimport Ember from 'ember';\n\n// Usage:\n//\n//   {{play-audio audioType=model.audioType audioFile=model.file}}\n//\nexport default Ember.Component.extend({\n  audioService: Ember.computed('audioType', function() {\n    let owner = Ember.getOwner(this);\n    return owner.lookup(`service:${this.get('audioType')}`);\n  }),\n  click() {\n    let player = this.get('audioService');\n    player.play(this.get('audioFile'));\n  }\n});\n```",
          "itemtype": "method",
          "name": "getOwner",
          "params": [
            {
              "name": "object",
              "description": "An object with an owner.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "An owner object.",
            "type": "Object"
          },
          "since": "2.3.0",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "packages/ember-utils/lib/owner.js",
          "line": 53,
          "description": "`setOwner` forces a new owner on a given object instance. This is primarily\nuseful in some testing cases.",
          "itemtype": "method",
          "name": "setOwner",
          "params": [
            {
              "name": "object",
              "description": "An object instance.",
              "type": "Object"
            },
            {
              "name": "object",
              "description": "The new owner object of the object instance.",
              "type": "Object"
            }
          ],
          "since": "2.3.0",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember",
          "submodule": "ember-runtime"
        },
        {
          "file": "packages/ember-utils/lib/super.js",
          "line": 30,
          "description": "Wraps the passed function so that `this._super` will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrap",
          "params": [
            {
              "name": "func",
              "description": "The function to call",
              "type": "Function"
            },
            {
              "name": "superFunc",
              "description": "The super function.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "wrapped function.",
            "type": "Function"
          },
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 208,
          "description": "An empty function useful for some operations. Always returns `this`.",
          "itemtype": "method",
          "name": "K",
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 540,
          "description": "Alias for jQuery",
          "itemtype": "method",
          "name": "$",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        }
      ],
      "events": [
        {
          "file": "packages/ember/lib/index.js",
          "line": 181,
          "description": "A function may be assigned to `Ember.onerror` to be called when Ember\ninternals encounter an error. This is useful for specialized error handling\nand reporting code.\n\n```javascript\nEmber.onerror = function(error) {\n  Em.$.ajax('/report-error', 'POST', {\n    stack: error.stack,\n    otherInformation: 'whatever app state you want to provide'\n  });\n};\n```\n\nInternally, `Ember.onerror` is used as Backburner's error handler.",
          "itemtype": "event",
          "name": "onerror",
          "params": [
            {
              "name": "error",
              "description": "the error object",
              "type": "Exception"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        }
      ],
      "properties": [
        {
          "file": "packages/ember-utils/lib/guid.js",
          "line": 24,
          "description": "Prefix used for guids through out Ember.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_PREFIX",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember-utils/lib/guid.js",
          "line": 38,
          "description": "A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.\n\nOn browsers that support it, these properties are added with enumeration\ndisabled so they won't show up when you iterate over your properties.",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "GUID_KEY",
          "type": "String",
          "final": 1,
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 418,
          "description": "Defines the hash of localized strings for the current language. Used by\nthe `Ember.String.loc()` helper. To localize, add string values to this\nhash.",
          "itemtype": "property",
          "name": "STRINGS",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 434,
          "description": "Whether searching on the global for new Namespace instances is enabled.\n\nThis is only exported here as to not break any addons.  Given the new\nvisit API, you will have issues if you treat this as a indicator of\nbooted.\n\nInternally this is only exposing a flag in Namespace.",
          "itemtype": "property",
          "name": "BOOTED",
          "type": "Boolean",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 504,
          "description": "Global hash of shared templates. This will automatically be populated\nby the build tools so that you can store your Handlebars templates in\nseparate files that get loaded into JavaScript at buildtime.",
          "itemtype": "property",
          "name": "TEMPLATES",
          "type": "Object",
          "access": "private",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        },
        {
          "file": "packages/ember/lib/index.js",
          "line": 524,
          "description": "The semantic version",
          "itemtype": "property",
          "name": "VERSION",
          "type": "String",
          "access": "public",
          "tagname": "",
          "class": "Ember",
          "module": "ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.11.3-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.11.3",
          "type": "project-version"
        }
      }
    }
  }
}