{
  "data": {
    "id": "ember-2.4.5-ember-views",
    "type": "module",
    "attributes": {
      "name": "ember-views",
      "submodules": {},
      "fors": {
        "Ember": 1
      },
      "is_submodule": 1,
      "namespaces": {
        "Ember": 1
      },
      "namespace": "",
      "file": "packages/ember-views/lib/views/view.js",
      "line": 31,
      "description": "<html><head></head><body><p>An <code>Ember.Component</code> is a view that is completely\nisolated. Properties accessed in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.</p>\n<p>The easiest way to create an <code>Ember.Component</code> is via\na template. If you name a template\n<code>components/my-foo</code>, you will be able to use\n<code>{{my-foo}}</code> in other templates, which will make\nan instance of the isolated component.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>{{app-profile person=currentUser}}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"comment\">&lt;!-- app-profile template --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{person.title}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=</span></span><span class=\"template-variable\">{{person.avatar}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&apos;signature&apos;</span>&gt;</span></span><span class=\"template-variable\">{{person.signature}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can use <code>yield</code> inside a template to\ninclude the <strong>contents</strong> of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"></span><span class=\"template-tag\">{{#<span class=\"name\">app-profile</span> <span class=\"attr\">person</span>=currentUser}}</span><span class=\"xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Admin mode<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n  </span><span class=\"comment\">{{! Executed in the controller&apos;s context. }}</span><span class=\"xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">app-profile</span>}}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"comment\">&lt;!-- app-profile template --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{person.title}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"comment\">{{! Executed in the components context. }}</span><span class=\"xml\">\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">yield</span>}}</span><span class=\"xml\"> </span><span class=\"comment\">{{! block contents }}</span><span class=\"xml\"></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof <code>Ember.Component</code> named after the name of the\ncomponent. Note that <code>Component</code> needs to be appended to the name of\nyour subclass like <code>AppProfileComponent</code>.</p>\n<p>For example, you could implement the action\n<code>hello</code> for the <code>app-profile</code> component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.AppProfileComponent = Ember.Component.extend({\n  actions: {\n    hello: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name)</span></span> {\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"keyword\">name</span>);\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And then use it in the component&apos;s template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"xml\"><span class=\"comment\">&lt;!-- app-profile template --&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{person.title}}</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-variable\">{{<span class=\"builtin-name\">yield</span>}}</span><span class=\"xml\"> <span class=\"comment\">&lt;!-- block contents --&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"builtin-name\">action</span> &apos;hello&apos; person.name}}</span><span class=\"xml\"><span class=\"tag\">&gt;</span>\n  Say Hello to </span><span class=\"template-variable\">{{person.name}}</span><span class=\"xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Components must have a <code>-</code> in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.</p>\n</body></html>",
      "parent": "ember",
      "publicclasses": [
        "Ember.Component",
        "Ember.InstrumentationSupport",
        "Ember.VisibilitySupport",
        "Ember.Checkbox",
        "Ember.TextArea",
        "Ember.TextField"
      ],
      "privateclasses": [
        "Ember._Metamorph",
        "Ember._MetamorphView",
        "Ember.AriaRoleSupport",
        "Ember.ClassNamesSupport",
        "Ember.EmptyViewSupport",
        "Ember.LegacyViewSupport",
        "Ember.TemplateRenderingSupport",
        "Ember.TextSupport",
        "Ember.EventDispatcher",
        "Ember.CollectionView",
        "Ember.ContainerView",
        "Ember.Select",
        "Ember.View"
      ],
      "staticfunctions": {},
      "allstaticfunctions": {},
      "version": "2.4.5"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-2.4.5",
          "type": "project-version"
        }
      }
    }
  }
}