{
  "data": {
    "id": "ember-4.5.1-@ember/utils",
    "type": "class",
    "attributes": {
      "name": "@ember/utils",
      "shortname": "@ember/utils",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/is_blank.ts",
          "line": 5,
          "description": "<html><head></head><body><p>A value is blank if it is empty or a whitespace string.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import { isBlank } from &apos;@ember/utils&apos;;\n\nis<span class=\"constructor\">Blank(<span class=\"params\">null</span>)</span>;            <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank(<span class=\"params\">undefined</span>)</span>;       <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank(&apos;&apos;)</span>;              <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank([])</span>;              <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank(&apos;\\<span class=\"params\">n</span>\\<span class=\"params\">t</span>&apos;)</span>;          <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank(&apos;  &apos;)</span>;            <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Blank({})</span>;              <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Blank(&apos;\\<span class=\"params\">n</span>\\<span class=\"params\">t</span> Hello&apos;)</span>;    <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Blank(&apos;Hello <span class=\"params\">world</span>&apos;)</span>;   <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Blank([1,2,3])</span>;         <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isBlank",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.5.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/is_empty.ts",
          "line": 5,
          "description": "<html><head></head><body><p>Verifies that a value is <code>null</code> or <code>undefined</code>, an empty string, or an empty\narray.</p>\n<p>Constrains the rules on <code>isNone</code> by returning true for empty strings and\nempty arrays.</p>\n<p>If the value is an object with a <code>size</code> property of type number, it is used\nto check emptiness.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>is<span class=\"constructor\">Empty(<span class=\"params\">null</span>)</span>;             <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Empty(<span class=\"params\">undefined</span>)</span>;        <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Empty(&apos;&apos;)</span>;               <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Empty([])</span>;               <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Empty({ <span class=\"params\">size</span>: 0})</span>;       <span class=\"comment\">// true</span>\nis<span class=\"constructor\">Empty({})</span>;               <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty(&apos;Adam Hawkins&apos;)</span>;   <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty([0,1,2])</span>;          <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty(&apos;\\<span class=\"params\">n</span>\\<span class=\"params\">t</span>&apos;)</span>;           <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty(&apos;  &apos;)</span>;             <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty({ <span class=\"params\">size</span>: 1 })</span>       <span class=\"comment\">// false</span>\nis<span class=\"constructor\">Empty({ <span class=\"params\">size</span>: ()</span> =&gt; <span class=\"number\">0</span> }) <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEmpty",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/is_none.ts",
          "line": 4,
          "description": "<html><head></head><body><p>Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">isNone</span>(null);          <span class=\"comment\">// true</span>\n<span class=\"built_in\">isNone</span>(undefined);     <span class=\"comment\">// true</span>\n<span class=\"built_in\">isNone</span>(&apos;&apos;);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isNone</span>([]);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isNone</span>(function() {}); <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isNone",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/is_present.ts",
          "line": 5,
          "description": "<html><head></head><body><p>A value is present if it not <code>isBlank</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">isPresent</span>(null);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(undefined);       <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(&apos;&apos;);              <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(&apos;  &apos;);            <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(&apos;\\n\\t&apos;);          <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>([]);              <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>({ length: <span class=\"number\">0</span> });   <span class=\"comment\">// false</span>\n<span class=\"built_in\">isPresent</span>(false);           <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(true);            <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(&apos;string&apos;);        <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(<span class=\"number\">0</span>);               <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(function() {});   <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>({});              <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>(&apos;\\n\\t Hello&apos;);    <span class=\"comment\">// true</span>\n<span class=\"built_in\">isPresent</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);       <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isPresent",
          "static": 1,
          "params": [
            {
              "name": "obj",
              "description": "Value to test",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.8.0",
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/compare.ts",
          "line": 51,
          "description": "<html><head></head><body><p>Compares two javascript values and returns:</p>\n<ul>\n<li>-1 if the first is smaller than the second,</li>\n<li>0 if both are equal,</li>\n<li>1 if the first is greater than the second.</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>import { compare } from <span class=\"string\">&apos;@ember/utils&apos;</span>;\n\ncompare(<span class=\"string\">&apos;hello&apos;</span>, <span class=\"string\">&apos;hello&apos;</span>);  <span class=\"regexp\">//</span> <span class=\"number\">0</span>\ncompare(<span class=\"string\">&apos;abc&apos;</span>, <span class=\"string\">&apos;dfg&apos;</span>);      <span class=\"regexp\">//</span> -<span class=\"number\">1</span>\ncompare(<span class=\"number\">2</span>, <span class=\"number\">1</span>);              <span class=\"regexp\">//</span> <span class=\"number\">1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered <code>&lt;</code> types\nlater in the list:</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>array</li>\n<li>object</li>\n<li>instance</li>\n<li>function</li>\n<li>class</li>\n<li>date</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>import { compare } from <span class=\"string\">&apos;@ember/utils&apos;</span>;\n\ncompare(<span class=\"string\">&apos;hello&apos;</span>, <span class=\"number\">50</span>);       <span class=\"regexp\">//</span> <span class=\"number\">1</span>\ncompare(<span class=\"number\">50</span>, <span class=\"string\">&apos;hello&apos;</span>);       <span class=\"regexp\">//</span> -<span class=\"number\">1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compare",
          "static": 1,
          "params": [
            {
              "name": "v",
              "description": "First value to compare",
              "type": "Object"
            },
            {
              "name": "w",
              "description": "Second value to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/is-equal.ts",
          "line": 4,
          "description": "<html><head></head><body><p>Compares two objects, returning true if they are equal.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>import { isEqual } from <span class=\"string\">&apos;@ember/utils&apos;</span>;\n\nisEqual(<span class=\"string\">&apos;hello&apos;</span>, <span class=\"string\">&apos;hello&apos;</span>);                   <span class=\"regexp\">//</span> true\nisEqual(<span class=\"number\">1</span>, <span class=\"number\">2</span>);                               <span class=\"regexp\">//</span> false</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>isEqual</code> is a more specific comparison than a triple equal comparison.\nIt will call the <code>isEqual</code> instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { isEqual } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/utils&apos;</span>;\n<span class=\"keyword\">import</span> <span class=\"title class_\">EmberObject</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = <span class=\"title class_\">EmberObject</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">isEqual</span>(<span class=\"params\">other</span>) { <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ssn</span> == other.<span class=\"property\">ssn</span>; }\n});\n\n<span class=\"keyword\">let</span> personA = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({<span class=\"attr\">name</span>: <span class=\"string\">&apos;Muhammad Ali&apos;</span>, <span class=\"attr\">ssn</span>: <span class=\"string\">&apos;123-45-6789&apos;</span>});\n<span class=\"keyword\">let</span> personB = <span class=\"title class_\">Person</span>.<span class=\"title function_\">create</span>({<span class=\"attr\">name</span>: <span class=\"string\">&apos;Cassius Clay&apos;</span>, <span class=\"attr\">ssn</span>: <span class=\"string\">&apos;123-45-6789&apos;</span>});\n\n<span class=\"title function_\">isEqual</span>(personA, personB); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Due to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { isEqual } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/utils&apos;</span>;\n\nisEqual([<span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>]);                     <span class=\"comment\">// false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEqual",
          "static": 1,
          "params": [
            {
              "name": "a",
              "description": "first object to compare",
              "type": "Object"
            },
            {
              "name": "b",
              "description": "second object to compare",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "@ember/utils",
          "module": "@ember/utils"
        },
        {
          "file": "packages/@ember/-internals/runtime/lib/type-of.ts",
          "line": 40,
          "description": "<html><head></head><body><p>Returns a consistent type for the passed object.</p>\n<p>Use this instead of the built-in <code>typeof</code> to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| &apos;string&apos;      | String primitive<span class=\"built_in\"> or </span>String object.                   |\n| &apos;number&apos;      | Number primitive<span class=\"built_in\"> or </span>Number object.                   |\n| &apos;boolean&apos;     | Boolean primitive<span class=\"built_in\"> or </span>Boolean object.                 |\n| &apos;null&apos;        | Null value                                           |\n| &apos;undefined&apos;   | Undefined value                                      |\n| &apos;function&apos;    | A function                                           |\n| &apos;array&apos;       | An<span class=\"built_in\"> instance </span>of Array                                 |\n| &apos;regexp&apos;      | An<span class=\"built_in\"> instance </span>of RegExp                                |\n| &apos;date&apos;        | An<span class=\"built_in\"> instance </span>of Date                                  |\n| &apos;filelist&apos;    | An<span class=\"built_in\"> instance </span>of FileList                              |\n| &apos;class&apos;       | An Ember class (created using EmberObject.extend())  |\n| &apos;instance&apos;    | An Ember object<span class=\"built_in\"> instance </span>                            |\n| &apos;error&apos;       | An<span class=\"built_in\"> instance </span>of the Error object                      |\n| &apos;object&apos;      | A JavaScript object<span class=\"built_in\"> not </span>inheriting from EmberObject  |</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Examples:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td>\n              <td class=\"code\"><pre>import { A } from <span class=\"string\">&apos;@ember/array&apos;</span>;\nimport { typeOf } from <span class=\"string\">&apos;@ember/utils&apos;</span>;\nimport EmberObject from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\ntypeOf();                       <span class=\"regexp\">//</span> <span class=\"string\">&apos;undefined&apos;</span>\ntypeOf(null);                   <span class=\"regexp\">//</span> <span class=\"string\">&apos;null&apos;</span>\ntypeOf(undefined);              <span class=\"regexp\">//</span> <span class=\"string\">&apos;undefined&apos;</span>\ntypeOf(<span class=\"string\">&apos;michael&apos;</span>);              <span class=\"regexp\">//</span> <span class=\"string\">&apos;string&apos;</span>\ntypeOf(new String(<span class=\"string\">&apos;michael&apos;</span>));  <span class=\"regexp\">//</span> <span class=\"string\">&apos;string&apos;</span>\ntypeOf(<span class=\"number\">101</span>);                    <span class=\"regexp\">//</span> <span class=\"string\">&apos;number&apos;</span>\ntypeOf(new Number(<span class=\"number\">101</span>));        <span class=\"regexp\">//</span> <span class=\"string\">&apos;number&apos;</span>\ntypeOf(true);                   <span class=\"regexp\">//</span> <span class=\"string\">&apos;boolean&apos;</span>\ntypeOf(new Boolean(true));      <span class=\"regexp\">//</span> <span class=\"string\">&apos;boolean&apos;</span>\ntypeOf(A);                      <span class=\"regexp\">//</span> <span class=\"string\">&apos;function&apos;</span>\ntypeOf(A());                    <span class=\"regexp\">//</span> <span class=\"string\">&apos;array&apos;</span>\ntypeOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">90</span>]);             <span class=\"regexp\">//</span> <span class=\"string\">&apos;array&apos;</span>\ntypeOf(<span class=\"regexp\">/abc/</span>);                  <span class=\"regexp\">//</span> <span class=\"string\">&apos;regexp&apos;</span>\ntypeOf(new Date());             <span class=\"regexp\">//</span> <span class=\"string\">&apos;date&apos;</span>\ntypeOf(event.target.files);     <span class=\"regexp\">//</span> <span class=\"string\">&apos;filelist&apos;</span>\ntypeOf(EmberObject.extend());   <span class=\"regexp\">//</span> <span class=\"string\">&apos;class&apos;</span>\ntypeOf(EmberObject.create());   <span class=\"regexp\">//</span> <span class=\"string\">&apos;instance&apos;</span>\ntypeOf(new Error(<span class=\"string\">&apos;teamocil&apos;</span>));  <span class=\"regexp\">//</span> <span class=\"string\">&apos;error&apos;</span>\n\n<span class=\"regexp\">//</span> <span class=\"string\">&apos;normal&apos;</span> JavaScript object\ntypeOf({ a: <span class=\"string\">&apos;b&apos;</span> });             <span class=\"regexp\">//</span> <span class=\"string\">&apos;object&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "typeOf",
          "params": [
            {
              "name": "item",
              "description": "the item to check"
            }
          ],
          "return": {
            "description": "the type",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember/utils",
          "module": "@ember/utils"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.5.1-@ember/utils",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.5.1",
          "type": "project-version"
        }
      }
    }
  }
}