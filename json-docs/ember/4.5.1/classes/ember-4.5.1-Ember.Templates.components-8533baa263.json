{
  "data": {
    "id": "ember-4.5.1-Ember.Templates.components",
    "type": "class",
    "attributes": {
      "name": "Ember.Templates.components",
      "shortname": "Ember.Templates.components",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/input.ts",
          "line": 66,
          "description": "<html><head></head><body><p>The <code>Input</code> component lets you create an HTML <code>&lt;input&gt;</code> element.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=<span class=\"string\">&quot;987&quot;</span> /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>creates an <code>&lt;input&gt;</code> element with <code>type=&quot;text&quot;</code> and value set to 987.</p>\n<h3 id=\"text-field\">Text field</h3>\n<p>If no <code>type</code> argument is specified, a default of type &apos;text&apos; is used.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\">Search:\n<span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.searchWord</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, the initial value in the <code>&lt;input&gt;</code> will be set to the value of\n<code>this.searchWord</code>. If the user changes the text, the value of <code>this.searchWord</code> will also be\nupdated.</p>\n<h3 id=\"actions\">Actions</h3>\n<p>The <code>Input</code> component takes a number of arguments with callbacks that are invoked in response to\nuser events.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-down</code></li>\n<li><code>key-press</code></li>\n<li><code>key-up</code></li>\n</ul>\n<p>These callbacks are passed to <code>Input</code> like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.searchWord</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">enter</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.query</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Starting with Ember Octane, we recommend using the <code>{{on}}</code> modifier to call actions\non specific events, such as the input event.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;input-name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">Input</span>\n  @<span class=\"attr\">id</span>=<span class=\"string\">&quot;input-name&quot;</span>\n  @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.name</span>}}</span><span class=\"language-xml\"><span class=\"tag\">\n  </span></span><span class=\"template-variable\">{{<span class=\"name\">on</span> <span class=\"string\">&quot;input&quot;</span> this.validateName}}</span><span class=\"language-xml\"><span class=\"tag\">\n/&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The event name (e.g. <code>focusout</code>, <code>input</code>, <code>keydown</code>) always follows the casing\nthat the HTML standard uses.</p>\n<h3 id=\"input-html-attributes-to-avoid\"><code>&lt;input&gt;</code> HTML Attributes to Avoid</h3>\n<p>In most cases, if you want to pass an attribute to the underlying HTML <code>&lt;input&gt;</code> element, you\ncan pass the attribute directly, just like any other Ember component.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&lt;Input @<span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"built_in\">size</span>=<span class=\"string\">&quot;10&quot;</span> /&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, the <code>size</code> attribute will be applied to the underlying <code>&lt;input&gt;</code> element in the\noutputted HTML.</p>\n<p>However, there are a few attributes where you <strong>must</strong> use the <code>@</code> version.</p>\n<ul>\n<li><code>@type</code>: This argument is used to control which Ember component is used under the hood</li>\n<li><code>@value</code>: The <code>@value</code> argument installs a two-way binding onto the element. If you wanted a\none-way binding, use <code>&lt;input&gt;</code> with the <code>value</code> property and the <code>input</code> event instead.</li>\n<li><code>@checked</code> (for checkboxes): like <code>@value</code>, the <code>@checked</code> argument installs a two-way binding\nonto the element. If you wanted a one-way binding, use <code>&lt;input type=&quot;checkbox&quot;&gt;</code> with\n<code>checked</code> and the <code>input</code> event instead.</li>\n</ul>\n<h3 id=\"extending-textfield\">Extending <code>TextField</code></h3>\n<p>Internally, <code>&lt;Input @type=&quot;text&quot; /&gt;</code> creates an instance of <code>TextField</code>, passing arguments from\nthe helper to <code>TextField</code>&apos;s <code>create</code> method. Subclassing <code>TextField</code> is supported but not\nrecommended.</p>\n<p>See <a href=\"/ember/release/classes/TextField\">TextField</a></p>\n<h3 id=\"checkbox\">Checkbox</h3>\n<p>To create an <code>&lt;input type=&quot;checkbox&quot;&gt;</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\">Emberize Everything:\n<span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> @<span class=\"attr\">checked</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.isEmberized</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isEmberized&quot;</span> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will bind the checked state of this checkbox to the value of <code>isEmberized</code> -- if either one\nchanges, it will be reflected in the other.</p>\n<h3 id=\"extending-checkbox\">Extending <code>Checkbox</code></h3>\n<p>Internally, <code>&lt;Input @type=&quot;checkbox&quot; /&gt;</code> creates an instance of <code>Checkbox</code>. Subclassing\n<code>TextField</code> is supported but not recommended.</p>\n<p>See <a href=\"/ember/release/classes/Checkbox\">Checkbox</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "Input",
          "see": [
            "{TextField}",
            "{Checkbox}"
          ],
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.components",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
          "line": 41,
          "description": "<html><head></head><body><p>The <code>LinkTo</code> component renders a link to the supplied <code>routeName</code> passing an optionally\nsupplied model to the route as its <code>model</code> context of the route. The block for <code>LinkTo</code>\nbecomes the contents of the rendered element:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery&apos;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will result in:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"disabling-the-linkto-component\">Disabling the <code>LinkTo</code> component</h3>\n<p>The <code>LinkTo</code> component can be disabled by using the <code>disabled</code> argument. A disabled link\ndoesn&apos;t result in a transition when activated, and adds the <code>disabled</code> class to the <code>&lt;a&gt;</code>\nelement.</p>\n<p>(The class name to apply to the element can be overridden by using the <code>disabledClass</code>\nargument)</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery&apos;</span> @<span class=\"attr\">disabled</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">true</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"handling-href\">Handling <code>href</code></h3>\n<p><code>&lt;LinkTo&gt;</code> will use your application&apos;s Router to fill the element&apos;s <code>href</code> property with a URL\nthat matches the path to the supplied <code>routeName</code>.</p>\n<h3 id=\"handling-current-route\">Handling current route</h3>\n<p>The <code>LinkTo</code> component will apply a CSS class name of &apos;active&apos; when the application&apos;s current\nroute matches the supplied routeName. For example, if the application&apos;s current route is\n&apos;photoGallery.recent&apos;, then the following invocation of <code>LinkTo</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery.recent&apos;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will result in</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;a href=<span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> <span class=\"keyword\">class</span>=&quot;<span class=\"symbol\">active</span>&quot;&gt;\n  <span class=\"symbol\">Great</span> <span class=\"symbol\">Hamster</span> <span class=\"symbol\">Photos</span>\n&lt;/<span class=\"symbol\">a</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The CSS class used for active classes can be customized by passing an <code>activeClass</code> argument:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery.recent&apos;</span> @<span class=\"attr\">activeClass</span>=<span class=\"string\">&quot;current-url&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;a href<span class=\"operator\">=</span><span class=\"string\">&quot;/hamster-photos/this-week&quot;</span> class<span class=\"operator\">=</span><span class=\"string\">&quot;current-url&quot;</span>&gt;\n  Great Hamster Photos\n&lt;/a&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"keeping-a-link-active-for-other-routes\">Keeping a link active for other routes</h3>\n<p>If you need a link to be &apos;active&apos; even when it doesn&apos;t match the current route, you can use the\n<code>current-when</code> argument.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;LinkTo @route=<span class=\"string\">&apos;photoGallery&apos;</span> @current-<span class=\"keyword\">when</span>=<span class=\"string\">&apos;photos&apos;</span>&gt;\n  Photo Gallery\n&lt;/LinkTo&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This may be helpful for keeping links active for:</p>\n<ul>\n<li>non-nested routes that are logically related</li>\n<li>some secondary menu approaches</li>\n<li>&apos;top navigation&apos; with &apos;sub navigation&apos; scenarios</li>\n</ul>\n<p>A link will be active if <code>current-when</code> is <code>true</code> or the current\nroute is the route this link would transition to.</p>\n<p>To match multiple routes &apos;space-separate&apos; the routes:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;LinkTo @route=<span class=\"string\">&apos;gallery&apos;</span> @current-<span class=\"keyword\">when</span>=<span class=\"string\">&apos;photos drawings paintings&apos;</span>&gt;\n  Art Gallery\n&lt;/LinkTo&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-a-model\">Supplying a model</h3>\n<p>An optional <code>model</code> argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, {path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span>});\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery&apos;</span> @<span class=\"attr\">model</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.aPhoto</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">aPhoto.title</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-multiple-models\">Supplying multiple models</h3>\n<p>For deep-linking to route paths that contain multiple\ndynamic segments, the <code>models</code> argument can be used.</p>\n<p>As the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, { path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span> }, <span class=\"keyword\">function</span><span class=\"params\">()</span> {\n    <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;comment&quot;</span>, {path: <span class=\"string\">&quot;comments/:comment_id&quot;</span>});\n  });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This argument will become the model context of the linked route:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery.comment&apos;</span> @<span class=\"attr\">models</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">array</span> this.aPhoto this.comment}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">comment.body</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42/comments/718&quot;</span>&gt;</span>\n  A+++ would snuggle again.\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3>\n<p>If you don&apos;t have a model object available to pass to <code>LinkTo</code>,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Router.map(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"keyword\">this</span>.route(<span class=\"string\">&quot;photoGallery&quot;</span>, { path: <span class=\"string\">&quot;hamster-photos/:photo_id&quot;</span> });\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery&apos;</span> @<span class=\"attr\">model</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">aPhotoId</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">this.aPhoto.title</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos/42&quot;</span>&gt;</span>\n  Tomster\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When transitioning into the linked route, the <code>model</code> hook will\nbe triggered with parameters including this passed identifier.</p>\n<h3 id=\"supplying-query-parameters\">Supplying query parameters</h3>\n<p>If you need to add optional key-value pairs that appear to the right of the ? in a URL,\nyou can use the <code>query</code> argument.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LinkTo</span> @<span class=\"attr\">route</span>=<span class=\"string\">&apos;photoGallery&apos;</span> @<span class=\"attr\">query</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">hash</span></span> <span class=\"attr\">page</span>=<span class=\"number\">1</span> <span class=\"attr\">per_page</span>=<span class=\"number\">20</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">LinkTo</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will result in:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/hamster-photos?page=1&amp;per_page=20&quot;</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "LinkTo",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.components",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>Textarea</code> component inserts a new instance of <code>&lt;textarea&gt;</code> tag into the template.</p>\n<p>The <code>@value</code> argument provides the content of the <code>&lt;textarea&gt;</code>.</p>\n<p>This template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">Textarea</span> @<span class=\"attr\">value</span>=<span class=\"string\">&quot;A bunch of text&quot;</span> /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in the following HTML:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;textarea <span class=\"built_in\">class</span>=<span class=\"string\">&quot;ember-text-area&quot;</span>&gt;\n  A bunch <span class=\"keyword\">of</span> <span class=\"built_in\">text</span>\n&lt;/textarea&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>@value</code> argument is two-way bound. If the user types text into the textarea, the <code>@value</code>\nargument is updated. If the <code>@value</code> argument is updated, the text in the textarea is updated.</p>\n<p>In the following example, the <code>writtenWords</code> property on the component will be updated as the user\ntypes &apos;Lots of text&apos; into the text area of their browser&apos;s window.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">editor.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@glimmer</span>/tracking&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordEditorComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@tracked</span> writtenWords = <span class=\"string\">&quot;Lots of text that IS bound&quot;</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Textarea</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">writtenWords</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would result in the following HTML:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;textarea <span class=\"built_in\">class</span>=<span class=\"string\">&quot;ember-text-area&quot;</span>&gt;\n  Lots <span class=\"keyword\">of</span> <span class=\"built_in\">text</span> <span class=\"keyword\">that</span> IS bound\n&lt;/textarea&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you wanted a one way binding, you could use the <code>&lt;textarea&gt;</code> element directly, and use the\n<code>value</code> DOM property and the <code>input</code> event.</p>\n<h3 id=\"actions\">Actions</h3>\n<p>The <code>Textarea</code> component takes a number of arguments with callbacks that are invoked in\nresponse to user events.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n</ul>\n<p>These callbacks are passed to <code>Textarea</code> like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Textarea</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.searchWord</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">enter</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.query</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"classic-invocation-syntax\">Classic Invocation Syntax</h2>\n<p>The <code>Textarea</code> component can also be invoked using curly braces, just like any other Ember\ncomponent.</p>\n<p>For example, this is an invocation using angle-bracket notation:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Textarea</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.searchWord</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">enter</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.query</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You could accomplish the same thing using classic invocation:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">textarea</span></span> <span class=\"attr\">value</span>=this.searchWord <span class=\"attr\">enter</span>=this.query}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The main difference is that angle-bracket invocation supports any HTML attribute using HTML\nattribute syntax, because attributes and arguments have different syntax when using angle-bracket\ninvocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,\nand components must manually map attributes onto component arguments.</p>\n<p>When using classic invocation with <code>{{textarea}}</code>, only the following attributes are mapped onto\narguments:</p>\n<ul>\n<li>rows</li>\n<li>cols</li>\n<li>name</li>\n<li>selectionEnd</li>\n<li>selectionStart</li>\n<li>autocomplete</li>\n<li>wrap</li>\n<li>lang</li>\n<li>dir</li>\n<li>value</li>\n</ul>\n<h2 id=\"classic-layout-and-layoutname-properties\">Classic <code>layout</code> and <code>layoutName</code> properties</h2>\n<p>Because HTML <code>textarea</code> elements do not contain inner HTML the <code>layout</code> and\n<code>layoutName</code> properties will not be applied.</p>\n</body></html>",
          "itemtype": "method",
          "name": "Textarea",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.components",
          "module": "@ember/component"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.5.1-@ember/routing",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.5.1",
          "type": "project-version"
        }
      }
    }
  }
}