{
  "data": {
    "id": "ember-5.3.0-ArrayProxy",
    "type": "class",
    "attributes": {
      "name": "ArrayProxy",
      "shortname": "ArrayProxy",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/array/proxy",
      "namespace": "",
      "file": "packages/@ember/array/proxy.ts",
      "line": 59,
      "description": "<html><head></head><body><p>An ArrayProxy wraps any other object that implements <code>Array</code> and/or\n<code>MutableArray,</code> forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.</p>\n<p>A simple example of usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { A } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/array&apos;</span>;\n<span class=\"keyword\">import</span> ArrayProxy <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/array/proxy&apos;</span>;\n\nlet pets = [<span class=\"string\">&apos;dog&apos;</span>, <span class=\"string\">&apos;cat&apos;</span>, <span class=\"string\">&apos;fish&apos;</span>];\nlet ap = ArrayProxy.<span class=\"keyword\">create</span>({ content: A(pets) });\n\nap.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);                        // <span class=\"string\">&apos;dog&apos;</span>\nap.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;content&apos;</span>, [<span class=\"string\">&apos;amoeba&apos;</span>, <span class=\"string\">&apos;paramecium&apos;</span>]);\nap.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);                        // <span class=\"string\">&apos;amoeba&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n<code>objectAtContent</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { A } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/array&apos;</span>;\n<span class=\"keyword\">import</span> ArrayProxy <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/array/proxy&apos;</span>;\n\n<span class=\"keyword\">let</span> pets = [<span class=\"string\">&apos;dog&apos;</span>, <span class=\"string\">&apos;cat&apos;</span>, <span class=\"string\">&apos;fish&apos;</span>];\n<span class=\"keyword\">let</span> ap = ArrayProxy.create({\n    <span class=\"attr\">content</span>: A(pets),\n    <span class=\"attr\">objectAtContent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) </span>{\n        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;content&apos;</span>).objectAt(idx).toUpperCase();\n    }\n});\n\nap.get(<span class=\"string\">&apos;firstObject&apos;</span>); <span class=\"comment\">// . &apos;DOG&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When overriding this class, it is important to place the call to\n<code>_super</code> <em>after</em> setting <code>content</code> so the internal observers have\na chance to fire properly:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { A } from <span class=\"string\">&apos;@ember/array&apos;</span>;\n<span class=\"keyword\">import</span> ArrayProxy from <span class=\"string\">&apos;@ember/array/proxy&apos;</span>;\n\nexport <span class=\"keyword\">default</span> ArrayProxy.extend({\n  <span class=\"keyword\">init</span>() {\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;content&apos;</span>, A([<span class=\"string\">&apos;dog&apos;</span>, <span class=\"string\">&apos;cat&apos;</span>, <span class=\"string\">&apos;fish&apos;</span>]));\n    <span class=\"keyword\">this</span>._super(...arguments);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "extends": "EmberObject",
      "uses": [
        "MutableArray"
      ],
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/array/proxy.ts",
          "line": 138,
          "description": "<html><head></head><body><p>Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "objectAtContent",
          "params": [
            {
              "name": "idx",
              "description": "The index to retrieve.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "the value or undefined if none found",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array/proxy"
        },
        {
          "file": "packages/@ember/array/proxy.ts",
          "line": 151,
          "description": "<html><head></head><body><p>Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "replaceContent",
          "params": [
            {
              "name": "idx",
              "description": "The starting index",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "The number of items to remove from the content.",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "Optional array of objects to insert.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array/proxy"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1484,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array.</p>\n<p>Note that this method is expected to validate the type(s) of objects that it expects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "replace",
          "params": [
            {
              "name": "idx",
              "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "An optional array of zero or more objects that should be\n  inserted into the array at *idx*",
              "type": "EmberArray",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1503,
          "description": "<html><head></head><body><p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.<span class=\"built_in\">length</span>;  <span class=\"comment\">// 3</span>\ncolors.<span class=\"keyword\">clear</span>(); <span class=\"comment\">// []</span>\ncolors.<span class=\"built_in\">length</span>;  <span class=\"comment\">// 0</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "clear",
          "return": {
            "description": "An empty Array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1520,
          "description": "<html><head></head><body><p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.insertAt(<span class=\"number\">2</span>, <span class=\"string\">&apos;yellow&apos;</span>);  // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\ncolors.insertAt(<span class=\"number\">5</span>, <span class=\"string\">&apos;orange&apos;</span>);  // Error: <span class=\"keyword\">Index</span> <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> range</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "insertAt",
          "params": [
            {
              "name": "idx",
              "description": "index of insert the object at.",
              "type": "Number"
            },
            {
              "name": "object",
              "description": "object to insert",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1538,
          "description": "<html><head></head><body><p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an assertion.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>, <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>];\n\ncolors.removeAt(<span class=\"number\">0</span>);     // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>, <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>]\ncolors.removeAt(<span class=\"number\">2</span>, <span class=\"number\">2</span>);  // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\ncolors.removeAt(<span class=\"number\">4</span>, <span class=\"number\">2</span>);  // Error: <span class=\"keyword\">Index</span> <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> range</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeAt",
          "params": [
            {
              "name": "start",
              "description": "index, start of range",
              "type": "Number"
            },
            {
              "name": "len",
              "description": "length of passing range",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1560,
          "description": "<html><head></head><body><p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>];\n\ncolors.pushObject(<span class=\"string\">&apos;black&apos;</span>);     // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;black&apos;</span>]\ncolors.pushObject([<span class=\"string\">&apos;yellow&apos;</span>]);  // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, [<span class=\"string\">&apos;yellow&apos;</span>]]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObject",
          "params": [
            {
              "name": "obj",
              "description": "object to push",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1577,
          "description": "<html><head></head><body><p>Add the objects in the passed array to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>];\n\ncolors.pushObjects([<span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>]);  // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Array"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "MutableArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1593,
          "description": "<html><head></head><body><p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.popObject();   <span class=\"regexp\">//</span> <span class=\"string\">&apos;blue&apos;</span>\nconsole.log(colors);  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "popObject",
          "return": {
            "description": "object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1609,
          "description": "<html><head></head><body><p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.shiftObject();  <span class=\"regexp\">//</span> <span class=\"string\">&apos;red&apos;</span>\nconsole.log(colors);   <span class=\"regexp\">//</span> [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "shiftObject",
          "return": {
            "description": "object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1625,
          "description": "<html><head></head><body><p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>];\n\ncolors.unshiftObject(<span class=\"string\">&apos;yellow&apos;</span>);    // [<span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;red&apos;</span>]\ncolors.unshiftObject([<span class=\"string\">&apos;black&apos;</span>]);   // [[<span class=\"string\">&apos;black&apos;</span>], <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;red&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObject",
          "params": [
            {
              "name": "obj",
              "description": "object to unshift",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1642,
          "description": "<html><head></head><body><p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"symbol\">&apos;red</span>&apos;];\n\ncolors.unshiftObjects([<span class=\"symbol\">&apos;black</span>&apos;, <span class=\"symbol\">&apos;white</span>&apos;]);   // [<span class=\"symbol\">&apos;black</span>&apos;, <span class=\"symbol\">&apos;white</span>&apos;, <span class=\"symbol\">&apos;red</span>&apos;]\ncolors.unshiftObjects(<span class=\"symbol\">&apos;yellow</span>&apos;); // <span class=\"keyword\">Type</span> <span class=\"type\">Error: </span><span class=\"symbol\">&apos;undefined</span>&apos; <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a <span class=\"keyword\">function</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1659,
          "description": "<html><head></head><body><p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reverseObjects",
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1668,
          "description": "<html><head></head><body><p>Replace all the receiver&apos;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.setObjects([<span class=\"string\">&apos;black&apos;</span>, <span class=\"string\">&apos;white&apos;</span>]);  // [<span class=\"string\">&apos;black&apos;</span>, <span class=\"string\">&apos;white&apos;</span>]\ncolors.setObjects([]);                  // []</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setObjects",
          "params": [
            {
              "name": "objects",
              "description": "array whose content will be used for replacing\n    the content of the receiver",
              "type": "EmberArray"
            }
          ],
          "return": {
            "description": "receiver with the new content",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1686,
          "description": "<html><head></head><body><p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let cities = [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>, <span class=\"string\">&apos;Chicago&apos;</span>];\n\ncities.removeObject(<span class=\"string\">&apos;Chicago&apos;</span>);  // [<span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]\ncities.removeObject(<span class=\"string\">&apos;Lima&apos;</span>);     // [<span class=\"string\">&apos;Berlin&apos;</span>]\ncities.removeObject(<span class=\"string\">&apos;Tokyo&apos;</span>)     // [<span class=\"string\">&apos;Berlin&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "obj",
              "description": "object to remove",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1703,
          "description": "<html><head></head><body><p>Removes each object in the passed array from the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "EmberArray"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1712,
          "description": "<html><head></head><body><p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let cities = [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>];\n\ncities.addObject(<span class=\"string\">&apos;Lima&apos;</span>);    // [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]\ncities.addObject(<span class=\"string\">&apos;Berlin&apos;</span>);  // [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "obj",
              "description": "object to add, if not already present",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1729,
          "description": "<html><head></head><body><p>Adds each object in the passed array to the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "EmberArray"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "MutableArray"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 322,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Person = EmberObject.extend({\n  init() {\n    alert(<span class=\"string\">`Name is <span class=\"subst\">${<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>)}</span>`</span>);\n  }\n});\n\n<span class=\"keyword\">let</span> steve = Person.create({\n  name: <span class=\"string\">&apos;Steve&apos;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Component</code>\nfrom <code>@ember/component</code>, be sure to call <code>this._super(...arguments)</code>\nin your <code>init</code> declaration!\nIf you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 541,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 568,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 576,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject from &apos;@ember/object&apos;;\n\nconst Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">EmberObject</span>.</span></span>extend<span class=\"literal\">()</span>;\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>const Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>;\n<span class=\"keyword\">let</span> student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>;\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;(subclass of Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>const Teacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend({\n  <span class=\"keyword\">to</span><span class=\"constructor\">StringExtension()</span> {\n    return this.get(&apos;fullName&apos;);\n  }\n});\nteacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Teacher</span>.</span></span>create<span class=\"literal\">()</span>;\nteacher.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 93,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { computed } from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nfullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 137,
          "description": "<html><head></head><body><p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 164,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">record</span>.<span class=\"keyword\">set</span>(&quot;key&quot;, <span class=\"keyword\">value</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method is generally very similar to calling <code>object[&quot;key&quot;] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 212,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 229,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 247,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>There are two common invocation patterns for <code>.addObserver()</code>:</p>\n<ul>\n<li>Passing two arguments:<ul>\n<li>the name of the property to observe (as a string)</li>\n<li>the function to invoke (an actual function)</li>\n</ul>\n</li>\n<li>Passing three arguments:<ul>\n<li>the name of the property to observe (as a string)</li>\n<li>the target object (will be used to look up and invoke a\nfunction on)</li>\n<li>the name of the function to invoke on the target object\n(as a string).</li>\n</ul>\n</li>\n</ul>\n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Component from <span class=\"string\">&apos;@ember/component&apos;</span>;\n\nexport <span class=\"keyword\">default</span> Component.extend({\n  <span class=\"keyword\">init</span>() {\n    <span class=\"keyword\">this</span>._super(...arguments);\n\n    <span class=\"comment\">// the following are equivalent:</span>\n\n    <span class=\"comment\">// using three arguments</span>\n    <span class=\"keyword\">this</span>.addObserver(<span class=\"string\">&apos;foo&apos;</span>, <span class=\"keyword\">this</span>, <span class=\"string\">&apos;fooDidChange&apos;</span>);\n\n    <span class=\"comment\">// using two arguments</span>\n    <span class=\"keyword\">this</span>.addObserver(<span class=\"string\">&apos;foo&apos;</span>, (...args) =&gt; {\n      <span class=\"keyword\">this</span>.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    <span class=\"comment\">// your custom logic code</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods have the following signature:</p>\n<div class=\"highlight component.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import Component from &apos;@ember/component&apos;;\n\nexport default <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Component</span>.</span></span>extend({\n  init<span class=\"literal\">()</span> {\n    this.<span class=\"constructor\">_super(<span class=\"operator\">...</span><span class=\"params\">arguments</span>)</span>;\n    this.add<span class=\"constructor\">Observer(&apos;<span class=\"params\">foo</span>&apos;, <span class=\"params\">this</span>, &apos;<span class=\"params\">fooDidChange</span>&apos;)</span>;\n  },\n\n  foo<span class=\"constructor\">DidChange(<span class=\"params\">sender</span>, <span class=\"params\">key</span>, <span class=\"params\">value</span>, <span class=\"params\">rev</span>)</span> {\n    <span class=\"comment\">// your code</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>sender</code> is the object that changed. The <code>key</code> is the property that\nchanges. The <code>value</code> property is currently reserved and unused. The <code>rev</code>\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>Usually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is sync or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 333,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            },
            {
              "name": "sync",
              "description": "Whether the observer is async or not",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 354,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 371,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 388,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 403,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 433,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 453,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/object/observable.ts",
          "line": 497,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/observable",
          "inherited": true,
          "inheritedFrom": "Observable"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 263,
          "description": "<html><head></head><body><p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>EmberArray</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectAt<span class=\"comment\">(0)</span>;   <span class=\"comment\">// &apos;a&apos;</span>\narr.objectAt<span class=\"comment\">(3)</span>;   <span class=\"comment\">// &apos;d&apos;</span>\narr.objectAt<span class=\"comment\">(-1)</span>;  <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(4)</span>;   <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(5)</span>;   <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectAt",
          "params": [
            {
              "name": "idx",
              "description": "The index of the item to return.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "item at index or undefined",
            "type": "*"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 288,
          "description": "<html><head></head><body><p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectsAt([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);  // [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]\narr.objectsAt([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);  // [<span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, undefined]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectsAt",
          "params": [
            {
              "name": "indexes",
              "description": "An array of indexes of items to return.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 354,
          "description": "<html><head></head><body><p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\narr.slice(<span class=\"number\">0</span>);       // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\narr.slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);    // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]\narr.slice(<span class=\"number\">1</span>, <span class=\"number\">100</span>);  // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "slice",
          "params": [
            {
              "name": "beginIndex",
              "description": "(Optional) index to begin slicing from.",
              "type": "Number"
            },
            {
              "name": "endIndex",
              "description": "(Optional) index to end the slice at (but not included).",
              "type": "Number"
            }
          ],
          "return": {
            "description": "New array with specified slice",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 374,
          "description": "<html><head></head><body><p>Used to determine the passed object&apos;s first occurrence in the array.\nReturns the index if found, -1 if no match is found.</p>\n<p>The optional <code>startAt</code> argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it&apos;s negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to <code>-1 * array.length</code> the entire array is searched.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = <span class=\"literal\">[&apos;<span class=\"identifier\">a</span>&apos;, &apos;<span class=\"identifier\">b</span>&apos;, &apos;<span class=\"identifier\">c</span>&apos;, &apos;<span class=\"identifier\">d</span>&apos;, &apos;<span class=\"identifier\">a</span>&apos;]</span>;\n\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;)</span>;       <span class=\"comment\">//  0</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">z</span>&apos;)</span>;       <span class=\"comment\">// -1</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, 2)</span>;    <span class=\"comment\">//  4</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, -1)</span>;   <span class=\"comment\">//  4, equivalent to indexOf(&apos;a&apos;, 4)</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, -100)</span>; <span class=\"comment\">//  0, searches entire array</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">b</span>&apos;, 3)</span>;    <span class=\"comment\">// -1</span>\narr.index<span class=\"constructor\">Of(&apos;<span class=\"params\">a</span>&apos;, 100)</span>;  <span class=\"comment\">// -1</span>\n\n<span class=\"keyword\">let</span> people = <span class=\"literal\">[{ <span class=\"identifier\">name</span>: &apos;Z<span class=\"identifier\">oey</span>&apos; }, { <span class=\"identifier\">name</span>: &apos;B<span class=\"identifier\">ob</span>&apos; }]</span>\n<span class=\"keyword\">let</span> newPerson = { name: &apos;Tom&apos; };\npeople = <span class=\"literal\">[<span class=\"identifier\">newPerson</span>, <span class=\"operator\">...</span><span class=\"identifier\">people</span>, <span class=\"identifier\">newPerson</span>]</span>;\n\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>)</span>;     <span class=\"comment\">//  0</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, 1)</span>;  <span class=\"comment\">//  3</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, -4)</span>; <span class=\"comment\">//  0</span>\npeople.index<span class=\"constructor\">Of(<span class=\"params\">newPerson</span>, 10)</span>; <span class=\"comment\">// -1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 412,
          "description": "<html><head></head><body><p>Returns the index of the given <code>object</code>&apos;s last occurrence.</p>\n<ul>\n<li>If no <code>startAt</code> argument is given, the search starts from\nthe last position.</li>\n<li>If it&apos;s greater than or equal to the length of the array,\nthe search starts from the last position.</li>\n<li>If it&apos;s negative, it is taken as the offset from the end\nof the array i.e. <code>startAt + array.length</code>.</li>\n<li>If it&apos;s any other positive number, will search backwards\nfrom that index of the array.</li>\n</ul>\n<p>Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = <span class=\"literal\">[&apos;<span class=\"identifier\">a</span>&apos;, &apos;<span class=\"identifier\">b</span>&apos;, &apos;<span class=\"identifier\">c</span>&apos;, &apos;<span class=\"identifier\">d</span>&apos;, &apos;<span class=\"identifier\">a</span>&apos;]</span>;\n\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;)</span>;       <span class=\"comment\">//  4</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">z</span>&apos;)</span>;       <span class=\"comment\">// -1</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, 2)</span>;    <span class=\"comment\">//  0</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, -1)</span>;   <span class=\"comment\">//  4</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, -3)</span>;   <span class=\"comment\">//  0</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">b</span>&apos;, 3)</span>;    <span class=\"comment\">//  1</span>\narr.last<span class=\"constructor\">IndexOf(&apos;<span class=\"params\">a</span>&apos;, 100)</span>;  <span class=\"comment\">//  4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lastIndexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search from\nbackwards, defaults to `(array.length - 1)`",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The last index of the `object` in the array or -1\nif not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 447,
          "description": "<html><head></head><body><p>Iterates through the array, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> foods = [\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;apple&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> },\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;banana&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> },\n  { <span class=\"attr\">name</span>: <span class=\"string\">&apos;carrot&apos;</span>, <span class=\"attr\">eaten</span>: <span class=\"literal\">false</span> }\n];\n\nfoods.forEach(<span class=\"function\">(<span class=\"params\">food</span>) =&gt;</span> food.eaten = <span class=\"literal\">true</span>);\n\n<span class=\"keyword\">let</span> output = <span class=\"string\">&apos;&apos;</span>;\nfoods.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span>\n  output += <span class=\"string\">`<span class=\"subst\">${index + <span class=\"number\">1</span>}</span>/<span class=\"subst\">${array.length}</span> <span class=\"subst\">${item.name}</span>\\n`</span>;\n);\n<span class=\"built_in\">console</span>.log(output);\n<span class=\"comment\">// 1/3 apple</span>\n<span class=\"comment\">// 2/3 banana</span>\n<span class=\"comment\">// 3/3 carrot</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 498,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code>.</p>\n<p>Returns the value of the named\nproperty on all items in the enumeration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let people = [{name: <span class=\"string\">&apos;Joe&apos;</span>}, {name: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.getEach(<span class=\"string\">&apos;name&apos;</span>);\n// [<span class=\"string\">&apos;Joe&apos;</span>, <span class=\"string\">&apos;Matt&apos;</span>];\n\npeople.getEach(<span class=\"string\">&apos;nonexistentProperty&apos;</span>);\n// [undefined, undefined];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 520,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> people = [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;Joe&apos;</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.setEach(<span class=\"string\">&apos;zipCode&apos;</span>, <span class=\"string\">&apos;10011&apos;</span>);\n// [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;Joe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;Matt&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span>}];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 540,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span>(<span class=\"type\">item</span>, index, <span class=\"keyword\">array</span>);\n<span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\narr.<span class=\"keyword\">map</span>(<span class=\"keyword\">element</span> =&gt; <span class=\"keyword\">element</span> * <span class=\"keyword\">element</span>);\n// [1, 4, 9, 16, 25, 36];\n\narr.map((<span class=\"keyword\">element</span>, index) =&gt; <span class=\"keyword\">element</span> + index);\n// [1, 3, 5, 7, 9, 11];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 578,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let people = [{name: <span class=\"string\">&apos;Joe&apos;</span>}, {name: <span class=\"string\">&apos;Matt&apos;</span>}];\n\npeople.mapBy(<span class=\"string\">&apos;name&apos;</span>);\n// [<span class=\"string\">&apos;Joe&apos;</span>, <span class=\"string\">&apos;Matt&apos;</span>];\n\npeople.mapBy(<span class=\"string\">&apos;unknownProperty&apos;</span>);\n// [undefined, undefined];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 599,
          "description": "<html><head></head><body><p>Returns a new array with all of the items in the enumeration that the provided\ncallback function returns true for. This method corresponds to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter()</a>.</p>\n<p>The callback method should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>All parameters are optional. The function should return <code>true</code> to include the item\nin the results, and <code>false</code> otherwise.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> isAdult(person) {\n  <span class=\"keyword\">return</span> person.age &gt; <span class=\"number\">18</span>;\n};\n\nlet people = Ember.A([{ <span class=\"type\">name</span>: <span class=\"string\">&apos;John&apos;</span>, age: <span class=\"number\">14</span> }, { <span class=\"type\">name</span>: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }]);\n\npeople.<span class=\"keyword\">filter</span>(isAdult); // <span class=\"keyword\">returns</span> [{ <span class=\"type\">name</span>: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }];</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that in addition to a callback, you can pass an optional target object\nthat will be set as <code>this</code> on the context. This is a good way to give your\niterator function access to the current object. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>function isAdultAndEngineer(person) {\n  <span class=\"keyword\">return</span> person.age &gt; <span class=\"number\">18</span> &amp;&amp; <span class=\"keyword\">this</span>.engineering;\n}\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdultsCollection</span> {</span>\n  engineering = <span class=\"literal\">false</span>;\n\n  constructor(opts = {}) {\n    <span class=\"keyword\">super</span>(...arguments);\n\n    <span class=\"keyword\">this</span>.engineering = opts.engineering;\n    <span class=\"keyword\">this</span>.people = Ember.A([{ <span class=\"string\">name:</span> <span class=\"string\">&apos;John&apos;</span>, <span class=\"string\">age:</span> <span class=\"number\">14</span> }, { <span class=\"string\">name:</span> <span class=\"string\">&apos;Joan&apos;</span>, <span class=\"string\">age:</span> <span class=\"number\">45</span> }]);\n  }\n}\n\nlet collection = <span class=\"keyword\">new</span> AdultsCollection({ <span class=\"string\">engineering:</span> <span class=\"literal\">true</span> });\ncollection.people.filter(isAdultAndEngineer, { <span class=\"string\">target:</span> collection });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 662,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>array</em> is the array itself.</li>\n</ul>\n<p>It should return a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">const</span> <span class=\"string\">food</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;apple&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;bread&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">food:</span> <span class=\"string\">&apos;banana&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">}</span>\n<span class=\"string\">];</span>\n<span class=\"string\">const</span> <span class=\"string\">nonFruits</span> <span class=\"string\">=</span> <span class=\"string\">food.reject(function(thing)</span> <span class=\"string\">{</span>\n  <span class=\"string\">return</span> <span class=\"string\">thing.isFruit;</span>\n<span class=\"string\">});</span> <span class=\"string\">//</span> <span class=\"string\">[{food:</span> <span class=\"string\">&apos;bread&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span><span class=\"string\">}]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 706,
          "description": "<html><head></head><body><p>Filters the array by the property and an optional value. If a value is given, it returns\nthe items that have said value for the property. If not, it returns all the items that\nhave a truthy value for the property.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> things = Ember.<span class=\"constructor\">A([{ <span class=\"params\">food</span>: &apos;<span class=\"params\">apple</span>&apos;, <span class=\"params\">isFruit</span>: <span class=\"params\">true</span> }, { <span class=\"params\">food</span>: &apos;<span class=\"params\">beans</span>&apos;, <span class=\"params\">isFruit</span>: <span class=\"params\">false</span> }])</span>;\n\nthings.filter<span class=\"constructor\">By(&apos;<span class=\"params\">food</span>&apos;, &apos;<span class=\"params\">beans</span>&apos;)</span>; <span class=\"comment\">// [{ food: &apos;beans&apos;, isFruit: false }]</span>\nthings.filter<span class=\"constructor\">By(&apos;<span class=\"params\">isFruit</span>&apos;)</span>; <span class=\"comment\">// [{ food: &apos;apple&apos;, isFruit: true }]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 727,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for the provided key.\nYou can pass an optional second argument with a target value to reject for the key.\nOtherwise this will reject objects where the provided property evaluates to false.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"string\">let</span> <span class=\"string\">food</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;apple&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;carrot&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n    <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">];</span>\n  <span class=\"string\">food.rejectBy(&apos;isFruit&apos;);</span> <span class=\"string\">//</span> <span class=\"string\">[{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;carrot&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span> <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">}]</span>\n  <span class=\"string\">food.rejectBy(&apos;name&apos;,</span> <span class=\"string\">&apos;carrot&apos;</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">[{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;apple&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">true</span> <span class=\"string\">}},</span> <span class=\"string\">{</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;bread&quot;</span><span class=\"string\">,</span> <span class=\"attr\">isFruit:</span> <span class=\"literal\">false</span> <span class=\"string\">}]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 751,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method is similar to the <code>find()</code> method defined in ECMAScript 2015.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> users = [\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">1</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Yehuda&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Tom&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Melanie&apos;</span> },\n  {<span class=\"built_in\"> id</span>: <span class=\"number\">4</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Leah&apos;</span> }\n];\n\nusers.find((user) =&gt; user<span class=\"built_in\">.name</span> == <span class=\"string\">&apos;Tom&apos;</span>); // [{<span class=\"built_in\"> id</span>: <span class=\"number\">2</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Tom&apos;</span> }]\nusers.find(({<span class=\"built_in\"> id</span> }) =&gt;<span class=\"built_in\"> id</span> == <span class=\"number\">3</span>); // [{<span class=\"built_in\"> id</span>: <span class=\"number\">3</span>,<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;Melanie&apos;</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 801,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">let</span> <span class=\"string\">users</span> <span class=\"string\">=</span> <span class=\"string\">[</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">1</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Yehuda&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">2</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Tom&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">true</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">3</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">},</span>\n  <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Leah&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">];</span>\n\n<span class=\"string\">users.findBy(&apos;id&apos;,</span> <span class=\"number\">4</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Leah&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">users.findBy(&apos;name&apos;,</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">3</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Melanie&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">false</span> <span class=\"string\">}</span>\n<span class=\"string\">users.findBy(&apos;isTom&apos;);</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">id:</span> <span class=\"number\">2</span><span class=\"string\">,</span> <span class=\"attr\">name:</span> <span class=\"string\">&apos;Tom&apos;</span><span class=\"string\">,</span> <span class=\"attr\">isTom:</span> <span class=\"literal\">true</span> <span class=\"string\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 831,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>Array.prototype.every()</code> method defined in ES5.</p>\n<p>The callback method should have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>All params are optional. The method should return <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAdult</span><span class=\"params\">(person)</span> </span>{\n  <span class=\"keyword\">return</span> person.age &gt; <span class=\"number\">18</span>;\n};\n\n<span class=\"keyword\">const</span> people = Ember.A([{ name: <span class=\"string\">&apos;John&apos;</span>, age: <span class=\"number\">24</span> }, { name: <span class=\"string\">&apos;Joan&apos;</span>, age: <span class=\"number\">45</span> }]);\n<span class=\"keyword\">const</span> areAllAdults = people.every(isAdult);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 872,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for all items in the array. This method is often simpler/faster\nthan using a callback.</p>\n<p>Note that like the native <code>Array.every</code>, <code>isEvery</code> will return true when called\non any empty array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"keyword\">Language</span> {\n  constructor(<span class=\"type\">name</span>, isProgrammingLanguage) {\n    this.name = <span class=\"type\">name</span>;\n    this.programmingLanguage = isProgrammingLanguage;\n  }\n}\n\nconst compiledLanguages = [\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Java&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Go&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Rust&apos;</span>, <span class=\"keyword\">true</span>)\n]\n\nconst languagesKnownByMe = [\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Javascript&apos;</span>, <span class=\"keyword\">true</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;English&apos;</span>, <span class=\"keyword\">false</span>),\n  <span class=\"built_in\">new</span> <span class=\"keyword\">Language</span>(<span class=\"string\">&apos;Ruby&apos;</span>, <span class=\"keyword\">true</span>)\n]\n\ncompiledLanguages.isEvery(<span class=\"string\">&apos;programmingLanguage&apos;</span>); // <span class=\"keyword\">true</span>\nlanguagesKnownByMe.isEvery(<span class=\"string\">&apos;programmingLanguage&apos;</span>); // <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 912,
          "description": "<html><head></head><body><p>The any() method executes the callback function once for each element\npresent in the array until it finds the one where callback returns a truthy\nvalue (i.e. <code>true</code>). If such an element is found, any() immediately returns\ntrue. Otherwise, any() returns false.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. It can be a good way\nto give your iterator function access to an object in cases where an ES6\narrow function would not be appropriate.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> includesManager = people.any(<span class=\"keyword\">this</span>.findPersonInManagersList, <span class=\"keyword\">this</span>);\n\n<span class=\"keyword\">let</span> includesStockHolder = people.any(<span class=\"function\"><span class=\"params\">person</span> =&gt;</span> {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.findPersonInStockHoldersList(person)\n});\n\n<span class=\"keyword\">if</span> (includesManager || includesStockHolder) {\n  Paychecks.addBiggerBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 955,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for any item in the array. This method is often simpler/faster\nthan using a callback.</p>\n<p>Example usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>const food = [\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;apple&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">true</span> },\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;bread&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">false</span> },\n  { <span class=\"string\">food:</span> <span class=\"string\">&apos;banana&apos;</span>, <span class=\"string\">isFruit:</span> <span class=\"literal\">true</span> }\n];\n\nfood.isAny(<span class=\"string\">&apos;isFruit&apos;</span>); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "1.3.0",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 981,
          "description": "<html><head></head><body><p>This will combine the values of the array into a single value. It\nis a useful way to collect a summary value from an array. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, <span class=\"keyword\">array</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>array</code> is the array itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n  numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">summation, current</span>) </span>{\n    <span class=\"keyword\">return</span> summation + current;\n  }); <span class=\"comment\">// 15 (1 + 2 + 3 + 4 + 5)</span>\n\n  numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">summation, current</span>) </span>{\n    <span class=\"keyword\">return</span> summation + current;\n  }, <span class=\"number\">-15</span>); <span class=\"comment\">// 0 (-15 + 1 + 2 + 3 + 4 + 5)</span>\n\n\n  <span class=\"keyword\">let</span> binaryValues = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>];\n\n  binaryValues.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">truthValue, current</span>) </span>{\n    <span class=\"keyword\">return</span> truthValue &amp;&amp; current;\n  }); <span class=\"comment\">// false (true &amp;&amp; false &amp;&amp; false)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1039,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>{\n  name = <span class=\"literal\">null</span>;\n\n  <span class=\"keyword\">constructor</span>(name) {\n    <span class=\"keyword\">this</span>.name = name;\n  }\n\n  greet(prefix=<span class=\"string\">&apos;Hello&apos;</span>) {\n    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${prefix}</span> <span class=\"subst\">${<span class=\"keyword\">this</span>.name}</span>`</span>;\n  }\n}\n\n<span class=\"keyword\">let</span> people = [<span class=\"keyword\">new</span> Person(<span class=\"string\">&apos;Joe&apos;</span>), <span class=\"keyword\">new</span> Person(<span class=\"string\">&apos;Matt&apos;</span>)];\n\npeople.invoke(<span class=\"string\">&apos;greet&apos;</span>); <span class=\"comment\">// [&apos;Hello Joe&apos;, &apos;Hello Matt&apos;]</span>\npeople.invoke(<span class=\"string\">&apos;greet&apos;</span>, <span class=\"string\">&apos;Bonjour&apos;</span>); <span class=\"comment\">// [&apos;Bonjour Joe&apos;, &apos;Bonjour Matt&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1073,
          "description": "<html><head></head><body><p>Simply converts the object into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the object as an array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1082,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1095,
          "description": "<html><head></head><body><p>Used to determine if the array contains the passed object.\nReturns <code>true</code> if found, <code>false</code> otherwise.</p>\n<p>The optional <code>startAt</code> argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it&apos;s negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to <code>-1 * array.length</code> the entire array is searched.</p>\n<p>This method has the same behavior of JavaScript&apos;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.includes</a>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-4</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, NaN].includes(NaN); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "object",
              "description": "The object to search for.",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "`true` if object is found in the array.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1125,
          "description": "<html><head></head><body><p>Sorts the array by the keys specified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>   <span class=\"keyword\">let</span> colors = [\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span> },\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span> },\n {<span class=\"built_in\"> name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span> }\n];\n\n   colors.sortBy(<span class=\"string\">&apos;name&apos;</span>);\n   // [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span>}]\n\n   colors.sortBy(<span class=\"string\">&apos;weight&apos;</span>, <span class=\"string\">&apos;name&apos;</span>);\n   // [<span class=\"built_in\">{name</span>: <span class=\"string\">&apos;blue&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;red&apos;</span>, weight: <span class=\"number\">500</span>}, <span class=\"built_in\">{name</span>: <span class=\"string\">&apos;green&apos;</span>, weight: <span class=\"number\">600</span>}]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "1.2.0",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1150,
          "description": "<html><head></head><body><p>Returns a new array that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1166,
          "description": "<html><head></head><body><p>Returns a new array that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [{ <span class=\"keyword\">value</span>: <span class=\"string\">&apos;a&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;a&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;b&apos;</span> }, { <span class=\"keyword\">value</span>: <span class=\"string\">&apos;b&apos;</span> }];\narr.uniqBy(<span class=\"string\">&apos;value&apos;</span>);  <span class=\"comment\">// [{ value: &apos;a&apos; }, { value: &apos;b&apos; }]</span>\n\n<span class=\"keyword\">let</span> arr = [<span class=\"number\">2.2</span>, <span class=\"number\">2.1</span>, <span class=\"number\">3.2</span>, <span class=\"number\">3.3</span>];\narr.uniqBy(Math.floor);  <span class=\"comment\">// [2.2, 3.2];</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniqBy",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String,Function"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 1185,
          "description": "<html><head></head><body><p>Returns a new array that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "EmberArray"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/@ember/array/proxy.ts",
          "line": 120,
          "description": "<html><head></head><body><p>The content array. Must be an object that implements <code>Array</code> and/or\n<code>MutableArray.</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "content",
          "type": "EmberArray",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array/proxy"
        },
        {
          "file": "packages/@ember/array/proxy.ts",
          "line": 129,
          "description": "<html><head></head><body><p>The array that the proxy pretends to be. In the default <code>ArrayProxy</code>\nimplementation, this and <code>content</code> are the same. Subclasses of <code>ArrayProxy</code>\ncan override this property to provide things like sorting and filtering.</p>\n</body></html>",
          "itemtype": "property",
          "name": "arrangedContent",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array/proxy"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 356,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Component</code> from <code>@ember/component</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n              <td class=\"code\"><pre>import <span class=\"symbol\">EmberObject</span> from <span class=\"string\">&apos;@ember/object&apos;</span>;\n\nconst <span class=\"symbol\">Bar</span> = <span class=\"symbol\">EmberObject</span>.extend({\n  // <span class=\"symbol\">Configure</span> which properties to concatenate\n  concatenatedProperties: [<span class=\"string\">&apos;concatenatedProperty&apos;</span>],\n\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\nconst <span class=\"symbol\">FooBar</span> = <span class=\"symbol\">Bar</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>]\n});\n\nlet fooBar = <span class=\"symbol\">FooBar</span>.create();\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = <span class=\"symbol\">FooBar</span>.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = FooBar.<span class=\"keyword\">create</span>({\n  concatenatedProperty: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Component</code> the <code>classNames</code>, <code>classNameBindings</code> and\n<code>attributeBindings</code> properties are concatenated.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 430,
          "description": "<html><head></head><body><p>Defines the properties that will be merged from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by merging the superclass property value\nwith the subclass property&apos;s value. An example of this in use within Ember\nis the <code>queryParams</code> property of routes.</p>\n<p>Here is some sample code showing the difference between a merged\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">const</span> Bar = EmberObject.extend({\n  <span class=\"comment\">// Configure which properties are to be merged</span>\n  mergedProperties: [<span class=\"string\">&apos;mergedProperty&apos;</span>],\n\n  someNonMergedProperty: {\n    nonMerged: <span class=\"string\">&apos;superclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    page: { replace: <span class=\"literal\">false</span> },\n    limit: { replace: <span class=\"literal\">true</span> }\n  }\n});\n\n<span class=\"keyword\">const</span> FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: <span class=\"string\">&apos;subclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    limit: { replace: <span class=\"literal\">false</span> }\n  }\n});\n\n<span class=\"keyword\">let</span> fooBar = FooBar.create();\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonMergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; { completelyNonMerged: &apos;subclass value of nonMerged&apos; }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the entire object, including the nonMerged property of</span>\n<span class=\"comment\">// the superclass object, has been replaced</span>\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;mergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; {</span>\n<span class=\"comment\">//   page: {replace: false},</span>\n<span class=\"comment\">//   limit: {replace: false}</span>\n<span class=\"comment\">// }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the page remains from the superclass, and the</span>\n<span class=\"comment\">// `limit` property&apos;s value of `false` has been merged from</span>\n<span class=\"comment\">// the subclass.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior is not available during object <code>create</code> calls. It is only\navailable at <code>extend</code> time.</p>\n<p>In <code>Route</code> the <code>queryParams</code> property is merged.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 505,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/object/core.ts",
          "line": 523,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/object/core",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 253,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n</body></html>",
          "itemtype": "property",
          "name": "length",
          "type": "Number",
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 304,
          "description": "<html><head></head><body><p>This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let peopleToMoon = [<span class=\"string\">&apos;Armstrong&apos;</span>, <span class=\"string\">&apos;Aldrin&apos;</span>];\n\npeopleToMoon.get(<span class=\"string\">&apos;[]&apos;</span>); // [<span class=\"string\">&apos;Armstrong&apos;</span>, <span class=\"string\">&apos;Aldrin&apos;</span>]\n\npeopleToMoon.set(<span class=\"string\">&apos;[]&apos;</span>, [<span class=\"string\">&apos;Collins&apos;</span>]); // [<span class=\"string\">&apos;Collins&apos;</span>]\npeopleToMoon.get(<span class=\"string\">&apos;[]&apos;</span>); // [<span class=\"string\">&apos;Collins&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 324,
          "description": "<html><head></head><body><p>The first object in the array, or <code>undefined</code> if the array is empty.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>let vowels = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;e&apos;</span>, <span class=\"string\">&apos;i&apos;</span>, <span class=\"string\">&apos;o&apos;</span>, <span class=\"string\">&apos;u&apos;</span>];\nvowels.firstObject; <span class=\"comment\">// &apos;a&apos;</span>\n\nvowels.shiftObject<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// &apos;e&apos;</span>\n\nvowels.reverseObjects<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// &apos;u&apos;</span>\n\nvowels.clear<span class=\"comment\">()</span>;\nvowels.firstObject; <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "The first object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        },
        {
          "file": "packages/@ember/array/index.ts",
          "line": 346,
          "description": "<html><head></head><body><p>The last object in the array, or <code>undefined</code> if the array is empty.</p>\n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "The last object in the array",
            "type": "Object | undefined"
          },
          "access": "public",
          "tagname": "",
          "class": "ArrayProxy",
          "module": "@ember/array",
          "inherited": true,
          "inheritedFrom": "EmberArray"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-5.3.0-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-5.3.0-@ember/array/proxy",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-5.3.0",
          "type": "project-version"
        }
      }
    }
  }
}