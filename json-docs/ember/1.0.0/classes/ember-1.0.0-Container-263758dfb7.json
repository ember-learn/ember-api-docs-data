{
  "data": {
    "id": "ember-1.0.0-Container",
    "type": "class",
    "attributes": {
      "name": "Container",
      "shortname": "Container",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "file": "packages/container/lib/main.js",
      "line": 123,
      "description": "<html><head></head><body><p>A lightweight container that helps to assemble and decouple components.</p>\n</body></html>",
      "methods": [
        {
          "file": "packages/container/lib/main.js",
          "line": 211,
          "description": "<html><head></head><body><p>Returns a new child of the current container. These children are configured\nto correctly inherit from the current container.</p>\n</body></html>",
          "itemtype": "method",
          "name": "child",
          "return": {
            "description": "",
            "type": "Container"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 224,
          "description": "<html><head></head><body><p>Sets a key-value pair on the current container. If a parent container,\nhas the same key, once set on a child, the parent and child will diverge\nas expected.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "object",
              "description": "",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Any"
            }
          ],
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 238,
          "description": "<html><head></head><body><p>Registers a factory for later injection.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;model:user&apos;</span>, Person, {singleton: <span class=\"literal\">false</span> });\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, Orange);\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;communication:main&apos;</span>, Email, {singleton: <span class=\"literal\">false</span>});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 275,
          "description": "<html><head></head><body><p>Unregister a fullName</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;model:user&apos;</span>, User);\n\n<span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;model:user&apos;</span>) instanceof User <span class=\"comment\">//=&gt; true</span>\n\n<span class=\"built_in\">container</span>.unregister(<span class=\"string\">&apos;model:user&apos;</span>)\n<span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;model:user&apos;</span>) === undefined <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 300,
          "description": "<html><head></head><body><p>Given a fullName return the corresponding factory.</p>\n<p>By default <code>resolve</code> will retrieve the factory from\nits container&apos;s registry.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"built_in\">container</span>.resolve(<span class=\"string\">&apos;api:twitter&apos;</span>) <span class=\"comment\">// =&gt; Twitter</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally the container can be provided with a custom resolver.\nIf provided, <code>resolve</code> will first provide the custom resolver\nthe oppertunity to resolve the fullName, otherwise it will fallback\nto the registry.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"built_in\">container</span>.resolver = function(fullName) {\n  <span class=\"comment\">// lookup via the module system of choice</span>\n};\n\n<span class=\"comment\">// the twitter factory is added to the module system</span>\n<span class=\"built_in\">container</span>.resolve(<span class=\"string\">&apos;api:twitter&apos;</span>) <span class=\"comment\">// =&gt; Twitter</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 336,
          "description": "<html><head></head><body><p>A hook that can be used to describe how the resolver will\nattempt to find the factory.</p>\n<p>For example, the default Ember <code>.describe</code> returns the full\nclass name (including namespace) where Ember&apos;s resolver expects\nto find the <code>fullName</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "describe",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 350,
          "description": "<html><head></head><body><p>A hook to enable custom fullName normalization behaviour</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized fullName",
            "type": "String"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 361,
          "itemtype": "method",
          "name": "makeToString",
          "params": [
            {
              "name": "factory",
              "description": "",
              "type": "Any"
            },
            {
              "name": "fullNae",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "toString function",
            "type": "Function"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 372,
          "description": "<html><head></head><body><p>Given a fullName return a corresponding instance.</p>\n<p>The default behaviour is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"built_in\">var</span> twitter = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\n\ntwitter instanceof Twitter; <span class=\"comment\">// =&gt; true</span>\n\n<span class=\"comment\">// by default the container will return singletons</span>\ntwitter2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\ntwitter instanceof Twitter; <span class=\"comment\">// =&gt; true</span>\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If singletons are not wanted an optional flag can be provided at lookup.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"built_in\">var</span> twitter = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"literal\">false</span> });\n<span class=\"built_in\">var</span> twitter2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"literal\">false</span> });\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 431,
          "description": "<html><head></head><body><p>Given a fullName return the corresponding factory.</p>\n</body></html>",
          "itemtype": "method",
          "name": "lookupFactory",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 442,
          "description": "<html><head></head><body><p>Given a fullName check if the container is aware of its factory\nor singleton instance.</p>\n</body></html>",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 458,
          "description": "<html><head></head><body><p>Allow registering options for all factories of a type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">var</span> <span class=\"built_in\">container</span> = <span class=\"keyword\">new</span> Container();\n\n<span class=\"comment\">// if all of type `connection` must not be singletons</span>\n<span class=\"built_in\">container</span>.optionsForType(<span class=\"string\">&apos;connection&apos;</span>, { singleton: <span class=\"literal\">false</span> });\n\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;connection:twitter&apos;</span>, TwitterConnection);\n<span class=\"built_in\">container</span>.register(<span class=\"string\">&apos;connection:facebook&apos;</span>, FacebookConnection);\n\n<span class=\"built_in\">var</span> twitter = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;connection:twitter&apos;</span>);\n<span class=\"built_in\">var</span> twitter2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;connection:twitter&apos;</span>);\n\ntwitter === twitter2; <span class=\"comment\">// =&gt; false</span>\n\n<span class=\"built_in\">var</span> facebook = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;connection:facebook&apos;</span>);\n<span class=\"built_in\">var</span> facebook2 = <span class=\"built_in\">container</span>.lookup(<span class=\"string\">&apos;connection:facebook&apos;</span>);\n\nfacebook === facebook2; <span class=\"comment\">// =&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "optionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 491,
          "itemtype": "method",
          "name": "options",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 693,
          "description": "<html><head></head><body><p>A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 716,
          "itemtype": "method",
          "name": "reset",
          "class": "Container"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/container/lib/main.js",
          "line": 149,
          "itemtype": "property",
          "name": "parent",
          "type": "Container",
          "default": "null",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 156,
          "itemtype": "property",
          "name": "children",
          "type": "Array",
          "default": "[]",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 163,
          "itemtype": "property",
          "name": "resolver",
          "type": "function",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 169,
          "itemtype": "property",
          "name": "registry",
          "type": "InheritingDict",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 175,
          "itemtype": "property",
          "name": "cache",
          "type": "InheritingDict",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 181,
          "itemtype": "property",
          "name": "typeInjections",
          "type": "InheritingDict",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 187,
          "itemtype": "property",
          "name": "injections",
          "type": "Object",
          "default": "{}",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 194,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_options",
          "type": "InheritingDict",
          "default": "null",
          "class": "Container"
        },
        {
          "file": "packages/container/lib/main.js",
          "line": 203,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_typeOptions",
          "type": "InheritingDict",
          "class": "Container"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.0.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.0.0",
          "type": "project-version"
        }
      }
    }
  }
}