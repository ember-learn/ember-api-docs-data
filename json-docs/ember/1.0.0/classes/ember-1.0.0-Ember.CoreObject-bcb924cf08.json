{
  "data": {
    "id": "ember-1.0.0-Ember.CoreObject",
    "type": "class",
    "attributes": {
      "name": "Ember.CoreObject",
      "shortname": "Ember.CoreObject",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "packages/ember-runtime/lib/system/core_object.js",
      "line": 158,
      "methods": [
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 171,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"keyword\">init</span>: function() {\n    <span class=\"keyword\">this</span>._super();\n    alert(<span class=\"string\">&apos;Name is &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"string\">&quot;Steve&quot;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super()</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 289,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 311,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 318,
          "access": "private",
          "tagname": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 338,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Em</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend<span class=\"literal\">()</span>\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;App.Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>\nstudent = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;(subclass of App.Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.Teacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend({\n  toStringExtension: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    return this.get(&apos;fullName&apos;);\n  }\n});\nteacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Teacher</span>.</span></span>create<span class=\"literal\">()</span>\nteacher.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;App.Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 421,
          "description": "<html><head></head><body><p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 435,
          "description": "<html><head></head><body><p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend({\n  helloWorld: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    alert(<span class=\"string\">&quot;Hi, my name is &quot;</span> + this.get(&apos;name&apos;));\n  }\n});\n\nvar tom = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create({\n  name: &apos;Tom Dale&apos;\n});\n\ntom.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts &quot;Hi, my name is Tom Dale&quot;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var noName = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nnoName.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 478,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s prototype with additional\n    properties and functions:</p>\n<p>```javascript\n    MyObject = Ember.Object.extend({\n      name: &apos;an object&apos;\n    });</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>o = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>create<span class=\"literal\">()</span>;\no.get(&apos;name&apos;); <span class=\"comment\">// &apos;an object&apos;</span>\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>reopen({\n  say: <span class=\"keyword\">function</span>(msg){\n    console.log(msg);\n  }\n})\n\no2 = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyObject</span>.</span></span>create<span class=\"literal\">()</span>;\no2.say(<span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">// logs &quot;hello&quot;</span>\n\no.say(<span class=\"string\">&quot;goodbye&quot;</span>); <span class=\"comment\">// logs &quot;goodbye&quot;</span>\n```</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>To add functions and properties to the constructor itself,\n    see <code>reopenClass</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 514,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s own properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>MyObject = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;an object&apos;</span>\n});\n\n\nMyObject.reopenClass({\n  canBuild: <span class=\"keyword\">false</span>\n});\n\nMyObject.canBuild; // <span class=\"keyword\">false</span>\no = MyObject.<span class=\"keyword\">create</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To add functions and properties to instances of\na constructor by extending the constructor&apos;s prototype\nsee <code>reopen</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 556,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Once you&apos;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyClass</span>.</span></span>meta<span class=\"constructor\">ForProperty(&apos;<span class=\"params\">person</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will return the original hash that was passed to <code>meta()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 590,
          "description": "<html><head></head><body><p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 202,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">View</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  classNames: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span> = <span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  classNames: [<span class=\"string\">&apos;foo&apos;</span>],\n});\n\nvar fooBarView = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create();\nfooBarView.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBarView.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  classNames: [<span class=\"string\">&apos;baz&apos;</span>]\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  classNames: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell to Ember that mix\nthe content of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently.</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 267,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 278,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.CoreObject",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-1.0.0-Ember.Object"
          },
          {
            "type": "class",
            "id": "ember-1.0.0-Ember.Set"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-1.0.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.0.0",
          "type": "project-version"
        }
      }
    }
  }
}