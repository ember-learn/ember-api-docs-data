{
  "data": {
    "id": "ember-1.0.0-Ember.Application",
    "type": "class",
    "attributes": {
      "name": "Ember.Application",
      "shortname": "Ember.Application",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-application",
      "namespace": "Ember",
      "file": "packages/ember-application/lib/system/application.js",
      "line": 28,
      "description": "<html><head></head><body><p>An instance of <code>Ember.Application</code> is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.</p>\n<p>Each Ember app has one and only one <code>Ember.Application</code> object. In fact, the\nvery first thing you should do in your application is create the instance:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">window</span>.App = Ember.Application.<span class=\"keyword\">create</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Typically, the application object is the only global variable. All other\nclasses in your app should be properties on the <code>Ember.Application</code> instance,\nwhich highlights its first role: a global namespace.</p>\n<p>For example, if you define a view class, it might look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">App</span>.MyView = Ember.<span class=\"keyword\">View</span>.extend();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, calling <code>Ember.Application.create()</code> will automatically initialize\nyour application by calling the <code>Ember.Application.initialize()</code> method. If\nyou need to delay initialization, you can call your app&apos;s <code>deferReadiness()</code>\nmethod. When you are ready for your app to be initialized, call its\n<code>advanceReadiness()</code> method.</p>\n<p>You can define a <code>ready</code> method on the <code>Ember.Application</code> instance, which\nwill be run by Ember when the application is initialized.</p>\n<p>Because <code>Ember.Application</code> inherits from <code>Ember.Namespace</code>, any classes\nyou create will have useful string representations when calling <code>toString()</code>.\nSee the <code>Ember.Namespace</code> documentation for more information.</p>\n<p>While you can think of your <code>Ember.Application</code> as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.</p>\n<h3 id=\"event-delegation\">Event Delegation</h3>\n<p>Ember uses a technique called <em>event delegation</em>. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n<code>mousedown</code> listener on its associated element, Ember sets up a <code>mousedown</code>\nlistener on the <code>body</code>.</p>\n<p>If a <code>mousedown</code> event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir <code>mouseDown</code> method as it goes.</p>\n<p><code>Ember.Application</code> has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the <code>keypress</code> event causes the <code>keyPress</code> method on the view to be\ncalled, the <code>dblclick</code> event causes <code>doubleClick</code> to be called, and so on.</p>\n<p>If there is a browser event that Ember does not listen for by default, you\ncan specify custom events and their corresponding view method names by\nsetting the application&apos;s <code>customEvents</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App = Ember.Application.create({\n  customEvents: {\n    // <span class=\"keyword\">add</span><span class=\"bash\"> support <span class=\"keyword\">for</span> the loadedmetadata media\n</span>    // player event\n    <span class=\"string\">&apos;loadedmetadata&apos;</span>: <span class=\"string\">&quot;loadedMetadata&quot;</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.</p>\n<p>For example, if only events inside a DOM element with the ID of <code>ember-app</code>\nshould be delegated, set your application&apos;s <code>rootElement</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">window</span>.App = Ember.Application.<span class=\"keyword\">create</span>({\n  rootElement: &apos;<span class=\"meta\">#ember-app&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>rootElement</code> can be either a DOM element or a jQuery-compatible selector\nstring. Note that <em>views appended to the DOM outside the root element will\nnot receive events.</em> If you specify a custom root element, make sure you only\nappend views inside it!</p>\n<p>To learn more about the advantages of event delegation and the Ember view\nlayer, and a list of the event listeners that are setup by default, visit the\n<a href=\"http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation\">Ember View Layer guide</a>.</p>\n<h3 id=\"initializers\">Initializers</h3>\n<p>Libraries on top of Ember can register additional initializers, like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">Ember</span><span class=\"selector-class\">.Application</span><span class=\"selector-class\">.initializer</span>({\n  <span class=\"attribute\">name</span>: <span class=\"string\">&quot;store&quot;</span>,\n\n  initialize: <span class=\"built_in\">function</span>(container, application) {\n    container.<span class=\"built_in\">register</span>(<span class=\"string\">&apos;store:main&apos;</span>, application.Store);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"routing\">Routing</h3>\n<p>In addition to creating your application&apos;s router, <code>Ember.Application</code> is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the <code>LOG_TRANSITIONS</code> flag, and more\ndetailed intra-transition logging can be logged with\nthe <code>LOG_TRANSITIONS_INTERNAL</code> flag:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">window.App</span> <span class=\"string\">=</span> <span class=\"string\">Ember.Application.create({</span>\n<span class=\"attr\">  LOG_TRANSITIONS:</span> <span class=\"literal\">true</span><span class=\"string\">,</span> <span class=\"string\">//</span> <span class=\"string\">basic</span> <span class=\"string\">logging</span> <span class=\"string\">of</span> <span class=\"string\">successful</span> <span class=\"string\">transitions</span>\n<span class=\"attr\">  LOG_TRANSITIONS_INTERNAL:</span> <span class=\"literal\">true</span> <span class=\"string\">//</span> <span class=\"string\">detailed</span> <span class=\"string\">logging</span> <span class=\"string\">of</span> <span class=\"string\">all</span> <span class=\"string\">routing</span> <span class=\"string\">steps</span>\n<span class=\"string\">});</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the router will begin trying to translate the current URL into\napplication state once the browser emits the <code>DOMContentReady</code> event. If you\nneed to defer routing, you can call the application&apos;s <code>deferReadiness()</code>\nmethod. Once routing can begin, call the <code>advanceReadiness()</code> method.</p>\n<p>If there is any setup required before routing begins, you can implement a\n<code>ready()</code> method on your app that will be invoked immediately before routing\nbegins.\n```</p>\n</body></html>",
      "extends": "Ember.Namespace",
      "version": "1.0.0",
      "since": "1.0.0",
      "methods": [
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 252,
          "access": "private",
          "tagname": "Build the container for the current application.\n\nAlso register a default application view in case the application\nitself does not.",
          "itemtype": "method",
          "name": "buildContainer",
          "return": {
            "description": "the configured container",
            "type": "Ember.Container"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 269,
          "access": "private",
          "tagname": "If the application has not opted out of routing and has not explicitly\ndefined a router, supply a default router for the application author\nto configure.\n\nThis allows application developers to do:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.Router.map(function() {\n  this.resource('posts');\n});\n```",
          "itemtype": "method",
          "name": "defaultRouter",
          "return": {
            "description": "the default router",
            "type": "Ember.Router"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 298,
          "access": "private",
          "tagname": "Automatically initialize the application once the DOM has\nbecome ready.\n\nThe initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.\n\nIf you are asynchronously loading code, you should call\n`deferReadiness()` to defer booting, and then call\n`advanceReadiness()` once all of your code has finished\nloading.",
          "itemtype": "method",
          "name": "scheduleInitialize",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 327,
          "description": "<html><head></head><body><p>Use this to defer readiness until some condition is true.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">App</span> = Ember.Application.create();\n<span class=\"keyword\">App</span>.deferReadiness();\n\njQuery.getJSON(<span class=\"string\">&quot;/auth-token&quot;</span>, function(<span class=\"keyword\">token</span>) {\n  <span class=\"keyword\">App</span>.<span class=\"keyword\">token</span> = <span class=\"keyword\">token</span>;\n  <span class=\"keyword\">App</span>.advanceReadiness();\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.</p>\n<p>However, if the setup requires a loading UI, it might be better\nto use the router for this purpose.</p>\n</body></html>",
          "itemtype": "method",
          "name": "deferReadiness",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 356,
          "description": "<html><head></head><body><p>Call <code>advanceReadiness</code> after any asynchronous setup logic has completed.\nEach call to <code>deferReadiness</code> must be matched by a call to <code>advanceReadiness</code>\nor the application will never become ready and routing will not begin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "advanceReadiness",
          "see": [
            "{Ember.Application#deferReadiness}"
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 373,
          "description": "<html><head></head><body><p>registers a factory for later injection</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">App</span> = Ember.Application.create();\n\n<span class=\"keyword\">App</span>.Person = Ember.Object.extend({});\n<span class=\"keyword\">App</span>.Orange = Ember.Object.extend({});\n<span class=\"keyword\">App</span>.Email  = Ember.Object.extend({});\n\n<span class=\"keyword\">App</span>.register(&apos;model:user&apos;, <span class=\"keyword\">App</span>.Person, {singleton: false });\n<span class=\"keyword\">App</span>.register(&apos;fruit:favorite&apos;, <span class=\"keyword\">App</span>.Orange);\n<span class=\"keyword\">App</span>.register(&apos;communication:main&apos;, <span class=\"keyword\">App</span>.Email, {singleton: false});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "name",
              "description": "",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional)",
              "type": "String"
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 400,
          "description": "<html><head></head><body><p>defines an injection or typeInjection</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.inject(&lt;full_name <span class=\"keyword\">or</span> <span class=\"keyword\">type</span>&gt;, &lt;<span class=\"keyword\">property</span> <span class=\"keyword\">name</span>&gt;, &lt;full_name&gt;)\nApp.inject(<span class=\"string\">&apos;model:user&apos;</span>, <span class=\"string\">&apos;email&apos;</span>, <span class=\"string\">&apos;model:email&apos;</span>)\nApp.inject(<span class=\"string\">&apos;model&apos;</span>, <span class=\"string\">&apos;source&apos;</span>, <span class=\"string\">&apos;source:main&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "inject",
          "params": [
            {
              "name": "factoryNameOrType",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 421,
          "access": "private",
          "tagname": "",
          "deprecated": true,
          "deprecationMessage": "Calling initialize manually is not supported.\n\nPlease see Ember.Application#advanceReadiness and\nEmber.Application#deferReadiness.",
          "itemtype": "method",
          "name": "initialize",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 435,
          "access": "private",
          "tagname": "Initialize the application. This happens automatically.\n\nRun any initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want\nto defer readiness until the auth token has been retrieved.",
          "itemtype": "method",
          "name": "_initialize",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 463,
          "description": "<html><head></head><body><p>Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:</p>\n<ol>\n<li>Deactivate existing routes</li>\n<li>Destroy all objects in the container</li>\n<li>Create a new application container</li>\n<li>Re-route to the existing url</li>\n</ol>\n<p>Typical Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> App;\n\nEmber.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"built_in\">module</span>(<span class=\"string\">&quot;acceptance test&quot;</span>, {\n  <span class=\"attr\">setup</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    App.reset();\n  }\n});\n\ntest(<span class=\"string\">&quot;first test&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"comment\">// App is freshly reset</span>\n});\n\ntest(<span class=\"string\">&quot;first test&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"comment\">// App is again freshly reset</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Advanced Example:</p>\n<p>Occasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> App;\n\nEmber.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"built_in\">module</span>(<span class=\"string\">&quot;acceptance test&quot;</span>, {\n  <span class=\"attr\">setup</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    Ember.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest(<span class=\"string\">&quot;first test&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  ok(<span class=\"literal\">true</span>, <span class=\"string\">&apos;something before app is initialized&apos;</span>);\n\n  Ember.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    App.advanceReadiness();\n  });\n  ok(<span class=\"literal\">true</span>, <span class=\"string\">&apos;something after app is initialized&apos;</span>);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reset",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 551,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "runInitializers",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 574,
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "didBecomeReady",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 592,
          "access": "private",
          "tagname": "Setup up the event dispatcher to receive events on the\napplication's `rootElement` with any registered\n`customEvents`.",
          "itemtype": "method",
          "name": "setupEventDispatcher",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 680,
          "access": "private",
          "tagname": "This creates a container with the default Ember naming conventions.\n\nIt also configures the container:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
          "itemtype": "method",
          "name": "buildContainer",
          "static": 1,
          "params": [
            {
              "name": "namespace",
              "description": "the application to build the\n  container for.",
              "type": "Ember.Application"
            }
          ],
          "return": {
            "description": "the built container",
            "type": "Ember.Container"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 739,
          "access": "private",
          "tagname": "This function defines the default lookup rules for container lookups:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after classifying the name.\n  For example, `controller:post` looks up `App.PostController` by default.\n* if the default lookup fails, look for registered classes on the container\n\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
          "itemtype": "method",
          "name": "resolverFor",
          "params": [
            {
              "name": "namespace",
              "description": "the namespace to look for classes",
              "type": "Ember.Namespace"
            }
          ],
          "return": {
            "description": "the resolved value for a given lookup",
            "type": "*"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 171,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  init: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">this</span>._super();\n    alert(<span class=\"string\">&apos;Name is &apos;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"string\">&quot;Steve&quot;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super()</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 289,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 311,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 318,
          "access": "private",
          "tagname": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 338,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App<span class=\"selector-class\">.Person</span> = Em<span class=\"selector-class\">.Object</span><span class=\"selector-class\">.extend</span>()\nperson = App<span class=\"selector-class\">.Person</span><span class=\"selector-class\">.create</span>()\nperson.toString() <span class=\"comment\">//=&gt; &quot;&lt;App.Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=&gt; <span class=\"string\">&quot;&lt;(subclass of App.Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;fullName&apos;</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"comment\">//=&gt; &quot;&lt;App.Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 421,
          "description": "<html><head></head><body><p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 435,
          "description": "<html><head></head><body><p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"string\">&quot;Hi, my name is &quot;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"string\">&apos;Tom Dale&apos;</span>\n});\n\ntom.helloWorld(); <span class=\"comment\">// alerts &quot;Hi, my name is Tom Dale&quot;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> noName = <span class=\"keyword\">App</span>.Person.create();\nnoName.helloWorld(); <span class=\"comment\">// alerts undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 478,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s prototype with additional\n    properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>    MyObject = Ember.Object.extend({\n      name: <span class=\"string\">&apos;an object&apos;</span>\n    });\n\n    o = MyObject.<span class=\"built_in\">create</span>();\n    o.get(<span class=\"string\">&apos;name&apos;</span>); // <span class=\"string\">&apos;an object&apos;</span>\n\n    MyObject.reopen({\n      say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span></span>{\n        console.<span class=\"built_in\">log</span>(msg);\n      }\n    })\n\n    o2 = MyObject.<span class=\"built_in\">create</span>();\n    o2.say(<span class=\"string\">&quot;hello&quot;</span>); // logs <span class=\"string\">&quot;hello&quot;</span>\n\n    o.say(<span class=\"string\">&quot;goodbye&quot;</span>); // logs <span class=\"string\">&quot;goodbye&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To add functions and properties to the constructor itself,\n    see <code>reopenClass</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 514,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s own properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">MyObject</span> <span class=\"string\">=</span> <span class=\"string\">Ember.Object.extend({</span>\n<span class=\"attr\">  name:</span> <span class=\"string\">&apos;an object&apos;</span>\n<span class=\"string\">});</span>\n\n\n<span class=\"string\">MyObject.reopenClass({</span>\n<span class=\"attr\">  canBuild:</span> <span class=\"literal\">false</span>\n<span class=\"string\">});</span>\n\n<span class=\"string\">MyObject.canBuild;</span> <span class=\"string\">//</span> <span class=\"literal\">false</span>\n<span class=\"string\">o</span> <span class=\"string\">=</span> <span class=\"string\">MyObject.create();</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To add functions and properties to instances of\na constructor by extending the constructor&apos;s prototype\nsee <code>reopen</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 556,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Once you&apos;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">MyClass</span><span class=\"selector-class\">.metaForProperty</span>(<span class=\"string\">&apos;person&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will return the original hash that was passed to <code>meta()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 590,
          "description": "<html><head></head><body><p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 78,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getEach(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>).compact().join(<span class=\"string\">&apos; &apos;</span>);\n}.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 120,
          "description": "<html><head></head><body><p>To get multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Hash"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 142,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;Charles&apos;</span>).<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Jolley&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 195,
          "description": "<html><head></head><body><p>To set multiple properties at once, call <code>setProperties</code>\nwith a Hash:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 211,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 230,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 248,
          "description": "<html><head></head><body><p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 271,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 294,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 312,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "self",
            "type": "Ember.Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 364,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 379,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 393,
          "deprecated": true,
          "itemtype": "method",
          "name": "getPath",
          "params": [
            {
              "name": "path",
              "description": "The property path to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 404,
          "deprecated": true,
          "itemtype": "method",
          "name": "setPath",
          "params": [
            {
              "name": "path",
              "description": "The path to the property that will be set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 416,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 433,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 453,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 473,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of it&apos;s\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 490,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        }
      ],
      "events": [
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 632,
          "description": "<html><head></head><body><p>Called when the Application has become ready.\nThe call will be delayed until the DOM has become ready.</p>\n</body></html>",
          "itemtype": "event",
          "name": "ready",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        }
      ],
      "properties": [
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 167,
          "description": "<html><head></head><body><p>The root DOM element of the Application. This can be specified as an\nelement or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector string</a>.</p>\n<p>This is the element that will be passed to the Application&apos;s,\n<code>eventDispatcher</code>, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.</p>\n</body></html>",
          "itemtype": "property",
          "name": "rootElement",
          "type": "DOMElement",
          "default": "'body'",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 182,
          "description": "<html><head></head><body><p>The <code>Ember.EventDispatcher</code> responsible for delegating events to this\napplication&apos;s views.</p>\n<p>The event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication&apos;s <code>rootElement</code> property.</p>\n<p>See the documentation for <code>Ember.EventDispatcher</code> for more information.</p>\n</body></html>",
          "itemtype": "property",
          "name": "eventDispatcher",
          "type": "Ember.EventDispatcher",
          "default": "null",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 198,
          "description": "<html><head></head><body><p>The DOM events for which the event dispatcher should listen.</p>\n<p>By default, the application&apos;s <code>Ember.EventDispatcher</code> listens\nfor a set of standard DOM events, such as <code>mousedown</code> and\n<code>keyup</code>, and delegates them to your application&apos;s <code>Ember.View</code>\ninstances.</p>\n<p>If you would like additional events to be delegated to your\nviews, set your <code>Ember.Application</code>&apos;s <code>customEvents</code> property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App = Ember.Application.create({\n  customEvents: {\n    // <span class=\"keyword\">add</span><span class=\"bash\"> support <span class=\"keyword\">for</span> the loadedmetadata media\n</span>    // player event\n    <span class=\"string\">&apos;loadedmetadata&apos;</span>: <span class=\"string\">&quot;loadedMetadata&quot;</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "customEvents",
          "type": "Object",
          "default": "null",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 610,
          "access": "private",
          "tagname": "If the application has a router, use it to route to the current URL, and\ntrigger a new call to `route` whenever the URL changes.",
          "itemtype": "property",
          "name": "router",
          "type": "Ember.Router",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 640,
          "deprecated": true,
          "deprecationMessage": "Use 'Resolver' instead\n    Set this to provide an alternate class to `Ember.DefaultResolver`",
          "itemtype": "property",
          "name": "resolver",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-application/lib/system/application.js",
          "line": 649,
          "description": "<html><head></head><body><p>Set this to provide an alternate class to <code>Ember.DefaultResolver</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "resolver",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 202,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">View</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  classNames: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span> = <span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  classNames: [<span class=\"string\">&apos;foo&apos;</span>],\n});\n\nvar fooBarView = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create();\nfooBarView.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBarView.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var view = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  classNames: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nview.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\nview.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var view = App.FooBarView.create({\n  classNames: <span class=\"string\">&apos;baz&apos;</span>\n})\nview.get(<span class=\"string\">&apos;classNames&apos;</span>); <span class=\"regexp\">//</span> [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell to Ember that mix\nthe content of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently.</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 267,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 278,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.Application",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "1.0.0",
          "since": "1.0.0",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.0.0-Ember.Namespace",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.0.0-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.0.0",
          "type": "project-version"
        }
      }
    }
  }
}