{
  "data": {
    "id": "ember-1.0.0-Ember.run",
    "type": "namespace",
    "attributes": {
      "name": "Ember.run",
      "shortname": "Ember.run",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-metal",
      "namespace": "Ember",
      "file": "packages/ember-metal/lib/run_loop.js",
      "line": 27,
      "description": "Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.\n\n```javascript\nEmber.run(function() {\n  // code to be execute within a RunLoop\n});\n```",
      "static": 1,
      "is_constructor": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to call",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Any additional arguments you wish to pass to the method.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "return value from invoking the passed function.",
        "type": "Object"
      },
      "methods": [
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 70,
          "description": "If no run-loop is present, it creates a new one. If a run loop is\n  present it will queue itself to run on the existing run-loops action\n  queue.\nPlease note: This is not for normal usage, and should be used sparingly.\nIf invoked when not within a run loop:\n```javascript\n  Ember.run.join(function() {\n    // creates a new run-loop\n  });\n  ```\nAlternatively, if called within an existing run loop:\n```javascript\n  Ember.run(function() {\n    // creates a new run-loop\n    Ember.run.join(function() {\n      // joins with the existing run-loop, and queues for invocation on\n      // the existing run-loops action queue.\n    });\n  });\n  ```",
          "itemtype": "method",
          "name": "join",
          "params": [
            {
              "name": "target",
              "description": "target of method to call",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "Method to invoke.\n    May be a function or a string. If you pass a string\n    then it will be looked up on the passed target.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Any additional arguments you wish to pass to the method.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "return value from invoking the passed function. Please note,\n  when called within an existing loop, no return value is possible.",
            "type": "Object"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 126,
          "description": "Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to `Ember.run.end()`. This is\na lower-level way to use a RunLoop instead of using `Ember.run()`.\n\n```javascript\nEmber.run.begin();\n// code to be execute within a RunLoop\nEmber.run.end();\n```",
          "itemtype": "method",
          "name": "begin",
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 144,
          "description": "Ends a RunLoop. This must be called sometime after you call\n`Ember.run.begin()` to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using `Ember.run()`.\n\n```javascript\nEmber.run.begin();\n// code to be execute within a RunLoop\nEmber.run.end();\n```",
          "itemtype": "method",
          "name": "end",
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 173,
          "description": "Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe `Ember.run.queues` property.\n\n```javascript\nEmber.run.schedule('sync', this, function() {\n  // this will be executed in the first RunLoop queue, when bindings are synced\n  console.log(\"scheduled on sync queue\");\n});\n\nEmber.run.schedule('actions', this, function() {\n  // this will be executed in the 'actions' queue, after bindings have synced.\n  console.log(\"scheduled on actions queue\");\n});\n\n// Note the functions will be run in order based on the run queues order. Output would be:\n//   scheduled on sync queue\n//   scheduled on actions queue\n```",
          "itemtype": "method",
          "name": "schedule",
          "params": [
            {
              "name": "queue",
              "description": "The name of the queue to schedule against.\n  Default queues are 'sync' and 'actions'",
              "type": "String"
            },
            {
              "name": "target",
              "description": "target object to use as the context when invoking a method.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke. If you pass a string it\n  will be resolved on the target object at the time the scheduled item is\n  invoked allowing you to change the target function.",
              "type": "String|Function"
            },
            {
              "name": "arguments*",
              "description": "Optional arguments to be passed to the queued method.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 224,
          "description": "Immediately flushes any events scheduled in the 'sync' queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.\n\nYou should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later 'render' queue added by the `ember-views` package).\n\n```javascript\nEmber.run.sync();\n```",
          "itemtype": "method",
          "name": "sync",
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 246,
          "description": "Invokes the passed target/method and optional arguments after a specified\nperiod if time. The last parameter of this method must always be a number\nof milliseconds.\n\nYou should use this method whenever you need to run some action after a\nperiod of time instead of using `setTimeout()`. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nEmber.run.later(myContext, function() {\n  // code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n```",
          "itemtype": "method",
          "name": "later",
          "params": [
            {
              "name": "target",
              "description": "target of method to invoke",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "wait",
              "description": "Number of milliseconds to wait.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "a string you can use to cancel the timer in\n  `Ember.run.cancel` later.",
            "type": "String"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 276,
          "description": "Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling `scheduleOnce` with the \"actions\" queue.",
          "itemtype": "method",
          "name": "once",
          "params": [
            {
              "name": "target",
              "description": "The target of the method to invoke.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "timer",
            "type": "Object"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 295,
          "description": "Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).\n\nNote that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.\n\n```javascript\nEmber.run(function() {\n  var sayHi = function() { console.log('hi'); }\n  Ember.run.scheduleOnce('afterRender', myContext, sayHi);\n  Ember.run.scheduleOnce('afterRender', myContext, sayHi);\n  // sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n```\n\nAlso note that passing an anonymous function to `Ember.run.scheduleOnce` will\nnot prevent additional calls with an identical anonymous function from\nscheduling the items multiple times, e.g.:\n\n```javascript\nfunction scheduleIt() {\n  Ember.run.scheduleOnce('actions', myContext, function() { console.log(\"Closure\"); });\n}\nscheduleIt();\nscheduleIt();\n// \"Closure\" will print twice, even though we're using `Ember.run.scheduleOnce`,\n// because the function we pass to it is anonymous and won't match the\n// previously scheduled operation.\n```\n\nAvailable queues, and their order, can be found at `Ember.run.queues`",
          "itemtype": "method",
          "name": "scheduleOnce",
          "params": [
            {
              "name": "queue",
              "description": "The name of the queue to schedule against. Default queues are 'sync' and 'actions'.",
              "type": "String",
              "optional": true
            },
            {
              "name": "target",
              "description": "The target of the method to invoke.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "timer",
            "type": "Object"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 344,
          "description": "Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n`Ember.run.later` with a wait time of 1ms.\n\n```javascript\nEmber.run.next(myContext, function() {\n  // code to be executed in the next run loop, which will be scheduled after the current one\n});\n```\n\nMultiple operations scheduled with `Ember.run.next` will coalesce\ninto the same later run loop, along with any other operations\nscheduled by `Ember.run.later` that expire right around the same\ntime that `Ember.run.next` operations will fire.\n\nNote that there are often alternatives to using `Ember.run.next`.\nFor instance, if you'd like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the `afterRender` run loop queue (added\nby the `ember-views` package, along with the preceding `render` queue\nwhere all the DOM element operations happen). Example:\n\n```javascript\nApp.MyCollectionView = Ember.CollectionView.extend({\n  didInsertElement: function() {\n    Ember.run.scheduleOnce('afterRender', this, 'processChildElements');\n  },\n  processChildElements: function() {\n    // ... do something with collectionView's child view\n    // elements after they've finished rendering, which\n    // can't be done within the CollectionView's\n    // `didInsertElement` hook because that gets run\n    // before the child elements have been added to the DOM.\n  }\n});\n```\n\nOne benefit of the above approach compared to using `Ember.run.next` is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.\n\nThe other major benefit to the above approach is that `Ember.run.next`\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on `setTimeout`; it's much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with `Ember.run.next`.",
          "itemtype": "method",
          "name": "next",
          "params": [
            {
              "name": "target",
              "description": "target of method to invoke",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "timer",
            "type": "Object"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 407,
          "description": "Cancels a scheduled item. Must be a value returned by `Ember.run.later()`,\n`Ember.run.once()`, or `Ember.run.next()`.\n\n```javascript\nvar runNext = Ember.run.next(myContext, function() {\n  // will not be executed\n});\nEmber.run.cancel(runNext);\n\nvar runLater = Ember.run.later(myContext, function() {\n  // will not be executed\n}, 500);\nEmber.run.cancel(runLater);\n\nvar runOnce = Ember.run.once(myContext, function() {\n  // will not be executed\n});\nEmber.run.cancel(runOnce);\n```",
          "itemtype": "method",
          "name": "cancel",
          "params": [
            {
              "name": "timer",
              "description": "Timer object to cancel",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 436,
          "description": "Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If `debounce` is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.\n\nThis method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.\n\n```javascript\n  var myFunc = function() { console.log(this.name + ' ran.'); };\n  var myContext = {name: 'debounce'};\n\n  Ember.run.debounce(myContext, myFunc, 150);\n\n  // less than 150ms passes\n\n  Ember.run.debounce(myContext, myFunc, 150);\n\n  // 150ms passes\n  // myFunc is invoked with context myContext\n  // console logs 'debounce ran.' one time.\n```",
          "itemtype": "method",
          "name": "debounce",
          "params": [
            {
              "name": "target",
              "description": "target of method to invoke",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "wait",
              "description": "Number of milliseconds to wait.",
              "type": "Number"
            },
            {
              "name": "immediate",
              "description": "Trigger the function on the leading instead of the trailing edge of the wait interval.",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 476,
          "description": "Ensure that the target method is never called more frequently than\nthe specified spacing period.\n\n```javascript\n  var myFunc = function() { console.log(this.name + ' ran.'); };\n  var myContext = {name: 'throttle'};\n\n  Ember.run.throttle(myContext, myFunc, 150);\n\n  // 50ms passes\n  Ember.run.throttle(myContext, myFunc, 150);\n\n  // 50ms passes\n  Ember.run.throttle(myContext, myFunc, 150);\n\n  // 50ms passes\n  Ember.run.throttle(myContext, myFunc, 150);\n\n  // 150ms passes\n  // myFunc is invoked with context myContext\n  // console logs 'throttle ran.' twice, 150ms apart.\n```",
          "itemtype": "method",
          "name": "throttle",
          "params": [
            {
              "name": "target",
              "description": "target of method to invoke",
              "type": "Object",
              "optional": true
            },
            {
              "name": "method",
              "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
              "type": "Function|String"
            },
            {
              "name": "args*",
              "description": "Optional arguments to pass to the timeout.",
              "type": "Object",
              "optional": true
            },
            {
              "name": "spacing",
              "description": "Number of milliseconds to space out requests.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-metal/lib/run_loop.js",
          "line": 162,
          "description": "Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.",
          "itemtype": "property",
          "name": "queues",
          "type": "Array",
          "default": "['sync', 'actions', 'destroy']",
          "class": "Ember.run",
          "module": "ember-metal",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.0.0-ember-metal",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.0.0",
          "type": "project-version"
        }
      }
    }
  }
}