{
  "data": {
    "id": "ember-1.1.2-Ember.Controller",
    "type": "class",
    "attributes": {
      "name": "Ember.Controller",
      "shortname": "Ember.Controller",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "../packages/ember-runtime/lib/controllers/controller.js",
      "line": 58,
      "extends": "Ember.Object",
      "uses": [
        "Ember.ControllerMixin"
      ],
      "methods": [
        {
          "file": "../packages/container/lib/main.js",
          "line": 44,
          "description": "<html><head></head><body><p>Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 64,
          "description": "<html><head></head><body><p>Set the given value for the given key, at the current level.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Any"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 75,
          "description": "<html><head></head><body><p>Delete the given key</p>\n</body></html>",
          "itemtype": "method",
          "name": "remove",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 85,
          "description": "<html><head></head><body><p>Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 108,
          "description": "<html><head></head><body><p>Iterate and invoke a callback for each local key-value pair.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachLocal",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 213,
          "description": "<html><head></head><body><p>Returns a new child of the current container. These children are configured\nto correctly inherit from the current container.</p>\n</body></html>",
          "itemtype": "method",
          "name": "child",
          "return": {
            "description": "",
            "type": "Container"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 226,
          "description": "<html><head></head><body><p>Sets a key-value pair on the current container. If a parent container,\nhas the same key, once set on a child, the parent and child will diverge\nas expected.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "object",
              "description": "",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "value",
              "description": "",
              "type": "Any"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 240,
          "description": "<html><head></head><body><p>Registers a factory for later injection.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = <span class=\"keyword\">new</span> Container();\n\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;model:user&apos;</span>, Person, {singleton: <span class=\"keyword\">false</span> });\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;fruit:favorite&apos;</span>, Orange);\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;communication:main&apos;</span>, Email, {singleton: <span class=\"keyword\">false</span>});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "register",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "factory",
              "description": "",
              "type": "Function"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 277,
          "description": "<html><head></head><body><p>Unregister a fullName</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;model:user&apos;</span>, User);\n\n<span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;model:user&apos;</span>) instanceof User <span class=\"comment\">//=&gt; true</span>\n\n<span class=\"keyword\">container</span>.unregister(<span class=\"string\">&apos;model:user&apos;</span>)\n<span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;model:user&apos;</span>) === undefined <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unregister",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 302,
          "description": "<html><head></head><body><p>Given a fullName return the corresponding factory.</p>\n<p>By default <code>resolve</code> will retrieve the factory from\nits container&apos;s registry.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"keyword\">container</span>.resolve(<span class=\"string\">&apos;api:twitter&apos;</span>) <span class=\"comment\">// =&gt; Twitter</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally the container can be provided with a custom resolver.\nIf provided, <code>resolve</code> will first provide the custom resolver\nthe oppertunity to resolve the fullName, otherwise it will fallback\nto the registry.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> container = <span class=\"keyword\">new</span> Container();\ncontainer.resolver = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(fullName)</span> </span>{\n  <span class=\"comment\">// lookup via the module system of choice</span>\n};\n\n<span class=\"comment\">// the twitter factory is added to the module system</span>\ncontainer.resolve(<span class=\"string\">&apos;api:twitter&apos;</span>) <span class=\"comment\">// =&gt; Twitter</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "resolve",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "fullName's factory",
            "type": "Function"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 338,
          "description": "<html><head></head><body><p>A hook that can be used to describe how the resolver will\nattempt to find the factory.</p>\n<p>For example, the default Ember <code>.describe</code> returns the full\nclass name (including namespace) where Ember&apos;s resolver expects\nto find the <code>fullName</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "describe",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 352,
          "description": "<html><head></head><body><p>A hook to enable custom fullName normalization behaviour</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized fullName",
            "type": "String"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 363,
          "itemtype": "method",
          "name": "makeToString",
          "params": [
            {
              "name": "factory",
              "description": "",
              "type": "Any"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "toString function",
            "type": "Function"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 374,
          "description": "<html><head></head><body><p>Given a fullName return a corresponding instance.</p>\n<p>The default behaviour is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> container = <span class=\"keyword\">new</span> Container();\ncontainer.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\n<span class=\"keyword\">var</span> twitter = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\n\ntwitter <span class=\"keyword\">instanceof</span> Twitter; <span class=\"comment\">// =&gt; true</span>\n\n<span class=\"comment\">// by default the container will return singletons</span>\ntwitter2 = container.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>);\ntwitter <span class=\"keyword\">instanceof</span> Twitter; <span class=\"comment\">// =&gt; true</span>\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If singletons are not wanted an optional flag can be provided at lookup.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = <span class=\"keyword\">new</span> Container();\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;api:twitter&apos;</span>, Twitter);\n\nvar twitter = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"keyword\">false</span> });\nvar twitter2 = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;api:twitter&apos;</span>, { singleton: <span class=\"keyword\">false</span> });\n\ntwitter === twitter2; <span class=\"comment\">//=&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lookup",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 433,
          "description": "<html><head></head><body><p>Given a fullName return the corresponding factory.</p>\n</body></html>",
          "itemtype": "method",
          "name": "lookupFactory",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Any"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 444,
          "description": "<html><head></head><body><p>Given a fullName check if the container is aware of its factory\nor singleton instance.</p>\n</body></html>",
          "itemtype": "method",
          "name": "has",
          "params": [
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 460,
          "description": "<html><head></head><body><p>Allow registering options for all factories of a type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = <span class=\"keyword\">new</span> Container();\n\n<span class=\"comment\">// if all of type `connection` must not be singletons</span>\n<span class=\"keyword\">container</span>.optionsForType(<span class=\"string\">&apos;connection&apos;</span>, { singleton: <span class=\"keyword\">false</span> });\n\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;connection:twitter&apos;</span>, TwitterConnection);\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;connection:facebook&apos;</span>, FacebookConnection);\n\nvar twitter = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;connection:twitter&apos;</span>);\nvar twitter2 = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;connection:twitter&apos;</span>);\n\ntwitter === twitter2; <span class=\"comment\">// =&gt; false</span>\n\nvar facebook = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;connection:facebook&apos;</span>);\nvar facebook2 = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;connection:facebook&apos;</span>);\n\nfacebook === facebook2; <span class=\"comment\">// =&gt; false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "optionsForType",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 493,
          "itemtype": "method",
          "name": "options",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 502,
          "access": "private",
          "tagname": "Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('router:main', Router);\ncontainer.register('controller:user', UserController);\ncontainer.register('controller:post', PostController);\n\ncontainer.typeInjection('controller', 'router', 'router:main');\n\nvar user = container.lookup('controller:user');\nvar post = container.lookup('controller:post');\n\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
          "itemtype": "method",
          "name": "typeInjection",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 544,
          "description": "<html><head></head><body><p>Defines injection rules.</p>\n<p>These rules are used to inject dependencies onto objects when they\nare instantiated.</p>\n<p>Two forms of injections are possible:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>  * Injecting <span class=\"literal\">one</span> fullName <span class=\"keyword\">on</span> <span class=\"title\">another</span> <span class=\"title\">fullName</span>\n  * Injecting <span class=\"literal\">one</span> fullName <span class=\"keyword\">on</span> <span class=\"title\">a</span> <span class=\"title\">type</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">container</span> = new Container();\n\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;source:main&apos;</span>, Source);\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;model:user&apos;</span>, User);\n<span class=\"keyword\">container</span>.register(<span class=\"string\">&apos;model:post&apos;</span>, Post);\n\n<span class=\"comment\">// injecting one fullName on another fullName</span>\n<span class=\"comment\">// eg. each user model gets a post model</span>\n<span class=\"keyword\">container</span>.injection(<span class=\"string\">&apos;model:user&apos;</span>, <span class=\"string\">&apos;post&apos;</span>, <span class=\"string\">&apos;model:post&apos;</span>);\n\n<span class=\"comment\">// injecting one fullName on another type</span>\n<span class=\"keyword\">container</span>.injection(<span class=\"string\">&apos;model&apos;</span>, <span class=\"string\">&apos;source&apos;</span>, <span class=\"string\">&apos;source:main&apos;</span>);\n\nvar user = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;model:user&apos;</span>);\nvar post = <span class=\"keyword\">container</span>.lookup(<span class=\"string\">&apos;model:post&apos;</span>);\n\nuser.<span class=\"keyword\">source</span> instanceof Source; <span class=\"comment\">//=&gt; true</span>\npost.<span class=\"keyword\">source</span> instanceof Source; <span class=\"comment\">//=&gt; true</span>\n\nuser.post instanceof Post; <span class=\"comment\">//=&gt; true</span>\n\n<span class=\"comment\">// and both models share the same source</span>\nuser.<span class=\"keyword\">source</span> === post.<span class=\"keyword\">source</span>; <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "injection",
          "params": [
            {
              "name": "factoryName",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 599,
          "access": "private",
          "tagname": "Used only via `factoryInjection`.\n\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\n\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.registerFactory('model:user', User);\ncontainer.register('store:main', SomeStore);\n\ncontainer.factoryTypeInjection('model', 'store', 'store:main');\n\nvar store = container.lookup('store:main');\nvar UserFactory = container.lookupFactory('model:user');\n\nUserFactory.store instanceof SomeStore; //=> true\n```",
          "itemtype": "method",
          "name": "factoryTypeInjection",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "fullName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 636,
          "description": "<html><head></head><body><p>Defines factory injection rules.</p>\n<p>Similar to regular injection rules, but are run against factories, via\n<code>Container#lookupFactory</code>.</p>\n<p>These rules are used to inject objects onto factories when they\nare looked up.</p>\n<p>Two forms of injections are possible:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>  * Injecting <span class=\"literal\">one</span> fullName <span class=\"keyword\">on</span> <span class=\"title\">another</span> <span class=\"title\">fullName</span>\n  * Injecting <span class=\"literal\">one</span> fullName <span class=\"keyword\">on</span> <span class=\"title\">a</span> <span class=\"title\">type</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td>\n              <td class=\"code\"><pre>var container = <span class=\"keyword\">new</span> <span class=\"constructor\">Container()</span>;\n\ncontainer.register(&apos;store:main&apos;, Store);\ncontainer.register(&apos;store:secondary&apos;, OtherStore);\ncontainer.register(&apos;model:user&apos;, User);\ncontainer.register(&apos;model:post&apos;, Post);\n\n<span class=\"comment\">// injecting one fullName on another type</span>\ncontainer.factory<span class=\"constructor\">Injection(&apos;<span class=\"params\">model</span>&apos;, &apos;<span class=\"params\">store</span>&apos;, &apos;<span class=\"params\">store</span>:<span class=\"params\">main</span>&apos;)</span>;\n\n<span class=\"comment\">// injecting one fullName on another fullName</span>\ncontainer.factory<span class=\"constructor\">Injection(&apos;<span class=\"params\">model</span>:<span class=\"params\">post</span>&apos;, &apos;<span class=\"params\">secondaryStore</span>&apos;, &apos;<span class=\"params\">store</span>:<span class=\"params\">secondary</span>&apos;)</span>;\n\nvar UserFactory = container.lookup<span class=\"constructor\">Factory(&apos;<span class=\"params\">model</span>:<span class=\"params\">user</span>&apos;)</span>;\nvar PostFactory = container.lookup<span class=\"constructor\">Factory(&apos;<span class=\"params\">model</span>:<span class=\"params\">post</span>&apos;)</span>;\nvar store = container.lookup(&apos;store:main&apos;);\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">UserFactory</span>.</span></span>store instanceof Store; <span class=\"comment\">//=&gt; true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">UserFactory</span>.</span></span>secondaryStore instanceof OtherStore; <span class=\"comment\">//=&gt; false</span>\n\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">PostFactory</span>.</span></span>store instanceof Store; <span class=\"comment\">//=&gt; true</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">PostFactory</span>.</span></span>secondaryStore instanceof OtherStore; <span class=\"comment\">//=&gt; true</span>\n\n<span class=\"comment\">// and both models share the same source instance</span>\n<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">UserFactory</span>.</span></span>store<span class=\"operator\"> === </span><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">PostFactory</span>.</span></span>store; <span class=\"comment\">//=&gt; true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "factoryInjection",
          "params": [
            {
              "name": "factoryName",
              "description": "",
              "type": "String"
            },
            {
              "name": "property",
              "description": "",
              "type": "String"
            },
            {
              "name": "injectionName",
              "description": "",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 695,
          "description": "<html><head></head><body><p>A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 718,
          "itemtype": "method",
          "name": "reset",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 75,
          "itemtype": "method",
          "name": "controllerFor",
          "see": [
            "{Ember.Route#controllerFor}"
          ],
          "deprecated": true,
          "deprecationMessage": "Use `needs` instead",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 9,
          "description": "<html><head></head><body><p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>  aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPosts</span>&apos;)</span>;\n  aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPosts</span>.<span class=\"params\">recentEntries</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>  aController.transition<span class=\"constructor\">ToRoute(&apos;<span class=\"params\">blogPost</span>&apos;, <span class=\"params\">aPost</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"selector-tag\">this</span><span class=\"selector-class\">.resource</span>(<span class=\"string\">&apos;blogPost&apos;</span>, {<span class=\"attribute\">path</span>:<span class=\"string\">&apos;:blogPostId&apos;</span>}, <span class=\"selector-tag\">function</span>(){\n    <span class=\"selector-tag\">this</span><span class=\"selector-class\">.resource</span>(<span class=\"string\">&apos;blogComment&apos;</span>, {<span class=\"attribute\">path</span>: <span class=\"string\">&apos;:blogCommentId&apos;</span>});\n  });\n\n  <span class=\"selector-tag\">aController</span><span class=\"selector-class\">.transitionToRoute</span>(<span class=\"string\">&apos;blogComment&apos;</span>, aPost, aComment);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See also &apos;replaceRoute&apos;.</p>\n</body></html>",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) to be used while transitioning\nto the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "transitionToRoute",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 53,
          "deprecated": true,
          "itemtype": "method",
          "name": "transitionTo",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 63,
          "description": "<html><head></head><body><p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one. \nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>  aController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPosts</span>&apos;)</span>;\n  aController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPosts</span>.<span class=\"params\">recentEntries</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>  aController.replace<span class=\"constructor\">Route(&apos;<span class=\"params\">blogPost</span>&apos;, <span class=\"params\">aPost</span>)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>  <span class=\"selector-tag\">this</span><span class=\"selector-class\">.resource</span>(<span class=\"string\">&apos;blogPost&apos;</span>, {<span class=\"attribute\">path</span>:<span class=\"string\">&apos;:blogPostId&apos;</span>}, <span class=\"selector-tag\">function</span>(){\n    <span class=\"selector-tag\">this</span><span class=\"selector-class\">.resource</span>(<span class=\"string\">&apos;blogComment&apos;</span>, {<span class=\"attribute\">path</span>: <span class=\"string\">&apos;:blogCommentId&apos;</span>});\n  });\n\n  <span class=\"selector-tag\">aController</span><span class=\"selector-class\">.replaceRoute</span>(<span class=\"string\">&apos;blogComment&apos;</span>, aPost, aComment);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "params": [
            {
              "name": "name",
              "description": "the name of the route",
              "type": "String"
            },
            {
              "name": "models",
              "description": "the model(s) to be used while transitioning\nto the route.",
              "type": "...Object"
            }
          ],
          "itemtype": "method",
          "name": "replaceRoute",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-routing/lib/ext/controller.js",
          "line": 106,
          "deprecated": true,
          "itemtype": "method",
          "name": "replaceWith",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-routing",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 178,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"keyword\">init</span>: function() {\n    <span class=\"keyword\">this</span>._super();\n    alert(<span class=\"string\">&apos;Name is &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\n<span class=\"keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"string\">&quot;Steve&quot;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super()</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 299,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "Ember.Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 321,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 328,
          "access": "private",
          "tagname": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 348,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Em</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend<span class=\"literal\">()</span>\nperson = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>\nperson.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;App.Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>Student = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend<span class=\"literal\">()</span>\nstudent = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Student</span>.</span></span>create<span class=\"literal\">()</span>\nstudent.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span> <span class=\"comment\">//=&gt; &quot;&lt;(subclass of App.Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.Teacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>extend({\n  toStringExtension: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    return this.get(&apos;fullName&apos;);\n  }\n});\nteacher = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Teacher</span>.</span></span>create<span class=\"literal\">()</span>\nteacher.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>; <span class=\"comment\">//=&gt; &quot;&lt;App.Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 409,
          "description": "<html><head></head><body><p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>App.<span class=\"keyword\">Person</span> = Ember.Object.extend({\n  <span class=\"keyword\">say</span>: function(<span class=\"keyword\">thing</span>) {\n    alert(<span class=\"keyword\">thing</span>);\n   }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&apos;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>App.PersonView = Ember.<span class=\"keyword\">View</span>.extend({\n  tagName: <span class=\"string\">&apos;li&apos;</span>,\n  classNameBindings: [<span class=\"string\">&apos;isAdministrator&apos;</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>);\n    alert(name + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    <span class=\"keyword\">this</span>._super(thing + <span class=\"string\">&quot;, sir!&quot;</span>);\n  },\n  march: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; marches for &apos;</span> + numberOfHours + <span class=\"string\">&apos; hours.&apos;</span>)\n  }\n});\n\n<span class=\"keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"string\">&quot;Yehuda Katz&quot;</span>\n});\n\nyehuda.say(<span class=\"string\">&quot;Yes&quot;</span>);  <span class=\"comment\">// alerts &quot;Yehuda Katz says: Yes, sir!&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Ember.Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  say: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; says: &apos;</span> + thing);\n  }\n});\n\nApp.SingingMixin = Ember.Mixin.create({\n  sing: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(thing)</span></span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; sings: la la la &apos;</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    alert(<span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>) + <span class=\"string\">&apos; dances: tap tap tap tap &apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "extend",
          "static": 1,
          "params": [
            {
              "name": "mixins",
              "description": "One or more Ember.Mixin classes",
              "type": "Ember.Mixin",
              "optional": true,
              "multiple": true
            },
            {
              "name": "arguments",
              "description": "Object containing values to use within the new class",
              "type": "Object",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 511,
          "description": "<html><head></head><body><p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createWithMixins",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 525,
          "description": "<html><head></head><body><p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>App.Person = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>extend({\n  helloWorld: <span class=\"keyword\">function</span><span class=\"literal\">()</span> {\n    alert(<span class=\"string\">&quot;Hi, my name is &quot;</span> + this.get(&apos;name&apos;));\n  }\n});\n\nvar tom = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create({\n  name: &apos;Tom Dale&apos;\n});\n\ntom.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts &quot;Hi, my name is Tom Dale&quot;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>var noName = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">App</span>.</span><span class=\"module\"><span class=\"identifier\">Person</span>.</span></span>create<span class=\"literal\">()</span>;\nnoName.hello<span class=\"constructor\">World()</span>; <span class=\"comment\">// alerts undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "static": 1,
          "params": [
            {
              "name": "arguments",
              "description": "",
              "optional": true,
              "multiple": true
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 568,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s prototype with additional\n    properties and functions:</p>\n<p><code>javascript\n    MyObject = Ember.Object.extend({\n      name: &apos;an object&apos;\n    });\no = MyObject.create();\n    o.get(&apos;name&apos;); // &apos;an object&apos;\nMyObject.reopen({\n      say: function(msg){\n        console.log(msg);\n      }\n    })\no2 = MyObject.create();\n    o2.say(&quot;hello&quot;); // logs &quot;hello&quot;\no.say(&quot;goodbye&quot;); // logs &quot;goodbye&quot;</code>\nTo add functions and properties to the constructor itself,\n    see <code>reopenClass</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopen",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 604,
          "description": "<html><head></head><body><p>Augments a constructor&apos;s own properties and functions:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>MyObject = Ember.<span class=\"keyword\">Object</span>.extend({\n  <span class=\"type\">name</span>: <span class=\"string\">&apos;an object&apos;</span>\n});\n\n\nMyObject.reopenClass({\n  canBuild: <span class=\"keyword\">false</span>\n});\n\nMyObject.canBuild; // <span class=\"keyword\">false</span>\no = MyObject.<span class=\"keyword\">create</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  name : <span class=\"string\">&quot;&quot;</span>,\n  sayHello : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n    alert(<span class=\"string\">&quot;Hello. My name is &quot;</span> + <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;name&apos;</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"string\">&quot;Homo sapiens&quot;</span>,\n  createPerson: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(newPersonsName)</span></span>{\n    <span class=\"keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"string\">&quot;Tom Dale&quot;</span>\n});\n<span class=\"keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"string\">&quot;Yehuda Katz&quot;</span>);\n\ntom.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Tom Dale&quot;</span>\nyehuda.sayHello(); <span class=\"comment\">// &quot;Hello. My name is Yehuda Katz&quot;</span>\nalert(App.Person.species); <span class=\"comment\">// &quot;Homo sapiens&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&apos;s prototype\nsee <code>reopen</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "reopenClass",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 679,
          "description": "<html><head></head><body><p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">person</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">var</span> personId = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;personId&apos;</span>);\n  <span class=\"keyword\">return</span> App.Person.create({ <span class=\"attribute\">id:</span><span class=\"string\"> personId</span> });\n}.property().meta({ <span class=\"attribute\">type</span>: App.Person })</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Once you&apos;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">MyClass</span>.</span></span>meta<span class=\"constructor\">ForProperty(&apos;<span class=\"params\">person</span>&apos;)</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This will return the original hash that was passed to <code>meta()</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "metaForProperty",
          "params": [
            {
              "name": "key",
              "description": "property name",
              "type": "String"
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 713,
          "description": "<html><head></head><body><p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachComputedProperty",
          "params": [
            {
              "name": "callback",
              "description": "",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 78,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getEach(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>).compact().join(<span class=\"string\">&apos; &apos;</span>);\n}.property(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>)</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 120,
          "description": "<html><head></head><body><p>To get multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);  <span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Hash"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 142,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;Charles&apos;</span>).<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Jolley&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 195,
          "description": "<html><head></head><body><p>To set multiple properties at once, call <code>setProperties</code>\nwith a Hash:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 211,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 230,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 248,
          "description": "<html><head></head><body><p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 271,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 294,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 312,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(sender, key, value, rev)</span> </span>{ };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>fooDidChange: <span class=\"keyword\">function</span>(sender,<span class=\"built_in\"> key</span>, <span class=\"keyword\">value</span>, <span class=\"keyword\">context</span>, rev) { };</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "self",
            "type": "Ember.Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 364,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observer",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke.",
              "type": "String|Function"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 379,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 393,
          "deprecated": true,
          "itemtype": "method",
          "name": "getPath",
          "params": [
            {
              "name": "path",
              "description": "The property path to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 404,
          "deprecated": true,
          "itemtype": "method",
          "name": "setPath",
          "params": [
            {
              "name": "path",
              "description": "The path to the property that will be set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 416,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 433,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 453,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 473,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of it&apos;s\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "../packages/ember-runtime/lib/mixins/observable.js",
          "line": 490,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/container/lib/main.js",
          "line": 27,
          "itemtype": "property",
          "name": "parent",
          "type": "InheritingDict",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 35,
          "description": "<html><head></head><body><p>Object used to store the current nodes data.</p>\n</body></html>",
          "itemtype": "property",
          "name": "dict",
          "type": "Object",
          "default": "Object",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 151,
          "itemtype": "property",
          "name": "parent",
          "type": "Container",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 158,
          "itemtype": "property",
          "name": "children",
          "type": "Array",
          "default": "[]",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 165,
          "itemtype": "property",
          "name": "resolver",
          "type": "function",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 171,
          "itemtype": "property",
          "name": "registry",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 177,
          "itemtype": "property",
          "name": "cache",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 183,
          "itemtype": "property",
          "name": "typeInjections",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 189,
          "itemtype": "property",
          "name": "injections",
          "type": "Object",
          "default": "{}",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 196,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_options",
          "type": "InheritingDict",
          "default": "null",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/container/lib/main.js",
          "line": 205,
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "_typeOptions",
          "type": "InheritingDict",
          "class": "Ember.Controller",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 31,
          "description": "<html><head></head><body><p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>App.CommentsController = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Ember</span>.</span><span class=\"module\"><span class=\"identifier\">ArrayController</span>.</span></span>extend({\n  needs: <span class=\"literal\">[&apos;<span class=\"identifier\">post</span>&apos;]</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The application&apos;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>this.get(&apos;controllers.post&apos;); //<span class=\"built_in\"> instance </span>of App.PostController</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is only available for singleton controllers.</p>\n</body></html>",
          "itemtype": "property",
          "name": "needs",
          "type": "Array",
          "default": "[]",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-application/lib/ext/controller.js",
          "line": 85,
          "description": "<html><head></head><body><p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"string\">&apos;post&apos;</span>],\n  postTitle: function(){\n    <span class=\"keyword\">var</span> currentPost = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;controllers.post&apos;</span>); <span class=\"comment\">// instance of App.PostController</span>\n    <span class=\"keyword\">return</span> currentPost.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;title&apos;</span>);\n  }.property(<span class=\"string\">&apos;controllers.post.title&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "see": [
            "{Ember.ControllerMixin#needs}"
          ],
          "itemtype": "property",
          "name": "controllers",
          "type": "Object",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-application",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/controllers/controller.js",
          "line": 23,
          "description": "<html><head></head><body><p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&apos;s controller&apos;s <code>target</code>.</p>\n<p>By default, a controller&apos;s <code>target</code> is set to the router after it is\ninstantiated by <code>Ember.Application#initialize</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "target",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.ControllerMixin"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 209,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">View</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  classNames: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\n<span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span> = <span class=\"symbol\">App</span>.<span class=\"symbol\">BarView</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  classNames: [<span class=\"string\">&apos;foo&apos;</span>],\n});\n\nvar fooBarView = <span class=\"symbol\">App</span>.<span class=\"symbol\">FooBarView</span>.create();\nfooBarView.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBarView.get(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  classNames: [<span class=\"string\">&apos;baz&apos;</span>]\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">view</span> = App.FooBarView.<span class=\"keyword\">create</span>({\n  classNames: <span class=\"string\">&apos;baz&apos;</span>\n})\n<span class=\"keyword\">view</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;classNames&apos;</span>); // [<span class=\"string\">&apos;ember-view&apos;</span>, <span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell to Ember that mix\nthe content of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 277,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        },
        {
          "file": "../packages/ember-runtime/lib/system/core_object.js",
          "line": 288,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "class": "Ember.Controller",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "inherited": true,
          "inheritedFrom": "Ember.CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-1.1.2-Ember.Object",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.1.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.1.2",
          "type": "project-version"
        }
      }
    }
  }
}