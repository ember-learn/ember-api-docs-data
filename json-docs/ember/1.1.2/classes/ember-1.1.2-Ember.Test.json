{
  "data": {
    "id": "ember-1.1.2-Ember.Test",
    "type": "class",
    "attributes": {
      "name": "Ember.Test",
      "shortname": "Ember.Test",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-testing",
      "namespace": "Ember",
      "file": "../packages/ember-testing/lib/test.js",
      "line": 10,
      "description": "This is a container for an assortment of testing related functionality:\n\n* Choose your default test adapter (for your framework of choice).\n* Register/Unregister additional test helpers.\n* Setup callbacks to be fired when the test helpers are injected into\n  your application.",
      "methods": [
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 185,
          "description": "Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.\n\nExample:\n\n```\nvisit('posts/index').then(function() {\n  // assert something\n});\n```",
          "itemtype": "method",
          "name": "visit",
          "params": [
            {
              "name": "url",
              "description": "the name of the route",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 204,
          "description": "Clicks an element and triggers any actions triggered by the element's `click`\nevent.\n\nExample:\n\n```\nclick('.some-jQuery-selector').then(function() {\n // assert something\n});\n```",
          "itemtype": "method",
          "name": "click",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 222,
          "description": "Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n\nExample:\n\n```\nkeyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n // assert something\n});\n```",
          "itemtype": "method",
          "name": "keyEvent",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector for finding element on the DOM",
              "type": "String"
            },
            {
              "name": "the",
              "description": "type of key event, e.g. `keypress`, `keydown`, `keyup`",
              "type": "String"
            },
            {
              "name": "the",
              "description": "keyCode of the simulated key event",
              "type": "Number"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 241,
          "description": "Fills in an input element with some text.\n\nExample:\n\n```\nfillIn('#email', 'you@example.com').then(function() {\n  // assert something\n});\n```",
          "itemtype": "method",
          "name": "fillIn",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector finding an input element on the DOM\nto fill text with",
              "type": "String"
            },
            {
              "name": "text",
              "description": "text to place inside the input element",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 260,
          "description": "Finds an element in the context of the app's container element. A simple alias\nfor `app.$(selector)`.\n\nExample:\n\n```\nvar $el = find('.my-selector);\n```",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "selector",
              "description": "jQuery string selector for element lookup",
              "type": "String"
            }
          ],
          "return": {
            "description": "jQuery object representing the results of the query",
            "type": "Object"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 276,
          "description": "Like `find`, but throws an error if the element selector returns no results\nExample:\n```\n var $el = findWithAssert('.doesnt-exist'); // throws error\n ```",
          "itemtype": "method",
          "name": "findWithAssert",
          "params": [
            {
              "name": "selector",
              "description": "jQuery selector string for finding an element within\n the DOM",
              "type": "String"
            }
          ],
          "return": {
            "description": "jQuery object representing the results of the query",
            "type": "Object"
          },
          "throws": [
            "{Error} throws error if jQuery object returned has a length of 0"
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/helpers.js",
          "line": 294,
          "description": "Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.\n\nThis is most often used as the return value for the helper functions (see 'click',\n'fillIn','visit',etc).\n\nExample:\n\n```\nEmber.Test.registerHelper('loginUser', function(app, username, password) {\n  visit('secured/path/here')\n  .fillIn('#username', username)\n  .fillIn('#password', username)\n  .click('.submit')\n\n  return wait(app);\n});",
          "itemtype": "method",
          "name": "wait",
          "params": [
            {
              "name": "value",
              "description": "The value to be returned.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "\n```",
            "type": "RSVP.Promise"
          },
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/support.js",
          "line": 8,
          "description": "This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "testCheckboxClick",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 23,
          "description": "`registerHelper` is used to register a test helper that will be injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always be called with the current Application as\nthe first parameter.\n\nFor example:\n```javascript\n  Ember.Test.registerHelper('boot', function(app) {\n    Ember.run(app, app.deferReadiness);\n  });\n```\n\nThis helper can later be called without arguments because it will be\ncalled with `app` as the first parameter.\n\n```javascript\n  App = Ember.Application.create();\n  App.injectTestHelpers();\n  boot();\n```\n\nWhenever you register a helper that performs async operations, make sure\nyou `return wait();` at the end of the helper.\n\nIf an async helper also needs to return a value, pass it to the `wait`\nhelper as a first argument:\n`return wait(val);`",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "registerHelper",
          "params": [
            {
              "name": "name",
              "description": "The name of the helper method to add.",
              "type": "String"
            },
            {
              "name": "helperMethod",
              "description": "",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 61,
          "description": "Remove a previously added helper method.\n\nExample:\n```\nEmber.Test.unregisterHelper('wait');\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "unregisterHelper",
          "params": [
            {
              "name": "name",
              "description": "The helper to remove.",
              "type": "String"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 81,
          "description": "Used to register callbacks to be fired whenever `App.injectTestHelpers`\nis called.\n\nThe callback will receive the current application as an argument.\n\nExample:\n```\nEmber.Test.onInjectHelpers(function() {\n  Ember.$(document).ajaxStart(function() {\n    Test.pendingAjaxRequests++;\n  });\n\n  Ember.$(document).ajaxStop(function() {\n    Test.pendingAjaxRequests--;\n  });\n});\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "onInjectHelpers",
          "params": [
            {
              "name": "callback",
              "description": "The function to be called.",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 108,
          "description": "This returns a thenable tailored for testing.  It catches failed\n`onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\ncallback in the last chained then.\n\nThis method should be returned by async helpers such as `wait`.",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "promise",
          "params": [
            {
              "name": "resolver",
              "description": "The function used to resolve the promise.",
              "type": "Function"
            }
          ],
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 183,
          "description": "This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router's\nlocation to 'none', so that the window's location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework).\n\nExample:\n  ```\n  App.setupForTesting();\n  ```",
          "itemtype": "method",
          "name": "setupForTesting",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 212,
          "description": "This injects the test helpers into the window's scope. If a function of the\nsame name has already been defined it will be cached (so that it can be reset\nif the helper is removed with `unregisterHelper` or `removeTestHelpers`).\n\n   Any callbacks registered with `onInjectHelpers` will be called once the\n   helpers have been injected.\n\n  Example:\n  ```\n  App.injectTestHelpers();\n  ```",
          "itemtype": "method",
          "name": "injectTestHelpers",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 239,
          "description": "This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.\n\nExample:\n```\nApp.removeTestHelpers();\n```",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "removeTestHelpers",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 146,
          "description": "Used to allow ember-testing to communicate with a specific testing\nframework.\n\nYou can manually set it before calling `App.setupForTesting()`.\n\nExample:\n```\nEmber.Test.adapter = MyCustomAdapter.create()\n```\n\nIf you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "adapter",
          "type": "{Class} The adapter to be used.",
          "default": "Ember.Test.QUnitAdapter",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        },
        {
          "file": "../packages/ember-testing/lib/test.js",
          "line": 176,
          "itemtype": "property",
          "name": "testHelpers",
          "type": "{Object}",
          "default": "{}",
          "class": "Ember.Test",
          "module": "ember",
          "submodule": "ember-testing",
          "namespace": "Ember"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-1.1.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-1.1.2",
          "type": "project-version"
        }
      }
    }
  }
}