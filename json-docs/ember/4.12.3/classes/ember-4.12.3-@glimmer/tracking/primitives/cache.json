{
  "data": {
    "id": "ember-4.12.3-@glimmer/tracking/primitives/cache",
    "type": "class",
    "attributes": {
      "name": "@glimmer/tracking/primitives/cache",
      "shortname": "@glimmer/tracking/primitives/cache",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@glimmer/tracking/primitives/cache",
      "namespace": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 14,
          "description": "Receives a function, and returns a wrapped version of it that memoizes based on\n_autotracking_. The function will only rerun whenever any tracked values used\nwithin it have changed. Otherwise, it will return the previous value.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue } from '@glimmer/tracking/primitives/cache';\n\nclass State {\n  @tracked value;\n}\n\nlet state = new State();\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  // consume the state. Now, `counter` will\n  // only rerun if `state.value` changes.\n  state.value;\n\n  return ++computeCount;\n});\n\ngetValue(counter); // 1\n\n// returns the same value because no tracked state has changed\ngetValue(counter); // 1\n\nstate.value = 'foo';\n\n// reruns because a tracked value used in the function has changed,\n// incermenting the counter\ngetValue(counter); // 2\n```",
          "itemtype": "method",
          "name": "createCache",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 56,
          "description": "Gets the value of a cache created with `createCache`.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue } from '@glimmer/tracking/primitives/cache';\n\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  return ++computeCount;\n});\n\ngetValue(counter); // 1\n```",
          "itemtype": "method",
          "name": "getValue",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        },
        {
          "file": "packages/@ember/-internals/metal/lib/cache.ts",
          "line": 78,
          "description": "Can be used to check if a memoized function is _constant_. If no tracked state\nwas used while running a memoized function, it will never rerun, because nothing\ncan invalidate its result. `isConst` can be used to determine if a memoized\nfunction is constant or not, in order to optimize code surrounding that\nfunction.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue, isConst } from '@glimmer/tracking/primitives/cache';\n\nclass State {\n  @tracked value;\n}\n\nlet state = new State();\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  // consume the state\n  state.value;\n\n  return computeCount++;\n});\n\nlet constCounter = createCache(() => {\n  return computeCount++;\n});\n\ngetValue(counter);\ngetValue(constCounter);\n\nisConst(counter); // false\nisConst(constCounter); // true\n```\n\nIf called on a cache that hasn't been accessed yet, it will throw an\nerror. This is because there's no way to know if the function will be constant\nor not yet, and so this helps prevent missing an optimization opportunity on\naccident.",
          "itemtype": "method",
          "name": "isConst",
          "static": 1,
          "access": "public",
          "tagname": "",
          "class": "@glimmer/tracking/primitives/cache",
          "module": "@glimmer/tracking/primitives/cache"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.12.3-@glimmer/tracking/primitives/cache",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.12.3",
          "type": "project-version"
        }
      }
    }
  }
}