{
  "data": {
    "id": "ember-4.12.3-Ember.Templates.helpers",
    "type": "class",
    "attributes": {
      "name": "Ember.Templates.helpers",
      "shortname": "Ember.Templates.helpers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 86,
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/input.ts",
          "line": 45,
          "description": "<html><head></head><body><p>See <a href=\"/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input\">Ember.Templates.components.Input</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "input",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
          "line": 254,
          "description": "<html><head></head><body><p>See <a href=\"/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo\">Ember.Templates.components.LinkTo</a>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "link-to",
          "see": [
            "{Ember.Templates.components.LinkTo}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/routing"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
          "line": 122,
          "description": "<html><head></head><body><p>See Ember.Templates.components.Textarea.</p>\n</body></html>",
          "itemtype": "method",
          "name": "textarea",
          "see": [
            "{Ember.Templates.components.Textarea}"
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "@ember/component"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/action.ts",
          "line": 18,
          "description": "<html><head></head><body><p>The <code>{{action}}</code> helper provides a way to pass triggers for behavior (usually\njust a function) between components, and into components from controllers.</p>\n<h3 id=\"passing-functions-with-the-action-helper\">Passing functions with the action helper</h3>\n<p>There are three contexts an action helper can be used in. The first two\ncontexts to discuss are attribute context, and Handlebars value context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"comment\">{{! Examples of Handlebars value context }}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">input</span></span> <span class=\"attr\">on-input</span>=(<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;save&quot;</span>)}}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> (<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;refreshData&quot;</span>) andAnotherParam}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In these contexts,\nthe helper is called a &quot;closure action&quot; helper. Its behavior is simple:\nIf passed a function name, read that function off the <code>actions</code> property\nof the current context. Once that function is read, or immediately if a function was\npassed, create a closure over that function and any arguments.\nThe resulting value of an action helper used this way is simply a function.</p>\n<p>For example, in the attribute context:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! An example of attribute context }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The resulting template render logic would be:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&apos;div&apos;</span>);\n<span class=\"keyword\">var</span> actionFunction = (<span class=\"keyword\">function</span>(<span class=\"params\">context</span>){\n  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> context.<span class=\"property\">actions</span>.<span class=\"property\">save</span>.<span class=\"title function_\">apply</span>(context, <span class=\"variable language_\">arguments</span>);\n  };\n})(context);\ndiv.<span class=\"property\">onclick</span> = actionFunction;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Thus when the div is clicked, the action on that context is called.\nBecause the <code>actionFunction</code> is just a function, closure actions can be\npassed between components and still execute in the correct context.</p>\n<p>Here is an example action handler on a component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span>\n  save() {\n    <span class=\"keyword\">this</span>.model.save();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Actions are always looked up on the <code>actions</code> property of the current context.\nThis avoids collisions in the naming of common actions, such as <code>destroy</code>.\nTwo options can be passed to the <code>action</code> helper when it is used in this way.</p>\n<ul>\n<li><code>target=someProperty</code> will look to <code>someProperty</code> instead of the current\ncontext for the <code>actions</code> hash. This can be useful when targeting a\nservice for actions.</li>\n<li><code>value=&quot;target.value&quot;</code> will read the path <code>target.value</code> off the first\nargument to the action when it is called and rewrite the first argument\nto be that value. This is useful when attaching actions to event listeners.</li>\n</ul>\n<h3 id=\"invoking-an-action\">Invoking an action</h3>\n<p>Closure actions curry both their scope and any arguments. When invoked, any\nadditional arguments are added to the already curried list.\nActions are presented in JavaScript as callbacks, and are\ninvoked like any other JavaScript function.</p>\n<p>For example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">name.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span>\n  setName(model, name) {\n    model.set(&apos;name&apos;, name);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">name.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">input</span></span> <span class=\"attr\">on-input</span>=(<span class=\"name\"><span class=\"built_in\">action</span></span> (<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&apos;setName&apos;</span> @model) <span class=\"attr\">value</span>=<span class=\"string\">&quot;target.value&quot;</span>)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The first argument (<code>@model</code>) was curried over, and the run-time argument (<code>event</code>)\nbecomes a second argument. Action calls can be nested this way because each simply\nreturns a function. Any function can be passed to the <code>{{action}}</code> helper, including\nother actions.</p>\n<p>Actions invoked with <code>sendAction</code> have the same currying behavior as demonstrated\nwith <code>on-input</code> above. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">input.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span>\n  setName(model, name) {\n    model.set(&apos;name&apos;, name);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyInput</span> @<span class=\"attr\">submit</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&apos;setName&apos;</span> @model}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">my-<span class=\"built_in\">input</span></span> <span class=\"attr\">submit</span>=(<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&apos;setName&apos;</span> @model)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Component</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">click</span>(<span class=\"params\"></span>) {\n    <span class=\"comment\">// Note that model is not passed, it was curried in the template</span>\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">submit</span>(<span class=\"string\">&apos;bob&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"attaching-actions-to-dom-elements\">Attaching actions to DOM elements</h3>\n<p>The third context of the <code>{{action}}</code> helper can be called &quot;element space&quot;.\nFor example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! An example of element space }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;save&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Used this way, the <code>{{action}}</code> helper provides a useful shortcut for\nregistering an HTML element in a template for a single DOM event and\nforwarding that interaction to the template&apos;s context (controller or component).\nIf the context of a template is a controller, actions used this way will\nbubble to routes when the controller does not implement the specified action.\nOnce an action hits a route, it will bubble through the route hierarchy.</p>\n<h3 id=\"event-propagation\">Event Propagation</h3>\n<p><code>{{action}}</code> helpers called in element space can control event bubbling. Note\nthat the closure style actions cannot.</p>\n<p>Events triggered through the action helper will automatically have\n<code>.preventDefault()</code> called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;sayHello&quot;</span> <span class=\"attr\">preventDefault</span>=<span class=\"literal\">false</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&apos;edit&apos;</span> post <span class=\"attr\">bubbles</span>=<span class=\"literal\">false</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>Edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To disable bubbling with closure style actions you must create your own\nwrapper helper that makes use of <code>event.stopPropagation()</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">disable-bubbling</span> (<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;sayHello&quot;</span>)}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">bubbling.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { helper } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component/helper&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">disableBubbling</span>(<span class=\"params\">[action]</span>) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) {\n    event.<span class=\"title function_\">stopPropagation</span>();\n    <span class=\"keyword\">return</span> <span class=\"title function_\">action</span>(event);\n  };\n}\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">helper</span>(disableBubbling);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See\n<a href=\"/ember/release/classes/Component\">&quot;Responding to Browser Events&quot;</a>\nin the documentation for <code>Component</code> for more information.</p>\n<h3 id=\"specifying-dom-event-type\">Specifying DOM event type</h3>\n<p><code>{{action}}</code> helpers called in element space can specify an event type.\nBy default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can\nsupply an <code>on</code> option to the helper to specify a different DOM event name:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"attr\">on</span>=<span class=\"string\">&quot;doubleClick&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"/ember/release/classes/Component\">&quot;Event Names&quot;</a> for a list of\nacceptable DOM event names.</p>\n<h3 id=\"specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3>\n<p><code>{{action}}</code> helpers called in element space can specify modifier keys.\nBy default the <code>{{action}}</code> helper will ignore click events with pressed modifier\nkeys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"attr\">allowedKeys</span>=<span class=\"string\">&quot;alt&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This way the action will fire when clicking with the alt key pressed down.\nAlternatively, supply &quot;any&quot; to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"attr\">allowedKeys</span>=<span class=\"string\">&quot;any&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  click me with any key pressed\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-a-target\">Specifying a Target</h3>\n<p>A <code>target</code> option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">action</span></span> <span class=\"string\">&quot;anActionName&quot;</span> <span class=\"attr\">target</span>=someService}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  click me\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Controller</span> from &apos;<span class=\"meta\">@ember</span>/controller&apos;;\n<span class=\"keyword\">import</span> { service } from &apos;<span class=\"meta\">@ember</span>/service&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>{\n  <span class=\"meta\">@service</span> someService;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "action",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/component.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>{{component}}</code> helper lets you add instances of <code>Component</code> to a\ntemplate. See <a href=\"/ember/release/classes/Component\">Component</a> for\nadditional information on how a <code>Component</code> functions.\n<code>{{component}}</code>&apos;s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges. This helper has three modes: inline, block, and nested.</p>\n<h3 id=\"inline-form\">Inline Form</h3>\n<p>Given the following template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">component</span></span> this.infographicComponentName}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the following application code:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Controller</span> from &apos;<span class=\"meta\">@ember</span>/controller&apos;;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@glimmer</span>/tracking&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>{\n  <span class=\"meta\">@tracked</span> isMarketOpen = &apos;live-updating-chart&apos;\n\n  get infographicComponentName() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isMarketOpen ? &apos;live-updating-chart&apos; : &apos;market-close-summary&apos;;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is\n<code>true</code>, and the <code>market-close-summary</code> component will be appended when\n<code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;LiveUpdatingChart /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">live-updating-chart</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"block-form\">Block Form</h3>\n<p>Using the block form of this helper is similar to using the block form\nof a component. Given the following application template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">component</span></span> this.infographicComponentName}}</span><span class=\"language-xml\">\n  Last update: </span><span class=\"template-variable\">{{<span class=\"name\">this.lastUpdateTimestamp</span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">component</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The following controller code:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/controllers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Controller</span> from &apos;<span class=\"meta\">@ember</span>/controller&apos;;\n<span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@glimmer</span>/tracking&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>{\n  <span class=\"meta\">@tracked</span> isMarketOpen = &apos;live-updating-chart&apos;\n\n  get lastUpdateTimestamp() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">Date</span>();\n  }\n\n  get infographicComponentName() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isMarketOpen ? &apos;live-updating-chart&apos; : &apos;market-close-summary&apos;;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And the following component template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">chart.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! chart }}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>Last Update: {{this.lastUpdateTimestamp}}</code> will be rendered in place of the <code>{{yield}}</code>.</p>\n<h3 id=\"nested-usage\">Nested Usage</h3>\n<p>The <code>component</code> helper can be used to package a component path with initial attrs.\nThe included attrs can then be merged during the final invocation.\nFor example, given a <code>person-form</code> component with the following template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">form.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> (<span class=\"name\"><span class=\"built_in\">hash</span></span>\n  <span class=\"attr\">nameInput</span>=(<span class=\"name\"><span class=\"built_in\">component</span></span> <span class=\"string\">&quot;my-input-component&quot;</span> <span class=\"attr\">value</span>=@model.name <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;First Name&quot;</span>)\n)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When yielding the component via the <code>hash</code> helper, the component is invoked directly.\nSee the following snippet:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">PersonForm</span> <span class=\"attr\">as</span> |<span class=\"attr\">form</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">form.nameInput</span> @<span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">PersonForm</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">person-form</span> <span class=\"keyword\">as</span> |form|}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\">form.nameInput</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Username&quot;</span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">person-form</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Which outputs an input whose value is already bound to <code>model.name</code> and <code>placeholder</code>\nis &quot;Username&quot;.</p>\n<p>When yielding the component without the <code>hash</code> helper use the <code>component</code> helper.\nFor example, below is a <code>full-name</code> component template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> (<span class=\"name\"><span class=\"built_in\">component</span></span> <span class=\"string\">&quot;my-input-component&quot;</span> <span class=\"attr\">value</span>=@model.name <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Name&quot;</span>)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">FullName</span> <span class=\"attr\">as</span> |<span class=\"attr\">field</span>|&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">component</span></span> field <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Full name&quot;</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">FullName</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">full-name</span> <span class=\"keyword\">as</span> |field|}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">component</span></span> field <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Full name&quot;</span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">full-name</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "component",
          "since": "1.11.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
          "line": 13,
          "description": "<html><head></head><body><p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension\nof the base Handlebars <code>{{#each}}</code> helper.</p>\n<p>The default behavior of <code>{{#each}}</code> is to yield its inner block once for every\nitem in an array passing the item as the first block parameter.</p>\n<p>Assuming the <code>@developers</code> argument contains this array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>[{ name: <span class=\"symbol\">&apos;Yehuda</span>&apos; },{ name: <span class=\"symbol\">&apos;Tom</span>&apos; }, { name: <span class=\"symbol\">&apos;Paul</span>&apos; }]<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @developers <span class=\"keyword\">as</span> |person|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello, </span><span class=\"template-variable\">{{<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\">!<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The same rules apply to arrays of primitives.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"symbol\">&apos;Yehuda</span>&apos;, <span class=\"symbol\">&apos;Tom</span>&apos;, <span class=\"symbol\">&apos;Paul</span>&apos;]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @developerNames <span class=\"keyword\">as</span> |name|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello, </span><span class=\"template-variable\">{{<span class=\"name\">name</span>}}</span><span class=\"language-xml\">!<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>During iteration, the index of each item in the array is provided as a second block\nparameter.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @developers <span class=\"keyword\">as</span> |person index|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello, </span><span class=\"template-variable\">{{<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\">! You&apos;re number </span><span class=\"template-variable\">{{<span class=\"name\">index</span>}}</span><span class=\"language-xml\"> in line<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"specifying-keys\">Specifying Keys</h3>\n<p>In order to improve rendering speed, Ember will try to reuse the DOM elements\nwhere possible. Specifically, if the same item is present in the array both\nbefore and after the change, its DOM output will be reused.</p>\n<p>The <code>key</code> option is used to tell Ember how to determine if the items in the\narray being iterated over with <code>{{#each}}</code> has changed between renders. By\ndefault the item&apos;s object identity is used.</p>\n<p>This is usually sufficient, so in most cases, the <code>key</code> option is simply not\nneeded. However, in some rare cases, the objects&apos; identities may change even\nthough they represent the same underlying data.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>people.<span class=\"built_in\">map</span>(<span class=\"function\"><span class=\"params\">person</span> =&gt;</span> {\n  <span class=\"keyword\">return</span> { ...person, <span class=\"attr\">type</span>: <span class=\"string\">&apos;developer&apos;</span> };\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, each time the <code>people</code> array is <code>map</code>-ed over, it will produce\nan new array with completely different objects between renders. In these cases,\nyou can help Ember determine how these objects related to each other with the\n<code>key</code> option:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @developers <span class=\"attr\">key</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">as</span> |person|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Hello, </span><span class=\"template-variable\">{{<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\">!<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By doing so, Ember will use the value of the property specified (<code>person.name</code>\nin the example) to find a &quot;match&quot; from the previous render. That is, if Ember\nhas previously seen an object from the <code>@developers</code> array with a matching\nname, its DOM elements will be re-used.</p>\n<p>There are two special values for <code>key</code>:</p>\n<ul>\n<li><code>@index</code> - The index of the item in the array.</li>\n<li><code>@identity</code> - The item in the array itself.</li>\n</ul>\n<h3 id=\"else-condition\">{{else}} condition</h3>\n<p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render\nif the collection is empty.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @developers <span class=\"keyword\">as</span> |person|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">person.name</span>}}</span><span class=\"language-xml\"> is available!<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Sorry, nobody is available for this task.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "each",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
          "line": 124,
          "description": "<html><head></head><body><p>The <code>{{each-in}}</code> helper loops over properties on an object.</p>\n<p>For example, given this component definition:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">details.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { tracked } from &apos;<span class=\"meta\">@glimmer</span>/tracking&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@tracked</span> developer = {\n    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Shelly Sails&quot;</span>,\n    <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">42</span>\n  };\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This template would display all properties on the <code>developer</code>\nobject in a list:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">details.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span>-<span class=\"built_in\">in</span></span> this.developer <span class=\"keyword\">as</span> |key value|}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">key</span>}}</span><span class=\"language-xml\">: </span><span class=\"template-variable\">{{<span class=\"name\">value</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span>-<span class=\"built_in\">in</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Outputting their name and age:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>name: Shelly Sails<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>age: 42<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "each-in",
          "access": "public",
          "tagname": "",
          "since": "2.1.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/helper.ts",
          "line": 5,
          "description": "<html><head></head><body><p>Use the <code>{{helper}}</code> helper to create contextual helper so\nthat it can be passed around as first-class values in templates.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">let</span> (<span class=\"name\">helper</span> <span class=\"string\">&quot;join-words&quot;</span> <span class=\"string\">&quot;foo&quot;</span> <span class=\"string\">&quot;bar&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot; &quot;</span>) <span class=\"keyword\">as</span> |foo-bar|}}</span><span class=\"language-xml\">\n\n  </span><span class=\"comment\">{{!-- this is equivalent to invoking `{{join-words &quot;foo&quot; &quot;bar&quot; separator=&quot; &quot;}}` --}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\">foo-bar</span>}}</span><span class=\"language-xml\">\n\n  </span><span class=\"comment\">{{!-- this will pass the helper itself into the component, instead of invoking it now --}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> @<span class=\"attr\">helper</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">helper</span> foo-bar <span class=\"string\">&quot;baz&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n\n  </span><span class=\"comment\">{{!-- this will yield the helper itself (&quot;contextual helper&quot;), instead of invoking it now --}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> foo-bar}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"arguments\">Arguments</h3>\n<p>The <code>{{helper}}</code> helper works similarly to the <a href=\"./component?anchor=component\"><code>{{component}}</code></a> and\n<a href=\"./modifier?anchor=modifier\"><code>{{modifier}}</code></a> helper:</p>\n<ul>\n<li><p>When passed a string (e.g. <code>(helper &quot;foo&quot;)</code>) as the first argument,\nit will produce an opaque, internal &quot;helper definition&quot; object\nthat can be passed around and invoked elsewhere.</p>\n</li>\n<li><p>Any additional positional and/or named arguments (a.k.a. params and hash)\nwill be stored (&quot;curried&quot;) inside the definition object, such that, when invoked,\nthese arguments will be passed along to the referenced helper.</p>\n</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "helper",
          "access": "public",
          "tagname": "",
          "since": "3.27.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>if</code> helper allows you to conditionally render one of two branches,\ndepending on the &quot;truthiness&quot; of a property.\nFor example the following values are all falsey: <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code>, <code>0</code>, <code>NaN</code> or an empty array.</p>\n<p>This helper has two forms, block and inline.</p>\n<h2 id=\"block-form\">Block form</h2>\n<p>You can use the block form of <code>if</code> to conditionally render a section of the template.</p>\n<p>To use it, pass the conditional value to the <code>if</code> helper,\nusing the block form to wrap the section of template you want to conditionally render.\nLike so:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;Weather /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/weather.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! will not render because greeting is undefined}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> @isRaining}}</span><span class=\"language-xml\">\n  Yes, grab an umbrella!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also define what to show if the property is falsey by using\nthe <code>else</code> helper.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/weather.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> @isRaining}}</span><span class=\"language-xml\">\n  Yes, grab an umbrella!\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  No, it&apos;s lovely outside!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You are also able to combine <code>else</code> and <code>if</code> helpers to create more complex\nconditional logic.</p>\n<p>For the following template:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/weather.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> @isRaining}}</span><span class=\"language-xml\">\n Yes, grab an umbrella!\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> @isCold}}</span><span class=\"language-xml\">\n Grab a coat, it&apos;s chilly!\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n No, it&apos;s lovely outside!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you call it by saying <code>isCold</code> is true:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Weather</span> @<span class=\"attr\">isCold</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">true</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then <code>Grab a coat, it&apos;s chilly!</code> will be rendered.</p>\n<h2 id=\"inline-form\">Inline form</h2>\n<p>The inline <code>if</code> helper conditionally renders a single property or string.</p>\n<p>In this form, the <code>if</code> helper receives three arguments, the conditional value,\nthe value to render when truthy, and the value to render when falsey.</p>\n<p>For example, if <code>useLongGreeting</code> is truthy, the following:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span> @<span class=\"attr\">useLongGreeting</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">true</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/greeting.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">if</span></span> @useLongGreeting <span class=\"string\">&quot;Hello&quot;</span> <span class=\"string\">&quot;Hi&quot;</span>}}</span><span class=\"language-xml\"> Alex</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Will render:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">Hello Alex</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>One detail to keep in mind is that both branches of the <code>if</code> helper will be evaluated,\nso if you have <code>{{if condition &quot;foo&quot; (expensive-operation &quot;bar&quot;)</code>,\n<code>expensive-operation</code> will always calculate.</p>\n</body></html>",
          "itemtype": "method",
          "name": "if",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
          "line": 97,
          "description": "<html><head></head><body><p>The <code>unless</code> helper is the inverse of the <code>if</code> helper. It displays if a value\nis falsey (&quot;not true&quot; or &quot;is false&quot;). Example values that will display with\n<code>unless</code>: <code>false</code>, <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code>, <code>0</code>, <code>NaN</code> or an empty array.</p>\n<h2 id=\"inline-form\">Inline form</h2>\n<p>The inline <code>unless</code> helper conditionally renders a single property or string.\nThis helper acts like a ternary operator. If the first property is falsy,\nthe second argument will be displayed, otherwise, the third argument will be\ndisplayed</p>\n<p>For example, if you pass a falsey <code>useLongGreeting</code> to the <code>Greeting</code> component:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeting</span> @<span class=\"attr\">useLongGreeting</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">false</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/greeting.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">unless</span></span> @useLongGreeting <span class=\"string\">&quot;Hi&quot;</span> <span class=\"string\">&quot;Hello&quot;</span>}}</span><span class=\"language-xml\"> Ben</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then it will display:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">Hi Ben</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"block-form\">Block form</h2>\n<p>Like the <code>if</code> helper, the <code>unless</code> helper also has a block form.</p>\n<p>The following will not render anything:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;Greeting /&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/greeting.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">unless</span></span> @greeting}}</span><span class=\"language-xml\">\n  No greeting was found. Why not set one?\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">unless</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also use an <code>else</code> helper with the <code>unless</code> block. The\n<code>else</code> will display if the value is truthy.</p>\n<p>If you have the following component:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">in.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">unless</span></span> @userData}}</span><span class=\"language-xml\">\n  Please login.\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  Welcome back!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">unless</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Calling it with a truthy <code>userData</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoggedIn</span> @<span class=\"attr\">userData</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">hash</span></span> <span class=\"attr\">username</span>=<span class=\"string\">&quot;Zoey&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Will render:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>Welcome <span class=\"keyword\">back</span>!</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>and calling it with a falsey <code>userData</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoggedIn</span> @<span class=\"attr\">userData</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">false</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Will render:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>Please login.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unless",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/log.ts",
          "line": 5,
          "description": "<html><head></head><body><p><code>log</code> allows you to output the value of variables in the current rendering\ncontext. <code>log</code> also accepts primitive types such as strings or numbers.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> <span class=\"string\">&quot;myVariable:&quot;</span> myVariable }}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "log",
          "params": [
            {
              "name": "params",
              "description": "",
              "type": "Array"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/modifier.ts",
          "line": 5,
          "description": "<html><head></head><body><p>Use the <code>{{modifier}}</code> helper to create contextual modifier so\nthat it can be passed around as first-class values in templates.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">let</span> (<span class=\"name\">modifier</span> <span class=\"string\">&quot;click-outside&quot;</span> <span class=\"attr\">click</span>=this.submit) <span class=\"keyword\">as</span> |on-click-outside|}}</span><span class=\"language-xml\">\n\n  </span><span class=\"comment\">{{!-- this is equivalent to `&lt;MyComponent {{click-outside click=this.submit}} /&gt;` --}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> </span></span><span class=\"template-variable\">{{<span class=\"name\">on-click-outside</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n\n  </span><span class=\"comment\">{{!-- this will pass the modifier itself into the component, instead of invoking it now --}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> @<span class=\"attr\">modifier</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">modifier</span> on-click-outside <span class=\"string\">&quot;extra&quot;</span> <span class=\"string\">&quot;args&quot;</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n\n  </span><span class=\"comment\">{{!-- this will yield the modifier itself (&quot;contextual modifier&quot;), instead of invoking it now --}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> on-click-outside}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"arguments\">Arguments</h3>\n<p>The <code>{{modifier}}</code> helper works similarly to the <a href=\"./component?anchor=component\"><code>{{component}}</code></a> and\n<a href=\"./helper?anchor=helper\"><code>{{helper}}</code></a> helper:</p>\n<ul>\n<li><p>When passed a string (e.g. <code>(modifier &quot;foo&quot;)</code>) as the first argument,\nit will produce an opaque, internal &quot;modifier definition&quot; object\nthat can be passed around and invoked elsewhere.</p>\n</li>\n<li><p>Any additional positional and/or named arguments (a.k.a. params and hash)\nwill be stored (&quot;curried&quot;) inside the definition object, such that, when invoked,\nthese arguments will be passed along to the referenced modifier.</p>\n</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "modifier",
          "access": "public",
          "tagname": "",
          "since": "3.27.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/mut.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>mut</code> helper lets you <strong>clearly specify</strong> that a child <code>Component</code> can update the\n(mutable) value passed to it, which will <strong>change the value of the parent component</strong>.</p>\n<p>To specify that a parameter is mutable, when invoking the child <code>Component</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">fn</span> (<span class=\"name\"><span class=\"built_in\">mut</span></span> totalClicks)}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClickCount</span>=(<span class=\"name\"><span class=\"built_in\">mut</span></span> totalClicks)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The child <code>Component</code> can then modify the parent&apos;s value just by modifying its own\nproperty:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// my-child.js</span>\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">click</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">incrementProperty</span>(<span class=\"string\">&apos;childClickCount&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that for curly components (<code>{{my-component}}</code>) the bindings are already mutable,\nmaking the <code>mut</code> unnecessary.</p>\n<p>Additionally, the <code>mut</code> helper can be combined with the <code>fn</code> helper to\nmutate a value. For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.totalClicks</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">click-count-change</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">fn</span> (<span class=\"name\"><span class=\"built_in\">mut</span></span> totalClicks))}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClickCount</span>=totalClicks <span class=\"attr\">click-count-change</span>=(<span class=\"name\">fn</span> (<span class=\"name\"><span class=\"built_in\">mut</span></span> totalClicks))}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The child <code>Component</code> would invoke the function with the new click value:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// my-child.js</span>\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Component.extend({\n  click() {\n    <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;click-count-change&apos;</span>)(<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;childClickCount&apos;</span>) + <span class=\"number\">1</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>mut</code> helper changes the <code>totalClicks</code> value to what was provided as the <code>fn</code> argument.</p>\n<p>The <code>mut</code> helper, when used with <code>fn</code>, will return a function that\nsets the value passed to <code>mut</code> to its first argument. As an example, we can create a\nbutton that increments a value passing the value directly to the <code>fn</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! inc helper is not provided by Ember }}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">fn</span> (<span class=\"name\"><span class=\"built_in\">mut</span></span> count) (<span class=\"name\">inc</span> count)}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  Increment count\n<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mut",
          "params": [
            {
              "name": "attr",
              "description": "the \"two-way\" attribute that can be modified.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/page-title.ts",
          "line": 5,
          "description": "<html><head></head><body><p><code>page-title</code> allows you to set the title of any page in your application and\nappend additional titles for each route. For complete documentation, see\n<a href=\"https://github.com/ember-cli/ember-page-title\">https://github.com/ember-cli/ember-page-title</a>.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">page-title</span> <span class=\"string\">&quot;My Page Title&quot;</span> }}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "page-title",
          "params": [
            {
              "name": "param",
              "description": "",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/readonly.ts",
          "line": 9,
          "description": "<html><head></head><body><p>The <code>readonly</code> helper let&apos;s you specify that a binding is one-way only,\ninstead of two-way.\nWhen you pass a <code>readonly</code> binding from an outer context (e.g. parent component),\nto to an inner context (e.g. child component), you are saying that changing that\nproperty in the inner context does not change the value in the outer context.</p>\n<p>To specify that a binding is read-only, when invoking the child <code>Component</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">export</span><span class=\"built_in\"> default </span>Component.extend({\n  totalClicks: 3\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> totalClicks}}</span><span class=\"language-xml\"> // -&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">readonly</span> totalClicks}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClickCount</span>=(<span class=\"name\">readonly</span> totalClicks)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Now, when you update <code>childClickCount</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">click</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">incrementProperty</span>(<span class=\"string\">&apos;childClickCount&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The value updates in the child component, but not the parent component:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> childClickCount}}</span><span class=\"language-xml\"> //-&gt; 4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> totalClicks}}</span><span class=\"language-xml\"> //-&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClickCount</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">readonly</span> totalClicks}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> totalClicks}}</span><span class=\"language-xml\"> //-&gt; 3\n</span><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClickCount</span>=(<span class=\"name\">readonly</span> totalClicks)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"objects-and-arrays\">Objects and Arrays</h3>\n<p>When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),\nonly the reference to the object is protected using the readonly helper.\nThis means that you can change properties of the object both on the parent component, as well as the child component.\nThe <code>readonly</code> binding behaves similar to the <code>const</code> keyword in JavaScript.</p>\n<p>Let&apos;s look at an example:</p>\n<p>First let&apos;s set up the parent component:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Component</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">clicks</span>: <span class=\"literal\">null</span>,\n\n  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_super</span>(...<span class=\"variable language_\">arguments</span>);\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&apos;clicks&apos;</span>, { <span class=\"attr\">total</span>: <span class=\"number\">3</span> });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> clicks.total}}</span><span class=\"language-xml\"> //-&gt; 3\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClicks</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">readonly</span> clicks}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> clicks.total}}</span><span class=\"language-xml\"> //-&gt; 3\n</span><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClicks</span>=(<span class=\"name\">readonly</span> clicks)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Now, if you update the <code>total</code> property of <code>childClicks</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Component</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/component&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">click</span>(<span class=\"params\"></span>) {\n    <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&apos;clicks&apos;</span>).<span class=\"title function_\">incrementProperty</span>(<span class=\"string\">&apos;total&apos;</span>);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You will see the following happen:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> clicks.total}}</span><span class=\"language-xml\"> //-&gt; 4\n<span class=\"tag\">&lt;<span class=\"name\">MyChild</span> @<span class=\"attr\">childClicks</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">readonly</span> clicks}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">parent.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> clicks.total}}</span><span class=\"language-xml\"> //-&gt; 4\n</span><span class=\"template-variable\">{{<span class=\"name\">my-child</span> <span class=\"attr\">childClicks</span>=(<span class=\"name\">readonly</span> clicks)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">child.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">log</span></span> childClicks.total}}</span><span class=\"language-xml\"> //-&gt; 4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "readonly",
          "params": [
            {
              "name": "attr",
              "description": "the read-only attribute.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/unbound.ts",
          "line": 10,
          "description": "<html><head></head><body><p>The <code>{{unbound}}</code> helper disconnects the one-way binding of a property,\nessentially freezing its value at the moment of rendering. For example,\nin this example the display of the variable <code>name</code> will not change even\nif it is set with a new value:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">unbound</span></span> this.name}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Like any helper, the <code>unbound</code> helper can accept a nested helper expression.\nThis allows for custom helpers to be rendered unbound:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">unbound</span></span> (<span class=\"name\">some-custom-helper</span>)}}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">unbound</span></span> (<span class=\"name\">capitalize</span> this.name)}}</span><span class=\"language-xml\">\n</span><span class=\"comment\">{{! You can use any helper, including unbound, in a nested expression }}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\">capitalize</span> (<span class=\"name\"><span class=\"built_in\">unbound</span></span> this.name)}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>unbound</code> helper only accepts a single argument, and it return an\nunbound value.</p>\n</body></html>",
          "itemtype": "method",
          "name": "unbound",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/helpers/unique-id.ts",
          "line": 5,
          "description": "<html><head></head><body><p>Use the {{unique-id}} helper to generate a unique ID string suitable for use as\nan ID attribute in the DOM.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">unique-id</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Each invocation of {{unique-id}} will return a new, unique ID string.\nYou can use the <code>let</code> helper to create an ID that can be reused within a template.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">let</span> (<span class=\"name\">unique-id</span>) <span class=\"keyword\">as</span> |emailId|}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">emailId</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>Email address<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">emailId</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unique-id",
          "since": "4.4.0",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/modifiers/on.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>{{on}}</code> modifier lets you easily add event listeners (it uses\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">EventTarget.addEventListener</a>\ninternally).</p>\n<p>For example, if you&apos;d like to run a function on your component when a <code>&lt;button&gt;</code>\nin the components template is clicked you might do something like:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"name\">on</span> <span class=\"string\">&apos;click&apos;</span> this.saveLike}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>Like this post!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n<span class=\"keyword\">import</span> { action } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikePostComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"meta\">@action</span>\n  saveLike() {\n    <span class=\"comment\">// someone likes your post!</span>\n    <span class=\"comment\">// better send a request off to your server...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"arguments\">Arguments</h3>\n<p><code>{{on}}</code> accepts two positional arguments, and a few named arguments.</p>\n<p>The positional arguments are:</p>\n<ul>\n<li><code>event</code> -- the name to use when calling <code>addEventListener</code></li>\n<li><code>callback</code> -- the function to be passed to <code>addEventListener</code></li>\n</ul>\n<p>The named arguments are:</p>\n<ul>\n<li>capture -- a <code>true</code> value indicates that events of this type will be dispatched\nto the registered listener before being dispatched to any EventTarget beneath it\nin the DOM tree.</li>\n<li>once -- indicates that the listener should be invoked at most once after being\nadded. If true, the listener would be automatically removed when invoked.</li>\n<li>passive -- if <code>true</code>, indicates that the function specified by listener will never\ncall preventDefault(). If a passive listener does call preventDefault(), the user\nagent will do nothing other than generate a console warning. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners\">Improving scrolling performance with passive listeners</a>\nto learn more.</li>\n</ul>\n<p>The callback function passed to <code>{{on}}</code> will receive any arguments that are passed\nto the event handler. Most commonly this would be the <code>event</code> itself.</p>\n<p>If you would like to pass additional arguments to the function you should use\nthe <code>{{fn}}</code> helper.</p>\n<p>For example, in our example case above if you&apos;d like to pass in the post that\nwas being liked when the button is clicked you could do something like:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><span class=\"template-variable\">{{<span class=\"name\">on</span> <span class=\"string\">&apos;click&apos;</span> (<span class=\"name\">fn</span> this.saveLike @post)}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>Like this post!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, the <code>saveLike</code> function will receive two arguments: the click event\nand the value of <code>@post</code>.</p>\n<h3 id=\"function-context\">Function Context</h3>\n<p>In the example above, we used <code>@action</code> to ensure that <code>likePost</code> is\nproperly bound to the <code>items-list</code>, but let&apos;s explore what happens if we\nleft out <code>@action</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from &apos;<span class=\"meta\">@glimmer</span>/component&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LikePostComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  saveLike() {\n    <span class=\"comment\">// ...snip...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this example, when the button is clicked <code>saveLike</code> will be invoked,\nit will <strong>not</strong> have access to the component instance. In other\nwords, it will have no <code>this</code> context, so please make sure your functions\nare bound (via <code>@action</code> or other means) before passing into <code>on</code>!</p>\n</body></html>",
          "itemtype": "method",
          "name": "on",
          "access": "public",
          "tagname": "",
          "since": "3.11.0",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/in-element.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>in-element</code> helper renders its block content outside of the regular flow,\ninto a DOM element given by its <code>destinationElement</code> positional argument.</p>\n<p>Common use cases - often referred to as &quot;portals&quot; or &quot;wormholes&quot; - are rendering\ndropdowns, modals or tooltips close to the root of the page to bypass CSS overflow\nrules, or to render content to parts of the page that are outside of the control\nof the Ember app itself (e.g. embedded into a static or server rendered HTML page).</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">in</span>-element</span> this.destinationElement}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">in</span>-element</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"arguments\">Arguments</h3>\n<p><code>{{in-element}}</code> requires a single positional argument:</p>\n<ul>\n<li><code>destinationElement</code> -- the DOM element to render into. It must exist at the time\nof rendering.</li>\n</ul>\n<p>It also supports an optional named argument:</p>\n<ul>\n<li><p><code>insertBefore</code> -- by default the DOM element&apos;s content is replaced when used as\n<code>destinationElement</code>. Passing <code>null</code> to <code>insertBefore</code> changes the behaviour to\nappend the block content to the end of any existing content. Any other value than\n<code>null</code> is currently not supported.</p>\n<p>  For example:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">in</span>-element</span> this.destinationElement <span class=\"attr\">insertBefore</span>=<span class=\"literal\">null</span>}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Some content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">in</span>-element</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "in-element",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/let.ts",
          "line": 5,
          "description": "<html><head></head><body><p>The <code>let</code> helper receives one or more positional arguments and yields\nthem out as block params.</p>\n<p>This allows the developer to introduce shorter names for certain computations\nin the template.</p>\n<p>This is especially useful if you are passing properties to a component\nthat receives a lot of options and you want to clean up the invocation.</p>\n<p>For the following example, the template receives a <code>post</code> object with\n<code>content</code> and <code>title</code> properties.</p>\n<p>We are going to call the <code>my-post</code> component, passing a title which is\nthe title of the post suffixed with the name of the blog, the content\nof the post, and a series of options defined in-place.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">let</span>\n    (<span class=\"name\"><span class=\"built_in\">concat</span></span> post.title <span class=\"string\">&apos; | The Ember.js Blog&apos;</span>)\n    post.content\n    (<span class=\"name\"><span class=\"built_in\">hash</span></span>\n      <span class=\"attr\">theme</span>=<span class=\"string\">&quot;high-contrast&quot;</span>\n      <span class=\"attr\">enableComments</span>=<span class=\"literal\">true</span>\n    )\n    <span class=\"keyword\">as</span> |title content options|\n}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">MyPost</span> @<span class=\"attr\">title</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">title</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">content</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">content</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">options</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">options</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> or</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">let</span>\n  (<span class=\"name\"><span class=\"built_in\">concat</span></span> post.title <span class=\"string\">&apos; | The Ember.js Blog&apos;</span>)\n  post.content\n  (<span class=\"name\"><span class=\"built_in\">hash</span></span>\n    <span class=\"attr\">theme</span>=<span class=\"string\">&quot;high-contrast&quot;</span>\n    <span class=\"attr\">enableComments</span>=<span class=\"literal\">true</span>\n  )\n  <span class=\"keyword\">as</span> |title content options|\n}}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\">my-post</span> <span class=\"attr\">title</span>=title <span class=\"attr\">content</span>=content <span class=\"attr\">options</span>=options}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\">let</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "let",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/mount.ts",
          "line": 16,
          "description": "<html><head></head><body><p>The <code>{{mount}}</code> helper lets you embed a routeless engine in a template.\nMounting an engine will cause an instance to be booted and its <code>application</code>\ntemplate to be rendered.</p>\n<p>For example, the following template mounts the <code>ember-chat</code> engine:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{! application.hbs }}</span><span class=\"language-xml\">\n</span><span class=\"template-variable\">{{<span class=\"name\">mount</span> <span class=\"string\">&quot;ember-chat&quot;</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally, you can also pass in a <code>model</code> argument that will be\nset as the engines model. This can be an existing object:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">mount</span> <span class=\"string\">&apos;admin&apos;</span> <span class=\"attr\">model</span>=userSettings}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Or an inline <code>hash</code>, and you can even pass components:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Application template!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">mount</span> <span class=\"string\">&apos;admin&apos;</span> <span class=\"attr\">model</span>=(<span class=\"name\"><span class=\"built_in\">hash</span></span>\n      <span class=\"attr\">title</span>=<span class=\"string\">&apos;Secret Admin&apos;</span>\n      <span class=\"attr\">signInButton</span>=(<span class=\"name\"><span class=\"built_in\">component</span></span> <span class=\"string\">&apos;sign-in-button&apos;</span>)\n  )}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "mount",
          "params": [
            {
              "name": "name",
              "description": "Name of the engine to mount.",
              "type": "String"
            },
            {
              "name": "model",
              "description": "Object that will be set as\n                        the model of the engine.",
              "type": "Object",
              "optional": true
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/lib/syntax/outlet.ts",
          "line": 22,
          "description": "<html><head></head><body><p>The <code>{{outlet}}</code> helper lets you specify where a child route will render in\nyour template. An important use of the <code>{{outlet}}</code> helper is in your\napplication&apos;s <code>application.hbs</code> file:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyHeader</span> /&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-dynamic-content&quot;</span>&gt;</span>\n  <span class=\"comment\">&lt;!-- this content will change based on the current route, which depends on the current URL --&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">outlet</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"name\">MyFooter</span> /&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See the <a href=\"https://guides.emberjs.com/release/routing/rendering-a-template/\">routing guide</a> for more\ninformation on how your <code>route</code> interacts with the <code>{{outlet}}</code> helper.\nNote: Your content <strong>will not render</strong> if there isn&apos;t an <code>{{outlet}}</code> for it.</p>\n</body></html>",
          "itemtype": "method",
          "name": "outlet",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 91,
          "description": "<html><head></head><body><p><code>{{yield}}</code> denotes an area of a template that will be rendered inside\nof another template.</p>\n<h3 id=\"use-with-component\">Use with <code>Component</code></h3>\n<p>When designing components <code>{{yield}}</code> is used to denote where, inside the component&apos;s\ntemplate, an optional block passed to the component should render:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LabeledTextfield</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model.name</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&gt;</span>\n  First name:\n<span class=\"tag\">&lt;/<span class=\"name\">LabeledTextfield</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">textfield.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\"> <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">value</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"keyword\">label</span>&gt;\n  First name: &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;\n&lt;/<span class=\"keyword\">label</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additionally you can <code>yield</code> properties into the context for use by the consumer:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LabeledTextfield</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model.validation</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> @<span class=\"attr\">validator</span>=</span></span><span class=\"template-variable\">{{<span class=\"name\">this.firstNameValidator</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">validationError</span>|&gt;</span>\n  </span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> validationError}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">validationError</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n  </span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span><span class=\"language-xml\">\n  First name:\n<span class=\"tag\">&lt;/<span class=\"name\">LabeledTextfield</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">textfield.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> this.validationError}}</span><span class=\"language-xml\"> <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">value</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span>First Name must be at least 3 characters long.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n  First name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>yield</code> can also be used with the <code>hash</code> helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DateRanges</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model.date</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">range</span>|&gt;</span>\n  Start date: </span><span class=\"template-variable\">{{<span class=\"name\">range.start</span>}}</span><span class=\"language-xml\">\n  End date: </span><span class=\"template-variable\">{{<span class=\"name\">range.end</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">DateRanges</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">ranges.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> (<span class=\"name\"><span class=\"built_in\">hash</span></span> <span class=\"attr\">start</span>=@value.start <span class=\"attr\">end</span>=@value.end)}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;div&gt;</span>\n  <span class=\"attribute\">Start</span> date: July <span class=\"number\">1</span>st\n  <span class=\"attribute\">End</span> date: July <span class=\"number\">30</span>th\n<span class=\"section\">&lt;/div&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple values can be yielded as block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Banner</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">title</span> <span class=\"attr\">subtitle</span> <span class=\"attr\">body</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">title</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">subtitle</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\">body</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">Banner</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/banner.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> <span class=\"string\">&quot;Hello title&quot;</span> <span class=\"string\">&quot;hello subtitle&quot;</span> <span class=\"string\">&quot;body text&quot;</span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"selector-tag\">div</span>&gt;\n  &lt;<span class=\"selector-tag\">h1</span>&gt;Hello title&lt;/<span class=\"selector-tag\">h1</span>&gt;\n  &lt;<span class=\"selector-tag\">h2</span>&gt;hello subtitle&lt;/<span class=\"selector-tag\">h2</span>&gt;\n  <span class=\"selector-tag\">body</span> text\n&lt;/<span class=\"selector-tag\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>However, it is preferred to use the hash helper, as this can prevent breaking changes to your component and also simplify the api for the component.</p>\n<p>Multiple components can be yielded with the <code>hash</code> and <code>component</code> helper:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Banner</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">banner</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Title</span>&gt;</span>Banner title<span class=\"tag\">&lt;/<span class=\"name\">banner.Title</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Subtitle</span>&gt;</span>Banner subtitle<span class=\"tag\">&lt;/<span class=\"name\">banner.Subtitle</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Body</span>&gt;</span>A load of body text<span class=\"tag\">&lt;/<span class=\"name\">banner.Body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">Banner</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/banner.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Title</span> from &apos;./banner/title&apos;;\n<span class=\"keyword\">import</span> <span class=\"type\">Subtitle</span> from &apos;./banner/subtitle&apos;;\n<span class=\"keyword\">import</span> <span class=\"type\">Body</span> from &apos;./banner/body&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"type\">Title</span> = <span class=\"type\">Title</span>;\n  <span class=\"type\">Subtitle</span> = <span class=\"type\">Subtitle</span>;\n  <span class=\"type\">Body</span> = <span class=\"type\">Body</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/banner.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> (<span class=\"name\"><span class=\"built_in\">hash</span></span>\n    <span class=\"attr\">Title</span>=this.Title\n    <span class=\"attr\">Subtitle</span>=this.Subtitle\n    <span class=\"attr\">Body</span>=(<span class=\"name\"><span class=\"built_in\">component</span></span> this.Body <span class=\"attr\">defaultArg</span>=<span class=\"string\">&quot;some value&quot;</span>)\n  )}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"selector-tag\">div</span>&gt;\n  &lt;<span class=\"selector-tag\">h1</span>&gt;Banner title&lt;/<span class=\"selector-tag\">h1</span>&gt;\n  &lt;<span class=\"selector-tag\">h2</span>&gt;Banner subtitle&lt;/<span class=\"selector-tag\">h2</span>&gt;\n  <span class=\"selector-tag\">A</span> load of <span class=\"selector-tag\">body</span> text\n&lt;/<span class=\"selector-tag\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A benefit of using this pattern is that the user of the component can change the order the components are displayed.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Banner</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">banner</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Subtitle</span>&gt;</span>Banner subtitle<span class=\"tag\">&lt;/<span class=\"name\">banner.Subtitle</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Title</span>&gt;</span>Banner title<span class=\"tag\">&lt;/<span class=\"name\">banner.Title</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Body</span>&gt;</span>A load of body text<span class=\"tag\">&lt;/<span class=\"name\">banner.Body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">Banner</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>&lt;<span class=\"selector-tag\">div</span>&gt;\n  &lt;<span class=\"selector-tag\">h2</span>&gt;Banner subtitle&lt;/<span class=\"selector-tag\">h2</span>&gt;\n  &lt;<span class=\"selector-tag\">h1</span>&gt;Banner title&lt;/<span class=\"selector-tag\">h1</span>&gt;\n  <span class=\"selector-tag\">A</span> load of <span class=\"selector-tag\">body</span> text\n&lt;/<span class=\"selector-tag\">div</span>&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Another benefit to using <code>yield</code> with the <code>hash</code> and <code>component</code> helper\nis you can pass attributes and arguments to these components:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/templates/application.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Banner</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> <span class=\"attr\">as</span> |<span class=\"attr\">banner</span>|&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Subtitle</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-1&quot;</span>&gt;</span>Banner subtitle<span class=\"tag\">&lt;/<span class=\"name\">banner.Subtitle</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Title</span> @<span class=\"attr\">variant</span>=<span class=\"string\">&quot;loud&quot;</span>&gt;</span>Banner title<span class=\"tag\">&lt;/<span class=\"name\">banner.Title</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">banner.Body</span>&gt;</span>A load of body text<span class=\"tag\">&lt;/<span class=\"name\">banner.Body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">Banner</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/banner/subtitle.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">{{!-- note the use of ..attributes --}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">...attributes</span>&gt;</span>\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/components/banner/title.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">eq</span> @variant <span class=\"string\">&quot;loud&quot;</span>)}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loud&quot;</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;quiet&quot;</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Result:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mb-1&quot;</span>&gt;</span>Banner subtitle<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loud&quot;</span>&gt;</span>Banner title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n  A load of body text\n<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "yield",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Hash"
            }
          ],
          "return": {
            "description": "HTML string",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 303,
          "description": "<html><head></head><body><p><code>{{(has-block)}}</code> indicates if the component was invoked with a block.</p>\n<p>This component is invoked with a block:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span><span class=\"language-xml\">\n  Hi Jen!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This component is invoked without a block:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using angle bracket invocation, this looks like:</p>\n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span>Hi Jen!<span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span> </span><span class=\"template-variable\">{{! with a <span class=\"name\">block</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight html\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span> </span><span class=\"template-variable\">{{! without a <span class=\"name\">block</span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is useful when you want to create a component that can optionally take a block\nand then render a default template when it is not invoked with a block.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">has-block</span>)}}</span><span class=\"language-xml\">\n  Welcome </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\">, we are happy you&apos;re here!\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  Hey you! You&apos;re great!\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "has-block",
          "params": [
            {
              "name": "the",
              "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
              "type": "String"
            }
          ],
          "return": {
            "description": "`true` if the component was invoked with a block",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 348,
          "description": "<html><head></head><body><p><code>{{(has-block-params)}}</code> indicates if the component was invoked with block params.</p>\n<p>This component is invoked with block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"built_in\">component</span></span> <span class=\"keyword\">as</span> |favoriteFlavor|}}</span><span class=\"language-xml\">\n  Hi Jen!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This component is invoked without block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span><span class=\"language-xml\">\n  Hi Jenn!\n</span><span class=\"template-tag\">{{/<span class=\"name\">my-<span class=\"built_in\">component</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>With angle bracket syntax, block params look like this:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>&lt;MyComponent <span class=\"built_in\">as</span> |<span class=\"type\">favoriteFlavor</span>|<span class=\"type\">&gt;\nHi</span> Jen!\n&lt;/MyComponent&gt;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>And without block params:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"section\">&lt;MyComponent&gt;</span>\n  <span class=\"attribute\">Hi</span> Jen!\n<span class=\"section\">&lt;/MyComponent&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This is useful when you want to create a component that can render itself\ndifferently when it is not invoked with block params.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">component.hbs</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">if</span></span> (<span class=\"name\">has-block-params</span>)}}</span><span class=\"language-xml\">\n  Welcome </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span> this.favoriteFlavor}}</span><span class=\"language-xml\">, we&apos;re happy you&apos;re here and hope you\n  enjoy your favorite ice cream flavor.\n</span><span class=\"template-tag\">{{<span class=\"keyword\">else</span>}}</span><span class=\"language-xml\">\n  Welcome </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">yield</span></span>}}</span><span class=\"language-xml\">, we&apos;re happy you&apos;re here, but we&apos;re unsure what\n  flavor ice cream you would enjoy.\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">if</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "has-block-params",
          "params": [
            {
              "name": "the",
              "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
              "type": "String"
            }
          ],
          "return": {
            "description": "`true` if the component was invoked with block params",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        },
        {
          "file": "packages/@ember/-internals/glimmer/index.ts",
          "line": 403,
          "description": "<html><head></head><body><p>Execute the <code>debugger</code> statement in the current template&apos;s context.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">debugger</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When using the debugger helper you will have access to a <code>get</code> function. This\nfunction retrieves values available in the context of the template.\nFor example, if you&apos;re wondering why a value <code>{{foo}}</code> isn&apos;t rendering as\nexpected within a template, you could place a <code>{{debugger}}</code> statement and,\nwhen the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"function\"><span class=\"title\">get</span>(<span class=\"string\">&apos;foo&apos;</span>)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>get</code> is also aware of keywords. So in this situation</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> this.items <span class=\"keyword\">as</span> |item|}}</span><span class=\"language-xml\">\n  </span><span class=\"template-variable\">{{<span class=\"name\"><span class=\"built_in\">debugger</span></span>}}</span><span class=\"language-xml\">\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You&apos;ll be able to get values from the current item:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>&gt; <span class=\"function\"><span class=\"title\">get</span>(<span class=\"string\">&apos;item.name&apos;</span>)</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also access the context of the view to make sure it is the object that\nyou expect:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">context</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "debugger",
          "access": "public",
          "tagname": "",
          "class": "Ember.Templates.helpers",
          "module": "ember"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-4.12.3-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-4.12.3",
          "type": "project-version"
        }
      }
    }
  }
}