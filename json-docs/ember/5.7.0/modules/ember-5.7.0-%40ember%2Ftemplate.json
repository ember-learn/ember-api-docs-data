{
  "data": {
    "id": "ember-5.7.0-@ember/template",
    "type": "module",
    "attributes": {
      "name": "@ember/template",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember/template": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
      "line": 7,
      "parent": null,
      "publicclasses": [
        "SafeString"
      ],
      "privateclasses": [],
      "staticfunctions": {
        "@ember/template": [
          {
            "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
            "line": 121,
            "description": "Use this method to indicate that a string should be rendered as HTML\nwhen the string is used in a template. To say this another way,\nstrings marked with `htmlSafe` will not be HTML escaped.\n\nA word of warning -   The `htmlSafe` method does not make the string safe;\nit only tells the framework to treat the string as if it is safe to render\nas HTML. If a string contains user inputs or other untrusted\ndata, you must sanitize the string before using the `htmlSafe` method.\nOtherwise your code is vulnerable to\n[Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).\nThere are many open source sanitization libraries to choose from,\nboth for front end and server-side sanitization.\n\n```javascript\nimport { htmlSafe } from '@ember/template';\n\nconst someTrustedOrSanitizedString = \"<div>Hello!</div>\"\n\nhtmlSafe(someTrustedorSanitizedString)\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "params": [
              {
                "name": "str",
                "description": "The string to treat as trusted.",
                "type": "String"
              }
            ],
            "static": 1,
            "return": {
              "description": "A string that will not be HTML escaped by Handlebars.",
              "type": "SafeString"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/template",
            "module": "@ember/template"
          },
          {
            "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
            "line": 159,
            "description": "Detects if a string was decorated using `htmlSafe`.\n\n```javascript\nimport { htmlSafe, isHTMLSafe } from '@ember/template';\n\nlet plainString = 'plain string';\nlet safeString = htmlSafe('<div>someValue</div>');\n\nisHTMLSafe(plainString); // false\nisHTMLSafe(safeString);  // true\n```",
            "itemtype": "method",
            "name": "isHTMLSafe",
            "static": 1,
            "return": {
              "description": "`true` if the string was decorated with `htmlSafe`, `false` otherwise.",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/template",
            "module": "@ember/template"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember/template": [
          {
            "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
            "line": 121,
            "description": "Use this method to indicate that a string should be rendered as HTML\nwhen the string is used in a template. To say this another way,\nstrings marked with `htmlSafe` will not be HTML escaped.\n\nA word of warning -   The `htmlSafe` method does not make the string safe;\nit only tells the framework to treat the string as if it is safe to render\nas HTML. If a string contains user inputs or other untrusted\ndata, you must sanitize the string before using the `htmlSafe` method.\nOtherwise your code is vulnerable to\n[Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).\nThere are many open source sanitization libraries to choose from,\nboth for front end and server-side sanitization.\n\n```javascript\nimport { htmlSafe } from '@ember/template';\n\nconst someTrustedOrSanitizedString = \"<div>Hello!</div>\"\n\nhtmlSafe(someTrustedorSanitizedString)\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "params": [
              {
                "name": "str",
                "description": "The string to treat as trusted.",
                "type": "String"
              }
            ],
            "static": 1,
            "return": {
              "description": "A string that will not be HTML escaped by Handlebars.",
              "type": "SafeString"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/template",
            "module": "@ember/template"
          },
          {
            "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
            "line": 159,
            "description": "Detects if a string was decorated using `htmlSafe`.\n\n```javascript\nimport { htmlSafe, isHTMLSafe } from '@ember/template';\n\nlet plainString = 'plain string';\nlet safeString = htmlSafe('<div>someValue</div>');\n\nisHTMLSafe(plainString); // false\nisHTMLSafe(safeString);  // true\n```",
            "itemtype": "method",
            "name": "isHTMLSafe",
            "static": 1,
            "return": {
              "description": "`true` if the string was decorated with `htmlSafe`, `false` otherwise.",
              "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "@ember/template",
            "module": "@ember/template"
          }
        ]
      },
      "version": "5.7.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-5.7.0",
          "type": "project-version"
        }
      }
    }
  }
}