{
  "data": {
    "id": "ember-data-3.12.4-MinimumSerializerInterface",
    "type": "class",
    "attributes": {
      "name": "MinimumSerializerInterface",
      "shortname": "MinimumSerializerInterface",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/serializer",
      "namespace": "",
      "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
      "line": 1,
      "description": "<html><head></head><body><h2 id=\"overview\">Overview</h2>\n<p>In order to properly manage and present your data, <code>EmberData</code>\nneeds to understand the structure of data it receives.</p>\n<p><code>Serializers</code> convert data between the server&apos;s API format and\nthe format <code>EmberData</code> understands.</p>\n<p>Data received from an API response is <code>&quot;normalized&quot;</code> into \n<a href=\"https://jsonapi.org/\">JSON:API</a> (the format used internally\nby <code>EmberData</code>), while data sent to an API is <code>&quot;serialized&quot;</code>\ninto the format the API expects.</p>\n<h3 id=\"implementing-a-serializer\">Implementing a Serializer</h3>\n<p>There are only two required serializer methods, one for\nnormalizing data from the server API format into <code>JSON:API</code>, and\nanother for serializing records via <code>Snapshot</code>s into the expected\nserver API format.</p>\n<p>To implement a serializer, export a class that conforms to the structure\ndescribed by the <a href=\"MinimumSerializerInterface\">MinimumSerializerInterface</a>\nfrom the <code>app/serializers/</code> directory. An example is below.</p>\n<div class=\"highlight ts\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">EmberObject</span> from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">EmberObject</span> </span>{\n  normalizeResponse(store, schema, rawPayload) {\n    <span class=\"keyword\">return</span> rawPayload;\n  }\n\n  serialize(snapshot, options) {\n    const serializedResource = {\n      id: snapshot.id(),\n      <span class=\"class\"><span class=\"keyword\">type</span></span>: snapshot.modelName,\n      attributes: snapshot.attributes()\n    };\n\n    <span class=\"keyword\">return</span> serializedResource;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"serializer-resolution\">Serializer Resolution</h4>\n<p><code>store.serializerFor(name)</code> will lookup serializers defined in\n<code>app/serializers</code> and return an instance. If no serializer is found, an\nerror will be thrown.</p>\n<p><code>serializerFor</code> first attempts to find a serializer with an exact match on <code>name</code>,\nthen falls back to checking for the presence of a serializer named <code>application</code>.</p>\n<div class=\"highlight ts\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>store.serializerFor(<span class=\"string\">&apos;author&apos;</span>);\n\n<span class=\"regexp\">//</span> lookup paths (<span class=\"keyword\">in</span> order) =&gt;\n<span class=\"regexp\">//</span>   app<span class=\"regexp\">/serializers/</span>author.js\n<span class=\"regexp\">//</span>   app<span class=\"regexp\">/serializers/</span>application.js</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Most requests in <code>ember-data</code> are made with respect to a particular <code>type</code> (or <code>modelName</code>)\n(e.g., &quot;get me the full collection of <strong>books</strong>&quot; or &quot;get me the <strong>employee</strong> whose id is 37&quot;). We\nrefer to this as the *&quot;primary&quot;* resource <code>type</code>.</p>\n<p>Typically <code>serializerFor</code> will be used to find a serializer with a name matching that of the primary\nresource <code>type</code> for the request, falling back to the <code>application</code> serializer for those types that\ndo not have a defined serializer. This is often described as a <code>per-model</code> or <code>per-type</code> strategy\nfor defining serializers. However, because APIs rarely format payloads per-type but rather\nper-API-version, this may not be a desired strategy.</p>\n<p>It is recommended that applications define only a single <code>application</code> adapter and serializer\nwhere possible.</p>\n<p>If you have multiple API formats and the per-type strategy is not viable, one strategy is to\nwrite an <code>application</code> adapter and serializer that make use of <code>options</code> to specify the desired\nformat when making a request.</p>\n<h3 id=\"using-a-serializer\">Using a Serializer</h3>\n<p>Any serializer in <code>app/serializers</code> can be looked up by <code>name</code> using <code>store.serializerFor(name)</code>.</p>\n<h3 id=\"default-serializers\">Default Serializers</h3>\n<p>For applications whose APIs are <em>very close to</em> or <em>exactly</em> the <code>REST</code> or <code>JSON:API</code>\nformat the <code>@ember-data/serializer</code> package contains implementations these applications can\nextend. It also contains a simple <code>JSONSerializer</code> for serializing to/from very basic JSON objects.</p>\n<p>Many applications will find writing their own serializer to be more performant and less\ncomplex than extending these classes even when their API format is very close to that expected\nby these serializers.</p>\n<p>It is recommended that apps write their own serializer to best suit the needs of their API and\napplication.\n  @mainName @ember-data/serializer\n  @tag main</p>\n</body></html>",
      "_main": true,
      "methods": [
        {
          "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
          "line": 114,
          "description": "<html><head></head><body><p>This method is responsible for normalizing the value resolved from the promise returned\nby an Adapter request into the format expected by the <code>Store</code>.</p>\n<p>The output should be a <a href=\"https://jsonapi.org/format/#document-structure\">JSON:API Document</a>\nwith the following additional restrictions:</p>\n<ul>\n<li><code>type</code> should be formatted in the <code>singular</code> <code>dasherized</code> <code>lowercase</code> form</li>\n<li><code>members</code> (the property names of attributes and relationships) should be formatted\n to match their definition in the corresponding <code>Model</code> definition. Typically this\n will be <code>camelCase</code>.</li>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md\"><code>lid</code></a> is\n a valid optional sibling to <code>id</code> and <code>type</code> in both <a href=\"https://jsonapi.org/format/#document-resource-objects\">Resources</a>\n and <a href=\"https://jsonapi.org/format/#document-resource-identifier-objects\">Resource Identifier Objects</a></li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "normalizeResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "- the store service that initiated the request being normalized",
              "type": "Store"
            },
            {
              "name": "schema",
              "description": "- An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
              "type": "ShimModelClass"
            },
            {
              "name": "rawPayload",
              "description": "- The raw JSON response data returned from an API request.\n This correlates to the value the promise returned by the adapter method that performed\n the request resolved to.",
              "type": "JSONObject"
            },
            {
              "name": "id",
              "description": "- For a `findRecord` request, this is the `id` initially provided\n in the call to `store.findRecord`. Else this value is `null`.",
              "type": "String|null"
            },
            {
              "name": "requestType",
              "description": "- The\n type of request the Adapter had been asked to perform.",
              "type": "'findRecord' | 'queryRecord' | 'findAll' | 'findBelongsTo' | 'findHasMany' | 'findMany' | 'query' | 'createRecord' | 'deleteRecord' | 'updateRecord'"
            }
          ],
          "return": {
            "description": "- a document following the structure of a [JSON:API Document](https://jsonapi.org/format/#document-structure).",
            "type": "JsonApiDocument"
          },
          "class": "MinimumSerializerInterface",
          "module": "@ember-data/serializer"
        },
        {
          "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
          "line": 162,
          "description": "<html><head></head><body><p>This method is responsible for serializing an individual record\nvia a <a href=\"Snapshot\">Snapshot</a> into the format expected by the API.</p>\n<p>This method is called by <code>snapshot.serialize()</code>.</p>\n<p>When using <code>Model</code>, this method is called by <code>record.serialize()</code>.</p>\n<p>When using <code>JSONAPIAdapter</code> or <code>RESTAdapter</code> this method is called\nby <code>updateRecord</code> and <code>createRecord</code> if <code>Serializer.serializeIntoHash</code>\nis not implemented.</p>\n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "- A Snapshot for the record to serialize",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "class": "MinimumSerializerInterface",
          "module": "@ember-data/serializer"
        },
        {
          "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
          "line": 181,
          "description": "<html><head></head><body><p>This method is intended to normalize data into a <a href=\"https://jsonapi.org/format/#document-structure\">JSON:API Document</a>\nwith a data member containing a single <a href=\"https://jsonapi.org/format/#document-resource-objects\">Resource</a>.</p>\n<ul>\n<li><code>type</code> should be formatted in the <code>singular</code> <code>dasherized</code> <code>lowercase</code> form</li>\n<li><code>members</code> (the property names of attributes and relationships) should be formatted\n to match their definition in the corresponding <code>Model</code> definition. Typically this\n will be <code>camelCase</code>.</li>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md\"><code>lid</code></a> is\n a valid optional sibling to <code>id</code> and <code>type</code> in both <a href=\"https://jsonapi.org/format/#document-resource-objects\">Resources</a>\n and <a href=\"https://jsonapi.org/format/#document-resource-identifier-objects\">Resource Identifier Objects</a></li>\n</ul>\n<p>This method is called by the <code>Store</code> when <code>store.normalize(modelName, payload)</code> is\ncalled. It is recommended to use <code>store.serializerFor(modelName).normalizeResponse</code>\nover <code>store.normalize</code>.</p>\n<p>This method may be called when also using the <code>RESTSerializer</code>\nwhen <code>serializer.pushPayload</code> is called by <code>store.pushPayload</code>.\nIt is recommended to use <code>store.push</code> over <code>store.pushPayload</code> after normalizing\nthe payload directly.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> push<span class=\"constructor\">Payload(<span class=\"params\">store</span>, <span class=\"params\">modelName</span>, <span class=\"params\">rawPayload</span>)</span> {\n  const ModelClass = store.model<span class=\"constructor\">For(<span class=\"params\">modelName</span>)</span>;\n  const serializer = store.serializer<span class=\"constructor\">For(<span class=\"params\">modelName</span>)</span>;\n  const jsonApiPayload = serializer.normalize<span class=\"constructor\">Response(<span class=\"params\">store</span>, ModelClass, <span class=\"params\">rawPayload</span>, <span class=\"params\">null</span>, &apos;<span class=\"params\">query</span>&apos;)</span>;\n\n  return store.push(jsonApiPayload);\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method may be called when also using the <code>JSONAPISerializer</code>\nwhen normalizing included records. If mixing serializer usage in this way\nwe recommend implementing this method, but caution that it may lead\nto unexpected mixing of formats.</p>\n<p>This method may also be called when normalizing embedded relationships when\nusing the <code>EmbeddedRecordsMixin</code>. If using this mixin in a serializer in\nyour application we recommend implementing this method, but caution that\nit may lead to unexpected mixing of formats.</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalize [OPTIONAL]",
          "access": "public",
          "tagname": "",
          "optional": 1,
          "params": [
            {
              "name": "schema",
              "description": "- An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
              "type": "ShimModelClass"
            },
            {
              "name": "rawPayload",
              "description": "- Some raw JSON data to be normalized into a [JSON:API Resource](https://jsonapi.org/format/#document-resource-objects).",
              "type": "JSONObject"
            },
            {
              "name": "prop",
              "description": "- When called by the `EmbeddedRecordsMixin` this param will be the\n property at which the object provided as rawPayload was found.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "- A [JSON:API Document](https://jsonapi.org/format/#document-structure)\n containing a single [JSON:API Resource](https://jsonapi.org/format/#document-resource-objects)\n as its primary data.",
            "type": "SingleResourceDocument"
          },
          "class": "MinimumSerializerInterface",
          "module": "@ember-data/serializer"
        },
        {
          "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
          "line": 237,
          "description": "<html><head></head><body><p>When using <code>JSONAPIAdapter</code> or <code>RESTAdapter</code> this method is called\nby <code>adapter.updateRecord</code> and <code>adapter.createRecord</code> if <code>Serializer.serializeIntoHash</code>\nis not implemented.</p>\n<p>You can use this method to customize the root keys serialized into the payload.\nThe hash property should be modified by reference.</p>\n<p>For instance, your API may expect resources to be keyed by underscored type in the payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attribute\">_user</span>: {\n    type: <span class=\"string\">&apos;user&apos;</span>,\n    id: <span class=\"string\">&apos;1&apos;</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Which when using these adapters can be achieved by implementing this method similar\nto the following:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>serializeIntoHash(hash, ModelClass, <span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>) {\n  hash[`_${<span class=\"keyword\">snapshot</span>.modelName}`] = this.serialize(<span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>).data;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeIntoHash [OPTIONAL]",
          "access": "public",
          "tagname": "",
          "optional": 1,
          "params": [
            {
              "name": "hash",
              "description": "- a top most object of the request payload onto\n which to append the serialized record"
            },
            {
              "name": "schema",
              "description": "- An object with methods for accessing information about\n the type, attributes and relationships of the primary type associated with the request.",
              "type": "ShimModelClass"
            },
            {
              "name": "snapshot",
              "description": "- A Snapshot for the record to serialize",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "MinimumSerializerInterface",
          "module": "@ember-data/serializer"
        },
        {
          "file": "../store/addon/-private/ts-interfaces/minimum-serializer-interface.ts",
          "line": 278,
          "description": "<html><head></head><body><p>This method allows for normalization of data when <code>store.pushPayload</code> is called\nand should be implemented if you want to use that method.</p>\n<p>The output should be a <a href=\"https://jsonapi.org/format/#document-structure\">JSON:API Document</a>\nwith the following additional restrictions:</p>\n<ul>\n<li><code>type</code> should be formatted in the <code>singular</code> <code>dasherized</code> <code>lowercase</code> form</li>\n<li><code>members</code> (the property names of attributes and relationships) should be formatted\n to match their definition in the corresponding <code>Model</code> definition. Typically this\n will be <code>camelCase</code>.</li>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0403-ember-data-identifiers.md\"><code>lid</code></a> is\n a valid optional sibling to <code>id</code> and <code>type</code> in both <a href=\"https://jsonapi.org/format/#document-resource-objects\">Resources</a>\n and <a href=\"https://jsonapi.org/format/#document-resource-identifier-objects\">Resource Identifier Objects</a></li>\n</ul>\n<p>If you need better control over normalization or want access to the records being added or updated\nin the store, we recommended using <code>store.push</code> over <code>store.pushPayload</code> after normalizing\nthe payload directly. This can even take advantage of an existing serializer for the format\nthe data is in, for example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">function</span> push<span class=\"constructor\">Payload(<span class=\"params\">store</span>, <span class=\"params\">modelName</span>, <span class=\"params\">rawPayload</span>)</span> {\n  const ModelClass = store.model<span class=\"constructor\">For(<span class=\"params\">modelName</span>)</span>;\n  const serializer = store.serializer<span class=\"constructor\">For(<span class=\"params\">modelName</span>)</span>;\n  const jsonApiPayload = serializer.normalize<span class=\"constructor\">Response(<span class=\"params\">store</span>, ModelClass, <span class=\"params\">rawPayload</span>, <span class=\"params\">null</span>, &apos;<span class=\"params\">query</span>&apos;)</span>;\n\n  return store.push(jsonApiPayload);\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushPayload [OPTIONAL]",
          "access": "public",
          "tagname": "",
          "optional": 1,
          "params": [
            {
              "name": "store",
              "description": "- the store service that initiated the request being normalized",
              "type": "Store"
            },
            {
              "name": "rawPayload",
              "description": "- The raw JSON response data returned from an API request.\n This JSON should be in the API format expected by the serializer.",
              "type": "JSONObject"
            }
          ],
          "return": {
            "description": "- a document following the structure of a [JSON:API Document](https://jsonapi.org/format/#document-structure)",
            "type": "JsonApiDocument"
          },
          "class": "MinimumSerializerInterface",
          "module": "@ember-data/serializer"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-3.12.4-@ember-data/serializer",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-3.12.4",
          "type": "project-version"
        }
      }
    }
  }
}