{
  "data": {
    "id": "ember-data-5.3.0-InvalidError",
    "type": "class",
    "attributes": {
      "name": "InvalidError",
      "shortname": "InvalidError",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/adapter/error",
      "namespace": "",
      "file": "../adapter/src/error.js",
      "line": 119,
      "access": "public",
      "description": "<html><head></head><body><p>A <code>InvalidError</code> is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually, this means a\nrecord failed some form of server-side validation. When a promise\nfrom an adapter is rejected with a <code>InvalidError</code> the record will\ntransition to the <code>invalid</code> state and the errors will be set to the\n<code>errors</code> property on the record.</p>\n<p>For Ember Data to correctly map errors to their corresponding\nproperties on the model, Ember Data expects each error to be\na valid JSON-API error object with a <code>source/pointer</code> that matches\nthe property name. For example, if you had a Post model that\nlooked like this.</p>\n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>(<span class=\"symbol\">&apos;strin</span>g&apos;) content;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To show an error from the server related to the <code>title</code> and\n<code>content</code> properties your adapter could return a promise that\nrejects with a <code>InvalidError</code> object that looks like this:</p>\n<div class=\"highlight app/adapters/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RSVP</span> from <span class=\"symbol\">&apos;RSV</span>P&apos;;\n<span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n<span class=\"keyword\">import</span> { <span class=\"type\">InvalidError</span> } from &apos;<span class=\"meta\">@ember</span>-data/adapter/error&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  updateRecord() {\n    <span class=\"comment\">// Fictional adapter that always rejects</span>\n    <span class=\"keyword\">return</span> <span class=\"type\">RSVP</span>.reject(<span class=\"keyword\">new</span> <span class=\"type\">InvalidError</span>([\n      {\n        detail: <span class=\"symbol\">&apos;Must</span> be unique&apos;,\n        source: { pointer: &apos;/data/attributes/title&apos; }\n      },\n      {\n        detail: <span class=\"symbol\">&apos;Must</span> not be blank&apos;,\n        source: { pointer: &apos;/data/attributes/content&apos;}\n      }\n    ]));\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Your backend may use different property names for your records the\nstore will attempt to extract and normalize the errors using the\nserializer&apos;s <code>extractErrors</code> method before the errors get added to\nthe model. As a result, it is safe for the <code>InvalidError</code> to\nwrap the error payload unaltered.</p>\n</body></html>",
      "tagname": "",
      "extends": "AdapterError",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-data-5.3.0-AdapterError",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.0-@ember-data/adapter/error",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.0",
          "type": "project-version"
        }
      }
    }
  }
}