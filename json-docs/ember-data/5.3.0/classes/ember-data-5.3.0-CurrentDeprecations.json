{
  "data": {
    "id": "ember-data-5.3.0-CurrentDeprecations",
    "type": "class",
    "attributes": {
      "name": "CurrentDeprecations",
      "shortname": "CurrentDeprecations",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/deprecations",
      "namespace": "",
      "file": "../private-build-infra/virtual-packages/deprecations.js",
      "line": 79,
      "description": "<html><head></head><body><p>The following list represents deprecations currently active.</p>\n<p>Some deprecation flags guard multiple deprecation IDs. All\nassociated IDs are listed.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "methods": [],
      "events": [],
      "properties": [
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 91,
          "description": "<html><head></head><body><p><strong>id: ember-data:deprecate-non-strict-types</strong></p>\n<p>Currently, EmberData expects that the <code>type</code> property associated with\na resource follows several conventions.</p>\n<ul>\n<li>The <code>type</code> property must be a non-empty string</li>\n<li>The <code>type</code> property must be singular</li>\n<li>The <code>type</code> property must be dasherized</li>\n</ul>\n<p>We are deprecating support for types that do not match this pattern\nin order to unlock future improvements in which we can support <code>type</code>\nbeing any string of your choosing.</p>\n<p>The goal is that in the future, you will be able to use any string\nso long as it matches what your configured cache, identifier generation,\nand schemas expect.</p>\n<p>E.G. It will matter not that your string is in a specific format like\nsingular, dasherized, etc. so long as everywhere you refer to the type\nyou use the same string.</p>\n<p>If using @ember-data/model, there will always be a restriction that the\n<code>type</code> must match the path on disk where the model is defined.</p>\n<p>e.g. <code>app/models/foo/bar-bem.js</code> must have a type of <code>foo/bar-bem</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "DEPRECATE_NON_STRICT_TYPES",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        },
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 125,
          "description": "<html><head></head><body><p><strong>id: ember-data:deprecate-non-strict-id</strong></p>\n<p>Currently, EmberData expects that the <code>id</code> property associated with\na resource is a string.</p>\n<p>However, for legacy support in many locations we would accept a number\nwhich would then immediately be coerced into a string.</p>\n<p>We are deprecating this legacy support for numeric IDs.</p>\n<p>The goal is that in the future, you will be able to use any ID format\nso long as everywhere you refer to the ID you use the same format.</p>\n<p>However, for identifiers we will always use string IDs and so any\ncustom identifier configuration should provide a string ID.</p>\n</body></html>",
          "itemtype": "property",
          "name": "DEPRECATE_NON_STRICT_ID",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        },
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 149,
          "description": "<html><head></head><body><p><strong>id: <none yet=\"\" assigned=\"\"></none></strong></p>\n<p>This is a planned deprecation which will trigger when observer or computed\nchains are used to watch for changes on any EmberData RecordArray, ManyArray\nor PromiseManyArray.</p>\n<p>Support for these chains is currently guarded by the deprecation flag\nlisted here, enabling removal of the behavior if desired.</p>\n</body></html>",
          "itemtype": "property",
          "name": "DEPRECATE_COMPUTED_CHAINS",
          "since": "5.0",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        },
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 166,
          "description": "<html><head></head><body><p><strong>id: ember-data:deprecate-legacy-imports</strong></p>\n<p>Deprecates when importing from <code>ember-data/*</code> instead of <code>@ember-data/*</code>\nin order to prepare for the eventual removal of the legacy <code>ember-data/*</code></p>\n<p>All imports from <code>ember-data/*</code> should be updated to <code>@ember-data/*</code>\nexcept for <code>ember-data/store</code>. When you are using <code>ember-data</code> (as opposed to\ninstalling the indivudal packages) you should import from <code>ember-data/store</code>\ninstead of <code>@ember-data/store</code> in order to receive the appropriate configuration\nof defaults.</p>\n</body></html>",
          "itemtype": "property",
          "name": "DEPRECATE_LEGACY_IMPORTS",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        },
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 185,
          "description": "<html><head></head><body><p><strong>id: ember-data:deprecate-non-unique-collection-payloads</strong></p>\n<p>Deprecates when the data for a hasMany relationship contains\nduplicate identifiers.</p>\n<p>Previously, relationships would silently de-dupe the data\nwhen received, but this behavior is being removed in favor\nof erroring if the same related record is included multiple\ntimes.</p>\n<p>For instance, in JSON:API the below relationship data would\nbe considered invalid:</p>\n<div class=\"highlight json\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>{\n <span class=\"attr\">&quot;data&quot;</span>: {\n  <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;article&quot;</span>,\n   <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,\n   <span class=\"attr\">&quot;relationships&quot;</span>: {\n     <span class=\"attr\">&quot;comments&quot;</span>: {\n       <span class=\"attr\">&quot;data&quot;</span>: [\n         { <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;comment&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span> },\n         { <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;comment&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span> },\n         { <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;comment&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span> } // duplicate\n       ]\n    }\n }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To resolve this deprecation, either update your server to\nnot include duplicate data, or implement normalization logic\nin either a request handler or serializer which removes\nduplicate data from relationship payloads.</p>\n</body></html>",
          "itemtype": "property",
          "name": "DEPRECATE_NON_UNIQUE_PAYLOADS",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        },
        {
          "file": "../packages/private-build-infra/virtual-packages/deprecations.js",
          "line": 228,
          "itemtype": "property",
          "description": "<html><head></head><body><p><strong>id: ember-data:deprecate-relationship-remote-update-clearing-local-state</strong></p>\n<p>Deprecates when a relationship is updated remotely and the local state\nis cleared of all changes except for &quot;new&quot; records.</p>\n<p>Instead, any records not present in the new payload will be considered\n&quot;removed&quot; while any records present in the new payload will be considered &quot;added&quot;.</p>\n<p>This allows us to &quot;commit&quot; local additions and removals, preserving any additions\nor removals that are not yet reflected in the remote state.</p>\n<p>For instance, given the following initial state:</p>\n<p>remote: A, B, C\nlocal: add D, E\n       remove B, C\n=&gt; A, D, E</p>\n<p>If after an update, the remote state is now A, B, D, F then the new state will be</p>\n<p>remote: A, B, D, F\nlocal: add E\n       remove B\n=&gt; A, D, E, F</p>\n<p>Under the old behavior the updated local state would instead have been\n=&gt; A, B, D, F</p>\n<p>Similarly, if a belongsTo remote State was A while its local state was B,\nthen under the old behavior if the remote state changed to C, the local state\nwould be updated to C. Under the new behavior, the local state would remain B.</p>\n<p>If the remote state was A while its local state was <code>null</code>, then under the old\nbehavior if the remote state changed to C, the local state would be updated to C.\nUnder the new behavior, the local state would remain <code>null</code>.</p>\n<p>Thus the new correct mental model is that the state of the relationship at any point\nin time is whatever the most recent remote state is, plus any local additions or removals\nyou have made that have not yet been reflected by the remote state.</p>\n<blockquote>\n<p>Note: The old behavior extended to modifying the inverse of a relationship. So if\nyou had local state not reflected in the new remote state, inverses would be notified\nand their state reverted as well when &quot;resetting&quot; the relationship.\nUnder the new behavior, since the local state is preserved the inverses will also\nnot be reverted.</p>\n</blockquote>\n<h3 id=\"resolving-this-deprecation\">Resolving this deprecation</h3>\n<p>Resolving this deprecation can be done individually for each relationship\nor globally for all relationships.</p>\n<p>To resolve it globally, set the <code>DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE</code>\nto <code>false</code> in ember-cli-build.js</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>let app = <span class=\"built_in\">new</span> EmberApp(defaults, {\n  emberData: {\n    deprecations: {\n       // <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"keyword\">false</span> <span class=\"keyword\">to</span> strip the deprecated code (thereby opting <span class=\"keyword\">into</span> the <span class=\"built_in\">new</span> behavior)\n      DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE: <span class=\"keyword\">false</span>\n    }\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To resolve this deprecation on an individual relationship, adjust the <code>options</code> passed to\nthe relationship. For relationships with inverses, both sides MUST be migrated to the new\nbehavior at the same time.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasmany</span>(<span class=\"symbol\">&apos;perso</span>n&apos;, {\n   async: <span class=\"literal\">false</span>,\n   inverse: <span class=\"literal\">null</span>,\n   resetOnRemoteUpdate: <span class=\"literal\">false</span>\n }) children;\n  <span class=\"meta\">@belongsto</span>(<span class=\"symbol\">&apos;perso</span>n&apos;, {\n   async: <span class=\"literal\">false</span>,\n   inverse: <span class=\"literal\">null</span>,\n   resetOnRemoteUpdate: <span class=\"literal\">false</span>\n }) parent;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<blockquote>\n<p>Note: false is the only valid value here, all other values (including missing)\nwill be treated as true, where <code>true</code> is the legacy behavior that is now deprecated.</p>\n</blockquote>\n<p>Once you have migrated all relationships, you can remove the the resetOnRemoteUpdate\noption and set the deprecation flag to false in ember-cli-build.</p>\n<h3 id=\"what-if-i-dont-want-the-new-behavior\">What if I don&apos;t want the new behavior?</h3>\n<p>EmberData&apos;s philosophy is to not make assumptions about your application. Where possible\nwe seek out &quot;100%&quot; solutions &#x2013; solutions that work for all use cases - and where that is\nnot possible we default to &quot;90%&quot; solutions &#x2013; solutions that work for the vast majority of use\ncases. In the case of &quot;90%&quot; solutions we look for primitives that allow you to resolve the\n10% case in your application. If no such primitives exist, we provide an escape hatch that\nensures you can build the behavior you need without adopting the cost of the default solution.</p>\n<p>In this case, the old behavior was a &quot;40%&quot; solution. The inability for an application developer\nto determine what changes were made locally, and thus what changes should be preserved, made\nit impossible to build certain features easily, or in some cases at all. The proliferation of\nfeature requests, bug reports (from folks surprised by the prior behavior) and addon attempts\nin this space are all evidence of this.</p>\n<p>We believe the new behavior is a &quot;90%&quot; solution. It works for the vast majority of use cases,\noften without noticeable changes to existing application behavior, and provides primitives that\nallow you to build the behavior you need for the remaining 10%.</p>\n<p>The great news is that this behavior defaults to trusting your API similar to the old behavior.\nIf your API is correct, you will not need to make any changes to your application to adopt\nthe new behavior.</p>\n<p>This means the 10% cases are those where you can&apos;t trust your API to provide the correct\ninformation. In these cases, because you now have cheap access to a diff of the relationship\nstate, there are a few options that weren&apos;t available before:</p>\n<ul>\n<li>you can adjust returned API payloads to contain the expected changes that it doesn&apos;t include</li>\n<li>you can modify local state by adding or removing records on the HasMany record array to remove\nany local changes that were not returned by the API.</li>\n<li>you can use <code>&lt;Cache&gt;.mutate(mutation)</code> to directly modify the local cache state of the relationship\nto match the expected state.</li>\n</ul>\n<p>What this version (5.3) does not yet provide is a way to directly modify the cache&apos;s remote state\nfor the relationship via public APIs other than via the broader action of upserting a response via\n<code>&lt;Cache&gt;.put(document)</code>. However, such an API was sketched in the Cache 2.1 RFC\n<code>&lt;Cache&gt;.patch(operation)</code> and is likely to be added in a future 5.x release of EmberData.</p>\n<p>This version (5.3) also does not yet provide a way to directly modify the graph (a general purpose\nsubset of cache behaviors specific to relationships) via public APIs. However, during the\n5.x release series we will be working on finalizing the Graph API and making it public.</p>\n<p>If none of these options work for you, you can always opt-out more broadly by implementing\na custom Cache with the relationship behaviors you need.</p>\n</body></html>",
          "name": "DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@ember-data/deprecations"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.0-@ember-data/deprecations",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.0",
          "type": "project-version"
        }
      }
    }
  }
}