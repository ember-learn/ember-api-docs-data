{
  "data": {
    "id": "ember-data-5.3.0-RESTAdapter",
    "type": "class",
    "attributes": {
      "name": "RESTAdapter",
      "shortname": "RESTAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/adapter/rest",
      "namespace": "",
      "file": "../adapter/src/rest.ts",
      "line": 69,
      "description": "<html><head></head><body><blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n <p>\n   &#x26A0;&#xFE0F; <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n   If starting a new app or thinking of implementing a new adapter, consider writing a\n   <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n </p>\n </blockquote>\n\n<p> The REST adapter allows your store to communicate with an HTTP server by\n transmitting JSON via XHR.</p>\n<p> This adapter is designed around the idea that the JSON exchanged with\n the server should be conventional. It builds URLs in a manner that follows\n the structure of most common REST-style web services.</p>\n<h2 id=\"success-and-failure\">Success and failure</h2>\n<p> The REST adapter will consider a success any response with a status code\n of the 2xx family (&quot;Success&quot;), as well as 304 (&quot;Not Modified&quot;). Any other\n status code will be considered a failure.</p>\n<p> On success, the request promise will be resolved with the full response\n payload.</p>\n<p> Failed responses with status code 422 (&quot;Unprocessable Entity&quot;) will be\n considered &quot;invalid&quot;. The response will be discarded, except for the\n <code>errors</code> key. The request promise will be rejected with a <code>InvalidError</code>.\n This error object will encapsulate the saved <code>errors</code> value.</p>\n<p> Any other status codes will be treated as an &quot;adapter error&quot;. The request\n promise will be rejected, similarly to the &quot;invalid&quot; case, but with\n an instance of <code>AdapterError</code> instead.</p>\n<h2 id=\"json-structure\">JSON Structure</h2>\n<p> The REST adapter expects the JSON returned from your server to follow\n these conventions.</p>\n<h3 id=\"object-root\">Object Root</h3>\n<p> The JSON payload should be an object that contains the record inside a\n root property. For example, in response to a <code>GET</code> request for\n <code>/posts/1</code>, the JSON should look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;posts&quot;</span>: {\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n     <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;I&apos;m Running to Reform the W3C&apos;s Tag&quot;</span>,\n     <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;Yehuda Katz&quot;</span>\n   }\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Similarly, in response to a <code>GET</code> request for <code>/posts</code>, the JSON should\n look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;posts&quot;</span>: [\n     {\n       <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n       <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;I&apos;m Running to Reform the W3C&apos;s Tag&quot;</span>,\n       <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;Yehuda Katz&quot;</span>\n     },\n     {\n       <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>,\n       <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n       <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;D2H&quot;</span>\n     }\n   ]\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Note that the object root can be pluralized for both a single-object response\n and an array response: the REST adapter is not strict on this. Further, if the\n HTTP server responds to a <code>GET</code> request to <code>/posts/1</code> (e.g. the response to a\n <code>findRecord</code> query) with more than one object in the array, Ember Data will\n only display the object with the matching ID.</p>\n<h3 id=\"conventional-names\">Conventional Names</h3>\n<p> Attribute names in your JSON payload should be the camelCased versions of\n the attributes in your Ember.js models.</p>\n<p> For example, if you have a <code>Person</code> model:</p>\n<div class=\"highlight app/models/person.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> Model, { attr } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/model&apos;</span>;\n\n <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Model.extend({\n   firstName: attr(<span class=\"string\">&apos;string&apos;</span>),\n   lastName: attr(<span class=\"string\">&apos;string&apos;</span>),\n   occupation: attr(<span class=\"string\">&apos;string&apos;</span>)\n });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> The JSON returned should look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;people&quot;</span>: {\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">5</span>,\n     <span class=\"attr\">&quot;firstName&quot;</span>: <span class=\"string\">&quot;Zaphod&quot;</span>,\n     <span class=\"attr\">&quot;lastName&quot;</span>: <span class=\"string\">&quot;Beeblebrox&quot;</span>,\n     <span class=\"attr\">&quot;occupation&quot;</span>: <span class=\"string\">&quot;President&quot;</span>\n   }\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"relationships\">Relationships</h4>\n<p> Relationships are usually represented by ids to the record in the\n relationship. The related records can then be sideloaded in the\n response under a key for the type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;posts&quot;</span>: {\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">5</span>,\n     <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;I&apos;m Running to Reform the W3C&apos;s Tag&quot;</span>,\n     <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;Yehuda Katz&quot;</span>,\n     <span class=\"attr\">&quot;comments&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]\n   },\n   <span class=\"attr\">&quot;comments&quot;</span>: [{\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n     <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;User 1&quot;</span>,\n     <span class=\"attr\">&quot;message&quot;</span>: <span class=\"string\">&quot;First!&quot;</span>,\n   }, {\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>,\n     <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;User 2&quot;</span>,\n     <span class=\"attr\">&quot;message&quot;</span>: <span class=\"string\">&quot;Good Luck!&quot;</span>,\n   }]\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> If the records in the relationship are not known when the response\n is serialized it&apos;s also possible to represent the relationship as a\n URL using the <code>links</code> key in the response. Ember Data will fetch\n this URL to resolve the relationship when it is accessed for the\n first time.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;posts&quot;</span>: {\n     <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">5</span>,\n     <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;I&apos;m Running to Reform the W3C&apos;s Tag&quot;</span>,\n     <span class=\"attr\">&quot;author&quot;</span>: <span class=\"string\">&quot;Yehuda Katz&quot;</span>,\n     <span class=\"attr\">&quot;links&quot;</span>: {\n       <span class=\"attr\">&quot;comments&quot;</span>: <span class=\"string\">&quot;/posts/5/comments&quot;</span>\n     }\n   }\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"errors\">Errors</h3>\n<p> If a response is considered a failure, the JSON payload is expected to include\n a top-level key <code>errors</code>, detailing any specific issues. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre> {\n   <span class=\"attr\">&quot;errors&quot;</span>: {\n     <span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;Something went wrong&quot;</span>\n   }\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> This adapter does not make any assumptions as to the format of the <code>errors</code>\n object. It will simply be passed along as is, wrapped in an instance\n of <code>InvalidError</code> or <code>AdapterError</code>. The serializer can interpret it\n afterwards.</p>\n<h2 id=\"customization\">Customization</h2>\n<h3 id=\"endpoint-path-customization\">Endpoint path customization</h3>\n<p> Endpoint paths can be prefixed with a <code>namespace</code> by setting the namespace\n property on the adapter:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\n export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n   namespace = <span class=\"symbol\">&apos;api</span>/<span class=\"number\">1</span>&apos;;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Requests for the <code>Person</code> model would now target <code>/api/1/people/1</code>.</p>\n<h3 id=\"host-customization\">Host customization</h3>\n<p> An adapter can target other hosts by setting the <code>host</code> property.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\n export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n   host = <span class=\"symbol\">&apos;https</span>:<span class=\"comment\">//api.example.com&apos;;</span>\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"headers-customization\">Headers customization</h3>\n<p> Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary\n headers can be set as key/value pairs on the <code>RESTAdapter</code>&apos;s <code>headers</code>\n object and Ember Data will send them along with each ajax request.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n <span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n   headers: computed(function() {\n     <span class=\"keyword\">return</span> {\n       <span class=\"symbol\">&apos;API_KE</span>Y&apos;: <span class=\"symbol\">&apos;secret</span> key&apos;,\n       <span class=\"symbol\">&apos;ANOTHER_HEADE</span>R&apos;: <span class=\"symbol\">&apos;Some</span> header value&apos;\n     };\n   }\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> <code>headers</code> can also be used as a computed property to support dynamic\n headers. In the example below, the <code>session</code> object has been\n injected into an adapter by Ember&apos;s container.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n <span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n   headers: computed(<span class=\"symbol\">&apos;session</span>.authToken&apos;, function() {\n     <span class=\"keyword\">return</span> {\n       <span class=\"symbol\">&apos;API_KE</span>Y&apos;: <span class=\"keyword\">this</span>.session.authToken,\n       <span class=\"symbol\">&apos;ANOTHER_HEADE</span>R&apos;: <span class=\"symbol\">&apos;Some</span> header value&apos;\n     };\n   })\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> In some cases, your dynamic headers may require data from some\n object outside of Ember&apos;s observer system (for example\n <code>document.cookie</code>). You can use the\n <a href=\"/api/classes/Ember.ComputedProperty.html?anchor=volatile\">volatile</a>\n function to set the property into a non-cached mode causing the headers to\n be recomputed with every request.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre> <span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n <span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\n export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n   headers: computed(function() {\n     <span class=\"keyword\">return</span> {\n       <span class=\"symbol\">&apos;API_KE</span>Y&apos;: document.cookie.<span class=\"keyword\">match</span>(/apiKey\\=([^;]*)/)[&apos;<span class=\"number\">1</span>&apos;],\n       <span class=\"symbol\">&apos;ANOTHER_HEADE</span>R&apos;: <span class=\"symbol\">&apos;Some</span> header value&apos;\n     };\n   }).volatile()\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>  @mainName @ember-data/adapter/rest\n  @tag main</p>\n</body></html>",
      "_main": true,
      "access": "public",
      "tagname": "",
      "is_constructor": 1,
      "extends": "Adapter",
      "uses": [
        "BuildURLMixin"
      ],
      "methods": [
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 370,
          "description": "<html><head></head><body><p>By default, the RESTAdapter will send the query params sorted alphabetically to the\nserver.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>store.query(<span class=\"string\">&apos;posts&apos;</span>, { <span class=\"string\">sort:</span> <span class=\"string\">&apos;price&apos;</span>, <span class=\"string\">category:</span> <span class=\"string\">&apos;pets&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will generate a requests like this <code>/posts?category=pets&amp;sort=price</code>, even if the\nparameters were specified in a different order.</p>\n<p>That way the generated URL will be deterministic and that simplifies caching mechanisms\nin the backend.</p>\n<p>Setting <code>sortQueryParams</code> to a falsey value will respect the original order.</p>\n<p>In case you want to sort the query parameters with a different criteria, set\n<code>sortQueryParams</code> to your custom sort function.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  sortQueryParams(params) {\n    let sortedKeys = <span class=\"type\">Object</span>.keys(params).sort().reverse();\n    let len = sortedKeys.length, newParams = {};\n\n    <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; len; i++) {\n      newParams[sortedKeys[i]] = params[sortedKeys[i]];\n    }\n\n    <span class=\"keyword\">return</span> newParams;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "sortQueryParams",
          "params": [
            {
              "name": "obj",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 552,
          "description": "<html><head></head><body><p>Called by the store in order to fetch the JSON for a given\ntype and ID.</p>\n<p>The <code>findRecord</code> method makes an Ajax request to a URL computed by\n<code>buildURL</code>, and returns a promise for the resulting payload.</p>\n<p>This method performs an HTTP <code>GET</code> request with the id provided as part of the query string.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "findRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 577,
          "description": "<html><head></head><body><p>Called by the store in order to fetch a JSON array for all\nof the records for a given type.</p>\n<p>The <code>findAll</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a\npromise for the resulting payload.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findAll",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "neverSet",
              "description": "a value is never provided to this argument",
              "type": "Undefined"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 608,
          "description": "<html><head></head><body><p>Called by the store in order to fetch a JSON array for\nthe records that match a particular query.</p>\n<p>The <code>query</code> method makes an Ajax (HTTP GET) request to a URL\ncomputed by <code>buildURL</code>, and returns a promise for the resulting\npayload.</p>\n<p>The <code>query</code> argument is a simple JavaScript object that will be passed directly\nto the server as parameters.</p>\n</body></html>",
          "itemtype": "method",
          "name": "query",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "recordArray",
              "description": "",
              "type": "Collection"
            },
            {
              "name": "adapterOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 638,
          "description": "<html><head></head><body><p>Called by the store in order to fetch a JSON object for\nthe record that matches a particular query.</p>\n<p>The <code>queryRecord</code> method makes an Ajax (HTTP GET) request to a URL\ncomputed by <code>buildURL</code>, and returns a promise for the resulting\npayload.</p>\n<p>The <code>query</code> argument is a simple JavaScript object that will be passed directly\nto the server as parameters.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "queryRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "adapterOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 673,
          "description": "<html><head></head><body><p>Called by the store in order to fetch several records together if <code>coalesceFindRequests</code> is true</p>\n<p>For example, if the original payload looks like:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n  <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n  <span class=\"attr\">&quot;comments&quot;</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The IDs will be passed as a URL-encoded Array of IDs, in this form:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>ids<span class=\"string\">[]</span>=<span class=\"number\">1</span>&amp;ids<span class=\"string\">[]</span>=<span class=\"number\">2</span>&amp;ids<span class=\"string\">[]</span>=<span class=\"number\">3</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Many servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.</p>\n<p>The <code>findMany</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a\npromise for the resulting payload.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "ids",
              "description": "",
              "type": "Array"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 712,
          "description": "<html><head></head><body><p>Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of <code>links</code>).</p>\n<p>For example, if your original payload looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;post&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n    <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n    <span class=\"attr\">&quot;links&quot;</span>: { <span class=\"attr\">&quot;comments&quot;</span>: <span class=\"string\">&quot;/posts/1/comments&quot;</span> }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method will be called with the parent record and <code>/posts/1/comments</code>.</p>\n<p>The <code>findHasMany</code> method will make an Ajax (HTTP GET) request to the originally specified URL.</p>\n<p>The format of your <code>links</code> value will influence the final request URL via the <code>urlPrefix</code> method:</p>\n<ul>\n<li><p>Links beginning with <code>//</code>, <code>http://</code>, <code>https://</code>, will be used as is, with no further manipulation.</p>\n</li>\n<li><p>Links beginning with a single <code>/</code> will have the current adapter&apos;s <code>host</code> value prepended to it.</p>\n</li>\n<li><p>Links with no beginning <code>/</code> will have a parentURL prepended to it, via the current adapter&apos;s <code>buildURL</code>.</p>\n</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "findHasMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "url",
              "description": "",
              "type": "String"
            },
            {
              "name": "relationship",
              "description": "meta object describing the relationship",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 767,
          "description": "<html><head></head><body><p>Called by the store in order to fetch the JSON for the unloaded record in a\nbelongs-to relationship that was originally specified as a URL (inside of\n<code>links</code>).</p>\n<p>For example, if your original payload looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;person&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>,\n    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Dale&quot;</span>,\n    <span class=\"attr\">&quot;links&quot;</span>: { <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;/people/1/group&quot;</span> }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method will be called with the parent record and <code>/people/1/group</code>.</p>\n<p>The <code>findBelongsTo</code> method will make an Ajax (HTTP GET) request to the originally specified URL.</p>\n<p>The format of your <code>links</code> value will influence the final request URL via the <code>urlPrefix</code> method:</p>\n<ul>\n<li><p>Links beginning with <code>//</code>, <code>http://</code>, <code>https://</code>, will be used as is, with no further manipulation.</p>\n</li>\n<li><p>Links beginning with a single <code>/</code> will have the current adapter&apos;s <code>host</code> value prepended to it.</p>\n</li>\n<li><p>Links with no beginning <code>/</code> will have a parentURL prepended to it, via the current adapter&apos;s <code>buildURL</code>.</p>\n</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "findBelongsTo",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "url",
              "description": "",
              "type": "String"
            },
            {
              "name": "relationship",
              "description": "meta object describing the relationship",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 816,
          "description": "<html><head></head><body><p>Called by the store when a newly created record is\nsaved via the <code>save</code> method on a model record instance.</p>\n<p>The <code>createRecord</code> method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by <code>buildURL</code>.</p>\n<p>See <code>serialize</code> for information on how to customize the serialized form\nof a record.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 841,
          "description": "<html><head></head><body><p>Called by the store when an existing record is saved\nvia the <code>save</code> method on a model record instance.</p>\n<p>The <code>updateRecord</code> method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by <code>buildURL</code>.</p>\n<p>See <code>serialize</code> for information on how to customize the serialized form\nof a record.</p>\n</body></html>",
          "itemtype": "method",
          "name": "updateRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "schema",
              "description": "",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 868,
          "description": "<html><head></head><body><p>Called by the store when a record is deleted.</p>\n<p>The <code>deleteRecord</code> method  makes an Ajax (HTTP DELETE) request to a URL computed by <code>buildURL</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 918,
          "description": "<html><head></head><body><p>Organize records into groups, each of which is to be passed to separate\ncalls to <code>findMany</code>.</p>\n<p>This implementation groups together records that have the same base URL but\ndiffering ids. For example <code>/comments/1</code> and <code>/comments/2</code> will be grouped together\nbecause we know findMany can coalesce them together as <code>/comments?ids[]=1&amp;ids[]=2</code></p>\n<p>It also supports urls where ids are passed as a query param, such as <code>/comments?id=1</code>\nbut not those where there is more than 1 query param such as <code>/comments?id=2&amp;name=David</code>\nCurrently only the query param of <code>id</code> is supported. If you need to support others, please\noverride this or the <code>_stripIDFromURL</code> method.</p>\n<p>It does not group records that have differing base urls, such as for example: <code>/posts/1/comments/2</code>\nand <code>/posts/2/comments/3</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "groupRecordsForFindMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
            "type": "Array"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 965,
          "description": "<html><head></head><body><p>Takes an ajax response, and returns the json payload or an error.</p>\n<p>By default this hook just returns the json payload passed to it.\nYou might want to override it in two cases:</p>\n<ol>\n<li><p>Your API might return useful results in the response headers.\nResponse headers are passed in as the second argument.</p>\n</li>\n<li><p>Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a <code>InvalidError</code> or a\n<code>AdapterError</code> (or a sub class) from this hook and it will automatically\nreject the promise and put your record into the invalid or error state.</p>\n</li>\n</ol>\n<p>Returning a <code>InvalidError</code> from this method will cause the\nrecord to transition into the <code>invalid</code> state and make the\n<code>errors</code> object available on the record. When returning an\n<code>InvalidError</code> the store will attempt to normalize the error data\nreturned from the server using the serializer&apos;s <code>extractErrors</code>\nmethod.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "handleResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "status",
              "description": "",
              "type": "Number"
            },
            {
              "name": "headers",
              "description": "",
              "type": "Object"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "requestData",
              "description": "- the original request information",
              "type": "Object"
            }
          ],
          "return": {
            "description": "response",
            "type": "Object | AdapterError"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1028,
          "description": "<html><head></head><body><p>Default <code>handleResponse</code> implementation uses this hook to decide if the\nresponse is a success.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "isSuccess",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "status",
              "description": "",
              "type": "Number"
            },
            {
              "name": "headers",
              "description": "",
              "type": "Object"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1044,
          "description": "<html><head></head><body><p>Default <code>handleResponse</code> implementation uses this hook to decide if the\nresponse is an invalid error.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "isInvalid",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "status",
              "description": "",
              "type": "Number"
            },
            {
              "name": "headers",
              "description": "",
              "type": "Object"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1060,
          "description": "<html><head></head><body><p>Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.</p>\n<p>When the server responds with a payload, Ember Data will call into <code>extractSingle</code>\nor <code>extractArray</code> (depending on whether the original query was for one record or\nmany records).</p>\n<p>By default, <code>ajax</code> method has the following behavior:</p>\n<ul>\n<li>It sets the response <code>dataType</code> to <code>&quot;json&quot;</code></li>\n<li>If the HTTP method is not <code>&quot;GET&quot;</code>, it sets the <code>Content-Type</code> to be\n<code>application/json; charset=utf-8</code></li>\n<li>If the HTTP method is not <code>&quot;GET&quot;</code>, it stringifies the data passed in. The\ndata is the serialized record in the case of a save.</li>\n<li>Registers success and failure handlers.</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "ajax",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "url",
              "description": "",
              "type": "String"
            },
            {
              "name": "type",
              "description": "The request type GET, POST, PUT, DELETE etc.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1105,
          "itemtype": "method",
          "name": "_ajaxRequest",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "jQuery ajax options to be used for the ajax request",
              "type": "Object"
            }
          ],
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1129,
          "itemtype": "method",
          "name": "ajaxOptions",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "url",
              "description": "",
              "type": "String"
            },
            {
              "name": "type",
              "description": "The request type GET, POST, PUT, DELETE etc.",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1204,
          "itemtype": "method",
          "name": "parseErrorResponse",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "responseText",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1222,
          "itemtype": "method",
          "name": "normalizeErrorResponse",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "status",
              "description": "",
              "type": "Number"
            },
            {
              "name": "headers",
              "description": "",
              "type": "Object"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "errors payload",
            "type": "Array"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1252,
          "description": "<html><head></head><body><p>Generates a detailed (&quot;friendly&quot;) error message, with plenty\nof information for debugging (good luck!)</p>\n</body></html>",
          "itemtype": "method",
          "name": "generatedDetailedMessage",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "status",
              "description": "",
              "type": "Number"
            },
            {
              "name": "headers",
              "description": "",
              "type": "Object"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "requestData",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "detailed error message",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 1286,
          "description": "<html><head></head><body><p>Used by <code>findAll</code> and <code>findRecord</code> to build the query&apos;s <code>data</code> hash\nsupplied to the ajax method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "buildQuery",
          "since": "2.5.0",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 260,
          "description": "<html><head></head><body><p>The <code>findRecord()</code> method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to <code>findRecord()</code> being called, you\nshould query your persistence layer for a record with the given ID. The <code>findRecord</code>\nmethod should return a promise that will resolve to a JavaScript object that will be\nnormalized by the serializer.</p>\n<p>Here is an example of the <code>findRecord</code> implementation:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  findRecord(store, type, id, snapshot) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.getJSON(<span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>/<span class=\"subst\">${id}</span>`</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 302,
          "description": "<html><head></head><body><p>The <code>findAll()</code> method is used to retrieve all records for a given type.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  findAll(store, type) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.getJSON(<span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>`</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "neverSet",
              "description": "a value is never provided to this argument",
              "type": "Undefined"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 345,
          "description": "<html><head></head><body><p>This method is called when you call <code>query</code> on the store.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  query(store, type, query) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.getJSON(<span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>`</span>, query).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "query",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "recordArray",
              "description": "",
              "type": "Collection"
            },
            {
              "name": "adapterOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 384,
          "description": "<html><head></head><body><p>The <code>queryRecord()</code> method is invoked when the store is asked for a single\nrecord through a query object.</p>\n<p>In response to <code>queryRecord()</code> being called, you should always fetch fresh\ndata. Once found, you can asynchronously call the store&apos;s <code>push()</code> method\nto push the record into the store.</p>\n<p>Here is an example <code>queryRecord</code> implementation:</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter, { BuildURLMixin } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span>.<span class=\"title\">extend</span>(<span class=\"title\">BuildURLMixin</span>) </span>{\n  queryRecord(store, type, query) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.getJSON(<span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>`</span>, query).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "queryRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "Subclass of Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "adapterOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 429,
          "description": "<html><head></head><body><p>If the globally unique IDs for your records should be generated on the client,\nimplement the <code>generateIdForRecord()</code> method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record&apos;s <code>primaryKey</code>.</p>\n<p>Most traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls <code>didCreateRecord()</code>. Only implement this method if\nyou intend to generate record IDs on the client-side.</p>\n<p>The <code>generateIdForRecord()</code> method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Adapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter&apos;;\n<span class=\"keyword\">import</span> { v4 } from <span class=\"symbol\">&apos;uui</span>d&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  generateIdForRecord(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">inputProperties</span>) </span>{\n    <span class=\"keyword\">return</span> v4();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "generateIdForRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "the Model class of the record",
              "type": "Model"
            },
            {
              "name": "inputProperties",
              "description": "a hash of properties to set on the\n  newly created record.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "id",
            "type": "(String|Number)"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 463,
          "description": "<html><head></head><body><p>Proxies to the serializer&apos;s <code>serialize</code> method.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Adapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  createRecord(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">snapshot</span>) </span>{\n    let data = <span class=\"keyword\">this</span>.serialize(snapshot, { includeId: <span class=\"literal\">true</span> });\n    let url = `/${<span class=\"class\"><span class=\"keyword\">type</span>.<span class=\"title\">modelName</span>}`</span>;\n\n    <span class=\"comment\">// ...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "serialized snapshot",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 491,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the creation of\nnew records.</p>\n<p>Serializes the record and sends it to the server.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  createRecord(store, type, snapshot) {\n    <span class=\"keyword\">let</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>{\n      $.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;POST&apos;</span>,\n        <span class=\"attr\">url</span>: <span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>`</span>,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "createRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "the Model class of the record",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 539,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the updating of\na record.</p>\n<p>Serializes the record update and sends it to the server.</p>\n<p>The updateRecord method is expected to return a promise that will\nresolve with the serialized record. This allows the backend to\ninform the Ember Data store the current state of this record after\nthe update. If it is not possible to return a serialized record\nthe updateRecord promise can also resolve with <code>undefined</code> and the\nEmber Data store will assume all of the updates were successfully\napplied on the backend.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  updateRecord(store, type, snapshot) {\n    <span class=\"keyword\">let</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">let</span> id = snapshot.id;\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;PUT&apos;</span>,\n        <span class=\"attr\">url</span>: <span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>/<span class=\"subst\">${id}</span>`</span>,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "updateRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "the Model class of the record",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 596,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the deletion of\na record.</p>\n<p>Sends a delete request for the record to the server.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  deleteRecord(store, type, snapshot) {\n    <span class=\"keyword\">let</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">let</span> id = snapshot.id;\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;DELETE&apos;</span>,\n        <span class=\"attr\">url</span>: <span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>/<span class=\"subst\">${id}</span>`</span>,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data)\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "the Model class of the record",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 667,
          "description": "<html><head></head><body><p>The store will call <code>findMany</code> instead of multiple <code>findRecord</code>\nrequests to find multiple records at once if coalesceFindRequests\nis true.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/adapter&apos;</span>;\n<span class=\"keyword\">import</span> RSVP <span class=\"keyword\">from</span> <span class=\"string\">&apos;RSVP&apos;</span>;\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&apos;jquery&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  findMany(store, type, ids, snapshots) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      $.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;GET&apos;</span>,\n        <span class=\"attr\">url</span>: <span class=\"string\">`/<span class=\"subst\">${type.modelName}</span>/`</span>,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: { <span class=\"attr\">filter</span>: { <span class=\"attr\">id</span>: ids.join(<span class=\"string\">&apos;,&apos;</span>) } }\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        resolve(data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        reject(jqXHR);\n      });\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findMany",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "type",
              "description": "the Model class of the records",
              "type": "Model"
            },
            {
              "name": "ids",
              "description": "",
              "type": "Array"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 705,
          "description": "<html><head></head><body><p>Organize records into groups, each of which is to be passed to separate\ncalls to <code>findMany</code>.</p>\n<p>For example, if your API has nested URLs that depend on the parent, you will\nwant to group records by their parent.</p>\n<p>The default implementation returns the records as a single group.</p>\n</body></html>",
          "itemtype": "method",
          "name": "groupRecordsForFindMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
            "type": "Array"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 725,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record from the adapter when a record is requested by\n<code>store.findRecord</code>.</p>\n<p>If this method returns <code>true</code>, the store will re-fetch a record from\nthe adapter. If this method returns <code>false</code>, the store will resolve\nimmediately using the cached record.</p>\n<p>For example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>shouldReloadRecord(store, ticketSnapshot) {\n  <span class=\"built_in\">let</span> lastAccessedAt = ticketSnapshot.attr(<span class=\"string\">&apos;lastAccessedAt&apos;</span>);\n  <span class=\"built_in\">let</span> timeDiff = moment().diff(lastAccessedAt, <span class=\"string\">&apos;minutes&apos;</span>);\n\n  <span class=\"keyword\">if</span> (timeDiff &gt; 20) {\n    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;\n  } <span class=\"keyword\">else</span> {\n    <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method would ensure that whenever you do <code>store.findRecord(&apos;ticket&apos;,\nid)</code> you will always get a ticket that is no more than 20 minutes old. In\ncase the cached version is more than 20 minutes old, <code>findRecord</code> will not\nresolve until you fetched the latest version.</p>\n<p>By default this hook returns <code>false</code>, as most UIs should not block user\ninteractions while waiting on data update.</p>\n<p>Note that, with default settings, <code>shouldBackgroundReloadRecord</code> will always\nre-fetch the records in the background even if <code>shouldReloadRecord</code> returns\n<code>false</code>. You can override <code>shouldBackgroundReloadRecord</code> if this does not\nsuit your use case.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "shouldReloadRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 776,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload all records from the adapter when records are requested by\n<code>store.findAll</code>.</p>\n<p>If this method returns <code>true</code>, the store will re-fetch all records from\nthe adapter. If this method returns <code>false</code>, the store will resolve\nimmediately using the cached records.</p>\n<p>For example, if you are building an events ticketing system, in which users\ncan only reserve tickets for 20 minutes at a time, and want to ensure that\nin each route you have data that is no more than 20 minutes old you could\nwrite:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>shouldReloadAll(store, snapshotArray) {\n  <span class=\"keyword\">let</span> snapshots = snapshotArray.snapshots();\n\n  <span class=\"keyword\">return</span> snapshots.any(<span class=\"function\">(<span class=\"params\">ticketSnapshot</span>) =&gt;</span> {\n    <span class=\"keyword\">let</span> lastAccessedAt = ticketSnapshot.attr(<span class=\"string\">&apos;lastAccessedAt&apos;</span>);\n    <span class=\"keyword\">let</span> timeDiff = moment().diff(lastAccessedAt, <span class=\"string\">&apos;minutes&apos;</span>);\n\n    <span class=\"keyword\">if</span> (timeDiff &gt; <span class=\"number\">20</span>) {\n      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n    }\n  });\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method would ensure that whenever you do <code>store.findAll(&apos;ticket&apos;)</code> you\nwill always get a list of tickets that are no more than 20 minutes old. In\ncase a cached version is more than 20 minutes old, <code>findAll</code> will not\nresolve until you fetched the latest versions.</p>\n<p>By default, this method returns <code>true</code> if the passed <code>snapshotRecordArray</code>\nis empty (meaning that there are no records locally available yet),\notherwise, it returns <code>false</code>.</p>\n<p>Note that, with default settings, <code>shouldBackgroundReloadAll</code> will always\nre-fetch all the records in the background even if <code>shouldReloadAll</code> returns\n<code>false</code>. You can override <code>shouldBackgroundReloadAll</code> if this does not suit\nyour use case.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "shouldReloadAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 832,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record after the <code>store.findRecord</code> method resolves a\ncached record.</p>\n<p>This method is <em>only</em> checked by the store when the store is\nreturning a cached record.</p>\n<p>If this method returns <code>true</code> the store will re-fetch a record from\nthe adapter.</p>\n<p>For example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n<code>shouldBackgroundReloadRecord</code> as follows:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>shouldBackgroundReloadRecord(store, <span class=\"keyword\">snapshot</span>) {\n  let { downlink, effectiveType } = navigator.<span class=\"keyword\">connection</span>;\n\n  <span class=\"keyword\">return</span> downlink &gt; <span class=\"number\">0</span> &amp;&amp; effectiveType === <span class=\"string\">&apos;4g&apos;</span>;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, this hook returns <code>true</code> so the data for the record is updated\nin the background.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "shouldBackgroundReloadRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 869,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record array after the <code>store.findAll</code> method resolves\nwith a cached record array.</p>\n<p>This method is <em>only</em> checked by the store when the store is\nreturning a cached record array.</p>\n<p>If this method returns <code>true</code> the store will re-fetch all records\nfrom the adapter.</p>\n<p>For example, if you do not want to fetch complex data over a mobile\nconnection, or if the network is down, you can implement\n<code>shouldBackgroundReloadAll</code> as follows:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>should<span class=\"constructor\">BackgroundReloadAll(<span class=\"params\">store</span>, <span class=\"params\">snapshotArray</span>)</span> {\n  <span class=\"keyword\">let</span> { downlink, effectiveType } = navigator.connection;\n\n  return downlink &gt; <span class=\"number\">0</span><span class=\"operator\"> &amp;&amp; </span>effectiveType<span class=\"operator\"> === </span>&apos;<span class=\"number\">4</span>g&apos;;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default this method returns <code>true</code>, indicating that a background reload\nshould always be triggered.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "shouldBackgroundReloadAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 145,
          "description": "<html><head></head><body><p>Builds a URL for a given type and optional ID.</p>\n<p>By default, it pluralizes the type&apos;s name (for example, &apos;post&apos;\nbecomes &apos;posts&apos; and &apos;person&apos; becomes &apos;people&apos;). To override the\npluralization see <a href=\"./pathForType?anchor=pathForType\">pathForType</a>.</p>\n<p>If an ID is specified, it adds the ID to the path generated\nfor the type, separated by a <code>/</code>.</p>\n<p>When called by <code>RESTAdapter.findMany()</code> the <code>id</code> and <code>snapshot</code> parameters\nwill be arrays of ids and snapshots.</p>\n</body></html>",
          "itemtype": "method",
          "name": "buildURL",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "single id or array of ids or query",
              "type": "(String|Array|Object)"
            },
            {
              "name": "snapshot",
              "description": "single snapshot or array of snapshots",
              "type": "(Snapshot|SnapshotRecordArray)"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            },
            {
              "name": "query",
              "description": "object of query parameters to send for query requests.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 294,
          "itemtype": "method",
          "name": "_buildURL",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 329,
          "description": "<html><head></head><body><p>Builds a URL for a <code>store.findRecord(type, id)</code> call.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/user.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONAPIAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/json-api&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONAPIAdapter</span> </span>{\n  urlForFindRecord(id, modelName, snapshot) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL(modelName, id, snapshot);\n    <span class=\"keyword\">return</span> `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForFindRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 357,
          "description": "<html><head></head><body><p>Builds a URL for a <code>store.findAll(type)</code> call.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/comment.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONAPIAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/json-api&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONAPIAdapter</span> </span>{\n  urlForFindAll(modelName, snapshot) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL(modelName);\n    <span class=\"keyword\">return</span> `${baseUrl}/data/comments.json`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForFindAll",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 383,
          "description": "<html><head></head><body><p>Builds a URL for a <code>store.query(type, query)</code> call.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  host = <span class=\"symbol\">&apos;https</span>:<span class=\"comment\">//api.github.com&apos;;</span>\n  urlForQuery (query, modelName) {\n    switch(modelName) {\n      <span class=\"keyword\">case</span> <span class=\"symbol\">&apos;rep</span>o&apos;:\n        <span class=\"keyword\">return</span> `https:<span class=\"comment\">//api.github.com/orgs/${query.orgId}/repos`;</span>\n      <span class=\"keyword\">default</span>:\n        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.urlForQuery(...arguments);\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForQuery",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 414,
          "description": "<html><head></head><body><p>Builds a URL for a <code>store.queryRecord(type, query)</code> call.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  urlForQueryRecord({ slug }, modelName) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL();\n    <span class=\"keyword\">return</span> `${baseUrl}/${encodeURIComponent(slug)}`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForQueryRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 440,
          "description": "<html><head></head><body><p>Builds a URL for coalescing multiple <code>store.findRecord(type, id)</code>\nrecords into 1 request when the adapter&apos;s <code>coalesceFindRequests</code>\nproperty is <code>true</code>.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  urlForFindMany(ids, modelName) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL();\n    <span class=\"keyword\">return</span> `${baseUrl}/coalesce`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForFindMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "ids",
              "description": "",
              "type": "Array"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 469,
          "description": "<html><head></head><body><p>Builds a URL for fetching an async <code>hasMany</code> relationship when a URL\nis not provided by the server.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONAPIAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/json-api&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONAPIAdapter</span> </span>{\n  urlForFindHasMany(id, modelName, snapshot) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL(modelName, id);\n    <span class=\"keyword\">return</span> `${baseUrl}/relationships`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForFindHasMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 497,
          "description": "<html><head></head><body><p>Builds a URL for fetching an async <code>belongsTo</code> relationship when a url\nis not provided by the server.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONAPIAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/json-api&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONAPIAdapter</span> </span>{\n  urlForFindBelongsTo(id, modelName, snapshot) {\n    let baseUrl = <span class=\"keyword\">this</span>.buildURL(modelName, id);\n    <span class=\"keyword\">return</span> `${baseUrl}/relationships`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForFindBelongsTo",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 525,
          "description": "<html><head></head><body><p>Builds a URL for a <code>record.save()</code> call when the record was created\nlocally using <code>store.createRecord()</code>.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  urlForCreateRecord(modelName, snapshot) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.urlForCreateRecord(...arguments) + &apos;/<span class=\"keyword\">new</span>&apos;;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForCreateRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 551,
          "description": "<html><head></head><body><p>Builds a URL for a <code>record.save()</code> call when the record has been updated locally.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  urlForUpdateRecord(id, modelName, snapshot) {\n    <span class=\"keyword\">return</span> `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForUpdateRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 577,
          "description": "<html><head></head><body><p>Builds a URL for a <code>record.save()</code> call when the record has been deleted locally.</p>\n<p>Example:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  urlForDeleteRecord(id, modelName, snapshot) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.urlForDeleteRecord(...arguments) + &apos;/destroy&apos;;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "urlForDeleteRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            }
          ],
          "return": {
            "description": "url",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 603,
          "itemtype": "method",
          "name": "urlPrefix",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "path",
              "description": "",
              "type": "String"
            },
            {
              "name": "parentURL",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "urlPrefix",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        },
        {
          "file": "../packages/adapter/src/-private/build-url-mixin.ts",
          "line": 643,
          "description": "<html><head></head><body><p>Determines the pathname for a given type.</p>\n<p>By default, it pluralizes the type&apos;s name (for example,\n&apos;post&apos; becomes &apos;posts&apos; and &apos;person&apos; becomes &apos;people&apos;).</p>\n<h3 id=\"pathname-customization\">Pathname customization</h3>\n<p>For example, if you have an object <code>LineItem</code> with an\nendpoint of <code>/line_items/</code>.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n<span class=\"keyword\">import</span> { decamelize, pluralize } from &apos;&lt;app-name&gt;/utils/string-utils&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  pathForType(modelName) {\n    <span class=\"keyword\">var</span> decamelized = decamelize(modelName);\n    <span class=\"keyword\">return</span> pluralize(decamelized);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pathForType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "path",
            "type": "String"
          },
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "BuildURLMixin"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 343,
          "description": "<html><head></head><body><p>This property allows ajax to still be used instead when <code>false</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "useFetch",
          "type": "{Boolean}",
          "default": "true",
          "access": "public",
          "tagname": "",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 428,
          "description": "<html><head></head><body><p>By default the RESTAdapter will send each find request coming from a <code>store.find</code>\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.</p>\n<p>For example, if you have an initial payload of:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attribute\">post</span>: {\n    id: <span class=\"number\">1</span>,\n    comments: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default calling <code>post.comments</code> will trigger the following requests(assuming the\ncomments haven&apos;t been loaded before):</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"builtin-name\">GET</span> /comments/1\n<span class=\"builtin-name\">GET</span> /comments/2</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If you set coalesceFindRequests to <code>true</code> it will instead trigger the following request:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>GET /comments?ids<span class=\"string\">[]</span>=<span class=\"number\">1</span>&amp;ids<span class=\"string\">[]</span>=<span class=\"number\">2</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>Setting coalesceFindRequests to <code>true</code> also works for <code>store.find</code> requests and <code>belongsTo</code>\nrelationships accessed within the same runloop. If you set <code>coalesceFindRequests: true</code></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">store</span><span class=\"selector-class\">.findRecord</span>(<span class=\"string\">&apos;comment&apos;</span>, <span class=\"number\">1</span>);\n<span class=\"selector-tag\">store</span><span class=\"selector-class\">.findRecord</span>(<span class=\"string\">&apos;comment&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will also send a request to: <code>GET /comments?ids[]=1&amp;ids[]=2</code></p>\n<p>Note: Requests coalescing rely on URL building strategy. So if you override <code>buildURL</code> in your app\n<code>groupRecordsForFindMany</code> more likely should be overridden as well in order for coalescing to work.</p>\n</body></html>",
          "itemtype": "property",
          "name": "coalesceFindRequests",
          "access": "public",
          "tagname": "",
          "type": "{boolean}",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 488,
          "description": "<html><head></head><body><p>Endpoint paths can be prefixed with a <code>namespace</code> by setting the namespace\nproperty on the adapter:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  namespace = <span class=\"symbol\">&apos;api</span>/<span class=\"number\">1</span>&apos;;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Requests for the <code>Post</code> model would now target <code>/api/1/post/</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "namespace",
          "access": "public",
          "tagname": "",
          "type": "{String}",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 507,
          "description": "<html><head></head><body><p>An adapter can target other hosts by setting the <code>host</code> property.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  host = <span class=\"symbol\">&apos;https</span>:<span class=\"comment\">//api.example.com&apos;;</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Requests for the <code>Post</code> model would now target <code>https://api.example.com/post/</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "host",
          "access": "public",
          "tagname": "",
          "type": "{String}",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/rest.ts",
          "line": 525,
          "description": "<html><head></head><body><p>Some APIs require HTTP headers, e.g. to provide an API\nkey. Arbitrary headers can be set as key/value pairs on the\n<code>RESTAdapter</code>&apos;s <code>headers</code> object and Ember Data will send them\nalong with each ajax request. For dynamic headers see <a href=\"/ember-data/release/classes/RESTAdapter\">headers\ncustomization</a>.</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter/rest&apos;;\n<span class=\"keyword\">import</span> { computed } from &apos;<span class=\"meta\">@ember</span>/<span class=\"class\"><span class=\"keyword\">object</span>&apos;</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  headers: computed(function() {\n    <span class=\"keyword\">return</span> {\n      <span class=\"symbol\">&apos;API_KE</span>Y&apos;: <span class=\"symbol\">&apos;secret</span> key&apos;,\n      <span class=\"symbol\">&apos;ANOTHER_HEADE</span>R&apos;: <span class=\"symbol\">&apos;Some</span> header value&apos;\n    };\n  })\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "headers",
          "access": "public",
          "tagname": "",
          "type": "{Object}",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter/rest"
        },
        {
          "file": "../packages/adapter/src/index.ts",
          "line": 645,
          "description": "<html><head></head><body><p>By default the store will try to coalesce all <code>findRecord</code> calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false.</p>\n</body></html>",
          "itemtype": "property",
          "name": "coalesceFindRequests",
          "access": "public",
          "tagname": "",
          "type": "{boolean}",
          "class": "RESTAdapter",
          "module": "@ember-data/adapter",
          "inherited": true,
          "inheritedFrom": "Adapter"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-data-5.3.0-Adapter",
          "type": "class"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-data-5.3.0-JSONAPIAdapter"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.0-@ember-data/adapter/rest",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.0",
          "type": "project-version"
        }
      }
    }
  }
}