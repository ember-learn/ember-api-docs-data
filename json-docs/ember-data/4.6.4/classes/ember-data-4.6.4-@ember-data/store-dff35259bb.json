{
  "data": {
    "id": "ember-data-4.6.4-@ember-data/store",
    "type": "class",
    "attributes": {
      "name": "@ember-data/store",
      "shortname": "@ember-data/store",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/store",
      "namespace": "",
      "methods": [
        {
          "file": "../../ember-data-types/q/identifier.ts",
          "line": 113,
          "description": "<html><head></head><body><p>Configures how unique identifier lid strings are generated by @ember-data/store.</p>\n<p>This configuration MUST occur prior to the store instance being created.</p>\n<p>Takes a method which can expect to receive various data as its first argument\nand the name of a bucket as its second argument. Currently the second\nargument will always be <code>record</code> data should conform to a <code>json-api</code>\n<code>Resource</code> interface, but will be the normalized json data for a single\nresource that has been given to the store.</p>\n<p>The method must return a unique (to at-least the given bucket) string identifier\nfor the given data as a string to be used as the <code>lid</code> of an <code>Identifier</code> token.</p>\n<p>This method will only be called by either <code>getOrCreateRecordIdentifier</code> or\n<code>createIdentifierForNewRecord</code> when an identifier for the supplied data\nis not already known via <code>lid</code> or <code>type + id</code> combo and one needs to be\ngenerated or retrieved from a proprietary cache.</p>\n<p><code>data</code> will be the same data argument provided to <code>getOrCreateRecordIdentifier</code>\nand in the <code>createIdentifierForNewRecord</code> case will be an object with\nonly <code>type</code> as a key.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { setIdentifierGenerationMethod } form <span class=\"string\">&apos;@ember-data/store&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">applicationInstance</span>) {\n  <span class=\"comment\">// note how `count` here is now scoped to the application instance</span>\n  <span class=\"comment\">// for our generation method by being inside the closure provided</span>\n  <span class=\"comment\">// by the initialize function</span>\n  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;\n\n  <span class=\"title function_\">setIdentifierGenerationMethod</span>(<span class=\"function\">(<span class=\"params\">resource, bucket</span>) =&gt;</span> {\n    <span class=\"keyword\">return</span> resource.<span class=\"property\">lid</span> || <span class=\"string\">`my-key-<span class=\"subst\">${count++}</span>`</span>;\n  });\n}\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {\n  <span class=\"attr\">name</span>: <span class=\"string\">&apos;configure-ember-data-identifiers&apos;</span>,\n  initialize\n};</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setIdentifierGenerationMethod",
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        },
        {
          "file": "../../ember-data-types/q/identifier.ts",
          "line": 164,
          "description": "<html><head></head><body><p>Configure a callback for when the identifier cache encounters new resource\ndata for an existing resource.</p>\n<p>This configuration MUST occur prior to the store instance being created.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { setIdentifierUpdateMethod } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/store&apos;</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Takes a method which can expect to receive an existing <code>Identifier</code> alongside\nsome new data to consider as a second argument. This is an opportunity\nfor secondary lookup tables and caches associated with the identifier\nto be amended.</p>\n<p>This method is called everytime <code>updateRecordIdentifier</code> is called and\n with the same arguments. It provides the opportunity to update secondary\n lookup tables for existing identifiers.</p>\n<p>It will always be called after an identifier created with <code>createIdentifierForNewRecord</code>\n has been committed, or after an update to the <code>record</code> a <code>RecordIdentifier</code>\n is assigned to has been committed. Committed here meaning that the server\n has acknowledged the update (for instance after a call to <code>.save()</code>)</p>\n<p>If <code>id</code> has not previously existed, it will be assigned to the <code>Identifier</code>\n prior to this <code>UpdateMethod</code> being called; however, calls to the parent method\n <code>updateRecordIdentifier</code> that attempt to change the <code>id</code> or calling update\n without providing an <code>id</code> when one is missing will throw an error.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setIdentifierUpdateMethod",
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        },
        {
          "file": "../../ember-data-types/q/identifier.ts",
          "line": 205,
          "description": "<html><head></head><body><p>Configure a callback for when the identifier cache is going to release an identifier.</p>\n<p>This configuration MUST occur prior to the store instance being created.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { setIdentifierForgetMethod } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/store&apos;</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Takes method which can expect to receive an existing <code>Identifier</code> that should be eliminated\nfrom any secondary lookup tables or caches that the user has populated for it.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setIdentifierForgetMethod",
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        },
        {
          "file": "../../ember-data-types/q/identifier.ts",
          "line": 225,
          "description": "<html><head></head><body><p>Configure a callback for when the identifier cache is being torn down.</p>\n<p>This configuration MUST occur prior to the store instance being created.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { setIdentifierResetMethod } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/store&apos;</span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Takes a method which can expect to be called when the parent application is destroyed.</p>\n<p>If you have properly used a WeakMap to encapsulate the state of your customization\nto the application instance, you may not need to implement the <code>resetMethod</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setIdentifierResetMethod",
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        },
        {
          "file": "../store/addon/-private/internal-model-factory.ts",
          "line": 40,
          "description": "<html><head></head><body><p>Retrieves the unique referentially-stable <a href=\"/ember-data/release/classes/StableRecordIdentifier\">RecordIdentifier</a>\nassigned to the given record instance.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { recordIdentifierFor } <span class=\"keyword\">from</span> <span class=\"string\">&quot;@ember-data/store&quot;</span>;\n\n<span class=\"comment\">// ... gain access to a record, for instance with peekRecord or findRecord</span>\n<span class=\"keyword\">const</span> record = store.<span class=\"title function_\">peekRecord</span>(<span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);\n\n<span class=\"comment\">// get the identifier for the record (see docs for StableRecordIdentifier)</span>\n<span class=\"keyword\">const</span> identifier = <span class=\"title function_\">recordIdentifierFor</span>(record);\n\n<span class=\"comment\">// access the identifier&apos;s properties.</span>\n<span class=\"keyword\">const</span> { id, <span class=\"keyword\">type</span>, lid } = identifier;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "recordIdentifierFor",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": "a record instance previously obstained from the store.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "StableRecordIdentifier"
          },
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        },
        {
          "file": "../store/addon/-private/normalize-model-name.ts",
          "line": 10,
          "description": "<html><head></head><body><p>This method normalizes a modelName into the format Ember Data uses\ninternally by dasherizing it.</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalizeModelName",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalizedModelName",
            "type": "String"
          },
          "class": "@ember-data/store",
          "module": "@ember-data/store"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-4.6.4-@ember-data/store",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.6.4",
          "type": "project-version"
        }
      }
    }
  }
}