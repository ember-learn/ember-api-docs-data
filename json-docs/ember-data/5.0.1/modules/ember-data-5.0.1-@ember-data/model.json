{
  "data": {
    "id": "ember-data-5.0.1-@ember-data/model",
    "type": "module",
    "attributes": {
      "name": "@ember-data/model",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember-data/model": 1,
        "Model": 1
      },
      "namespaces": {},
      "tag": "main",
      "file": "../model/src/-private/promise-many-array.ts",
      "line": 20,
      "description": "This package provides a Presentation Model for resource data in an EmberData Cache.\n\nModels are defined as classes extending from `import Model from '@ember-data/model';` and the\nattributes and relationships on these classes are parsed at runtime to supply static \"schema\"\nto EmberData's SchemaService.\n\nResource data for individual resources fetched from your API is presented to the UI via instances\nof the `Model`s you define. An instantiated `Model` is referred to as a `record`.\n\n When we refer to the `ModelClass` as opposed to a `Model` or `Record` we are referring\n specifically to the class definition and the static schema methods present on it.\n\n When we refer to a `record` we refer to a specific class instance presenting\n the resource data for a given `type` and `id`.\n\n ### Defining a Model\n\n ```js {data-filename=app/models/person.js}\n import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\n export default class PersonModel extends Model {",
      "attr": "name;",
      "belongsto": "('pet', { inverse: 'owners', async: false }) dog;",
      "hasmany": "('person', { inverse: 'friends', async: true }) friends;\n }\n ```\n\n ### modelName convention\n\n By convention, the name of a given model (its `type`) matches the name\n of the file in the `app/models` folder and should be lowercase, singular\n and dasherized.",
      "itemtype": "main",
      "parent": null,
      "publicclasses": [
        "BelongsToReference",
        "HasManyReference",
        "Errors",
        "Model",
        "PromiseManyArray"
      ],
      "privateclasses": [
        "PromiseBelongsTo"
      ],
      "staticfunctions": {
        "@ember-data/model": [
          {
            "file": "../packages/model/src/-private/attr.js",
            "line": 14,
            "description": "`attr` defines an attribute on a [Model](/ember-data/release/classes/Model).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[Transform](/ember-data/release/classes/Transform).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if and only if the key is absent from the payload response.\n\nExample\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default class UserModel extends Model {",
            "attr": "('text', {\n    uppercase: true\n  })\n  text;\n}\n```\n\n```app/transforms/text.js\nexport default class TextTransform {\n  serialize(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  }\n\n  deserialize(value) {\n    return value;\n  }\n\n  static create() {\n    return new this();\n  }\n}\n```",
            "itemtype": "method",
            "name": "attr",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "the attribute type",
                "type": "String|Object"
              },
              {
                "name": "options",
                "description": "a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Attribute"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/belongs-to.js",
            "line": 17,
            "description": "`belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n\n`belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`belongsTo`:\n\n```app/models/user.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class UserModel extends Model {",
            "belongsto": "('post', {\n    async: false,\n    inverse: null\n  })\n  post;\n}\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.\n\n```\nlet post = comment.post;\n\n```",
            "hasmany": "('comment', { async: false, inverse: 'post' }) comments;\n}\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class CommentModel extends Model {",
            "itemtype": "method",
            "name": "belongsTo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "modelName",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/has-many.js",
            "line": 20,
            "description": "`hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n`hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a related model.\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('comment', {\n    async: false\n  })\n  comments;\n}\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return a [ManyArray](/ember-data/release/classes/ManyArray) instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.\n\n```\npost.comments.forEach((comment) => {\n\n});\n\n```\n\nIf you are using `links` with sync relationships, you have to use\n`ref.reload` to fetch the resources.",
            "belongsto": "('post') bluePost;\n}\n```\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "itemtype": "method",
            "name": "hasMany",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          }
        ],
        "Model": [
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2001,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nclass PersonModel extends Model {",
            "attr": "('date') birthday;\n }\n\nPersonModel.eachAttribute(function(name, meta) {\n   // do thing\n });\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "method",
            "name": "eachAttribute",
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1828,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "itemtype": "method",
            "name": "eachRelatedType",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1806,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2056,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\napplied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr(),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachTransformedAttribute(function(name, type) {\n   // do thing\n });\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1291,
            "description": "Find the relationship which is the inverse of the one asked for.\n\nFor example, if you define models like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('message') comments;\n }\n```\n\n```app/models/message.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class MessageModel extends Model {",
            "belongsto": "('post') owner;\n }\n```\n\n``` js\nstore.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\nstore.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n```",
            "itemtype": "method",
            "name": "inverseFor",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the inverse relationship, or null",
              "type": "Object"
            },
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2112,
            "description": "Returns the name of the model class.",
            "itemtype": "method",
            "name": "toString",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1250,
            "description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('comment') comments;\n}\n```\n\nCalling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.",
            "itemtype": "method",
            "name": "typeForRelationship",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "an instance of Store",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the type of the relationship, or undefined",
              "type": "Model"
            },
            "class": "Model",
            "module": "@ember-data/model"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember-data/model": [
          {
            "file": "../packages/model/src/-private/attr.js",
            "line": 14,
            "description": "`attr` defines an attribute on a [Model](/ember-data/release/classes/Model).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[Transform](/ember-data/release/classes/Transform).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if and only if the key is absent from the payload response.\n\nExample\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default class UserModel extends Model {",
            "attr": "('text', {\n    uppercase: true\n  })\n  text;\n}\n```\n\n```app/transforms/text.js\nexport default class TextTransform {\n  serialize(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  }\n\n  deserialize(value) {\n    return value;\n  }\n\n  static create() {\n    return new this();\n  }\n}\n```",
            "itemtype": "method",
            "name": "attr",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "the attribute type",
                "type": "String|Object"
              },
              {
                "name": "options",
                "description": "a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Attribute"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/belongs-to.js",
            "line": 17,
            "description": "`belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n\n`belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`belongsTo`:\n\n```app/models/user.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class UserModel extends Model {",
            "belongsto": "('post', {\n    async: false,\n    inverse: null\n  })\n  post;\n}\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.\n\n```\nlet post = comment.post;\n\n```",
            "hasmany": "('comment', { async: false, inverse: 'post' }) comments;\n}\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class CommentModel extends Model {",
            "itemtype": "method",
            "name": "belongsTo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "modelName",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/has-many.js",
            "line": 20,
            "description": "`hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [Model](/ember-data/release/classes/Model).\n\n`hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a related model.\n- `polymorphic` A boolean value to mark the relationship as polymorphic\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('comment', {\n    async: false\n  })\n  comments;\n}\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return a [ManyArray](/ember-data/release/classes/ManyArray) instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.\n\n```\npost.comments.forEach((comment) => {\n\n});\n\n```\n\nIf you are using `links` with sync relationships, you have to use\n`ref.reload` to fetch the resources.",
            "belongsto": "('post') bluePost;\n}\n```\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "itemtype": "method",
            "name": "hasMany",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          }
        ],
        "Model": [
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1189,
            "description": "Create should only ever be called by the store. To create an instance of a\n`Model` in a dirty state use `store.createRecord`.\n\n   To create instances of `Model` in a clean state, use `store.push`",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2001,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nclass PersonModel extends Model {",
            "attr": "('date') birthday;\n }\n\nPersonModel.eachAttribute(function(name, meta) {\n   // do thing\n });\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "method",
            "name": "eachAttribute",
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1828,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "itemtype": "method",
            "name": "eachRelatedType",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1806,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2056,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\napplied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr(),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachTransformedAttribute(function(name, type) {\n   // do thing\n });\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "access": "public",
            "tagname": "",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1291,
            "description": "Find the relationship which is the inverse of the one asked for.\n\nFor example, if you define models like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('message') comments;\n }\n```\n\n```app/models/message.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class MessageModel extends Model {",
            "belongsto": "('post') owner;\n }\n```\n\n``` js\nstore.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\nstore.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n```",
            "itemtype": "method",
            "name": "inverseFor",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the inverse relationship, or null",
              "type": "Object"
            },
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 2112,
            "description": "Returns the name of the model class.",
            "itemtype": "method",
            "name": "toString",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../packages/model/src/-private/model.js",
            "line": 1250,
            "description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {",
            "hasmany": "('comment') comments;\n}\n```\n\nCalling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.",
            "itemtype": "method",
            "name": "typeForRelationship",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "an instance of Store",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the type of the relationship, or undefined",
              "type": "Model"
            },
            "class": "Model",
            "module": "@ember-data/model"
          }
        ]
      },
      "version": "5.0.1"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.0.1",
          "type": "project-version"
        }
      }
    }
  }
}