{
  "data": {
    "id": "ember-data-4.1.0-@ember-data/serializer/json",
    "type": "module",
    "attributes": {
      "name": "@ember-data/serializer/json",
      "submodules": {},
      "elements": {},
      "fors": {},
      "namespaces": {},
      "tag": "main",
      "file": "../serializer/addon/json.js",
      "line": 15,
      "description": "<html><head></head><body><p>Ember Data 2.0 Serializer:</p>\n<p>In Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.</p>\n<p>By default, Ember Data uses and recommends the <code>JSONAPISerializer</code>.</p>\n<p><code>JSONSerializer</code> is useful for simpler or legacy backends that may\nnot support the <a href=\"http://jsonapi.org/\">http://jsonapi.org/</a> spec.</p>\n<p>For example, given the following <code>User</code> model and JSON payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr, belongsTo, hasMany } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>(&apos;user&apos;) friends;\n  <span class=\"meta\">@belongsTo</span>(&apos;location&apos;) house;\n\n  <span class=\"meta\">@attr</span>(&apos;string&apos;) name;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"attribute\">{\n  id</span><span class=\"punctuation\">:</span> <span class=\"string\">1,</span>\n  <span class=\"attribute\">name</span><span class=\"punctuation\">:</span> <span class=\"string\">&apos;Sebastian&apos;,</span>\n  <span class=\"attribute\">friends</span><span class=\"punctuation\">:</span> <span class=\"string\">[3, 4],</span>\n  <span class=\"attribute\">links</span><span class=\"punctuation\">:</span> <span class=\"string\">{</span>\n    <span class=\"attribute\">house</span><span class=\"punctuation\">:</span> <span class=\"string\">&apos;/houses/lefkada&apos;</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>JSONSerializer</code> will normalize the JSON payload to the JSON API format that the\nEmber Data store expects.</p>\n<p>You can customize how JSONSerializer processes its payload by passing options in\nthe <code>attrs</code> hash or by subclassing the <code>JSONSerializer</code> and overriding hooks:</p>\n<ul>\n<li>To customize how a single record is normalized, use the <code>normalize</code> hook.</li>\n<li>To customize how <code>JSONSerializer</code> normalizes the whole server response, use the\n<code>normalizeResponse</code> hook.</li>\n<li>To customize how <code>JSONSerializer</code> normalizes a specific response from the server,\nuse one of the many specific <code>normalizeResponse</code> hooks.</li>\n<li>To customize how <code>JSONSerializer</code> normalizes your id, attributes or relationships,\nuse the <code>extractId</code>, <code>extractAttributes</code> and <code>extractRelationships</code> hooks.</li>\n</ul>\n<p>The <code>JSONSerializer</code> normalization process follows these steps:</p>\n<ol>\n<li><code>normalizeResponse</code><ul>\n<li>entry method to the serializer.</li>\n</ul>\n</li>\n<li><code>normalizeCreateRecordResponse</code><ul>\n<li>a <code>normalizeResponse</code> for a specific operation is called.</li>\n</ul>\n</li>\n<li><code>normalizeSingleResponse</code>|<code>normalizeArrayResponse</code><ul>\n<li>for methods like <code>createRecord</code> we expect a single record back, while for methods like <code>findAll</code> we expect multiple records back.</li>\n</ul>\n</li>\n<li><code>normalize</code><ul>\n<li><code>normalizeArrayResponse</code> iterates and calls <code>normalize</code> for each of its records while <code>normalizeSingle</code>\ncalls it once. This is the method you most likely want to subclass.</li>\n</ul>\n</li>\n<li><code>extractId</code> | <code>extractAttributes</code> | <code>extractRelationships</code><ul>\n<li><code>normalize</code> delegates to these methods to\nturn the record payload into the JSON API format.</li>\n</ul>\n</li>\n</ol>\n</body></html>",
      "itemtype": "main",
      "parent": null,
      "publicclasses": [
        "JSONSerializer"
      ],
      "privateclasses": [],
      "staticfunctions": {},
      "allstaticfunctions": {},
      "version": "4.1.0"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.1.0",
          "type": "project-version"
        }
      }
    }
  }
}