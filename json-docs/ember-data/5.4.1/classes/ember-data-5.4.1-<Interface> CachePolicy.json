{
  "data": {
    "id": "ember-data-5.4.1-<Interface> CachePolicy",
    "type": "class",
    "attributes": {
      "name": "<Interface> CachePolicy",
      "shortname": "<Interface> CachePolicy",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/store",
      "namespace": "",
      "file": "../store/src/-private/cache-handler/types.ts",
      "line": 6,
      "description": "A service which an application may provide to the store via\nthe store's `lifetimes` property to configure the behavior\nof the CacheHandler.\n\nThe default behavior for request lifetimes is to never expire\nunless manually refreshed via `cacheOptions.reload` or `cacheOptions.backgroundReload`.\n\nImplementing this service allows you to programatically define\nwhen a request should be considered expired.",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/store/src/-private/cache-handler/types.ts",
          "line": 21,
          "description": "Invoked to determine if the request may be fulfilled from cache\nif possible.\n\nNote, this is only invoked if the request has a cache-key.\n\nIf no cache entry is found or the entry is hard expired,\nthe request will be fulfilled from the configured request handlers\nand the cache will be updated before returning the response.",
          "itemtype": "method",
          "name": "isHardExpired",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "identifier",
              "description": "",
              "type": "StableDocumentIdentifier"
            },
            {
              "name": "store",
              "description": "",
              "type": "Store"
            }
          ],
          "return": {
            "description": "true if the request is considered hard expired",
            "type": "Boolean"
          },
          "class": "<Interface> CachePolicy",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/cache-handler/types.ts",
          "line": 38,
          "description": "Invoked if `isHardExpired` is false to determine if the request\nshould be update behind the scenes if cache data is already available.\n\nNote, this is only invoked if the request has a cache-key.\n\nIf true, the request will be fulfilled from cache while a backgrounded\nrequest is made to update the cache via the configured request handlers.",
          "itemtype": "method",
          "name": "isSoftExpired",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "identifier",
              "description": "",
              "type": "StableDocumentIdentifier"
            },
            {
              "name": "store",
              "description": "",
              "type": "Store"
            }
          ],
          "return": {
            "description": "true if the request is considered soft expired",
            "type": "Boolean"
          },
          "class": "<Interface> CachePolicy",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/cache-handler/types.ts",
          "line": 55,
          "description": "Invoked when a request will be sent to the configured request handlers.\nThis is invoked for both foreground and background requests.\n\nNote, this is invoked regardless of whether the request has a cache-key.",
          "itemtype": "method",
          "name": "willRequest [Optional]",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "request",
              "description": "",
              "type": "ImmutableRequestInfo"
            },
            {
              "name": "identifier",
              "description": "",
              "type": "StableDocumentIdentifier | null"
            },
            {
              "name": "store",
              "description": "",
              "type": "Store"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "<Interface> CachePolicy",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/cache-handler/types.ts",
          "line": 70,
          "description": "Invoked when a request has been fulfilled from the configured request handlers.\nThis is invoked for both foreground and background requests once the cache has\nbeen updated.\n\nNote, this is invoked regardless of whether the request has a cache-key.\n\nIt is best practice to notify the store of any requests marked as invalidated\nso that request subscriptions can reload when needed.\n\n```ts\nstore.notifications.notify(identifier, 'invalidated');\n```\n\nThis allows anything subscribed to the request to be notified of the change\n\ne.g.\n\n```ts\nstore.notifications.subscribe(identifier, (_, type) => {\n  if (type === 'invalidated') {\n    // do update\n  }\n});\n```\n\nNote,",
          "itemtype": "method",
          "name": "didRequest [Optional]",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "request",
              "description": "",
              "type": "ImmutableRequestInfo"
            },
            {
              "name": "response",
              "description": "",
              "type": "ImmutableResponse"
            },
            {
              "name": "identifier",
              "description": "",
              "type": "StableDocumentIdentifier | null"
            },
            {
              "name": "store",
              "description": "",
              "type": "Store"
            }
          ],
          "return": {
            "description": "",
            "type": "Void"
          },
          "class": "<Interface> CachePolicy",
          "module": "@ember-data/store"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.4.1-@ember-data/store",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.4.1",
          "type": "project-version"
        }
      }
    }
  }
}