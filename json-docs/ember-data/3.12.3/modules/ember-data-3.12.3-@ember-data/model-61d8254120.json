{
  "data": {
    "id": "ember-data-3.12.3-@ember-data/model",
    "type": "module",
    "attributes": {
      "name": "@ember-data/model",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember-data/model": 1,
        "Model": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "../store/addon/-private/system/model/model.js",
      "line": 100,
      "parent": null,
      "publicclasses": [
        "Model"
      ],
      "privateclasses": [],
      "staticfunctions": {
        "@ember-data/model": [
          {
            "file": "../model/addon/-private/attr.js",
            "line": 28,
            "description": "`attr` defines an attribute on a [Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[Transform](/api/data/classes/DS.Transform.html).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if none is supplied.\n\nExample\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  verified: attr('boolean', { defaultValue: false })\n});\n```\n\nDefault value can also be a function. This is useful it you want to return\na new object for each attribute.\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  settings: attr({\n    defaultValue() {\n      return {};\n    }\n  })\n});\n```\n\nThe `options` hash is passed as second argument to a transforms'\n`serialize` and `deserialize` method. This allows to configure a\ntransformation and adapt the corresponding value, based on the config:\n\n```app/models/post.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  text: attr('text', {\n    uppercase: true\n  })\n});\n```\n\n```app/transforms/text.js\nimport Transform from '@ember-data/serializer/transform';\n\nexport default Transform.extend({\n  serialize(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  },\n\n  deserialize(value) {\n    return value;\n  }\n})\n```",
            "itemtype": "method",
            "name": "attr",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "the attribute type",
                "type": "String|Object"
              },
              {
                "name": "options",
                "description": "a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Attribute"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../model/addon/-private/belongs-to.js",
            "line": 10,
            "description": "`belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [Model](/api/data/classes/DS.Model.html).\n\n\n`belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`belongsTo`:\n\n```app/models/user.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  profile: belongsTo('profile')\n});\n```\n\n```app/models/profile.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  user: belongsTo('user')\n});\n```\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the key name.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo()\n});\n```\n\nwill lookup for a Post type.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.\n\n```\nlet post = comment.get('post');\n\n```",
            "itemtype": "method",
            "name": "belongsTo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "modelName",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../model/addon/-private/has-many.js",
            "line": 9,
            "description": "`hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [Model](/api/data/classes/DS.Model.html).\n\n`hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a related model.\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`hasMany`:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany('tag')\n});\n```\n\n```app/models/tag.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  posts: hasMany('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the singularized key name.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany()\n});\n```\n\nwill lookup for a Tag type.\n\n#### Explicit Inverses\n\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\n\nHowever, sometimes you may have multiple `belongsTo`/`hasMany` for the\nsame type. You can specify which property on the related model is\nthe inverse using `hasMany`'s `inverse` option:\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  onePost: belongsTo('post'),\n  twoPost: belongsTo('post'),\n  redPost: belongsTo('post'),\n  bluePost: belongsTo('post')\n});\n```\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n```\n\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return a [ManyArray](/api/data/classes/DS.ManyArray.html) instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.\n\n```\npost.get('comments').forEach((comment) => {\n\n});\n\n```\n\nIf you are using `links` with sync relationships, you have to use\n`ref.reload` to fetch the resources.",
            "itemtype": "method",
            "name": "hasMany",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember-data/model": [
          {
            "file": "../model/addon/-private/attr.js",
            "line": 28,
            "description": "`attr` defines an attribute on a [Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[Transform](/api/data/classes/DS.Transform.html).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if none is supplied.\n\nExample\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  verified: attr('boolean', { defaultValue: false })\n});\n```\n\nDefault value can also be a function. This is useful it you want to return\na new object for each attribute.\n\n```app/models/user.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  settings: attr({\n    defaultValue() {\n      return {};\n    }\n  })\n});\n```\n\nThe `options` hash is passed as second argument to a transforms'\n`serialize` and `deserialize` method. This allows to configure a\ntransformation and adapt the corresponding value, based on the config:\n\n```app/models/post.js\nimport Model, { attr } from '@ember-data/model';\n\nexport default Model.extend({\n  text: attr('text', {\n    uppercase: true\n  })\n});\n```\n\n```app/transforms/text.js\nimport Transform from '@ember-data/serializer/transform';\n\nexport default Transform.extend({\n  serialize(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  },\n\n  deserialize(value) {\n    return value;\n  }\n})\n```",
            "itemtype": "method",
            "name": "attr",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "the attribute type",
                "type": "String|Object"
              },
              {
                "name": "options",
                "description": "a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "Attribute"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../model/addon/-private/belongs-to.js",
            "line": 10,
            "description": "`belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [Model](/api/data/classes/DS.Model.html).\n\n\n`belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`belongsTo`:\n\n```app/models/user.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  profile: belongsTo('profile')\n});\n```\n\n```app/models/profile.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  user: belongsTo('user')\n});\n```\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the key name.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo()\n});\n```\n\nwill lookup for a Post type.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.\n\n```\nlet post = comment.get('post');\n\n```",
            "itemtype": "method",
            "name": "belongsTo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "modelName",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          },
          {
            "file": "../model/addon/-private/has-many.js",
            "line": 9,
            "description": "`hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [Model](/api/data/classes/DS.Model.html).\n\n`hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n- `inverse`: A string used to identify the inverse property on a related model.\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`belongsTo` in combination with `hasMany`, like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment')\n});\n```\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  post: belongsTo('post')\n});\n```\n\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`hasMany`:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany('tag')\n});\n```\n\n```app/models/tag.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  posts: hasMany('post')\n});\n```\n\nYou can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the singularized key name.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  tags: hasMany()\n});\n```\n\nwill lookup for a Tag type.\n\n#### Explicit Inverses\n\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\n\nHowever, sometimes you may have multiple `belongsTo`/`hasMany` for the\nsame type. You can specify which property on the related model is\nthe inverse using `hasMany`'s `inverse` option:\n\n```app/models/comment.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n  onePost: belongsTo('post'),\n  twoPost: belongsTo('post'),\n  redPost: belongsTo('post'),\n  bluePost: belongsTo('post')\n});\n```\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n```\n\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.\n\n#### Sync relationships\n\nEmber Data resolves sync relationships with the related resources\navailable in its local store, hence it is expected these resources\nto be loaded before or along-side the primary resource.\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n  comments: hasMany('comment', {\n    async: false\n  })\n});\n```\n\nIn contrast to async relationship, accessing a sync relationship\nwill always return a [ManyArray](/api/data/classes/DS.ManyArray.html) instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.\n\n```\npost.get('comments').forEach((comment) => {\n\n});\n\n```\n\nIf you are using `links` with sync relationships, you have to use\n`ref.reload` to fetch the resources.",
            "itemtype": "method",
            "name": "hasMany",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "type",
                "description": "(optional) type of the relationship",
                "type": "String"
              },
              {
                "name": "options",
                "description": "(optional) a hash of options",
                "type": "Object"
              }
            ],
            "return": {
              "description": "relationship",
              "type": "Ember.computed"
            },
            "class": "@ember-data/model",
            "module": "@ember-data/model"
          }
        ],
        "Model": [
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1327,
            "description": "Create should only ever be called by the store. To create an instance of a\n`Model` in a dirty state use `store.createRecord`.\n\n   To create instances of `Model` in a clean state, use `store.push`",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1948,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr('string'),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachAttribute(function(name, meta) {\n   console.log(name, meta);\n });\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1800,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "itemtype": "method",
            "name": "eachRelatedType",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1784,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "static": 1,
            "params": [
              {
                "name": "callback",
                "description": "the callback to invoke",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Any"
              }
            ],
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1997,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\napplied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nimport Model, { attr } from '@ember-data/model';\n\nlet Person = Model.extend({\n   firstName: attr(),\n   lastName: attr('string'),\n   birthday: attr('date')\n });\n\nPerson.eachTransformedAttribute(function(name, type) {\n   console.log(name, type);\n });\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "params": [
              {
                "name": "callback",
                "description": "The callback to execute",
                "type": "Function"
              },
              {
                "name": "binding",
                "description": "the value to which the callback's `this` should be bound",
                "type": "Object",
                "optional": true
              }
            ],
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1417,
            "description": "Find the relationship which is the inverse of the one asked for.\n\nFor example, if you define models like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   comments: hasMany('message')\n });\n```\n\n```app/models/message.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default Model.extend({\n   owner: belongsTo('post')\n });\n```\n\n``` js\nstore.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\nstore.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n```",
            "itemtype": "method",
            "name": "inverseFor",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the inverse relationship, or null",
              "type": "Object"
            },
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 2047,
            "description": "Returns the name of the model class.",
            "itemtype": "method",
            "name": "toString",
            "static": 1,
            "class": "Model",
            "module": "@ember-data/model"
          },
          {
            "file": "../store/addon/-private/system/model/model.js",
            "line": 1387,
            "description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n```app/models/post.js\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default Model.extend({\n   comments: hasMany('comment')\n });\n```\n\nCalling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.",
            "itemtype": "method",
            "name": "typeForRelationship",
            "static": 1,
            "params": [
              {
                "name": "name",
                "description": "the name of the relationship",
                "type": "String"
              },
              {
                "name": "store",
                "description": "an instance of Store",
                "type": "Store"
              }
            ],
            "return": {
              "description": "the type of the relationship, or undefined",
              "type": "Model"
            },
            "class": "Model",
            "module": "@ember-data/model"
          }
        ]
      },
      "version": "3.12.3"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-3.12.3",
          "type": "project-version"
        }
      }
    }
  }
}