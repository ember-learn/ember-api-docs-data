{
  "data": {
    "id": "ember-data-3.0.3-DS.HasManyReference",
    "type": "class",
    "attributes": {
      "name": "DS.HasManyReference",
      "shortname": "DS.HasManyReference",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "addon/-private/system/references/has-many.js",
      "line": 11,
      "description": "A HasManyReference is a low level API that allows users and addon\nauthor to perform meta-operations on a has-many relationship.",
      "methods": [
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 31,
          "description": "This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the \"link\" otherwise it defaults to \"id\".\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
          "itemtype": "method",
          "name": "remoteType",
          "return": {
            "description": "The name of the remote type. This should either be \"link\" or \"ids\"",
            "type": "String"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 78,
          "description": "The link Ember Data will use to fetch or reload this has-many\nrelationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        links: {\n          related: '/posts/1/comments'\n        }\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.link(); // '/posts/1/comments'\n```",
          "itemtype": "method",
          "name": "link",
          "return": {
            "description": "The link Ember Data will use to fetch or reload this has-many relationship.",
            "type": "String"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 117,
          "description": "`ids()` returns an array of the record ids in this relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.ids(); // ['1']\n```",
          "itemtype": "method",
          "name": "ids",
          "return": {
            "description": "The ids in this has-many relationship",
            "type": "Array"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 157,
          "description": "The meta data for the has-many relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        links: {\n          related: {\n            href: '/posts/1/comments',\n            meta: {\n              count: 10\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.meta(); // { count: 10 }\n```",
          "itemtype": "method",
          "name": "meta",
          "return": {
            "description": "The meta information for the has-many relationship.",
            "type": "Object"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 200,
          "description": "`push` can be used to update the data in the relationship and Ember\nData will treat the new data as the canonical value of this\nrelationship on the backend.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.ids(); // ['1']\n\ncommentsRef.push([\n  [{ type: 'comment', id: 2 }],\n  [{ type: 'comment', id: 3 }],\n])\n\ncommentsRef.ids(); // ['2', '3']\n```",
          "itemtype": "method",
          "name": "push",
          "params": [
            {
              "name": "objectOrPromise",
              "description": "a promise that resolves to a JSONAPI document object describing the new value of this relationship.",
              "type": "Array|Promise"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.ManyArray"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 313,
          "description": "`value()` synchronously returns the current value of the has-many\n relationship. Unlike `record.get('relationshipName')`, calling\n `value()` on a reference does not trigger a fetch if the async\n relationship is not yet loaded. If the relationship is not loaded\n it will always return `null`.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\npost.get('comments').then(function(comments) {\n  commentsRef.value() === comments\n})\n```",
          "itemtype": "method",
          "name": "value",
          "return": {
            "description": "",
            "type": "DS.ManyArray"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 359,
          "description": "Loads the relationship if it is not already loaded.  If the\nrelationship is already loaded this method does not trigger a new\nload.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.load().then(function(comments) {\n  //...\n});\n```",
          "itemtype": "method",
          "name": "load",
          "return": {
            "description": "a promise that resolves with the ManyArray in\nthis has-many relationship.",
            "type": "Promise"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/references/has-many.js",
          "line": 404,
          "description": "Reloads this has-many relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.reload().then(function(comments) {\n  //...\n});\n```",
          "itemtype": "method",
          "name": "reload",
          "return": {
            "description": "a promise that resolves with the ManyArray in this has-many relationship.",
            "type": "Promise"
          },
          "class": "DS.HasManyReference",
          "module": "ember-data",
          "namespace": "DS"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-3.0.3-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-3.0.3",
          "type": "project-version"
        }
      }
    }
  }
}