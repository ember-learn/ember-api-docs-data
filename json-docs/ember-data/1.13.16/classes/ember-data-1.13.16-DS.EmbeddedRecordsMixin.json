{
  "data": {
    "id": "ember-data-1.13.16-DS.EmbeddedRecordsMixin",
    "type": "class",
    "attributes": {
      "name": "DS.EmbeddedRecordsMixin",
      "shortname": "DS.EmbeddedRecordsMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
      "line": 8,
      "description": "## Using Embedded Records\n\n`DS.EmbeddedRecordsMixin` supports serializing embedded records.\n\nTo set up embedded records, include the mixin when extending a serializer\nthen define and configure embedded (model) relationships.\n\nBelow is an example of a per-type serializer ('post' type).\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' },\n    comments: { serialize: 'ids' }\n  }\n});\n```\nNote that this use of `{ embedded: 'always' }` is unrelated to\nthe `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of\ndefining a model while working with the ActiveModelSerializer.  Nevertheless,\nusing `{ embedded: 'always' }` as an option to DS.attr is not a valid way to setup\nembedded records.\n\nThe `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:\n\n```js\n{\n  serialize: 'records',\n  deserialize: 'records'\n}\n```\n\n### Configuring Attrs\n\nA resource's `attrs` option may be set to use `ids`, `records` or false for the\n`serialize`  and `deserialize` settings.\n\nThe `attrs` property can be set on the ApplicationSerializer or a per-type\nserializer.\n\nIn the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is `deserialize: 'records'`, there is no need to use `ids` when\nextracting as that is the default behavior without this mixin if you are using\nthe vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while\nserializing `serialize: 'records'` is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\ndo not want the relationship sent at all, you can use `serialize: false`.\n\n\n### EmbeddedRecordsMixin defaults\nIf you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\nwill behave in the following way:\n\nBelongsTo: `{ serialize: 'id', deserialize: 'id' }`\nHasMany:   `{ serialize: false, deserialize: 'ids' }`\n\n### Model Relationships\n\nEmbedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as `belongsTo` and `hasMany`, you\nshould not both specify `async:true` and also indicate through the serializer's\n`attrs` attribute that the related model should be embedded for deserialization.\nIf a model is declared embedded for deserialization (`embedded: 'always'`,\n`deserialize: 'record'` or `deserialize: 'records'`), then do not use `async:true`.\n\nTo successfully extract and serialize embedded records the model relationships\nmust be setup correcty See the\n[defining relationships](/guides/models/defining-models/#toc_defining-relationships)\nsection of the **Defining Models** guide page.\n\nRecords without an `id` property are not considered embedded records, model\ninstances must have an `id` property to be used with Ember Data.\n\n### Example JSON payloads, Models and Serializers\n\n**When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.**\n\nFor example review the docs for each method of this mixin:\n* [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)\n* [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)\n* [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)",
      "methods": [
        {
          "file": "packages/ember-data/lib/initializers/data-adapter.js",
          "line": 3,
          "description": "Configures a registry with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
          "itemtype": "method",
          "name": "initializeStoreInjections",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/store-injections.js",
          "line": 1,
          "description": "Configures a registry with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
          "itemtype": "method",
          "name": "initializeStoreInjections",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/store.js",
          "line": 6,
          "description": "Configures a registry for use with an Ember-Data\nstore. Accepts an optional namespace argument.",
          "itemtype": "method",
          "name": "initializeStore",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            },
            {
              "name": "application",
              "description": "an application namespace",
              "type": "Object",
              "optional": true
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/transforms.js",
          "line": 8,
          "description": "Configures a registry for use with Ember-Data\ntransforms.",
          "itemtype": "method",
          "name": "initializeTransforms",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/instance-initializers/initialize-store-service.js",
          "line": 1,
          "description": "Configures a registry for use with an Ember-Data\nstore.",
          "itemtype": "method",
          "name": "initializeStore",
          "params": [
            {
              "name": "applicationOrRegistry",
              "description": "",
              "type": "Ember.ApplicationInstance"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 100,
          "description": "Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered\n\nA payload with an attr configured for embedded records needs to be extracted:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "hash",
              "description": "to be normalized",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "the hash has been referenced by",
              "type": "String"
            }
          ],
          "return": {
            "description": "the normalized hash",
            "type": "Object"
          },
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 141,
          "description": "Serialize `belongsTo` relationship when it is configured as an embedded object.\n\nThis example of an author model belongs to a post model:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  author:   DS.belongsTo('author')\n});\n\nAuthor = DS.Model.extend({\n  name:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded author\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' }\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"author\": {\n      \"id\": \"2\"\n      \"name\": \"dhh\"\n    }\n  }\n}\n```",
          "itemtype": "method",
          "name": "serializeBelongsTo",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 228,
          "description": "Serialize `hasMany` relationship when it is configured as embedded objects.\n\nThis example of a post model has many comments:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  comments: DS.hasMany('comment')\n});\n\nComment = DS.Model.extend({\n  body:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded comments\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: {embedded: 'always'}\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```\n\nThe attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed `ids` or `records` can be set.\nWhen extracting the only option is `records`.\n\nSo `{ embedded: 'always' }` is shorthand for:\n`{ serialize: 'records', deserialize: 'records' }`\n\nTo embed the `ids` for a related object (using a hasMany relationship):\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { serialize: 'ids', deserialize: 'records' }\n  }\n})\n```\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [\"1\", \"2\"]\n  }\n}\n```",
          "itemtype": "method",
          "name": "serializeHasMany",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 343,
          "description": "When serializing an embedded record, modify the property (in the json payload)\nthat refers to the parent record (foreign key for relationship).\n\nSerializing a `belongsTo` relationship removes the property that refers to the\nparent record\n\nSerializing a `hasMany` relationship does not remove the property that refers to\nthe parent record.",
          "itemtype": "method",
          "name": "removeEmbeddedForeignKey",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "embeddedSnapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 417,
          "itemtype": "method",
          "name": "_extractEmbeddedRecords",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 449,
          "itemtype": "method",
          "name": "_extractEmbeddedHasMany",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 478,
          "itemtype": "method",
          "name": "_extractEmbeddedHasManyPolymorphic",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 507,
          "itemtype": "method",
          "name": "_extractEmbeddedBelongsTo",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 531,
          "itemtype": "method",
          "name": "_extractEmbeddedBelongsToPolymorphic",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 557,
          "itemtype": "method",
          "name": "_normalizeEmbeddedRelationship",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-1.13.16-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-1.13.16",
          "type": "project-version"
        }
      }
    }
  }
}