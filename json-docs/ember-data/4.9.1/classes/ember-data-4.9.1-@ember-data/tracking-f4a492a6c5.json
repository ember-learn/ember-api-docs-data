{
  "data": {
    "id": "ember-data-4.9.1-@ember-data/tracking",
    "type": "class",
    "attributes": {
      "name": "@ember-data/tracking",
      "shortname": "@ember-data/tracking",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/tracking",
      "namespace": "",
      "methods": [
        {
          "file": "../packages/tracking/src/-private.ts",
          "line": 90,
          "description": "<html><head></head><body><p>Run <code>method</code> without subscribing to any tracked properties\ncontrolled by EmberData.</p>\n<p>This should rarely be used except by libraries that really\nknow what they are doing. It is most useful for wrapping\ncertain kinds of fetch/query logic from within a <code>Resource</code>\n<code>hook</code> or other similar pattern.</p>\n</body></html>",
          "itemtype": "method",
          "name": "untracked",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "return": {
            "description": "result of invoking method"
          },
          "class": "@ember-data/tracking",
          "module": "@ember-data/tracking"
        },
        {
          "file": "../packages/tracking/src/-private.ts",
          "line": 113,
          "description": "<html><head></head><body><p>Run the method, subscribing to any tracked properties\nmanaged by EmberData that were accessed or written during\nthe method&apos;s execution as per-normal but while allowing\ninterleaving of reads and writes.</p>\n<p>This is useful when for instance you want to perform\na mutation based on existing state that must be read first.</p>\n</body></html>",
          "itemtype": "method",
          "name": "transact",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "return": {
            "description": "result of invoking method"
          },
          "class": "@ember-data/tracking",
          "module": "@ember-data/tracking"
        },
        {
          "file": "../packages/tracking/src/-private.ts",
          "line": 136,
          "description": "<html><head></head><body><p>A helpful utility for creating a new function that\nalways runs in a transaction. E.G. this &quot;memoizes&quot;\ncalling <code>transact(fn)</code>, currying args as necessary.</p>\n</body></html>",
          "itemtype": "method",
          "name": "memoTransact",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "method",
              "description": ""
            }
          ],
          "return": {
            "description": "a function that will invoke method in a transaction with any provided args and return its result"
          },
          "class": "@ember-data/tracking",
          "module": "@ember-data/tracking"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-4.9.1-@ember-data/tracking",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.9.1",
          "type": "project-version"
        }
      }
    }
  }
}