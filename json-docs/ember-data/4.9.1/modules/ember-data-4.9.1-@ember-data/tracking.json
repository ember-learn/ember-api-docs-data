{
  "data": {
    "id": "ember-data-4.9.1-@ember-data/tracking",
    "type": "module",
    "attributes": {
      "name": "@ember-data/tracking",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember-data/tracking": 1
      },
      "namespaces": {},
      "tag": "main",
      "file": "../packages/tracking/src/-private.ts",
      "line": 1,
      "description": "This package provides primitives that allow powerful low-level\nadjustments to change tracking notification behaviors.\n\nTypically you want to use these primitives when you want to divorce\nproperty accesses on EmberData provided objects from the current\ntracking context. Typically this sort of thing occurs when serializing\ntracked data to send in a request: the data itself is often ancillary\nto the thing which triggered the request in the first place and you\nwould not want to re-trigger the request for any update to the data.",
      "itemtype": "main",
      "parent": null,
      "publicclasses": [],
      "privateclasses": [],
      "staticfunctions": {
        "@ember-data/tracking": [
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 136,
            "description": "A helpful utility for creating a new function that\nalways runs in a transaction. E.G. this \"memoizes\"\ncalling `transact(fn)`, currying args as necessary.",
            "itemtype": "method",
            "name": "memoTransact",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "a function that will invoke method in a transaction with any provided args and return its result"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          },
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 113,
            "description": "Run the method, subscribing to any tracked properties\nmanaged by EmberData that were accessed or written during\nthe method's execution as per-normal but while allowing\ninterleaving of reads and writes.\n\nThis is useful when for instance you want to perform\na mutation based on existing state that must be read first.",
            "itemtype": "method",
            "name": "transact",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "result of invoking method"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          },
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 90,
            "description": "Run `method` without subscribing to any tracked properties\ncontrolled by EmberData.\n\nThis should rarely be used except by libraries that really\nknow what they are doing. It is most useful for wrapping\ncertain kinds of fetch/query logic from within a `Resource`\n`hook` or other similar pattern.",
            "itemtype": "method",
            "name": "untracked",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "result of invoking method"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember-data/tracking": [
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 136,
            "description": "A helpful utility for creating a new function that\nalways runs in a transaction. E.G. this \"memoizes\"\ncalling `transact(fn)`, currying args as necessary.",
            "itemtype": "method",
            "name": "memoTransact",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "a function that will invoke method in a transaction with any provided args and return its result"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          },
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 113,
            "description": "Run the method, subscribing to any tracked properties\nmanaged by EmberData that were accessed or written during\nthe method's execution as per-normal but while allowing\ninterleaving of reads and writes.\n\nThis is useful when for instance you want to perform\na mutation based on existing state that must be read first.",
            "itemtype": "method",
            "name": "transact",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "result of invoking method"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          },
          {
            "file": "../packages/tracking/src/-private.ts",
            "line": 90,
            "description": "Run `method` without subscribing to any tracked properties\ncontrolled by EmberData.\n\nThis should rarely be used except by libraries that really\nknow what they are doing. It is most useful for wrapping\ncertain kinds of fetch/query logic from within a `Resource`\n`hook` or other similar pattern.",
            "itemtype": "method",
            "name": "untracked",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "return": {
              "description": "result of invoking method"
            },
            "class": "@ember-data/tracking",
            "module": "@ember-data/tracking"
          }
        ]
      },
      "version": "4.9.1"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.9.1",
          "type": "project-version"
        }
      }
    }
  }
}