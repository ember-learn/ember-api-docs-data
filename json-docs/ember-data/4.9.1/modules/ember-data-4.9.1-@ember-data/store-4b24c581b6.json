{
  "data": {
    "id": "ember-data-4.9.1-@ember-data/store",
    "type": "module",
    "attributes": {
      "name": "@ember-data/store",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember-data/store": 1
      },
      "namespaces": {},
      "tag": "main",
      "file": "../packages/store/addon/-private/store-service.ts",
      "line": 95,
      "description": "<html><head></head><body><p>The store contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of <code>Model</code> that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.</p>\n<p>Define your application&apos;s store like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/services/store.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span> from &apos;<span class=\"meta\">@ember</span>-data/store&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Most Ember.js applications will only have a single <code>Store</code> that is\nautomatically created by their <code>Ember.Application</code>.</p>\n<p>You can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use <code>Store</code>&apos;s <code>findRecord()</code> method:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>store.findRecord(<span class=\"symbol\">&apos;person</span>&apos;, <span class=\"number\">123</span>).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span> <span class=\"title\"></span>(person) {\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Adapter</span> from &apos;<span class=\"meta\">@ember</span>-data/adapter&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can learn more about writing a custom adapter by reading the <code>Adapter</code>\ndocumentation.</p>\n<h3 id=\"store-createrecord-vs-push-vs-pushpayload\">Store createRecord() vs. push() vs. pushPayload()</h3>\n<p>The store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:</p>\n<p><a href=\"../methods/createRecord?anchor=createRecord\">createRecord</a> is used for creating new\nrecords on the client side. This will return a new record in the\n<code>created.uncommitted</code> state. In order to persist this record to the\nbackend, you will need to call <code>record.save()</code>.</p>\n<p><a href=\"../methods/push?anchor=push\">push</a> is used to notify Ember Data&apos;s store of new or\nupdated records that exist in the backend. This will return a record\nin the <code>loaded.saved</code> state. The primary use-case for <code>store#push</code> is\nto notify Ember Data about record updates (full or partial) that happen\noutside of the normal adapter methods (for example\n<a href=\"http://dev.w3.org/html5/eventsource/\">SSE</a> or <a href=\"http://www.w3.org/TR/2009/WD-websockets-20091222/\">Web\nSockets</a>).</p>\n<p><a href=\"../methods/pushPayload?anchor=pushPayload\">pushPayload</a> is a convenience wrapper for\n<code>store#push</code> that will deserialize payloads if the\nSerializer implements a <code>pushPayload</code> method.</p>\n<p>Note: When creating a new record using any of the above methods\nEmber Data will update <code>RecordArray</code>s such as those returned by\n<code>store#peekAll()</code> or <code>store#findAll()</code>. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.</p>\n</body></html>",
      "itemtype": "main",
      "parent": null,
      "publicclasses": [
        "StableRecordIdentifier",
        "RecordDataStoreWrapper",
        "SchemaDefinitionService",
        "ManyArray",
        "IdentifierCache",
        "RecordReference",
        "RecordDataManager",
        "SnapshotRecordArray",
        "Snapshot",
        "PromiseArray",
        "PromiseObject",
        "RecordArray",
        "Store"
      ],
      "privateclasses": [
        "FetchManager"
      ],
      "staticfunctions": {
        "@ember-data/store": [
          {
            "file": "../packages/store/addon/-private/utils/normalize-model-name.ts",
            "line": 7,
            "description": "This method normalizes a modelName into the format Ember Data uses\ninternally by dasherizing it.",
            "itemtype": "method",
            "name": "normalizeModelName",
            "static": 1,
            "access": "public",
            "tagname": "",
            "deprecated": true,
            "params": [
              {
                "name": "modelName",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "normalizedModelName",
              "type": "String"
            },
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../packages/store/addon/-private/caches/instance-cache.ts",
            "line": 62,
            "description": "Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)\nassigned to the given record instance.\n```js\nimport { recordIdentifierFor } from \"@ember-data/store\";\n// ... gain access to a record, for instance with peekRecord or findRecord\nconst record = store.peekRecord(\"user\", \"1\");\n// get the identifier for the record (see docs for StableRecordIdentifier)\nconst identifier = recordIdentifierFor(record);\n// access the identifier's properties.\nconst { id, type, lid } = identifier;\n```",
            "itemtype": "method",
            "name": "recordIdentifierFor",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "record",
                "description": "a record instance previously obstained from the store.",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "StableRecordIdentifier"
            },
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 208,
            "description": "Configure a callback for when the identifier cache is going to release an identifier.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierForgetMethod } from '@ember-data/store';\n```\n\nTakes method which can expect to receive an existing `Identifier` that should be eliminated\nfrom any secondary lookup tables or caches that the user has populated for it.",
            "itemtype": "method",
            "name": "setIdentifierForgetMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 116,
            "description": "Configures how unique identifier lid strings are generated by @ember-data/store.\n\nThis configuration MUST occur prior to the store instance being created.\n\nTakes a method which can expect to receive various data as its first argument\nand the name of a bucket as its second argument. Currently the second\nargument will always be `record` data should conform to a `json-api`\n`Resource` interface, but will be the normalized json data for a single\nresource that has been given to the store.\n\nThe method must return a unique (to at-least the given bucket) string identifier\nfor the given data as a string to be used as the `lid` of an `Identifier` token.\n\nThis method will only be called by either `getOrCreateRecordIdentifier` or\n`createIdentifierForNewRecord` when an identifier for the supplied data\nis not already known via `lid` or `type + id` combo and one needs to be\ngenerated or retrieved from a proprietary cache.\n\n`data` will be the same data argument provided to `getOrCreateRecordIdentifier`\nand in the `createIdentifierForNewRecord` case will be an object with\nonly `type` as a key.\n\n```ts\nimport { setIdentifierGenerationMethod } from '@ember-data/store';\n\nexport function initialize(applicationInstance) {\n  // note how `count` here is now scoped to the application instance\n  // for our generation method by being inside the closure provided\n  // by the initialize function\n  let count = 0;\n\n  setIdentifierGenerationMethod((resource, bucket) => {\n    return resource.lid || `my-key-${count++}`;\n  });\n}\n\nexport default {\n  name: 'configure-ember-data-identifiers',\n  initialize\n};\n```",
            "itemtype": "method",
            "name": "setIdentifierGenerationMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 228,
            "description": "Configure a callback for when the identifier cache is being torn down.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierResetMethod } from '@ember-data/store';\n```\n\nTakes a method which can expect to be called when the parent application is destroyed.\n\nIf you have properly used a WeakMap to encapsulate the state of your customization\nto the application instance, you may not need to implement the `resetMethod`.",
            "itemtype": "method",
            "name": "setIdentifierResetMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 167,
            "description": "Configure a callback for when the identifier cache encounters new resource\ndata for an existing resource.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierUpdateMethod } from '@ember-data/store';\n```\n\nTakes a method which can expect to receive an existing `Identifier` alongside\nsome new data to consider as a second argument. This is an opportunity\nfor secondary lookup tables and caches associated with the identifier\nto be amended.\n\nThis method is called everytime `updateRecordIdentifier` is called and\n with the same arguments. It provides the opportunity to update secondary\n lookup tables for existing identifiers.\n\nIt will always be called after an identifier created with `createIdentifierForNewRecord`\n has been committed, or after an update to the `record` a `RecordIdentifier`\n is assigned to has been committed. Committed here meaning that the server\n has acknowledged the update (for instance after a call to `.save()`)\n\nIf `id` has not previously existed, it will be assigned to the `Identifier`\n prior to this `UpdateMethod` being called; however, calls to the parent method\n `updateRecordIdentifier` that attempt to change the `id` or calling update\n without providing an `id` when one is missing will throw an error.",
            "itemtype": "method",
            "name": "setIdentifierUpdateMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          }
        ]
      },
      "allstaticfunctions": {
        "@ember-data/store": [
          {
            "file": "../packages/store/addon/-private/utils/normalize-model-name.ts",
            "line": 7,
            "description": "This method normalizes a modelName into the format Ember Data uses\ninternally by dasherizing it.",
            "itemtype": "method",
            "name": "normalizeModelName",
            "static": 1,
            "access": "public",
            "tagname": "",
            "deprecated": true,
            "params": [
              {
                "name": "modelName",
                "description": "",
                "type": "String"
              }
            ],
            "return": {
              "description": "normalizedModelName",
              "type": "String"
            },
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../packages/store/addon/-private/caches/instance-cache.ts",
            "line": 62,
            "description": "Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)\nassigned to the given record instance.\n```js\nimport { recordIdentifierFor } from \"@ember-data/store\";\n// ... gain access to a record, for instance with peekRecord or findRecord\nconst record = store.peekRecord(\"user\", \"1\");\n// get the identifier for the record (see docs for StableRecordIdentifier)\nconst identifier = recordIdentifierFor(record);\n// access the identifier's properties.\nconst { id, type, lid } = identifier;\n```",
            "itemtype": "method",
            "name": "recordIdentifierFor",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
              {
                "name": "record",
                "description": "a record instance previously obstained from the store.",
                "type": "Object"
              }
            ],
            "return": {
              "description": "",
              "type": "StableRecordIdentifier"
            },
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 208,
            "description": "Configure a callback for when the identifier cache is going to release an identifier.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierForgetMethod } from '@ember-data/store';\n```\n\nTakes method which can expect to receive an existing `Identifier` that should be eliminated\nfrom any secondary lookup tables or caches that the user has populated for it.",
            "itemtype": "method",
            "name": "setIdentifierForgetMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 116,
            "description": "Configures how unique identifier lid strings are generated by @ember-data/store.\n\nThis configuration MUST occur prior to the store instance being created.\n\nTakes a method which can expect to receive various data as its first argument\nand the name of a bucket as its second argument. Currently the second\nargument will always be `record` data should conform to a `json-api`\n`Resource` interface, but will be the normalized json data for a single\nresource that has been given to the store.\n\nThe method must return a unique (to at-least the given bucket) string identifier\nfor the given data as a string to be used as the `lid` of an `Identifier` token.\n\nThis method will only be called by either `getOrCreateRecordIdentifier` or\n`createIdentifierForNewRecord` when an identifier for the supplied data\nis not already known via `lid` or `type + id` combo and one needs to be\ngenerated or retrieved from a proprietary cache.\n\n`data` will be the same data argument provided to `getOrCreateRecordIdentifier`\nand in the `createIdentifierForNewRecord` case will be an object with\nonly `type` as a key.\n\n```ts\nimport { setIdentifierGenerationMethod } from '@ember-data/store';\n\nexport function initialize(applicationInstance) {\n  // note how `count` here is now scoped to the application instance\n  // for our generation method by being inside the closure provided\n  // by the initialize function\n  let count = 0;\n\n  setIdentifierGenerationMethod((resource, bucket) => {\n    return resource.lid || `my-key-${count++}`;\n  });\n}\n\nexport default {\n  name: 'configure-ember-data-identifiers',\n  initialize\n};\n```",
            "itemtype": "method",
            "name": "setIdentifierGenerationMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 228,
            "description": "Configure a callback for when the identifier cache is being torn down.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierResetMethod } from '@ember-data/store';\n```\n\nTakes a method which can expect to be called when the parent application is destroyed.\n\nIf you have properly used a WeakMap to encapsulate the state of your customization\nto the application instance, you may not need to implement the `resetMethod`.",
            "itemtype": "method",
            "name": "setIdentifierResetMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          },
          {
            "file": "../ember-data-types/q/identifier.ts",
            "line": 167,
            "description": "Configure a callback for when the identifier cache encounters new resource\ndata for an existing resource.\n\nThis configuration MUST occur prior to the store instance being created.\n\n```js\nimport { setIdentifierUpdateMethod } from '@ember-data/store';\n```\n\nTakes a method which can expect to receive an existing `Identifier` alongside\nsome new data to consider as a second argument. This is an opportunity\nfor secondary lookup tables and caches associated with the identifier\nto be amended.\n\nThis method is called everytime `updateRecordIdentifier` is called and\n with the same arguments. It provides the opportunity to update secondary\n lookup tables for existing identifiers.\n\nIt will always be called after an identifier created with `createIdentifierForNewRecord`\n has been committed, or after an update to the `record` a `RecordIdentifier`\n is assigned to has been committed. Committed here meaning that the server\n has acknowledged the update (for instance after a call to `.save()`)\n\nIf `id` has not previously existed, it will be assigned to the `Identifier`\n prior to this `UpdateMethod` being called; however, calls to the parent method\n `updateRecordIdentifier` that attempt to change the `id` or calling update\n without providing an `id` when one is missing will throw an error.",
            "itemtype": "method",
            "name": "setIdentifierUpdateMethod",
            "params": [
              {
                "name": "method",
                "description": ""
              }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "@ember-data/store",
            "module": "@ember-data/store"
          }
        ]
      },
      "version": "4.9.1"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.9.1",
          "type": "project-version"
        }
      }
    }
  }
}