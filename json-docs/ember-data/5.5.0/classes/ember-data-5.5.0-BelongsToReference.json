{
  "data": {
    "id": "ember-data-5.5.0-BelongsToReference",
    "type": "class",
    "attributes": {
      "name": "BelongsToReference",
      "shortname": "BelongsToReference",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "file": "../model/src/-private/references/belongs-to.ts",
      "line": 41,
      "description": "A `BelongsToReference` is a low-level API that allows access\nand manipulation of a belongsTo relationship.\n\nIt is especially useful when you're dealing with `async` relationships\nfrom `@ember-data/model` as it allows synchronous access to\nthe relationship data if loaded, as well as APIs for loading, reloading\nthe data or accessing available information without triggering a load.\n\nIt may also be useful when using `sync` relationships with `@ember-data/model`\nthat need to be loaded/reloaded with more precise timing than marking the\nrelationship as `async` and relying on autofetch would have allowed.\n\nHowever,keep in mind that marking a relationship as `async: false` will introduce\nbugs into your application if the data is not always guaranteed to be available\nby the time the relationship is accessed. Ergo, it is recommended when using this\napproach to utilize `links` for unloaded relationship state instead of identifiers.\n\nReference APIs are entangled with the relationship's underlying state,\nthus any getters or cached properties that utilize these will properly\ninvalidate if the relationship state changes.\n\nReferences are \"stable\", meaning that multiple calls to retrieve the reference\n for a given relationship will always return the same HasManyReference.",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 173,
          "description": "The `id` of the record that this reference refers to. Together, the\n`type()` and `id()` methods form a composite key for the identity\nmap. This can be used to access the id of an async relationship\nwithout triggering a fetch that would normally happen if you\nattempted to use `record.relationship.id`.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class BlogModel extends Model {\n @belongsTo('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n   let id = userRef.id();\n }\n```",
          "itemtype": "method",
          "name": "id",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The id of the record in this belongsTo relationship.",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 217,
          "description": "The link Ember Data will use to fetch or reload this belongs-to\nrelationship. By default it uses only the \"related\" resource linkage.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo('user', { async: true, inverse: null })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         links: {\n           related: '/articles/1/author'\n         }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"link\") {\n   let link = userRef.link();\n }\n```",
          "itemtype": "method",
          "name": "link",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The link Ember Data will use to fetch or reload this belongs-to relationship.",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 267,
          "description": "any links that have been received for this relationship",
          "itemtype": "method",
          "name": "links",
          "access": "public",
          "tagname": "",
          "return": {
            "description": ""
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 280,
          "description": "The meta data for the belongs-to relationship.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo('user', { async: true, inverse: null })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         links: {\n           related: {\n             href: '/articles/1/author'\n           },\n         },\n         meta: {\n           lastUpdated: 1458014400000\n         }\n       }\n     }\n   }\n });\n\nlet userRef = blog.belongsTo('user');\n\nuserRef.meta() // { lastUpdated: 1458014400000 }\n```",
          "itemtype": "method",
          "name": "meta",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The meta information for the belongs-to relationship.",
            "type": "Object"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 338,
          "description": "This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the \"link\" otherwise it defaults to \"id\".\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
          "itemtype": "method",
          "name": "remoteType",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The name of the remote type. This should either be `link` or `id`",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 388,
          "description": "`push` can be used to update the data in the relationship and EmberData\nwill treat the new data as the canonical value of this relationship on\nthe backend. A value of `null` (e.g. `{ data: null }`) can be passed to\nclear the relationship.\n\nExample model\n\n```js {data-filename=app/models/blog.js}\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class BlogModel extends Model {\n   @belongsTo('user', { async: true, inverse: null }) user;\n }\n```\n\nSetup some initial state, note we haven't loaded the user yet:\n\n```js\nconst blog = store.push({\n   data: {\n     type: 'blog',\n     id: '1',\n     relationships: {\n       user: {\n         data: { type: 'user', id: '1' }\n       }\n     }\n   }\n});\n\nconst userRef = blog.belongsTo('user');\nuserRef.id(); // '1'\n```\n\nUpdate the state using `push`, note we can do this even without\nhaving loaded the user yet by providing a resource-identifier.\n\nBoth full a resource and a resource-identifier are supported.\n\n```js\nawait userRef.push({\n   data: {\n     type: 'user',\n     id: '2',\n   }\n });\n\n userRef.id(); // '2'\n```\n\nYou may also pass in links and meta fore the relationship, and sideload\nadditional resources that might be required.\n\n```js\n await userRef.push({\n     data: {\n       type: 'user',\n       id: '2',\n     },\n     links: {\n       related: '/articles/1/author'\n     },\n     meta: {\n       lastUpdated: Date.now()\n     },\n     included: [\n       {\n         type: 'user-preview',\n         id: '2',\n         attributes: {\n           username: '@runspired'\n         }\n       }\n     ]\n   });\n ```\n\nBy default, the store will attempt to fetch the record if it is not loaded or its\nresource data is not included in the call to `push` before resolving the returned\npromise with the new state..\n\nAlternatively, pass `true` as the second argument to avoid fetching unloaded records\nand instead the promise will resolve with void without attempting to fetch. This is\nparticularly useful if you want to update the state of the relationship without\nforcing the load of all of the associated record.",
          "itemtype": "method",
          "name": "push",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "doc",
              "description": "a JSONAPI document object describing the new value of this relationship.",
              "type": "Object"
            },
            {
              "name": "skipFetch",
              "description": "if `true`, do not attempt to fetch unloaded records",
              "type": "Boolean",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Promise<OpaqueRecordInstance | null | void>"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 521,
          "description": "`value()` synchronously returns the current value of the belongs-to\nrelationship. Unlike `record.relationshipName`, calling\n`value()` on a reference does not trigger a fetch if the async\nrelationship is not yet loaded. If the relationship is not loaded\nit will always return `null`.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class BlogModel extends Model {\n  @belongsTo('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\n// provide data for reference\nuserRef.push({\n   data: {\n     type: 'user',\n     id: 1,\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value(); // user\n });\n```",
          "itemtype": "method",
          "name": "value",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "the record in this relationship",
            "type": "Model"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 576,
          "description": "Loads a record in a belongs-to relationship if it is not already\nloaded. If the relationship is already loaded this method does not\ntrigger a new load.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class BlogModel extends Model {\n  @belongsTo('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\nuserRef.load().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference.\n\nExample\n\n```javascript\nuserRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n  userRef.value() === user;\n});\n```\n```js {data-filename=app/adapters/user.js}\nimport Adapter from '@ember-data/adapter';\n\nexport default class UserAdapter extends Adapter {\n  findRecord(store, type, id, snapshot) {\n    // In the adapter you will have access to adapterOptions.\n    let adapterOptions = snapshot.adapterOptions;\n  }\n});\n```",
          "itemtype": "method",
          "name": "load",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the record in this belongs-to relationship.",
            "type": "Promise"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 651,
          "description": "Triggers a reload of the value in this relationship. If the\nremoteType is `\"link\"` Ember Data will use the relationship link to\nreload the relationship. Otherwise it will reload the record by its\nid.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class BlogModel extends Model {\n  @belongsTo('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.reload().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference. A full example\ncan be found in the `load` method.\n\nExample\n\n```javascript\nuserRef.reload({ adapterOptions: { isPrivate: true } })\n```",
          "itemtype": "method",
          "name": "reload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the record in this belongs-to relationship after the reload has completed.",
            "type": "Promise"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 77,
          "description": "The field name on the parent record for this has-many relationship.",
          "itemtype": "property",
          "name": "key",
          "type": "{String}",
          "access": "public",
          "tagname": "",
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 86,
          "description": "The type of resource this relationship will contain.",
          "itemtype": "property",
          "name": "type",
          "type": "{String}",
          "access": "public",
          "tagname": "",
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 140,
          "description": "The identifier of the record that this reference refers to.\n`null` if no related record is known.",
          "itemtype": "property",
          "name": "identifier",
          "type": "{StableRecordIdentifier | null}",
          "access": "public",
          "tagname": "",
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.5.0-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.5.0",
          "type": "project-version"
        }
      }
    }
  }
}