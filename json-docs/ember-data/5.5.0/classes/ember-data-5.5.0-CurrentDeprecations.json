{
  "data": {
    "id": "ember-data-5.5.0-CurrentDeprecations",
    "type": "class",
    "attributes": {
      "name": "CurrentDeprecations",
      "shortname": "CurrentDeprecations",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@warp-drive/build-config",
      "namespace": "",
      "file": "../build-config/src/deprecation-versions.ts",
      "line": 22,
      "description": "## Deprecation Management\n\nEmberData allows users to opt-in and remove code that exists to support deprecated\nbehaviors.\n\nIf your app has resolved all deprecations present in a given version,\nyou may specify that version as your \"compatibility\" version to remove\nthe code that supported the deprecated behavior from your app.\n\nFor instance, if a deprecation was introduced in 3.13, and the app specifies\n3.13 as its minimum version compatibility, any deprecations introduced before\nor during 3.13 would be stripped away.\n\nAn app can use a different version than what it specifies as it's compatibility\nversion. For instance, an App could be using `3.16` while specifying compatibility\nwith `3.12`. This would remove any deprecations that were present in or before `3.12`\nbut keep support for anything deprecated in or above `3.13`.\n\nYou may also specify that specific deprecations are resolved. These approaches\nmay be used together.\n\n```ts\nsetConfig(app, __dirname, {\n  // declare that all deprecations through \"5.0\" have been fully resolved\n  compatWith: '5.0',\n\n  // mark individual deprecations as resolved by setting them to `false`\n  deprecations: {\n    // resolve individual deprecations here\n  },\n});\n```\n\n> [!TIP]\n> EmberData does not test against permutations of deprecations\n> being stripped, our tests run against \"all deprecated code included\"\n> and \"all deprecated code removed\". Unspecified behavior may sometimes occur\n> when removing code for only some deprecations associated to a version number.",
      "access": "public",
      "tagname": "",
      "methods": [],
      "events": [],
      "properties": [
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 66,
          "description": "**id: ember-data:deprecate-non-strict-types**\n\nCurrently, EmberData expects that the `type` property associated with\na resource follows several conventions.\n\n- The `type` property must be a non-empty string\n- The `type` property must be singular\n- The `type` property must be dasherized\n\nWe are deprecating support for types that do not match this pattern\nin order to unlock future improvements in which we can support `type`\nbeing any string of your choosing.\n\nThe goal is that in the future, you will be able to use any string\nso long as it matches what your configured cache, identifier generation,\nand schemas expect.\n\nE.G. It will matter not that your string is in a specific format like\nsingular, dasherized, etc. so long as everywhere you refer to the type\nyou use the same string.\n\nIf using @ember-data/model, there will always be a restriction that the\n`type` must match the path on disk where the model is defined.\n\ne.g. `app/models/foo/bar-bem.js` must have a type of `foo/bar-bem`",
          "itemtype": "property",
          "name": "DEPRECATE_NON_STRICT_TYPES",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 101,
          "description": "**id: ember-data:deprecate-non-strict-id**\n\nCurrently, EmberData expects that the `id` property associated with\na resource is a string.\n\nHowever, for legacy support in many locations we would accept a number\nwhich would then immediately be coerced into a string.\n\nWe are deprecating this legacy support for numeric IDs.\n\nThe goal is that in the future, you will be able to use any ID format\nso long as everywhere you refer to the ID you use the same format.\n\nHowever, for identifiers we will always use string IDs and so any\ncustom identifier configuration should provide a string ID.",
          "itemtype": "property",
          "name": "DEPRECATE_NON_STRICT_ID",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 126,
          "description": "**id: <none yet assigned>**\n\nThis is a planned deprecation which will trigger when observer or computed\nchains are used to watch for changes on any EmberData LiveArray, CollectionRecordArray,\nManyArray or PromiseManyArray.\n\nSupport for these chains is currently guarded by the deprecation flag\nlisted here, enabling removal of the behavior if desired.\n\nThe instrumentation was added in 5.0 but the version number\nis set to 7.0 as we do not want to strip support without\nadding a deprecation message.\n\nOnce we've added the deprecation message, we will\nupdate this version number to the proper version.",
          "itemtype": "property",
          "name": "DEPRECATE_COMPUTED_CHAINS",
          "type": "{Boolean}",
          "since": "5.0",
          "until": "8.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 151,
          "description": "**id: ember-data:deprecate-legacy-imports**\n\nDeprecates when importing from `ember-data/*` instead of `@ember-data/*`\nin order to prepare for the eventual removal of the legacy `ember-data/*`\n\nAll imports from `ember-data/*` should be updated to `@ember-data/*`\nexcept for `ember-data/store`. When you are using `ember-data` (as opposed to\ninstalling the indivudal packages) you should import from `ember-data/store`\ninstead of `@ember-data/store` in order to receive the appropriate configuration\nof defaults.",
          "itemtype": "property",
          "name": "DEPRECATE_LEGACY_IMPORTS",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 171,
          "description": "**id: ember-data:deprecate-non-unique-collection-payloads**\n\nDeprecates when the data for a hasMany relationship contains\nduplicate identifiers.\n\nPreviously, relationships would silently de-dupe the data\nwhen received, but this behavior is being removed in favor\nof erroring if the same related record is included multiple\ntimes.\n\nFor instance, in JSON:API the below relationship data would\nbe considered invalid:\n\n```json\n{\n \"data\": {\n  \"type\": \"article\",\n   \"id\": \"1\",\n   \"relationships\": {\n     \"comments\": {\n       \"data\": [\n         { \"type\": \"comment\", \"id\": \"1\" },\n         { \"type\": \"comment\", \"id\": \"2\" },\n         { \"type\": \"comment\", \"id\": \"1\" } // duplicate\n       ]\n    }\n }\n}\n```\n\nTo resolve this deprecation, either update your server to\nnot include duplicate data, or implement normalization logic\nin either a request handler or serializer which removes\nduplicate data from relationship payloads.",
          "itemtype": "property",
          "name": "DEPRECATE_NON_UNIQUE_PAYLOADS",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 215,
          "description": "**id: ember-data:deprecate-relationship-remote-update-clearing-local-state**\n\nDeprecates when a relationship is updated remotely and the local state\nis cleared of all changes except for \"new\" records.\n\nInstead, any records not present in the new payload will be considered\n\"removed\" while any records present in the new payload will be considered \"added\".\n\nThis allows us to \"commit\" local additions and removals, preserving any additions\nor removals that are not yet reflected in the remote state.\n\nFor instance, given the following initial state:\n\nremote: A, B, C\nlocal: add D, E\n       remove B, C\n=> A, D, E\n\n\nIf after an update, the remote state is now A, B, D, F then the new state will be\n\nremote: A, B, D, F\nlocal: add E\n       remove B\n=> A, D, E, F\n\nUnder the old behavior the updated local state would instead have been\n=> A, B, D, F\n\nSimilarly, if a belongsTo remote State was A while its local state was B,\nthen under the old behavior if the remote state changed to C, the local state\nwould be updated to C. Under the new behavior, the local state would remain B.\n\nIf the remote state was A while its local state was `null`, then under the old\nbehavior if the remote state changed to C, the local state would be updated to C.\nUnder the new behavior, the local state would remain `null`.\n\nThus the new correct mental model is that the state of the relationship at any point\nin time is whatever the most recent remote state is, plus any local additions or removals\nyou have made that have not yet been reflected by the remote state.\n\n> Note: The old behavior extended to modifying the inverse of a relationship. So if\n> you had local state not reflected in the new remote state, inverses would be notified\n> and their state reverted as well when \"resetting\" the relationship.\n> Under the new behavior, since the local state is preserved the inverses will also\n> not be reverted.\n\n### Resolving this deprecation\n\nResolving this deprecation can be done individually for each relationship\nor globally for all relationships.\n\nTo resolve it globally, set the `DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE`\nto `false` in ember-cli-build.js\n\n```js\nconst { setConfig } = await import('@warp-drive/build-config');\n\nlet app = new EmberApp(defaults, {});\n\nsetConfig(app, __dirname, {\n  deprecations: {\n    // set to false to strip the deprecated code (thereby opting into the new behavior)\n    DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE: false\n  }\n});\n```\n\nTo resolve this deprecation on an individual relationship, adjust the `options` passed to\nthe relationship. For relationships with inverses, both sides MUST be migrated to the new\nbehavior at the same time.\n\n```js\nclass Person extends Model {\n @hasMany('person', {\n   async: false,\n   inverse: null,\n   resetOnRemoteUpdate: false\n }) children;\n\n @belongsTo('person', {\n   async: false,\n   inverse: null,\n   resetOnRemoteUpdate: false\n }) parent;\n}\n```\n\n> Note: false is the only valid value here, all other values (including missing)\n> will be treated as true, where `true` is the legacy behavior that is now deprecated.\n\nOnce you have migrated all relationships, you can remove the the resetOnRemoteUpdate\noption and set the deprecation flag to false in ember-cli-build.\n\n### What if I don't want the new behavior?\n\nEmberData's philosophy is to not make assumptions about your application. Where possible\nwe seek out \"100%\" solutions – solutions that work for all use cases - and where that is\nnot possible we default to \"90%\" solutions – solutions that work for the vast majority of use\ncases. In the case of \"90%\" solutions we look for primitives that allow you to resolve the\n10% case in your application. If no such primitives exist, we provide an escape hatch that\nensures you can build the behavior you need without adopting the cost of the default solution.\n\nIn this case, the old behavior was a \"40%\" solution. The inability for an application developer\nto determine what changes were made locally, and thus what changes should be preserved, made\nit impossible to build certain features easily, or in some cases at all. The proliferation of\nfeature requests, bug reports (from folks surprised by the prior behavior) and addon attempts\nin this space are all evidence of this.\n\nWe believe the new behavior is a \"90%\" solution. It works for the vast majority of use cases,\noften without noticeable changes to existing application behavior, and provides primitives that\nallow you to build the behavior you need for the remaining 10%.\n\nThe great news is that this behavior defaults to trusting your API similar to the old behavior.\nIf your API is correct, you will not need to make any changes to your application to adopt\nthe new behavior.\n\nThis means the 10% cases are those where you can't trust your API to provide the correct\ninformation. In these cases, because you now have cheap access to a diff of the relationship\nstate, there are a few options that weren't available before:\n\n- you can adjust returned API payloads to contain the expected changes that it doesn't include\n- you can modify local state by adding or removing records on the HasMany record array to remove\n  any local changes that were not returned by the API.\n- you can use `<Cache>.mutate(mutation)` to directly modify the local cache state of the relationship\n  to match the expected state.\n\nWhat this version (5.3) does not yet provide is a way to directly modify the cache's remote state\nfor the relationship via public APIs other than via the broader action of upserting a response via\n`<Cache>.put(document)`. However, such an API was sketched in the Cache 2.1 RFC\n`<Cache>.patch(operation)` and is likely to be added in a future 5.x release of EmberData.\n\nThis version (5.3) also does not yet provide a way to directly modify the graph (a general purpose\nsubset of cache behaviors specific to relationships) via public APIs. However, during the\n5.x release series we will be working on finalizing the Graph API and making it public.\n\nIf none of these options work for you, you can always opt-out more broadly by implementing\na custom Cache with the relationship behaviors you need.",
          "itemtype": "property",
          "name": "DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 363,
          "description": "**id: ember-data:deprecate-many-array-duplicates**\n\nWhen the flag is `true` (default), adding duplicate records to a `ManyArray`\nis deprecated in non-production environments. In production environments,\nduplicate records added to a `ManyArray` will be deduped and no error will\nbe thrown.\n\nWhen the flag is `false`, an error will be thrown when duplicates are added.",
          "itemtype": "property",
          "name": "DEPRECATE_MANY_ARRAY_DUPLICATES",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 381,
          "description": "**id: ember-data:deprecate-store-extends-ember-object**\n\nWhen the flag is `true` (default), the Store class will extend from `@ember/object`.\nWhen the flag is `false` or `ember-source` is not present, the Store will not extend\nfrom EmberObject.",
          "itemtype": "property",
          "name": "DEPRECATE_STORE_EXTENDS_EMBER_OBJECT",
          "type": "{Boolean}",
          "since": "5.4",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 396,
          "description": "**id: ember-data:schema-service-updates**\n\nWhen the flag is `true` (default), the legacy schema\nservice features will be enabled on the store and\nthe service, and deprecations will be thrown when\nthey are used.\n\nDeprecated features include:\n\n- `Store.registerSchema` method is deprecated in favor of the `Store.createSchemaService` hook\n- `Store.registerSchemaDefinitionService` method is deprecated in favor of the `Store.createSchemaService` hook\n- `Store.getSchemaDefinitionService` method is deprecated in favor of `Store.schema` property\n- `SchemaService.doesTypeExist` method is deprecated in favor of the `SchemaService.hasResource` method\n- `SchemaService.attributesDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method\n- `SchemaService.relationshipsDefinitionFor` method is deprecated in favor of the `SchemaService.fields` method",
          "itemtype": "property",
          "name": "ENABLE_LEGACY_SCHEMA_SERVICE",
          "type": "{Boolean}",
          "since": "5.4",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 421,
          "description": "**id: warp-drive.ember-inflector**\n\nDeprecates the use of ember-inflector for pluralization and singularization in favor\nof the `@ember-data/request-utils` package.\n\nRule configuration methods (singular, plural, uncountable, irregular) and\nusage methods (singularize, pluralize) are are available as imports from\n`@ember-data/request-utils/string`\n\nNotable differences with ember-inflector:\n- there cannot be multiple inflector instances with separate rules\n- pluralization does not support a count argument\n- string caches now default to 10k entries instead of 1k, and this\n  size is now configurable. Additionally, the cache is now a LRU cache\n  instead of a first-N cache.\n\nThis deprecation can be resolved by removing usage of ember-inflector or by using\nboth ember-inflector and @ember-data/request-utils in parallel and updating your\nEmberData/WarpDrive build config to mark the deprecation as resolved\nin ember-cli-build\n\n```js\nsetConfig(app, __dirname, { deprecations: { DEPRECATE_EMBER_INFLECTOR: false }});\n```",
          "itemtype": "property",
          "name": "DEPRECATE_EMBER_INFLECTOR",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 455,
          "description": "This is a special flag that can be used to opt-in early to receiving deprecations introduced in 6.x\nwhich have had their infra backported to 5.x versions of EmberData.\n\nWhen this flag is not present or set to `true`, the deprecations from the 6.x branch\nwill not print their messages and the deprecation cannot be resolved.\n\nWhen this flag is present and set to `false`, the deprecations from the 6.x branch will\nprint and can be resolved.",
          "itemtype": "property",
          "name": "DISABLE_7X_DEPRECATIONS",
          "type": "{Boolean}",
          "since": "5.3",
          "until": "7.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        },
        {
          "file": "../packages/build-config/src/deprecation-versions.ts",
          "line": 473,
          "itemtype": "property",
          "description": "**id: warp-drive:deprecate-tracking-package**\n\nDeprecates the use of the @ember-data/tracking package which\nhistorically provided bindings into Ember's reactivity system.\n\nThis package is no longer needed as the configuration is now\nprovided by the @warp-drive/ember package.\n\nThis deprecation can be resolved by removing the\n  @ember -data/tracking package from your project and ensuring\nthat your app.js file has the following import:\n\n```js\nimport '---AT-PLACEHOLDER---warp-drive/ember/install';\n```\n\nOnce this import is present, you can remove the deprecation\nby setting the deprecation to `false` in your build config:\n\n```js\n// inside of ember-cli-build.js\n\nconst { setConfig } = await import('---AT-PLACEHOLDER---warp-drive/build-config');\n\nsetConfig(app, __dirname, {\n  deprecations: {\n    DEPRECATE_TRACKING_PACKAGE: false\n  }\n});\n```\n",
          "name": "DEPRECATE_TRACKING_PACKAGE",
          "type": "{Boolean}",
          "since": "5.5",
          "until": "6.0",
          "access": "public",
          "tagname": "",
          "class": "CurrentDeprecations",
          "module": "@warp-drive/build-config"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.5.0-@warp-drive/build-config",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.5.0",
          "type": "project-version"
        }
      }
    }
  }
}