{
  "data": {
    "id": "ember-data-5.5.0-HasManyReference",
    "type": "class",
    "attributes": {
      "name": "HasManyReference",
      "shortname": "HasManyReference",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "file": "../model/src/-private/references/has-many.ts",
      "line": 44,
      "description": "A `HasManyReference` is a low-level API that allows access\nand manipulation of a hasMany relationship.\n\nIt is especially useful when you're dealing with `async` relationships\nfrom `@ember-data/model` as it allows synchronous access to\nthe relationship data if loaded, as well as APIs for loading, reloading\nthe data or accessing available information without triggering a load.\n\nIt may also be useful when using `sync` relationships with `@ember-data/model`\nthat need to be loaded/reloaded with more precise timing than marking the\nrelationship as `async` and relying on autofetch would have allowed.\n\nHowever,keep in mind that marking a relationship as `async: false` will introduce\nbugs into your application if the data is not always guaranteed to be available\nby the time the relationship is accessed. Ergo, it is recommended when using this\napproach to utilize `links` for unloaded relationship state instead of identifiers.\n\nReference APIs are entangled with the relationship's underlying state,\nthus any getters or cached properties that utilize these will properly\ninvalidate if the relationship state changes.\n\nReferences are \"stable\", meaning that multiple calls to retrieve the reference\n for a given relationship will always return the same HasManyReference.",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 198,
          "description": "This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the \"link\" otherwise it defaults to \"id\".\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
          "itemtype": "method",
          "name": "remoteType",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The name of the remote type. This should either be `link` or `ids`",
            "type": "String"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 249,
          "description": "`ids()` returns an array of the record IDs in this relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.ids(); // ['1']\n```",
          "itemtype": "method",
          "name": "ids",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The ids in this has-many relationship",
            "type": "Array"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 288,
          "description": "The link Ember Data will use to fetch or reload this belongs-to\nrelationship. By default it uses only the \"related\" resource linkage.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { belongsTo } from '@ember-data/model';\nexport default Model.extend({\n   user: belongsTo('user', { async: true, inverse: null })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         links: {\n           related: '/articles/1/author'\n         }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"link\") {\n   let link = userRef.link();\n }\n```",
          "itemtype": "method",
          "name": "link",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The link Ember Data will use to fetch or reload this belongs-to relationship.",
            "type": "String"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 338,
          "description": "any links that have been received for this relationship",
          "itemtype": "method",
          "name": "links",
          "access": "public",
          "tagname": "",
          "return": {
            "description": ""
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 351,
          "description": "The meta data for the has-many relationship.\n\nExample\n\n```javascript\n// models/blog.js\nimport Model, { hasMany } from '@ember-data/model';\nexport default Model.extend({\n   users: hasMany('user', { async: true, inverse: null })\n });\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       users: {\n         links: {\n           related: {\n             href: '/articles/1/authors'\n           },\n         },\n         meta: {\n           lastUpdated: 1458014400000\n         }\n       }\n     }\n   }\n });\n\nlet usersRef = blog.hasMany('user');\n\nusersRef.meta() // { lastUpdated: 1458014400000 }\n```",
          "itemtype": "method",
          "name": "meta",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The meta information for the belongs-to relationship.",
            "type": "Object|null"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 400,
          "description": "`push` can be used to update the data in the relationship and EmberData\nwill treat the new data as the canonical value of this relationship on\nthe backend. An empty array will signify the canonical value should be\nempty.\n\nExample model\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\nSetup some initial state, note we haven't loaded the comments yet:\n\n```js\nconst post = store.push({\n  data: {\n    type: 'post',\n    id: '1',\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: '1' }]\n      }\n    }\n  }\n});\n\nconst commentsRef = post.hasMany('comments');\ncommentsRef.ids(); // ['1']\n```\n\nUpdate the state using `push`, note we can do this even without\nhaving loaded these comments yet by providing resource identifiers.\n\nBoth full resources and resource identifiers are supported.\n\n```js\nawait commentsRef.push({\n data: [\n  { type: 'comment', id: '2' },\n  { type: 'comment', id: '3' },\n ]\n});\n\ncommentsRef.ids(); // ['2', '3']\n```\n\nFor convenience, you can also pass in an array of resources or resource identifiers\nwithout wrapping them in the `data` property:\n\n```js\nawait commentsRef.push([\n  { type: 'comment', id: '4' },\n  { type: 'comment', id: '5' },\n]);\n\ncommentsRef.ids(); // ['4', '5']\n```\n\nWhen using the `data` property, you may also include other resource data via included,\nas well as provide new links and meta to the relationship.\n\n```js\nawait commentsRef.push({\n  links: {\n    related: '/posts/1/comments'\n  },\n  meta: {\n    total: 2\n  },\n  data: [\n    { type: 'comment', id: '4' },\n    { type: 'comment', id: '5' },\n  ],\n  included: [\n    { type: 'other-thing', id: '1', attributes: { foo: 'bar' },\n  ]\n});\n```\n\nBy default, the store will attempt to fetch any unloaded records before resolving\nthe returned promise with the ManyArray.\n\nAlternatively, pass `true` as the second argument to avoid fetching unloaded records\nand instead the promise will resolve with void without attempting to fetch. This is\nparticularly useful if you want to update the state of the relationship without\nforcing the load of all of the associated records.",
          "itemtype": "method",
          "name": "push",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "doc",
              "description": "a JSONAPI document object describing the new value of this relationship.",
              "type": "Array|Object"
            },
            {
              "name": "skipFetch",
              "description": "if `true`, do not attempt to fetch unloaded records",
              "type": "Boolean",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Promise<ManyArray | void>"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 563,
          "description": "`value()` synchronously returns the current value of the has-many\nrelationship. Unlike `record.relationshipName`, calling\n`value()` on a reference does not trigger a fetch if the async\nrelationship is not yet loaded. If the relationship is not loaded\nit will always return `null`.\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\npost.comments.then(function(comments) {\n  commentsRef.value() === comments\n})\n```",
          "itemtype": "method",
          "name": "value",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "",
            "type": "ManyArray"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 618,
          "description": "Loads the relationship if it is not already loaded.  If the\nrelationship is already loaded this method does not trigger a new\nload. This causes a request to the specified\nrelationship link or reloads all items currently in the relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.load().then(function(comments) {\n  //...\n});\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference.\n\nExample\n\n```javascript\ncommentsRef.load({ adapterOptions: { isPrivate: true } })\n  .then(function(comments) {\n    //...\n  });\n```\n\n```js {data-filename=app/adapters/comment.js}\nexport default ApplicationAdapter.extend({\n  findMany(store, type, id, snapshots) {\n    // In the adapter you will have access to adapterOptions.\n    let adapterOptions = snapshots[0].adapterOptions;\n  }\n});\n```",
          "itemtype": "method",
          "name": "load",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the ManyArray in\nthis has-many relationship.",
            "type": "Promise"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 695,
          "description": "Reloads this has-many relationship. This causes a request to the specified\nrelationship link or reloads all items currently in the relationship.\n\nExample\n\n```js {data-filename=app/models/post.js}\nimport Model, { hasMany } from '@ember-data/model';\n\nexport default class PostModel extends Model {\n  @hasMany('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\ncommentsRef.reload().then(function(comments) {\n  //...\n});\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference. A full example\ncan be found in the `load` method.\n\nExample\n\n```javascript\ncommentsRef.reload({ adapterOptions: { isPrivate: true } })\n```",
          "itemtype": "method",
          "name": "reload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the ManyArray in this has-many relationship.",
            "type": "Promise"
          },
          "class": "HasManyReference",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 80,
          "description": "The field name on the parent record for this has-many relationship.",
          "itemtype": "property",
          "name": "key",
          "type": "{String}",
          "access": "public",
          "tagname": "",
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 89,
          "description": "The type of resource this relationship will contain.",
          "itemtype": "property",
          "name": "type",
          "type": "{String}",
          "access": "public",
          "tagname": "",
          "class": "HasManyReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/has-many.ts",
          "line": 144,
          "description": "An array of identifiers for the records that this reference refers to.",
          "itemtype": "property",
          "name": "identifiers",
          "type": "{StableRecordIdentifier[]}",
          "access": "public",
          "tagname": "",
          "class": "HasManyReference",
          "module": "@ember-data/model"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.5.0-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.5.0",
          "type": "project-version"
        }
      }
    }
  }
}