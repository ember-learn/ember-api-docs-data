{
  "data": {
    "id": "ember-data-2.3.3-DS.Store",
    "type": "class",
    "attributes": {
      "name": "DS.Store",
      "shortname": "DS.Store",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "addon/-private/system/store.js",
      "line": 138,
      "description": "The store contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `DS.Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nDefine your application's store like this:\n\n```js {data-filename=app/services/store.js}\nimport DS from 'ember-data';\n\nexport default DS.Store.extend({\n});\n```\n\nMost Ember.js applications will only have a single `DS.Store` that is\nautomatically created by their `Ember.Application`.\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use `DS.Store`'s `findRecord()` method:\n\n```javascript\nstore.findRecord('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```js {data-filename=app/adapters/application.js}\nimport DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n});\n```\n\nYou can learn more about writing a custom adapter by reading the `DS.Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](#method_createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend you will need to call `record.save()`.\n\n[push](#method_push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates (full or partial) that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](#method_pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `DS.RecordArray`s such as those returned by\n`store#peekAll()`, `store#findAll()` or `store#filter()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
      "extends": "Ember.Service",
      "methods": [
        {
          "file": "addon/-private/system/store.js",
          "line": 213,
          "itemtype": "method",
          "name": "init",
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 248,
          "description": "Returns a JSON representation of the record using a custom\ntype-specific serializer, if one exists.\n\nThe available options are:\n\n* `includeId`: `true` if the record's ID should be included in\n  the JSON representation",
          "itemtype": "method",
          "name": "serialize",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "record",
              "description": "the record to serialize",
              "type": "DS.Model"
            },
            {
              "name": "options",
              "description": "an options hash",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 296,
          "description": "Create a new record in the current store. The properties passed\nto this method are set on the newly created record.\n\nTo create a new instance of a `Post`:\n\n```js\nstore.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n```\n\nTo create a new instance of a `Post` that has a relationship with a `User` record:\n\n```js\nvar user = this.store.peekRecord('user', 1);\nstore.createRecord('post', {\n  title: \"Rails is omakase\",\n  user: user\n});\n```",
          "itemtype": "method",
          "name": "createRecord",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "inputProperties",
              "description": "a hash of properties to set on the\n  newly created record.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "record",
            "type": "DS.Model"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 358,
          "description": "If possible, this method asks the adapter to generate an ID for\na newly created record.",
          "itemtype": "method",
          "name": "_generateId",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "properties",
              "description": "from the new record",
              "type": "Object"
            }
          ],
          "return": {
            "description": "if the adapter can generate one, an ID",
            "type": "String"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 382,
          "description": "For symmetry, a record can be deleted via the store.\n\nExample\n\n```javascript\nvar post = store.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n\nstore.deleteRecord(post);\n```",
          "itemtype": "method",
          "name": "deleteRecord",
          "params": [
            {
              "name": "record",
              "description": "",
              "type": "DS.Model"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 402,
          "description": "For symmetry, a record can be unloaded via the store. Only\nnon-dirty records can be unloaded.\n\nExample\n\n```javascript\nstore.find('post', 1).then(function(post) {\n  store.unloadRecord(post);\n});\n```",
          "itemtype": "method",
          "name": "unloadRecord",
          "params": [
            {
              "name": "record",
              "description": "",
              "type": "DS.Model"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 425,
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Integer"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 457,
          "description": "This method returns a record for a given type and id combination.\n\nThe `findRecord` method will always return a **promise** that will be\nresolved with the record. If the record was already in the store,\nthe promise will be resolved immediately. Otherwise, the store\nwill ask the adapter's `find` method to find the necessary data.\n\nThe `findRecord` method will always resolve its promise with the same\nobject for a given type and `id`.\n\nExample\n\n```js {data-filename=app/routes/post.js}\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n});\n```\n\nIf you would like to force the record to reload, instead of\nloading it from the cache when present you can set `reload: true`\nin the options object for `findRecord`.\n\n```js {data-filename=app/routes/post/edit.js}\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id, { reload: true });\n  }\n});\n```",
          "itemtype": "method",
          "name": "findRecord",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "(String|Integer)"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 565,
          "description": "This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "findByIds",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "ids",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 584,
          "description": "This method is called by `findRecord` if it discovers that a particular\ntype/id pair hasn't been loaded yet to kick off a request to the\nadapter.",
          "itemtype": "method",
          "name": "fetchRecord",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "model",
              "type": "InternalModel"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 734,
          "description": "Get a record by a given type and ID without triggering a fetch.\n\nThis method will synchronously return the record if it is available in the store,\notherwise it will return `null`. A record is available if it has been fetched earlier, or\npushed manually into the store.\n\n_Note: This is an synchronous method and does not return a promise._\n\n```js\nvar post = store.peekRecord('post', 1);\n\npost.get('id'); // 1\n```",
          "itemtype": "method",
          "name": "peekRecord",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Integer"
            }
          ],
          "return": {
            "description": "record",
            "type": "DS.Model|null"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 763,
          "description": "This method is called by the record's `reload` method.\n\nThis method calls the adapter's `find` method, which returns a promise. When\n**that** promise resolves, `reloadRecord` will resolve the promise returned\nby the record's `reload`.",
          "itemtype": "method",
          "name": "reloadRecord",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "DS.Model"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 787,
          "description": "Returns true if a record for a given type and ID is already loaded.",
          "itemtype": "method",
          "name": "hasRecordForId",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "(String|DS.Model)"
            },
            {
              "name": "inputId",
              "description": "",
              "type": "(String|Integer)"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 803,
          "description": "Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.",
          "itemtype": "method",
          "name": "recordForId",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "(String|Integer)"
            }
          ],
          "return": {
            "description": "record",
            "type": "DS.Model"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 833,
          "itemtype": "method",
          "name": "findMany",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModels",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 844,
          "description": "If a relationship was originally populated by the adapter as a link\n(as opposed to a list of IDs), this method is called when the\nrelationship is fetched.\n\nThe link (which is usually a URL) is passed through unchanged, so the\nadapter can make whatever request it wants.\n\nThe usual use-case is for the server to register a URL as a link, and\nthen use that URL in the future to make a request for the relationship.",
          "itemtype": "method",
          "name": "findHasMany",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "owner",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "link",
              "description": "",
              "type": "Any"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "(Relationship)"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 871,
          "itemtype": "method",
          "name": "findBelongsTo",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "owner",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "link",
              "description": "",
              "type": "Any"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Relationship"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 888,
          "description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { page: 1 });\n```\n\nThe call made to the server, using a Rails backend, will look something like this:\n\n```\nStarted GET \"/api/v1/person?page=1\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"page\"=>\"1\" }\n```\n\n---\n\nIf you do something like this:\n\n```javascript\nstore.query('person', { ids: [1, 2, 3] });\n```\n\nThe call to the server, using a Rails backend, will look something like this:\n\n```\nStarted GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"ids\" => [\"1\", \"2\", \"3\"] }\n```\n\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.",
          "itemtype": "method",
          "name": "query",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "query",
              "description": "an opaque query to be used by the adapter",
              "type": "Any"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 954,
          "description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\nThis method returns a promise, which is resolved with a `RecordObject`\nonce the server returns.",
          "itemtype": "method",
          "name": "queryRecord",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String or subclass of DS.Model"
            },
            {
              "name": "query",
              "description": "an opaque query to be used by the adapter",
              "type": "Any"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 984,
          "description": "`findAll` ask the adapter's `findAll` method to find the records\nfor the given type, and return a promise that will be resolved\nonce the server returns the values. The promise will resolve into\nall records of this type present in the store, even if the server\nonly returns a subset of them.\n\n```js {data-filename=app/routes/authors.js}\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findAll('author');\n  }\n});\n```",
          "itemtype": "method",
          "name": "findAll",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.AdapterPopulatedRecordArray"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1013,
          "itemtype": "method",
          "name": "_fetchAll",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "array",
              "description": "",
              "type": "DS.RecordArray"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1042,
          "itemtype": "method",
          "name": "didUpdateAll",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1052,
          "description": "This method returns a filtered array that contains all of the\nknown records for a given type in the store.\n\nNote that because it's just a filter, the result will contain any\nlocally created records of the type, however, it will not make a\nrequest to the backend to retrieve additional records. If you\nwould like to request all the records from the backend please use\n[store.findAll](#method_findAll).\n\nAlso note that multiple calls to `peekAll` for a given type will always\nreturn the same `RecordArray`.\n\nExample\n\n```javascript\nvar localPosts = store.peekAll('post');\n```",
          "itemtype": "method",
          "name": "peekAll",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.RecordArray"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1085,
          "description": "This method unloads all records in the store.\n\nOptionally you can pass a type which unload all records for a given type.\n\n```javascript\nstore.unloadAll();\nstore.unloadAll('post');\n```",
          "itemtype": "method",
          "name": "unloadAll",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String="
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1127,
          "description": "Takes a type and filter function, and returns a live RecordArray that\nremains up to date as new records are loaded into the store or created\nlocally.\n\nThe filter function takes a materialized record, and returns true\nif the record should be included in the filter and false if it should\nnot.\n\nExample\n\n```javascript\nstore.filter('post', function(post) {\n  return post.get('unread');\n});\n```\n\nThe filter function is called once on all records for the type when\nit is created, and then once on each newly loaded or created record.\n\nIf any of a record's properties change, or if it changes state, the\nfilter function will be invoked again to determine whether it should\nstill be in the array.\n\nOptionally you can pass a query, which is the equivalent of calling\n[find](#method_find) with that same query, to fetch additional records\nfrom the server. The results returned by the server could then appear\nin the filter if they match the filter function.\n\nThe query itself is not used to filter records, it's only sent to your\nserver for you to be able to do server-side filtering. The filter\nfunction will be applied on the returned results regardless.\n\nExample\n\n```javascript\nstore.filter('post', { unread: true }, function(post) {\n  return post.get('unread');\n}).then(function(unreadPosts) {\n  unreadPosts.get('length'); // 5\n  var unreadPost = unreadPosts.objectAt(0);\n  unreadPost.set('unread', false);\n  unreadPosts.get('length'); // 4\n});\n```",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "query",
              "description": "optional query",
              "type": "Object"
            },
            {
              "name": "filter",
              "description": "",
              "type": "Function"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.PromiseArray"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1211,
          "description": "This method returns if a certain record is already loaded\nin the store. Use this function to know beforehand if a findRecord()\nwill result in a request or that it will be a cache hit.\n\n Example\n\n```javascript\nstore.recordIsLoaded('post', 1); // false\nstore.findRecord('post', 1).then(function() {\n  store.recordIsLoaded('post', 1); // true\n});\n```",
          "itemtype": "method",
          "name": "recordIsLoaded",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1235,
          "itemtype": "method",
          "name": "_metadataFor",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1247,
          "itemtype": "method",
          "name": "_setMetadataFor",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "metadata",
              "description": "metadata to set",
              "type": "Object"
            }
          ],
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1263,
          "description": "If the adapter updates attributes the record will notify\nthe store to update its  membership in any filters.\nTo avoid thrashing, this method is invoked only once per\nrun loop per record.",
          "itemtype": "method",
          "name": "dataWasUpdated",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "Class"
            },
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1282,
          "description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
          "itemtype": "method",
          "name": "scheduleSave",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            },
            {
              "name": "resolver",
              "description": "",
              "type": "Resolver"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1305,
          "description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
          "itemtype": "method",
          "name": "flushPendingSave",
          "access": "private",
          "tagname": "",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1337,
          "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\n\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.",
          "itemtype": "method",
          "name": "didSaveRecord",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "the in-flight internal model",
              "type": "InternalModel"
            },
            {
              "name": "data",
              "description": "optional data (see above)",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1366,
          "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected with a `DS.InvalidError`.",
          "itemtype": "method",
          "name": "recordWasInvalid",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            },
            {
              "name": "errors",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1380,
          "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected (with anything other than a `DS.InvalidError`).",
          "itemtype": "method",
          "name": "recordWasError",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            },
            {
              "name": "error",
              "description": "",
              "type": "Error"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1394,
          "description": "When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\nresolves with data, this method extracts the ID from the supplied\ndata.",
          "itemtype": "method",
          "name": "updateId",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            },
            {
              "name": "data",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1415,
          "description": "Returns a map of IDs to client IDs for a given type.",
          "itemtype": "method",
          "name": "typeMapFor",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            }
          ],
          "return": {
            "description": "typeMap",
            "type": "Object"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1446,
          "description": "This internal method is used by `push`.",
          "itemtype": "method",
          "name": "_load",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "(String|DS.Model)"
            },
            {
              "name": "data",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1501,
          "description": "Returns a model class for a particular key. Used by\nmethods that take a type key (like `find`, `createRecord`,\netc.)",
          "itemtype": "method",
          "name": "modelFor",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.Model"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1535,
          "description": "Push some data for a given type into the store.\n\nThis method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n- record's `type` should always be in singular, dasherized form\n- members (properties) should be camelCased\n\n[Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n\n```js\nstore.push({\n  data: {\n    // primary data for single record of type `Person`\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Daniel',\n      lastName: 'Kmak'\n    }\n  }\n});\n```\n\n[Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n\n`data` property can also hold an array (of records):\n\n```js\nstore.push({\n  data: [\n    // an array of records\n    {\n      id: '1',\n      type: 'person',\n      attributes: {\n        firstName: 'Daniel',\n        lastName: 'Kmak'\n      }\n    },\n    {\n      id: '2',\n      type: 'person',\n      attributes: {\n        firstName: 'Tom',\n        lastName: 'Dale'\n      }\n    }\n  ]\n});\n```\n\n[Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n\nThere are some typical properties for `JSONAPI` payload:\n* `id` - mandatory, unique record's key\n* `type` - mandatory string which matches `model`'s dasherized name in singular form\n* `attributes` - object which holds data for record attributes - `DS.attr`'s declared in model\n* `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n  - [`links`](http://jsonapi.org/format/#document-links)\n  - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n  - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n\nFor this model:\n\n```js {data-filename=app/models/person.js}\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n\n  children: DS.hasMany('person')\n});\n```\n\nTo represent the children as IDs:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        data: [\n          {\n            id: '2',\n            type: 'person'\n          },\n          {\n            id: '3',\n            type: 'person'\n          },\n          {\n            id: '4',\n            type: 'person'\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n[Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n\nTo represent the children relationship as a URL:\n\n```js\n{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        links: {\n          related: '/people/1/children'\n        }\n      }\n    }\n  }\n}\n```\n\nIf you're streaming data or implementing an adapter, make sure\nthat you have converted the incoming data into this form. The\nstore's [normalize](#method_normalize) method is a convenience\nhelper for converting a json payload into the form Ember Data\nexpects.\n\n```js\nstore.push(store.normalize('person', data));\n```\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.",
          "itemtype": "method",
          "name": "push",
          "params": [
            {
              "name": "data",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the record(s) that was created or\n  updated.",
            "type": "DS.Model|Array"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1765,
          "description": "Push some raw data into the store.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n```\n\n```js\nvar pushData = {\n  posts: [\n    { id: 1, post_title: \"Great post\", comment_ids: [2] }\n  ],\n  comments: [\n    { id: 2, comment_body: \"Insightful comment\" }\n  ]\n}\n\nstore.pushPayload(pushData);\n```\n\nBy default, the data will be deserialized using a default\nserializer (the application serializer if it exists).\n\nAlternatively, `pushPayload` will accept a model type which\nwill determine which serializer will process the payload.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n```\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer;\n```\n\n```js\nstore.pushPayload('comment', pushData); // Will use the application serializer\nstore.pushPayload('post', pushData); // Will use the post serializer\n```",
          "itemtype": "method",
          "name": "pushPayload",
          "params": [
            {
              "name": "modelName",
              "description": "Optionally, a model type used to determine which serializer will be used",
              "type": "String"
            },
            {
              "name": "inputPayload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1835,
          "description": "`normalize` converts a json payload into the normalized form that\n[push](#method_push) expects.\n\nExample\n\n```js\nsocket.on('message', function(message) {\n  var modelName = message.model;\n  var data = message.data;\n  store.push(modelName, store.normalize(modelName, data));\n});\n```",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "modelName",
              "description": "The name of the model type for this payload",
              "type": "String"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The normalized payload",
            "type": "Object"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1861,
          "description": "Build a brand new record for a given type, ID, and\ninitial data.",
          "itemtype": "method",
          "name": "buildRecord",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "data",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "internal model",
            "type": "InternalModel"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1903,
          "description": "When a record is destroyed, this un-indexes it and\nremoves it from any record arrays so it can be GCed.",
          "itemtype": "method",
          "name": "_dematerializeRecord",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "internalModel",
              "description": "",
              "type": "InternalModel"
            }
          ],
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1930,
          "description": "Returns an instance of the adapter for a given type. For\nexample, `adapterFor('person')` will return an instance of\n`App.PersonAdapter`.\n\nIf no `App.PersonAdapter` is found, this method will look\nfor an `App.ApplicationAdapter` (the default adapter for\nyour entire application).\n\nIf no `App.ApplicationAdapter` is found, it will return\nthe value of the `defaultAdapter`.",
          "itemtype": "method",
          "name": "adapterFor",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "DS.Adapter"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1962,
          "description": "Returns an instance of the serializer for a given type. For\nexample, `serializerFor('person')` will return an instance of\n`App.PersonSerializer`.\n\nIf no `App.PersonSerializer` is found, this method will look\nfor an `App.ApplicationSerializer` (the default serializer for\nyour entire application).\n\nif no `App.ApplicationSerializer` is found, it will attempt\nto get the `defaultSerializer` from the `PersonAdapter`\n(`adapterFor('person')`).\n\nIf a serializer cannot be found on the adapter, it will fall back\nto an instance of `DS.JSONSerializer`.",
          "itemtype": "method",
          "name": "serializerFor",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "the record to serialize",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "DS.Serializer"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 1997,
          "description": "Retrieve a particular instance from the\ncontainer cache. If not found, creates it and\nplacing it in the cache.\n\nEnabled a store to manage local instances of\nadapters and serializers.",
          "itemtype": "method",
          "name": "retrieveManagedInstance",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "the object modelName",
              "type": "String"
            },
            {
              "name": "name",
              "description": "the object name",
              "type": "String"
            },
            {
              "name": "fallbacks",
              "description": "the fallback objects to lookup if the lookup for modelName or 'application' fails",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Object"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "addon/-private/system/store.js",
          "line": 231,
          "description": "The adapter to use to communicate to a backend server or other persistence layer.\n\nThis can be specified as an instance, class, or string.\n\nIf you want to specify `app/adapters/custom.js` as a string, do:\n\n```js\nadapter: 'custom'\n```",
          "itemtype": "property",
          "name": "adapter",
          "default": "DS.JSONAPIAdapter",
          "type": "{(DS.Adapter|String)}",
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/-private/system/store.js",
          "line": 267,
          "description": "This property returns the adapter, after resolving a possible\nstring key.\n\nIf the supplied `adapter` was a class, or a String property\npath resolved to a class, this property will instantiate the\nclass.\n\nThis property is cacheable, so the same instance of a specified\nadapter class should be used for the lifetime of the store.",
          "itemtype": "property",
          "name": "defaultAdapter",
          "access": "private",
          "tagname": "",
          "return": {
            "description": "DS.Adapter"
          },
          "class": "DS.Store",
          "module": "ember-data",
          "namespace": "DS"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "Ember.Service",
          "type": "missing"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.3.3-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.3.3",
          "type": "project-version"
        }
      }
    }
  }
}