{
  "data": {
    "id": "ember-data-2.2.1-DS.Adapter",
    "type": "class",
    "attributes": {
      "name": "DS.Adapter",
      "shortname": "DS.Adapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "packages/ember-data/lib/system/adapter.js",
      "line": 7,
      "description": "<html><head></head><body><p>An adapter is an object that receives requests from a store and\ntranslates them into the appropriate action to take against your\npersistence layer. The persistence layer is usually an HTTP API, but\nmay be anything, such as the browser&apos;s local storage. Typically the\nadapter is not invoked directly instead its functionality is accessed\nthrough the <code>store</code>.</p>\n<h3 id=\"creating-an-adapter\">Creating an Adapter</h3>\n<p>Create a new subclass of <code>DS.Adapter</code> in the <code>app/adapters</code> folder:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"comment\">// ...your code here</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Model-specific adapters can be created by putting your adapter\nclass in an <code>app/adapters/</code> + <code>model-name</code> + <code>.js</code> file of the application.</p>\n<div class=\"highlight app/adapters/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"comment\">// ...Post-specific adapter code goes here</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>DS.Adapter</code> is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:</p>\n<ul>\n<li><code>findRecord()</code></li>\n<li><code>createRecord()</code></li>\n<li><code>updateRecord()</code></li>\n<li><code>deleteRecord()</code></li>\n<li><code>findAll()</code></li>\n<li><code>query()</code></li>\n</ul>\n<p>To improve the network performance of your application, you can optimize\nyour adapter by overriding these lower-level methods:</p>\n<ul>\n<li><code>findMany()</code></li>\n</ul>\n<p>For an example implementation, see <code>DS.RESTAdapter</code>, the\nincluded REST adapter.</p>\n</body></html>",
      "extends": "Ember.Object",
      "version": "2.2.1",
      "since": "2.2.1",
      "methods": [
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 87,
          "description": "<html><head></head><body><p>The <code>findRecord()</code> method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to <code>findRecord()</code> being called, you\nshould query your persistence layer for a record with the given ID. Once\nfound, you can asynchronously call the store&apos;s <code>push()</code> method to push\nthe record into the store.</p>\n<p>Here is an example <code>findRecord</code> implementation:</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">findRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, id, snapshot</span>) </span>{\n    <span class=\"keyword\">var</span> url = [type.modelName, id].join(<span class=\"string\">&apos;/&apos;</span>);\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.getJSON(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "id",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 124,
          "description": "<html><head></head><body><p>The <code>findAll()</code> method is used to retrieve all records for a given type.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">findAll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, sinceToken</span>) </span>{\n    <span class=\"keyword\">var</span> url = type;\n    <span class=\"keyword\">var</span> query = { <span class=\"attr\">since</span>: sinceToken };\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.getJSON(url, query).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "sinceToken",
              "description": "",
              "type": "String"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "DS.SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 157,
          "description": "<html><head></head><body><p>This method is called when you call <code>query</code> on the store.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">query</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, query</span>) </span>{\n    <span class=\"keyword\">var</span> url = type;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.getJSON(url, query).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "query",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            },
            {
              "name": "recordArray",
              "description": "",
              "type": "DS.AdapterPopulatedRecordArray"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 189,
          "description": "<html><head></head><body><p>The <code>queryRecord()</code> method is invoked when the store is asked for a single\nrecord through a query object.</p>\n<p>In response to <code>queryRecord()</code> being called, you should always fetch fresh\ndata. Once found, you can asynchronously call the store&apos;s <code>push()</code> method\nto push the record into the store.</p>\n<p>Here is an example <code>queryRecord</code> implementation:</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n<span class=\"keyword\">import</span> Ember <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend(DS.BuildURLMixin, {\n  <span class=\"attr\">queryRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, query</span>) </span>{\n    <span class=\"keyword\">var</span> urlForQueryRecord = <span class=\"keyword\">this</span>.buildURL(type.modelName, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;queryRecord&apos;</span>, query);\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.getJSON(urlForQueryRecord, query).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "queryRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "",
              "type": "subclass of DS.Model"
            },
            {
              "name": "query",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 229,
          "description": "<html><head></head><body><p>If the globally unique IDs for your records should be generated on the client,\nimplement the <code>generateIdForRecord()</code> method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record&apos;s <code>primaryKey</code>.</p>\n<p>Most traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls <code>didCreateRecord()</code>. Only implement this method if\nyou intend to generate record IDs on the client-side.</p>\n<p>The <code>generateIdForRecord()</code> method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>generateIdForRecord: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(store, inputProperties)</span> </span>{\n  <span class=\"keyword\">var</span> uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();\n  <span class=\"keyword\">return</span> uuid;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "generateIdForRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "the DS.Model class of the record",
              "type": "DS.Model"
            },
            {
              "name": "inputProperties",
              "description": "a hash of properties to set on the\n  newly created record.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "id",
            "type": "(String|Number)"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 259,
          "description": "<html><head></head><body><p>Proxies to the serializer&apos;s <code>serialize</code> method.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  createRecord: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, <span class=\"keyword\">type</span>, snapshot</span>) </span>{\n    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { includeId: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">var</span> url = <span class=\"keyword\">type</span>;\n\n    <span class=\"comment\">// ...</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "serialized snapshot",
            "type": "Object"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 286,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the creation of\nnew records.</p>\n<p>Serializes the record and sends it to the server.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">createRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, snapshot</span>) </span>{\n    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">var</span> url = type;\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;POST&apos;</span>,\n        <span class=\"attr\">url</span>: url,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "createRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "the DS.Model class of the record",
              "type": "DS.Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 327,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the updating of\na record.</p>\n<p>Serializes the record update and sends it to the server.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">updateRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, snapshot</span>) </span>{\n    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">var</span> id = snapshot.id;\n    <span class=\"keyword\">var</span> url = [type, id].join(<span class=\"string\">&apos;/&apos;</span>);\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;PUT&apos;</span>,\n        <span class=\"attr\">url</span>: url,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "updateRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "the DS.Model class of the record",
              "type": "DS.Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 369,
          "description": "<html><head></head><body><p>Implement this method in a subclass to handle the deletion of\na record.</p>\n<p>Sends a delete request for the record to the server.</p>\n<p>Example</p>\n<div class=\"highlight app/adapters/application.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  <span class=\"attr\">deleteRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store, type, snapshot</span>) </span>{\n    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.serialize(snapshot, { <span class=\"attr\">includeId</span>: <span class=\"literal\">true</span> });\n    <span class=\"keyword\">var</span> id = snapshot.id;\n    <span class=\"keyword\">var</span> url = [type, id].join(<span class=\"string\">&apos;/&apos;</span>);\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ember.RSVP.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>{\n      Ember.$.ajax({\n        <span class=\"attr\">type</span>: <span class=\"string\">&apos;DELETE&apos;</span>,\n        <span class=\"attr\">url</span>: url,\n        <span class=\"attr\">dataType</span>: <span class=\"string\">&apos;json&apos;</span>,\n        <span class=\"attr\">data</span>: data\n      }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        Ember.run(<span class=\"literal\">null</span>, resolve, data);\n      }, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) </span>{\n        jqXHR.then = <span class=\"literal\">null</span>; <span class=\"comment\">// tame jQuery&apos;s ill mannered promises</span>\n        Ember.run(<span class=\"literal\">null</span>, reject, jqXHR);\n      });\n    });\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "the DS.Model class of the record",
              "type": "DS.Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 422,
          "description": "<html><head></head><body><p>Find multiple records at once if coalesceFindRequests is true.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findMany",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "type",
              "description": "the DS.Model class of the records",
              "type": "DS.Model"
            },
            {
              "name": "ids",
              "description": "",
              "type": "Array"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 433,
          "description": "<html><head></head><body><p>Organize records into groups, each of which is to be passed to separate\ncalls to <code>findMany</code>.</p>\n<p>For example, if your api has nested URLs that depend on the parent, you will\nwant to group records by their parent.</p>\n<p>The default implementation returns the records as a single group.</p>\n</body></html>",
          "itemtype": "method",
          "name": "groupRecordsForFindMany",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "snapshots",
              "description": "",
              "type": "Array"
            }
          ],
          "return": {
            "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
            "type": "Array"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 453,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record from the adapter when a record is requested by\n<code>store.findRecord</code>.</p>\n<p>If this method returns true, the store will re-fetch a record from\nthe adapter. If this method returns false, the store will resolve\nimmediately using the cached record.</p>\n</body></html>",
          "itemtype": "method",
          "name": "shouldReloadRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 471,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload all records from the adapter when records are requested by\n<code>store.findAll</code>.</p>\n<p>If this method returns true, the store will re-fetch all records from\nthe adapter. If this method returns false, the store will resolve\nimmediately using the cached record.</p>\n</body></html>",
          "itemtype": "method",
          "name": "shouldReloadAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "DS.SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 489,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record after the <code>store.findRecord</code> method resolves a\ncached record.</p>\n<p>This method is <em>only</em> checked by the store when the store is\nreturning a cached record.</p>\n<p>If this method returns true the store will re-fetch a record from\nthe adapter.</p>\n</body></html>",
          "itemtype": "method",
          "name": "shouldBackgroundReloadRecord",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 509,
          "description": "<html><head></head><body><p>This method is used by the store to determine if the store should\nreload a record array after the <code>store.findAll</code> method resolves\nwith a cached record array.</p>\n<p>This method is <em>only</em> checked by the store when the store is\nreturning a cached record array.</p>\n<p>If this method returns true the store will re-fetch all records\nfrom the adapter.</p>\n</body></html>",
          "itemtype": "method",
          "name": "shouldBackgroundReloadAll",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "snapshotRecordArray",
              "description": "",
              "type": "DS.SnapshotRecordArray"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 65,
          "description": "<html><head></head><body><p>If you would like your adapter to use a custom serializer you can\nset the <code>defaultSerializer</code> property to be the name of the custom\nserializer.</p>\n<p>Note the <code>defaultSerializer</code> serializer has a lower priority than\na model specific serializer (i.e. <code>PostSerializer</code>) or the\n<code>application</code> serializer.</p>\n<div class=\"highlight app/adapters/django.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/django.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Adapter.extend({\n  defaultSerializer: <span class=\"string\">&apos;django&apos;</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "defaultSerializer",
          "type": "{String}",
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        },
        {
          "file": "packages/ember-data/lib/system/adapter.js",
          "line": 411,
          "description": "<html><head></head><body><p>By default the store will try to coalesce all <code>fetchRecord</code> calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false.</p>\n</body></html>",
          "itemtype": "property",
          "name": "coalesceFindRequests",
          "type": "{boolean}",
          "class": "DS.Adapter",
          "module": "ember-data",
          "namespace": "DS",
          "version": "2.2.1",
          "since": "2.2.1"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "Ember.Object",
          "type": "missing",
          "version": "2.2.1"
        }
      },
      "descendants": {
        "data": [
          {
            "type": "class",
            "id": "ember-data-2.2.1-DS.RESTAdapter"
          }
        ]
      },
      "module": {
        "data": {
          "id": "ember-data-2.2.1-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.2.1",
          "type": "project-version"
        }
      }
    }
  }
}