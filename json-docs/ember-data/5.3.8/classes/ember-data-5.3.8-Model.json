{
  "data": {
    "id": "ember-data-5.3.8-Model",
    "type": "class",
    "attributes": {
      "name": "Model",
      "shortname": "Model",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "file": "../model/src/-private/model.ts",
      "line": 94,
      "description": "<html><head></head><body><p>Base class from which Models can be defined.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span> name;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Models are used both to define the static schema for a\nparticular resource type as well as the class to instantiate\nto present that data from cache.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "extends": "Ember.EmberObject",
      "methods": [
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 642,
          "description": "<html><head></head><body><p>Create a JSON representation of the record, using the serialization\nstrategy of the store's adapter.</p>\n<p>   <code>serialize</code> takes an optional hash as a parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>includeId</code>: <code>true</code> if the record's ID should be included in the\n  JSON representation.</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "an object whose values are primitive JSON values only",
            "type": "Object"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 671,
          "description": "<html><head></head><body><p>Marks the record as deleted but does not save it. You must call\n<code>save</code> afterwards if you want to persist it. You might use this\nmethod if you want to allow the user to still <code>rollbackAttributes()</code>\nafter a delete was made.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  softDelete = () =&gt; {\n    <span class=\"keyword\">this</span>.args.model.deleteRecord();\n  }\n\n  confirm = () =&gt; {\n    <span class=\"keyword\">this</span>.args.model.save();\n  }\n\n  undo = () =&gt; {\n    <span class=\"keyword\">this</span>.args.model.rollbackAttributes();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "access": "public",
          "tagname": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 701,
          "description": "<html><head></head><body><p>Same as <code>deleteRecord</code>, but saves the record immediately.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  delete = () =&gt; {\n    <span class=\"keyword\">this</span>.args.model.destroyRecord().<span class=\"keyword\">then</span>(function() {\n      <span class=\"keyword\">this</span>.transitionToRoute('model.index');\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you pass an object on the <code>adapterOptions</code> property of the options\nargument it will be passed to your adapter via the snapshot</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.<span class=\"title function_ invoke__\">destroyRecord</span>({ <span class=\"attr\">adapterOptions</span>: { <span class=\"attr\">subscribe</span>: <span class=\"literal\">false</span> } });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">MyCustomAdapter</span> from './custom-adapter';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyCustomAdapter</span> </span>{\n  deleteRecord(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">snapshot</span>) </span>{\n    <span class=\"keyword\">if</span> (snapshot.adapterOptions.subscribe) {\n      <span class=\"comment\">// ...</span>\n    }\n    <span class=\"comment\">// ...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "destroyRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
            "type": "Promise"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 745,
          "description": "<html><head></head><body><p>Unloads the record from the store. This will not send a delete request\nto your server, it just unloads the record from memory.</p>\n</body></html>",
          "itemtype": "method",
          "name": "unloadRecord",
          "access": "public",
          "tagname": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 753,
          "description": "<html><head></head><body><p>Returns an object, whose keys are changed properties, and value is\nan [oldProp, newProp] array.</p>\n<p>The array represents the diff of the canonical state with the local state\nof the model. Note: if the model is created locally, the canonical state is\nempty since the adapter hasn't acknowledged the attributes yet:</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/mascot.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MascotModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('string') name;\n  <span class=\"meta\">@attr</span>('boolean', {\n    defaultValue: <span class=\"literal\">false</span>\n  })\n  isAdmin;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>let mascot = store.createRecord(<span class=\"string\">'mascot'</span>);\n\nmascot.changedAttributes(); // {}\n\nmascot.<span class=\"keyword\">set</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'Tomster'</span>);\nmascot.changedAttributes(); // { <span class=\"type\">name</span>: [undefined, <span class=\"string\">'Tomster'</span>] }\n\nmascot.<span class=\"keyword\">set</span>(<span class=\"string\">'isAdmin'</span>, <span class=\"keyword\">true</span>);\nmascot.changedAttributes(); // { isAdmin: [undefined, <span class=\"keyword\">true</span>], <span class=\"type\">name</span>: [undefined, <span class=\"string\">'Tomster'</span>] }\n\nmascot.save().<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>() {\n  mascot.changedAttributes(); // {}\n\n  mascot.<span class=\"keyword\">set</span>(<span class=\"string\">'isAdmin'</span>, <span class=\"keyword\">false</span>);\n  mascot.changedAttributes(); // { isAdmin: [<span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>] }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "changedAttributes",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "an object, whose keys are changed properties,\n  and value is an [oldProp, newProp] array.",
            "type": "Object"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 800,
          "description": "<html><head></head><body><p>If the model <code>hasDirtyAttributes</code> this function will discard any unsaved\nchanges. If the model <code>isNew</code> it will be removed from the store.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.<span class=\"keyword\">name</span>; <span class=\"comment\">// 'Untitled Document'</span>\n<span class=\"keyword\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'Doc 1'</span>);\n<span class=\"keyword\">record</span>.<span class=\"keyword\">name</span>; <span class=\"comment\">// 'Doc 1'</span>\n<span class=\"keyword\">record</span>.rollbackAttributes();\n<span class=\"keyword\">record</span>.<span class=\"keyword\">name</span>; <span class=\"comment\">// 'Untitled Document'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "rollbackAttributes",
          "access": "public",
          "tagname": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 819,
          "itemtype": "method",
          "name": "_createSnapshot",
          "access": "private",
          "tagname": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 825,
          "description": "<html><head></head><body><p>Save the record and persist any changes to the record to an\nexternal source via the adapter.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>record.set(<span class=\"string\">'name'</span>, <span class=\"string\">'Tomster'</span>);\nrecord.save().then(<span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"comment\">// Success callback</span>\n}, <span class=\"keyword\">function</span><span class=\"params\">()</span> {\n  <span class=\"comment\">// Error callback</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>   If you pass an object using the <code>adapterOptions</code> property of the options\n   argument it will be passed to your adapter via the snapshot.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>record.<span class=\"title function_ invoke__\">save</span>({ <span class=\"attr\">adapterOptions</span>: { <span class=\"attr\">subscribe</span>: <span class=\"literal\">false</span> } });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">MyCustomAdapter</span> from './custom-adapter';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyCustomAdapter</span> </span>{\n  updateRecord(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">snapshot</span>) </span>{\n    <span class=\"keyword\">if</span> (snapshot.adapterOptions.subscribe) {\n      <span class=\"comment\">// ...</span>\n    }\n    <span class=\"comment\">// ...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "save",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
            "type": "Promise"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 867,
          "description": "<html><head></head><body><p>Reload the record from the adapter.</p>\n<p>This will only work if the record has already finished loading.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Component</span> from '<span class=\"meta\">@glimmer</span>/component';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  async reload = () =&gt; {\n    await <span class=\"keyword\">this</span>.args.model.reload();\n    <span class=\"comment\">// do something with the reloaded model</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "reload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "optional, may include `adapterOptions` hash which will be passed to adapter request",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that will be resolved with the record when the\nadapter returns successfully or rejected if the adapter returns\nwith an error.",
            "type": "Promise"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 901,
          "description": "<html><head></head><body><p>Get the reference for the specified belongsTo relationship.</p>\n<p>For instance, given the following model</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('user', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) author;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then the reference for the author relationship would be\nretrieved from a record instance like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>blogPost.belongsTo('author');</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A <code>BelongsToReference</code> is a low-level API that allows access\nand manipulation of a belongsTo relationship.</p>\n<p>It is especially useful when you're dealing with <code>async</code> relationships\nas it allows synchronous access to the relationship data if loaded, as\nwell as APIs for loading, reloading the data or accessing available\ninformation without triggering a load.</p>\n<p>It may also be useful when using <code>sync</code> relationships that need to be\nloaded/reloaded with more precise timing than marking the\nrelationship as <code>async</code> and relying on autofetch would have allowed.</p>\n<p>However,keep in mind that marking a relationship as <code>async: false</code> will introduce\nbugs into your application if the data is not always guaranteed to be available\nby the time the relationship is accessed. Ergo, it is recommended when using this\napproach to utilize <code>links</code> for unloaded relationship state instead of identifiers.</p>\n<p>Reference APIs are entangled with the relationship's underlying state,\nthus any getters or cached properties that utilize these will properly\ninvalidate if the relationship state changes.</p>\n<p>References are \"stable\", meaning that multiple calls to retrieve the reference\nfor a given relationship will always return the same HasManyReference.</p>\n</body></html>",
          "itemtype": "method",
          "name": "belongsTo",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "name",
              "description": "of the relationship",
              "type": "String"
            }
          ],
          "since": "2.5.0",
          "return": {
            "description": "reference for this relationship",
            "type": "BelongsToReference"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 952,
          "description": "<html><head></head><body><p>Get the reference for the specified hasMany relationship.</p>\n<p>For instance, given the following model</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Then the reference for the comments relationship would be\nretrieved from a record instance like so:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>blogPost.hasMany('comments');</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A <code>HasManyReference</code> is a low-level API that allows access\nand manipulation of a hasMany relationship.</p>\n<p>It is especially useful when you are dealing with <code>async</code> relationships\nas it allows synchronous access to the relationship data if loaded, as\nwell as APIs for loading, reloading the data or accessing available\ninformation without triggering a load.</p>\n<p>It may also be useful when using <code>sync</code> relationships with <code>@ember-data/model</code>\nthat need to be loaded/reloaded with more precise timing than marking the\nrelationship as <code>async</code> and relying on autofetch would have allowed.</p>\n<p>However,keep in mind that marking a relationship as <code>async: false</code> will introduce\nbugs into your application if the data is not always guaranteed to be available\nby the time the relationship is accessed. Ergo, it is recommended when using this\napproach to utilize <code>links</code> for unloaded relationship state instead of identifiers.</p>\n<p>Reference APIs are entangled with the relationship's underlying state,\nthus any getters or cached properties that utilize these will properly\ninvalidate if the relationship state changes.</p>\n<p>References are \"stable\", meaning that multiple calls to retrieve the reference\nfor a given relationship will always return the same HasManyReference.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "name",
              "description": "of the relationship",
              "type": "String"
            }
          ],
          "since": "2.5.0",
          "return": {
            "description": "reference for this relationship",
            "type": "HasManyReference"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1003,
          "description": "<html><head></head><body><p>Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"keyword\">name</span>, descriptor)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>name</code> the name of the current property in the iteration</li>\n<li><code>descriptor</code> the meta object that describes this relationship</li>\n</ul>\n<p>The relationship descriptor argument is an object with the following properties.</p>\n<ul>\n<li><strong>name</strong> <span class=\"type\">String</span> the name of this relationship on the Model</li>\n<li><strong>kind</strong> <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"</li>\n<li><strong>options</strong> <span class=\"type\">Object</span> the original options hash passed when the relationship was declared</li>\n<li><strong>parentType</strong> <span class=\"type\">Model</span> the type of the Model that owns this relationship</li>\n<li><strong>type</strong> <span class=\"type\">String</span> the type name of the related Model</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> JSONSerializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/json'</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> ApplicationSerializer extends JSONSerializer {\n   serialize(<span class=\"type\">record</span>, <span class=\"keyword\">options</span>) {\n   let <span class=\"type\">json</span> = {};\n\n   <span class=\"type\">record</span>.eachRelationship(<span class=\"keyword\">function</span>(<span class=\"type\">name</span>, descriptor) {\n     <span class=\"keyword\">if</span> (descriptor.kind === <span class=\"string\">'hasMany'</span>) {\n       let serializedHasManyName = <span class=\"type\">name</span>.toUpperCase() + <span class=\"string\">'_IDS'</span>;\n       <span class=\"type\">json</span>[serializedHasManyName] = <span class=\"type\">record</span>.<span class=\"keyword\">get</span>(<span class=\"type\">name</span>).map(r =&gt; r.id);\n     }\n   });\n\n   <span class=\"keyword\">return</span> <span class=\"type\">json</span>;\n }\n  }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "eachRelationship",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "callback",
              "description": "the callback to invoke",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "the value to which the callback's `this` should be bound",
              "type": "Any"
            }
          ],
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1088,
          "description": "<html><head></head><body><p>Create should only ever be called by the store. To create an instance of a\n<code>Model</code> in a dirty state use <code>store.createRecord</code>.</p>\n<p>   To create instances of <code>Model</code> in a clean state, use <code>store.push</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "create",
          "access": "private",
          "tagname": "",
          "static": 1,
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1149,
          "description": "<html><head></head><body><p>For a given relationship name, returns the model type of the relationship.</p>\n<p>For example, if you define a model like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment') comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Calling <code>store.modelFor('post').typeForRelationship('comments', store)</code> will return <code>Comment</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "typeForRelationship",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "name",
              "description": "the name of the relationship",
              "type": "String"
            },
            {
              "name": "store",
              "description": "an instance of Store",
              "type": "Store"
            }
          ],
          "return": {
            "description": "the type of the relationship, or undefined",
            "type": "Model"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1190,
          "description": "<html><head></head><body><p>Find the relationship which is the inverse of the one asked for.</p>\n<p>For example, if you define models like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('message') comments;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/message.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@belongsTo</span>('post') owner;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>store.modelFor(<span class=\"string\">'post'</span>).inverseFor(<span class=\"string\">'comments'</span>, store) // { <span class=\"keyword\">type</span>: <span class=\"string\">'message'</span>, <span class=\"type\">name</span>: <span class=\"string\">'owner'</span>, kind: <span class=\"string\">'belongsTo'</span> }\nstore.modelFor(<span class=\"string\">'message'</span>).inverseFor(<span class=\"string\">'owner'</span>, store) // { <span class=\"keyword\">type</span>: <span class=\"string\">'post'</span>, <span class=\"type\">name</span>: <span class=\"string\">'comments'</span>, kind: <span class=\"string\">'hasMany'</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "inverseFor",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "name",
              "description": "the name of the relationship",
              "type": "String"
            },
            {
              "name": "store",
              "description": "",
              "type": "Store"
            }
          ],
          "return": {
            "description": "the inverse relationship, or null",
            "type": "Object"
          },
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1604,
          "description": "<html><head></head><body><p>Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachRelationship",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "callback",
              "description": "the callback to invoke",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "the value to which the callback's `this` should be bound",
              "type": "Any"
            }
          ],
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1633,
          "description": "<html><head></head><body><p>Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.</p>\n</body></html>",
          "itemtype": "method",
          "name": "eachRelatedType",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "callback",
              "description": "the callback to invoke",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "the value to which the callback's `this` should be bound",
              "type": "Any"
            }
          ],
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1659,
          "itemtype": "method",
          "name": "determineRelationshipType",
          "access": "private",
          "tagname": "",
          "deprecated": true,
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1814,
          "description": "<html><head></head><body><p>Iterates through the attributes of the model, calling the passed function on each\nattribute.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"keyword\">name</span>, meta)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>name</code> the name of the current property in the iteration</li>\n<li><code>meta</code> the meta object for the attribute property in the iteration</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Model, { attr } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/model'</span>;\n\n<span class=\"keyword\">class</span> <span class=\"title class_\">PersonModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Model</span> {\n   @attr(<span class=\"string\">'string'</span>) firstName;\n   @attr(<span class=\"string\">'string'</span>) lastName;\n   @attr(<span class=\"string\">'date'</span>) birthday;\n }\n\nPersonModel.eachAttribute(function(name, meta) {\n   <span class=\"regexp\">//</span> <span class=\"keyword\">do</span> thing\n });\n\n<span class=\"regexp\">//</span> prints:\n<span class=\"regexp\">//</span> firstName {type: <span class=\"string\">\"string\"</span>, kind: <span class=\"string\">'attribute'</span>, options: <span class=\"built_in\">Object</span>, parentType: function, name: <span class=\"string\">\"firstName\"</span>}\n<span class=\"regexp\">//</span> lastName {type: <span class=\"string\">\"string\"</span>, kind: <span class=\"string\">'attribute'</span>, options: <span class=\"built_in\">Object</span>, parentType: function, name: <span class=\"string\">\"lastName\"</span>}\n<span class=\"regexp\">//</span> birthday {type: <span class=\"string\">\"date\"</span>, kind: <span class=\"string\">'attribute'</span>, options: <span class=\"built_in\">Object</span>, parentType: function, name: <span class=\"string\">\"birthday\"</span>}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "eachAttribute",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "the value to which the callback's `this` should be bound",
              "type": "Object",
              "optional": true
            }
          ],
          "static": 1,
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1872,
          "description": "<html><head></head><body><p>Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"keyword\">name</span>, <span class=\"keyword\">type</span>)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>name</code> the name of the current property in the iteration</li>\n<li><code>type</code> a string containing the name of the type of transformed\napplied to the attribute</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Model</span>, { attr } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/model'</span>;\n\n<span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = <span class=\"title class_\">Model</span>.<span class=\"title function_\">extend</span>({\n   <span class=\"attr\">firstName</span>: <span class=\"title function_\">attr</span>(),\n   <span class=\"attr\">lastName</span>: <span class=\"title function_\">attr</span>(<span class=\"string\">'string'</span>),\n   <span class=\"attr\">birthday</span>: <span class=\"title function_\">attr</span>(<span class=\"string\">'date'</span>)\n });\n\n<span class=\"title class_\">Person</span>.<span class=\"title function_\">eachTransformedAttribute</span>(<span class=\"keyword\">function</span>(<span class=\"params\">name, type</span>) {\n   <span class=\"comment\">// do thing</span>\n });\n\n<span class=\"comment\">// prints:</span>\n<span class=\"comment\">// lastName string</span>\n<span class=\"comment\">// birthday date</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "eachTransformedAttribute",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "binding",
              "description": "the value to which the callback's `this` should be bound",
              "type": "Object",
              "optional": true
            }
          ],
          "static": 1,
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1931,
          "description": "<html><head></head><body><p>Returns the name of the model class.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "access": "public",
          "tagname": "",
          "static": 1,
          "class": "Model",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 203,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>empty</code>\nstate. Empty is the first state all records enter after they have\nbeen created. Most records created by the store will quickly\ntransition to the <code>loading</code> state if data needs to be fetched from\nthe server or the <code>created</code> state if the record is created on the\nclient. A record can also enter the empty state if the adapter is\nunable to locate the record.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isEmpty",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 222,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>loading</code> state. A\nrecord enters this state when the store asks the adapter for its\ndata. It remains in this state until the adapter provides the\nrequested data.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isLoading",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 238,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>loaded</code> state. A\nrecord enters this state when its data is populated. Most of a\nrecord's lifecycle is spent inside substates of the <code>loaded</code>\nstate.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let <span class=\"keyword\">record</span> = store.createRecord(<span class=\"symbol\">'model</span>');\n<span class=\"keyword\">record</span>.isLoaded; // <span class=\"literal\">true</span>\n\nstore.findRecord(<span class=\"symbol\">'model</span>', <span class=\"number\">1</span>).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(model) {\n  model.isLoaded; // <span class=\"literal\">true</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isLoaded",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 265,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>dirty</code> state. The\nrecord has local changes that have not yet been saved by the\nadapter. This includes records that have been created (but not yet\nsaved) or deleted.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> <span class=\"keyword\">record</span> = store.createRecord(<span class=\"string\">'model'</span>);\n<span class=\"keyword\">record</span>.hasDirtyAttributes; <span class=\"comment\">// true</span>\n\nstore.findRecord(<span class=\"string\">'model'</span>, <span class=\"number\">1</span>).then(function(model) {\n  model.hasDirtyAttributes; <span class=\"comment\">// false</span>\n  model.<span class=\"keyword\">set</span>(<span class=\"string\">'foo'</span>, <span class=\"string\">'some value'</span>);\n  model.hasDirtyAttributes; <span class=\"comment\">// true</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "property",
          "name": "hasDirtyAttributes",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 295,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>saving</code> state. A\nrecord enters the saving state when <code>save</code> is called, but the\nadapter has not yet acknowledged that the changes have been\npersisted to the backend.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> <span class=\"keyword\">record</span> = store.createRecord(<span class=\"string\">'model'</span>);\n<span class=\"keyword\">record</span>.isSaving; <span class=\"comment\">// false</span>\n<span class=\"keyword\">let</span> promise = <span class=\"keyword\">record</span>.save();\n<span class=\"keyword\">record</span>.isSaving; <span class=\"comment\">// true</span>\npromise.then(function() {\n  <span class=\"keyword\">record</span>.isSaving; <span class=\"comment\">// false</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isSaving",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 323,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>deleted</code> state\nand has been marked for deletion. When <code>isDeleted</code> is true and\n<code>hasDirtyAttributes</code> is true, the record is deleted locally but the deletion\nwas not yet persisted. When <code>isSaving</code> is true, the change is\nin-flight. When both <code>hasDirtyAttributes</code> and <code>isSaving</code> are false, the\nchange has persisted.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td>\n              <td class=\"code\"><pre>let <span class=\"type\">record</span> = store.createRecord(<span class=\"string\">'model'</span>);\n<span class=\"type\">record</span>.isDeleted;    // <span class=\"keyword\">false</span>\n<span class=\"type\">record</span>.deleteRecord();\n\n// Locally deleted\n<span class=\"type\">record</span>.isDeleted;           // <span class=\"keyword\">true</span>\n<span class=\"type\">record</span>.hasDirtyAttributes;  // <span class=\"keyword\">true</span>\n<span class=\"type\">record</span>.isSaving;            // <span class=\"keyword\">false</span>\n\n// Persisting the deletion\nlet promise = <span class=\"type\">record</span>.save();\n<span class=\"type\">record</span>.isDeleted;    // <span class=\"keyword\">true</span>\n<span class=\"type\">record</span>.isSaving;     // <span class=\"keyword\">true</span>\n\n// Deletion Persisted\npromise.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>() {\n  <span class=\"type\">record</span>.isDeleted;          // <span class=\"keyword\">true</span>\n  <span class=\"type\">record</span>.isSaving;           // <span class=\"keyword\">false</span>\n  <span class=\"type\">record</span>.hasDirtyAttributes; // <span class=\"keyword\">false</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isDeleted",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 366,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>new</code> state. A\nrecord will be in the <code>new</code> state when it has been created on the\nclient and the adapter has not yet report that it was successfully\nsaved.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let <span class=\"keyword\">record</span> = store.createRecord(<span class=\"symbol\">'model</span>');\n<span class=\"keyword\">record</span>.isNew; // <span class=\"literal\">true</span>\n\n<span class=\"keyword\">record</span>.save().<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(model) {\n  model.isNew; // <span class=\"literal\">false</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isNew",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 393,
          "description": "<html><head></head><body><p>If this property is <code>true</code> the record is in the <code>valid</code> state.</p>\n<p>A record will be in the <code>valid</code> state when the adapter did not report any\nserver-side validation failures.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isValid",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 409,
          "description": "<html><head></head><body><p>If the record is in the dirty state this property will report what\nkind of change has caused it to move into the dirty\nstate. Possible values are:</p>\n<ul>\n<li><code>created</code> The record has been created by the client and not yet saved to the adapter.</li>\n<li><code>updated</code> The record has been updated by the client and not yet saved to the adapter.</li>\n<li><code>deleted</code> The record has been deleted by the client and not yet saved to the adapter.</li>\n</ul>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> <span class=\"keyword\">record</span> = store.createRecord(<span class=\"string\">'model'</span>);\n<span class=\"keyword\">record</span>.dirtyType; <span class=\"comment\">// 'created'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "dirtyType",
          "access": "public",
          "tagname": "",
          "type": "{String}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 435,
          "description": "<html><head></head><body><p>If <code>true</code> the adapter reported that it was unable to save local\nchanges to the backend for any reason other than a server-side\nvalidation error.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">record</span>.isError; // <span class=\"keyword\">false</span>\n<span class=\"type\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">'foo'</span>, <span class=\"string\">'valid value'</span>);\n<span class=\"type\">record</span>.save().<span class=\"keyword\">then</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">function</span>() {\n  <span class=\"type\">record</span>.isError; // <span class=\"keyword\">true</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isError",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 465,
          "description": "<html><head></head><body><p>If <code>true</code> the store is attempting to reload the record from the adapter.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.isReloading; // <span class=\"literal\">false</span>\n<span class=\"keyword\">record</span>.reload();\n<span class=\"keyword\">record</span>.isReloading; // <span class=\"literal\">true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "isReloading",
          "access": "public",
          "tagname": "",
          "type": "{Boolean}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 483,
          "description": "<html><head></head><body><p>All ember models have an id property. This is an identifier\nmanaged by an external source. These are always coerced to be\nstrings before being used internally. Note when declaring the\nattributes for a model it is an error to declare an id\nattribute.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> <span class=\"keyword\">record</span> = store.createRecord(<span class=\"string\">'model'</span>);\n<span class=\"keyword\">record</span>.id; <span class=\"comment\">// null</span>\n\nstore.findRecord(<span class=\"string\">'model'</span>, <span class=\"number\">1</span>).then(function(model) {\n  model.id; <span class=\"comment\">// '1'</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "id",
          "access": "public",
          "tagname": "",
          "type": "{String}",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 536,
          "itemtype": "property",
          "name": "currentState",
          "access": "private",
          "tagname": "",
          "type": "{Object}",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 560,
          "description": "<html><head></head><body><p>The store service instance which created this record instance</p>\n</body></html>",
          "itemtype": "property",
          "name": "store",
          "access": "public",
          "tagname": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 567,
          "description": "<html><head></head><body><p>When the record is in the <code>invalid</code> state this object will contain\nany errors returned by the adapter. When present the errors hash\ncontains keys corresponding to the invalid property names\nand values which are arrays of Javascript objects with two keys:</p>\n<ul>\n<li><code>message</code> A string containing the error message from the backend</li>\n<li><code>attribute</code> The name of the property associated with this error message</li>\n</ul>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">record</span>.errors.length; // <span class=\"number\">0</span>\n<span class=\"type\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">'foo'</span>, <span class=\"string\">'invalid value'</span>);\n<span class=\"type\">record</span>.save().catch(<span class=\"keyword\">function</span>() {\n  <span class=\"type\">record</span>.errors.foo;\n  // [{message: <span class=\"string\">'foo should be a number.'</span>, <span class=\"keyword\">attribute</span>: <span class=\"string\">'foo'</span>}]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>errors</code> property is useful for displaying error messages to\nthe user.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username: <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model.username</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @model.errors.username <span class=\"keyword\">as</span> |error|}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span>\n    </span><span class=\"template-variable\">{{<span class=\"name\">error.message</span>}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span><span class=\"language-xml\">\n<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email: <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">value</span>=</span></span><span class=\"template-variable\">{{@<span class=\"name\">model.email</span>}}</span><span class=\"language-xml\"><span class=\"tag\"> /&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>\n</span><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @model.errors.email <span class=\"keyword\">as</span> |error|}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span>\n    </span><span class=\"template-variable\">{{<span class=\"name\">error.message</span>}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also access the special <code>messages</code> property on the error\nobject to get an array of all the error strings.</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @model.errors.messages <span class=\"keyword\">as</span> |message|}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span>\n    </span><span class=\"template-variable\">{{<span class=\"name\">message</span>}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "errors",
          "access": "public",
          "tagname": "",
          "type": "{Errors}",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 626,
          "description": "<html><head></head><body><p>This property holds the <code>AdapterError</code> object with which\nlast adapter operation was rejected.</p>\n</body></html>",
          "itemtype": "property",
          "name": "adapterError",
          "access": "public",
          "tagname": "",
          "type": "{AdapterError}",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1099,
          "description": "<html><head></head><body><p>Represents the model's class name as a string. This can be used to look up the model's class name through\n<code>Store</code>'s modelFor method.</p>\n<p><code>modelName</code> is generated for you by EmberData. It will be a lowercased, dasherized string.\nFor example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>store.modelFor(<span class=\"string\">'post'</span>).modelName; <span class=\"regexp\">//</span> <span class=\"string\">'post'</span>\nstore.modelFor(<span class=\"string\">'blog-post'</span>).modelName; <span class=\"regexp\">//</span> <span class=\"string\">'blog-post'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The most common place you'll want to access <code>modelName</code> is in your serializer's <code>payloadKeyFromModelName</code> method. For example, to change payload\nkeys to underscore (instead of dasherized), you might use the following code:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">RESTSerializer</span> <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/rest'</span>;\n<span class=\"keyword\">import</span> { underscore } <span class=\"keyword\">from</span> <span class=\"string\">'&lt;app-name&gt;/utils/string-utils'</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">const</span> <span class=\"title class_\">PostSerializer</span> = <span class=\"title class_\">RESTSerializer</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">payloadKeyFromModelName</span>(<span class=\"params\">modelName</span>) {\n    <span class=\"keyword\">return</span> <span class=\"title function_\">underscore</span>(modelName);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "modelName",
          "access": "public",
          "tagname": "",
          "type": "String",
          "readonly": "",
          "static": 1,
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1282,
          "description": "<html><head></head><body><p>The model's relationships as a map, keyed on the type of the\nrelationship. The value of each entry is an array containing a descriptor\nfor each relationship with that type, describing the name of the relationship\nas well as the type.</p>\n<p>For example, given the following model definition:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/blog.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('user') users;\n   <span class=\"meta\">@belongsTo</span>('user') owner;\n   <span class=\"meta\">@hasMany</span>('post') posts;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This computed property would return a map describing these\nrelationships, like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Blog <span class=\"keyword\">from</span> <span class=\"string\">'app/models/blog'</span>;\n<span class=\"keyword\">import</span> <span class=\"keyword\">User</span> <span class=\"keyword\">from</span> <span class=\"string\">'app/models/user'</span>;\n<span class=\"keyword\">import</span> Post <span class=\"keyword\">from</span> <span class=\"string\">'app/models/post'</span>;\n\nlet relationships = Blog.relationships;\nrelationships.<span class=\"keyword\">user</span>;\n//=&gt; [ { <span class=\"type\">name</span>: <span class=\"string\">'users'</span>, kind: <span class=\"string\">'hasMany'</span> },\n//     { <span class=\"type\">name</span>: <span class=\"string\">'owner'</span>, kind: <span class=\"string\">'belongsTo'</span> } ]\nrelationships.post;\n//=&gt; [ { <span class=\"type\">name</span>: <span class=\"string\">'posts'</span>, kind: <span class=\"string\">'hasMany'</span> } ]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "relationships",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "Map",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1347,
          "description": "<html><head></head><body><p>A hash containing lists of the model's relationships, grouped\nby the relationship kind. For example, given a model with this\ndefinition:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/blog.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('user') users;\n   <span class=\"meta\">@belongsTo</span>('user') owner;\n\n   <span class=\"meta\">@hasMany</span>('post') posts;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This property would contain the following:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Blog <span class=\"keyword\">from</span> <span class=\"string\">'app/models/blog'</span>;\n\n<span class=\"keyword\">let</span> relationshipNames = Blog.relationshipNames;\nrelationshipNames.hasMany;\n<span class=\"regexp\">//=&gt; ['users', 'posts']\nrelationshipNames.belongsTo;\n//</span>=&gt; [<span class=\"string\">'owner'</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "relationshipNames",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "Object",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1401,
          "description": "<html><head></head><body><p>An array of types directly related to a model. Each type will be\nincluded once, regardless of the number of relationships it has with\nthe model.</p>\n<p>For example, given a model with this definition:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/blog.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('user') users;\n   <span class=\"meta\">@belongsTo</span>('user') owner;\n\n   <span class=\"meta\">@hasMany</span>('post') posts;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This property would contain the following:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Blog <span class=\"keyword\">from</span> <span class=\"string\">'app/models/blog'</span>;\n\n<span class=\"keyword\">let</span> relatedTypes = Blog.relatedTypes<span class=\"string\">');\n//=&gt; ['</span>user<span class=\"string\">', '</span>post<span class=\"string\">']</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "relatedTypes",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "Array",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1461,
          "description": "<html><head></head><body><p>A map whose keys are the relationships of a model and whose values are\nrelationship descriptors.</p>\n<p>For example, given a model with this\ndefinition:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/blog.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('user') users;\n   <span class=\"meta\">@belongsTo</span>('user') owner;\n\n   <span class=\"meta\">@hasMany</span>('post') posts;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This property would contain the following:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> Blog <span class=\"keyword\">from</span> <span class=\"string\">'app/models/blog'</span>;\n\nlet relationshipsByName = Blog.relationshipsByName;\nrelationshipsByName.users;\n//=&gt; { <span class=\"type\">name</span>: <span class=\"string\">'users'</span>, kind: <span class=\"string\">'hasMany'</span>, <span class=\"keyword\">type</span>: <span class=\"string\">'user'</span>, <span class=\"keyword\">options</span>: <span class=\"keyword\">Object</span> }\nrelationshipsByName.<span class=\"keyword\">owner</span>;\n//=&gt; { <span class=\"type\">name</span>: <span class=\"string\">'owner'</span>, kind: <span class=\"string\">'belongsTo'</span>, <span class=\"keyword\">type</span>: <span class=\"string\">'user'</span>, <span class=\"keyword\">options</span>: <span class=\"keyword\">Object</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "relationshipsByName",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "Map",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1544,
          "description": "<html><head></head><body><p>A map whose keys are the fields of the model and whose values are strings\ndescribing the kind of the field. A model's fields are the union of all of its\nattributes and relationships.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/blog.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr, belongsTo, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@hasMany</span>('user') users;\n   <span class=\"meta\">@belongsTo</span>('user') owner;\n\n   <span class=\"meta\">@hasMany</span>('post') posts;\n\n   <span class=\"meta\">@attr</span>('string') title;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Blog</span> <span class=\"keyword\">from</span> <span class=\"string\">'app/models/blog'</span>\n\n<span class=\"keyword\">let</span> fields = <span class=\"title class_\">Blog</span>.<span class=\"property\">fields</span>;\nfields.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">kind, field</span>) {\n   <span class=\"comment\">// do thing</span>\n });\n\n<span class=\"comment\">// prints:</span>\n<span class=\"comment\">// users, hasMany</span>\n<span class=\"comment\">// owner, belongsTo</span>\n<span class=\"comment\">// posts, hasMany</span>\n<span class=\"comment\">// title, attribute</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "fields",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "Map",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1693,
          "description": "<html><head></head><body><p>A map whose keys are the attributes of the model (properties\ndescribed by attr) and whose values are the meta object for the\nproperty.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@attr</span>('string') firstName;\n   <span class=\"meta\">@attr</span>('string') lastName;\n   <span class=\"meta\">@attr</span>('date') birthday;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre>import Person from <span class=\"string\">'app/models/person'</span>\n\nlet attributes = Person.attributes\n\nattributes.forEach(<span class=\"keyword\">function</span>(meta, name) {\n   <span class=\"regexp\">//</span> <span class=\"keyword\">do</span> thing\n });\n\n<span class=\"regexp\">//</span> prints:\n<span class=\"regexp\">//</span> firstName {type: <span class=\"string\">\"string\"</span>, kind: <span class=\"string\">'attribute'</span>, options: Object, parentType: <span class=\"keyword\">function</span>, name: <span class=\"string\">\"firstName\"</span>}\n<span class=\"regexp\">//</span> lastName {type: <span class=\"string\">\"string\"</span>, kind: <span class=\"string\">'attribute'</span>, options: Object, parentType: <span class=\"keyword\">function</span>, name: <span class=\"string\">\"lastName\"</span>}\n<span class=\"regexp\">//</span> birthday {type: <span class=\"string\">\"date\"</span>, kind: <span class=\"string\">'attribute'</span>, options: Object, parentType: <span class=\"keyword\">function</span>, name: <span class=\"string\">\"birthday\"</span>}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "attributes",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "{Map}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/model.ts",
          "line": 1758,
          "description": "<html><head></head><body><p>A map whose keys are the attributes of the model (properties\ndescribed by attr) and whose values are type of transformation\napplied to each attribute. This map does not include any\nattributes that do not have an transformation type.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n   <span class=\"meta\">@attr</span> firstName;\n   <span class=\"meta\">@attr</span>('string') lastName;\n   <span class=\"meta\">@attr</span>('date') birthday;\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">from</span> <span class=\"string\">'app/models/person'</span>;\n\n<span class=\"keyword\">let</span> transformedAttributes = <span class=\"title class_\">Person</span>.<span class=\"property\">transformedAttributes</span>\n\ntransformedAttributes.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">field, type</span>) {\n   <span class=\"comment\">// do thing</span>\n });\n\n<span class=\"comment\">// prints:</span>\n<span class=\"comment\">// lastName string</span>\n<span class=\"comment\">// birthday date</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "transformedAttributes",
          "access": "public",
          "tagname": "",
          "static": 1,
          "type": "{Map}",
          "readonly": "",
          "class": "Model",
          "module": "@ember-data/model"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "Ember.EmberObject",
          "type": "missing"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}