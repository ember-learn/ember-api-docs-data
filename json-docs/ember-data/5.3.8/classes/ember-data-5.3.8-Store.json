{
  "data": {
    "id": "ember-data-5.3.8-Store",
    "type": "class",
    "attributes": {
      "name": "Store",
      "shortname": "Store",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/store",
      "namespace": "",
      "file": "../store/src/-private/store-service.ts",
      "line": 165,
      "description": "<html><head></head><body><p>A Store coordinates interaction between your application, a <a href=\"https://api.emberjs.com/ember-data/release/classes/%3CInterface%3E%20Cache\">Cache</a>,\nand sources of data (such as your API or a local persistence layer)\naccessed via a <a href=\"https://github.com/emberjs/data/tree/main/packages/request\">RequestManager</a>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/services/store.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span> from '<span class=\"meta\">@ember</span>-data/store';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Most Applications will only have a single <code>Store</code> configured as a Service\nin this manner. However, setting up multiple stores is possible, including using\neach as a unique service or within a specific context.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/legacy-compat/src/index.ts",
          "line": 41,
          "description": "<html><head></head><body><p>Returns an instance of the adapter for a given type. For\nexample, <code>adapterFor('person')</code> will return an instance of\nthe adapter located at <code>app/adapters/person.js</code></p>\n<p>If no <code>person</code> adapter is found, this method will look\nfor an <code>application</code> adapter (the default adapter for\nyour entire application).</p>\n</body></html>",
          "itemtype": "method",
          "name": "adapterFor",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "Adapter"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/legacy-compat/src/index.ts",
          "line": 102,
          "description": "<html><head></head><body><p>Returns an instance of the serializer for a given type. For\nexample, <code>serializerFor('person')</code> will return an instance of\n<code>App.PersonSerializer</code>.</p>\n<p>If no <code>App.PersonSerializer</code> is found, this method will look\nfor an <code>App.ApplicationSerializer</code> (the default serializer for\nyour entire application).</p>\n<p>If a serializer cannot be found on the adapter, it will fall back\nto an instance of <code>JSONSerializer</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "serializerFor",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "the record to serialize",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Serializer"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/legacy-compat/src/index.ts",
          "line": 161,
          "description": "<html><head></head><body><p><code>normalize</code> converts a json payload into the normalized form that\n<a href=\"../methods/push?anchor=push\">push</a> expects.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"title\">socket</span>.on('message', function(message) {\n  <span class=\"keyword\">let</span> modelName = message.model;\n  <span class=\"keyword\">let</span> <span class=\"class\"><span class=\"keyword\">data</span> = message.<span class=\"keyword\">data</span>;</span>\n  store.push(store.normalize(modelName, <span class=\"class\"><span class=\"keyword\">data</span>));</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "The name of the model type for this payload",
              "type": "String"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The normalized payload",
            "type": "Object"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/legacy-compat/src/index.ts",
          "line": 203,
          "description": "<html><head></head><body><p>Push some raw data into the store.</p>\n<p>This method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span></span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> pushData = {\n  <span class=\"attribute\">posts</span>: [\n    { <span class=\"attribute\">id:</span><span class=\"string\"> 1, postTitle</span>: <span class=\"string\">\"Great post\"</span>, <span class=\"attribute\">commentIds</span>: [<span class=\"number\">2</span>] }\n  ],\n  <span class=\"attribute\">comments</span>: [\n    { <span class=\"attribute\">id:</span><span class=\"string\"> 2, commentBody</span>: <span class=\"string\">\"Insightful comment\"</span> }\n  ]\n}\n\nstore.pushPayload(pushData);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, the data will be deserialized using a default\nserializer (the application serializer if it exists).</p>\n<p>Alternatively, <code>pushPayload</code> will accept a model type which\nwill determine which serializer will process the payload.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span></span>;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">JSON</span>Serializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/json'</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">JSON</span>Serializer;</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>store.pushPayload<span class=\"comment\">(pushData)</span>; <span class=\"comment\">// Will use the application serializer</span>\nstore.pushPayload<span class=\"comment\">('post', pushData)</span>; <span class=\"comment\">// Will use the post serializer</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushPayload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "Optionally, a model type used to determine which serializer will be used",
              "type": "String"
            },
            {
              "name": "inputPayload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 297,
          "description": "<html><head></head><body><p>DEPRECATED - Use the property <code>store.schema</code> instead.</p>\n<p>Provides access to the SchemaDefinitionService instance\nfor this Store instance.</p>\n<p>The SchemaDefinitionService can be used to query for\ninformation about the schema of a resource.</p>\n</body></html>",
          "itemtype": "method",
          "name": "getSchemaDefinitionService",
          "deprecated": true,
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 312,
          "description": "<html><head></head><body><p>DEPRECATED - Use <code>createSchemaService</code> instead.</p>\n<p>Allows an app to register a custom SchemaService\nfor use when information about a resource's schema needs\nto be queried.</p>\n<p>This method can only be called more than once, but only one schema\ndefinition service may exist. Therefore if you wish to chain services\nyou must lookup the existing service and close over it with the new\nservice by accessing <code>store.schema</code> prior to registration.</p>\n<p>For Example:</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span> from '<span class=\"meta\">@ember</span>-data/store';\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchemaDelegator</span> </span>{\n  constructor(schema) {\n    <span class=\"keyword\">this</span>._schema = schema;\n  }\n\n  hasResource(resource: { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): boolean {\n    <span class=\"keyword\">if</span> (<span class=\"type\">AbstractSchemas</span>.has(resource.<span class=\"keyword\">type</span>)) {\n      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n    }\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._schema.hasResource(resource);\n  }\n\n  attributesDefinitionFor(identifier: <span class=\"type\">RecordIdentifier</span> | { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): <span class=\"type\">AttributesSchema</span> {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._schema.attributesDefinitionFor(identifier);\n  }\n\n  relationshipsDefinitionFor(identifier: <span class=\"type\">RecordIdentifier</span> | { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): <span class=\"type\">RelationshipsSchema</span> {\n    const schema = <span class=\"type\">AbstractSchemas</span>.get(identifier.<span class=\"keyword\">type</span>);\n    <span class=\"keyword\">return</span> schema || <span class=\"keyword\">this</span>._schema.relationshipsDefinitionFor(identifier);\n  }\n}\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{\n  constructor(...args) {\n    <span class=\"keyword\">super</span>(...args);\n\n    const schema = <span class=\"keyword\">this</span>.createSchemaService();\n    <span class=\"keyword\">this</span>.registerSchemaDefinitionService(<span class=\"keyword\">new</span> <span class=\"type\">SchemaDelegator</span>(schema));\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "registerSchemaDefinitionService",
          "params": [
            {
              "name": "schema",
              "description": "",
              "type": "SchemaService"
            }
          ],
          "deprecated": true,
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 368,
          "description": "<html><head></head><body><p>DEPRECATED - Use <code>createSchemaService</code> instead.</p>\n<p>Allows an app to register a custom SchemaService\nfor use when information about a resource's schema needs\nto be queried.</p>\n<p>This method can only be called more than once, but only one schema\ndefinition service may exist. Therefore if you wish to chain services\nyou must lookup the existing service and close over it with the new\nservice by accessing <code>store.schema</code> prior to registration.</p>\n<p>For Example:</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span> from '<span class=\"meta\">@ember</span>-data/store';\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchemaDelegator</span> </span>{\n  constructor(schema) {\n    <span class=\"keyword\">this</span>._schema = schema;\n  }\n\n  hasResource(resource: { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): boolean {\n    <span class=\"keyword\">if</span> (<span class=\"type\">AbstractSchemas</span>.has(resource.<span class=\"keyword\">type</span>)) {\n      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n    }\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._schema.hasResource(resource);\n  }\n\n  attributesDefinitionFor(identifier: <span class=\"type\">RecordIdentifier</span> | { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): <span class=\"type\">AttributesSchema</span> {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._schema.attributesDefinitionFor(identifier);\n  }\n\n  relationshipsDefinitionFor(identifier: <span class=\"type\">RecordIdentifier</span> | { <span class=\"class\"><span class=\"keyword\">type</span></span>: string }): <span class=\"type\">RelationshipsSchema</span> {\n    const schema = <span class=\"type\">AbstractSchemas</span>.get(identifier.<span class=\"keyword\">type</span>);\n    <span class=\"keyword\">return</span> schema || <span class=\"keyword\">this</span>._schema.relationshipsDefinitionFor(identifier);\n  }\n}\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{\n  constructor(...args) {\n    <span class=\"keyword\">super</span>(...args);\n\n    const schema = <span class=\"keyword\">this</span>.schema;\n    <span class=\"keyword\">this</span>.registerSchema(<span class=\"keyword\">new</span> <span class=\"type\">SchemaDelegator</span>(schema));\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "registerSchema",
          "params": [
            {
              "name": "schema",
              "description": "",
              "type": "SchemaService"
            }
          ],
          "deprecated": true,
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 561,
          "itemtype": "method",
          "name": "init",
          "access": "private",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 632,
          "description": "<html><head></head><body><p>Retrieve the RequestStateService instance\nassociated with this Store.</p>\n<p>This can be used to query the status of requests\nthat have been initiated for a given identifier.</p>\n</body></html>",
          "itemtype": "method",
          "name": "getRequestStateService",
          "return": {
            "description": "",
            "type": "RequestStateService"
          },
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 664,
          "description": "<html><head></head><body><p>Issue a request via the configured RequestManager,\ninserting the response into the cache and handing\nback a Future which resolves to a ResponseDocument</p>\n<h2 id=\"cache-keys\">Cache Keys</h2>\n<p>Only GET requests with a url or requests with an explicit\ncache key (<code>cacheOptions.key</code>) will have the request result\nand document cached.</p>\n<p>The cache key used is <code>requestConfig.cacheOptions.key</code>\nif present, falling back to <code>requestConfig.url</code>.</p>\n<p>Params are not serialized as part of the cache-key, so\neither ensure they are already in the url or utilize\n<code>requestConfig.cacheOptions.key</code>. For queries issued\nvia the <code>POST</code> method <code>requestConfig.cacheOptions.key</code>\nMUST be supplied for the document to be cached.</p>\n<h2 id=\"requesting-without-a-cache-key\">Requesting Without a Cache Key</h2>\n<p>Resource data within the request is always updated in the cache,\nregardless of whether a cache key is present for the request.</p>\n<h2 id=\"fulfilling-from-cache\">Fulfilling From Cache</h2>\n<p>When a cache-key is determined, the request may fulfill\nfrom cache provided the cache is not stale.</p>\n<p>Cache staleness is determined by the configured CachePolicy\nwith priority given to the <code>cacheOptions.reload</code> and\n<code>cacheOptions.backgroundReload</code> on the request if present.</p>\n<p>If the cache data has soft expired or the request asks for a background\nreload, the request will fulfill from cache if possible and\nmake a non-blocking request in the background to update the cache.</p>\n<p>If the cache data has hard expired or the request asks for a reload,\nthe request will not fulfill from cache and will make a blocking\nrequest to update the cache.</p>\n<h2 id=\"the-response\">The Response</h2>\n<p>The primary difference between <code>requestManager.request</code> and <code>store.request</code>\nis that <code>store.request</code> will attempt to hydrate the response content into\na response Document containing RecordInstances.</p>\n</body></html>",
          "itemtype": "method",
          "name": "request",
          "params": [
            {
              "name": "requestConfig",
              "description": "",
              "type": "StoreRequestInput"
            }
          ],
          "return": {
            "description": "",
            "type": "Future"
          },
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 781,
          "description": "<html><head></head><body><p>A hook which an app or addon may implement. Called when\nthe Store is attempting to create a Record Instance for\na resource.</p>\n<p>This hook can be used to select or instantiate any desired\nmechanism of presenting cache data to the ui for access\nmutation, and interaction.</p>\n</body></html>",
          "itemtype": "method",
          "name": "instantiateRecord (hook)",
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "createRecordArgs",
              "description": ""
            },
            {
              "name": "recordDataFor",
              "description": "deprecated use this.cache"
            },
            {
              "name": "notificationManager",
              "description": "deprecated use this.notifications"
            }
          ],
          "return": {
            "description": "A record instance"
          },
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 799,
          "description": "<html><head></head><body><p>A hook which an app or addon may implement. Called when\nthe Store is destroying a Record Instance. This hook should\nbe used to teardown any custom record instances instantiated\nwith <code>instantiateRecord</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "teardownRecord (hook)",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "record",
              "description": ""
            }
          ],
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 810,
          "description": "<html><head></head><body><p>Returns the schema for a particular resource type (modelName).</p>\n<p>When used with Model from @ember-data/model the return is the model class,\nbut this is not guaranteed.</p>\n<p>If looking to query attribute or relationship information it is\nrecommended to use <code>getSchemaDefinitionService</code> instead. This method\nshould be considered legacy and exists primarily to continue to support\nAdapter/Serializer APIs which expect it's return value in their method\nsignatures.</p>\n<p>The class of a model might be useful if you want to get a list of all the\nrelationship names of the model, see\n<a href=\"/ember-data/release/classes/Model?anchor=relationshipNames\"><code>relationshipNames</code></a>\nfor example.</p>\n</body></html>",
          "itemtype": "method",
          "name": "modelFor",
          "access": "public",
          "tagname": "",
          "deprecated": true,
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "ModelSchema"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 847,
          "description": "<html><head></head><body><p>Create a new record in the current store. The properties passed\nto this method are set on the newly created record.</p>\n<p>To create a new instance of a <code>Post</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>store.createRecord(<span class=\"symbol\">'post</span>', {\n  title: <span class=\"symbol\">'Ember</span> <span class=\"keyword\">is</span> awesome!'\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To create a new instance of a <code>Post</code> that has a relationship with a <code>User</code> record:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let <span class=\"keyword\">user</span> = this.store.peekRecord(<span class=\"string\">'user'</span>, <span class=\"string\">'1'</span>);\nstore.createRecord(<span class=\"string\">'post'</span>, {\n  title: <span class=\"string\">'Ember is awesome!'</span>,\n  <span class=\"keyword\">user</span>: <span class=\"keyword\">user</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "createRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "the name of the resource",
              "type": "String"
            },
            {
              "name": "inputProperties",
              "description": "a hash of properties to set on the\n  newly created record.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "record",
            "type": "Model"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 939,
          "description": "<html><head></head><body><p>For symmetry, a record can be deleted via the store.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let post = store.createRecord(<span class=\"symbol\">'post</span>', {\n  title: <span class=\"symbol\">'Ember</span> <span class=\"keyword\">is</span> awesome!'\n});\n\nstore.deleteRecord(post);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "record",
              "description": "",
              "type": "Unknown"
            }
          ],
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 973,
          "description": "<html><head></head><body><p>For symmetry, a record can be unloaded via the store.\nThis will cause the record to be destroyed and freed up for garbage collection.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>store.findRecord(<span class=\"string\">'post'</span>, <span class=\"string\">'1'</span>).then(<span class=\"keyword\">function</span><span class=\"params\">(post)</span> {\n  store.unloadRecord(post);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unloadRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "record",
              "description": "",
              "type": "Model"
            }
          ],
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 999,
          "description": "<html><head></head><body><p>This method returns a record for a given identifier or type and id combination.</p>\n<p>The <code>findRecord</code> method will always resolve its promise with the same\nobject for a given identifier or type and <code>id</code>.</p>\n<p>The <code>findRecord</code> method will always return a <strong>promise</strong> that will be\nresolved with the record.</p>\n<p><strong>Example 1</strong></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model({ post_id }) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', post_id);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Example 2</strong></p>\n<p><code>findRecord</code> can be called with a single identifier argument instead of the combination\nof <code>type</code> (modelName) and <code>id</code> as separate arguments. You may recognize this combo as\nthe typical pairing from <a href=\"https://jsonapi.org/format/#document-resource-object-identification\">JSON:API</a></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model({ post_id: id }) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord({ <span class=\"class\"><span class=\"keyword\">type</span></span>: 'post', id });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Example 3</strong></p>\n<p>If you have previously received an lid via an Identifier for this record, and the record\nhas already been assigned an id, you can find the record again using just the lid.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>store.findRecord({ lid })<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the record is not yet available, the store will ask the adapter's <code>findRecord</code>\nmethod to retrieve and supply the necessary data. If the record is already present\nin the store, it depends on the reload behavior <em>when</em> the returned promise\nresolves.</p>\n<h3 id=\"preloading\">Preloading</h3>\n<p>You can optionally <code>preload</code> specific attributes and relationships that you know of\nby passing them via the passed <code>options</code>.</p>\n<p>For example, if your Ember route looks like <code>/posts/1/comments/2</code> and your API route\nfor the comment also looks like <code>/posts/1/comments/2</code> if you want to fetch the comment\nwithout also fetching the post you can pass in the post to the <code>findRecord</code> call:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">comments.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model({ post_id, comment_id: id }) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord({ <span class=\"class\"><span class=\"keyword\">type</span></span>: 'comment', id, { preload: { post: post_id }} });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In your adapter you can then access this id without triggering a network request via the\nsnapshot:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> {\n\n  <span class=\"title function_\">findRecord</span>(<span class=\"params\">store, schema, id, snapshot</span>) {\n    <span class=\"keyword\">let</span> <span class=\"keyword\">type</span> = schema.<span class=\"property\">modelName</span>;\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">'comment'</span>)\n      <span class=\"keyword\">let</span> postId = snapshot.<span class=\"title function_\">belongsTo</span>(<span class=\"string\">'post'</span>, { <span class=\"attr\">id</span>: <span class=\"literal\">true</span> });\n\n      <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`./posts/<span class=\"subst\">${postId}</span>/comments/<span class=\"subst\">${id}</span>`</span>)\n        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())\n    }\n  }\n\n  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">this</span>();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This could also be achieved by supplying the post id to the adapter via the adapterOptions\nproperty on the options hash.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">comments.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model({ post_id, comment_id: id }) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord({ <span class=\"class\"><span class=\"keyword\">type</span></span>: 'comment', id, { adapterOptions: { post: post_id }} });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> {\n  <span class=\"title function_\">findRecord</span>(<span class=\"params\">store, schema, id, snapshot</span>) {\n    <span class=\"keyword\">let</span> <span class=\"keyword\">type</span> = schema.<span class=\"property\">modelName</span>;\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">'comment'</span>)\n      <span class=\"keyword\">let</span> postId = snapshot.<span class=\"property\">adapterOptions</span>.<span class=\"property\">post</span>;\n\n      <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`./posts/<span class=\"subst\">${postId}</span>/comments/<span class=\"subst\">${id}</span>`</span>)\n        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())\n    }\n  }\n\n  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">this</span>();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you have access to the post model you can also pass the model itself to preload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> post = <span class=\"keyword\">await</span> store.findRecord(<span class=\"string\">'post'</span>, <span class=\"string\">'1'</span>);\n<span class=\"keyword\">let</span> comment = <span class=\"keyword\">await</span> store.findRecord(<span class=\"string\">'comment'</span>, <span class=\"string\">'2'</span>, { post: myPostModel });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"reloading\">Reloading</h3>\n<p>The reload behavior is configured either via the passed <code>options</code> hash or\nthe result of the adapter's <code>shouldReloadRecord</code>.</p>\n<p>If <code>{ reload: true }</code> is passed or <code>adapter.shouldReloadRecord</code> evaluates\nto <code>true</code>, then the returned promise resolves once the adapter returns\ndata, regardless if the requested record is already in the store:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"title function_ invoke__\">push</span>({\n  <span class=\"attr\">data</span>: {\n    <span class=\"attr\">id</span>: <span class=\"number\">1</span>,\n    <span class=\"attr\">type</span>: <span class=\"string\">'post'</span>,\n    <span class=\"attr\">revision</span>: <span class=\"number\">1</span>\n  }\n});\n\n<span class=\"comment\">// adapter#findRecord resolves with</span>\n<span class=\"comment\">// [</span>\n<span class=\"comment\">//   {</span>\n<span class=\"comment\">//     id: 1,</span>\n<span class=\"comment\">//     type: 'post',</span>\n<span class=\"comment\">//     revision: 2</span>\n<span class=\"comment\">//   }</span>\n<span class=\"comment\">// ]</span>\nstore.<span class=\"title function_ invoke__\">findRecord</span>(<span class=\"string\">'post'</span>, <span class=\"string\">'1'</span>, { <span class=\"attr\">reload</span>: <span class=\"literal\">true</span> }).<span class=\"title function_ invoke__\">then</span>(function(post) {\n  post.revision; <span class=\"comment\">// 2</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If no reload is indicated via the above mentioned ways, then the promise\nimmediately resolves with the cached version in the store.</p>\n<h3 id=\"background-reloading\">Background Reloading</h3>\n<p>Optionally, if <code>adapter.shouldBackgroundReloadRecord</code> evaluates to <code>true</code>,\nthen a background reload is started, which updates the records' data, once\nit is available:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/adapters/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">ApplicationAdapter</span> from <span class=\"string\">\"./application\"</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationAdapter</span> </span>{\n  shouldReloadRecord(store, snapshot) {\n    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n  },\n\n  shouldBackgroundReloadRecord(store, snapshot) {\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n  }\n});\n\n<span class=\"comment\">// ...</span>\n\nstore.push({\n  data: {\n    id: <span class=\"number\">1</span>,\n    <span class=\"class\"><span class=\"keyword\">type</span></span>: 'post',\n    revision: <span class=\"number\">1</span>\n  }\n});\n\nlet blogPost = store.findRecord('post', '<span class=\"number\">1</span>').<span class=\"keyword\">then</span>(function(post) {\n  post.revision; <span class=\"comment\">// 1</span>\n});\n\n<span class=\"comment\">// later, once adapter#findRecord resolved with</span>\n<span class=\"comment\">// [</span>\n<span class=\"comment\">//   {</span>\n<span class=\"comment\">//     id: 1,</span>\n<span class=\"comment\">//     type: 'post',</span>\n<span class=\"comment\">//     revision: 2</span>\n<span class=\"comment\">//   }</span>\n<span class=\"comment\">// ]</span>\n\nblogPost.revision; <span class=\"comment\">// 2</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you would like to force or prevent background reloading, you can set a\nboolean value for <code>backgroundReload</code> in the options object for\n<code>findRecord</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post/edit.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEditRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, { backgroundReload: <span class=\"literal\">false</span> });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you pass an object on the <code>adapterOptions</code> property of the options\nargument it will be passed to your adapter via the snapshot</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post/edit.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEditRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, {\n      adapterOptions: { subscribe: <span class=\"literal\">false</span> }\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">MyCustomAdapter</span> from './custom-adapter';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyCustomAdapter</span> </span>{\n  findRecord(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">id</span>, <span class=\"title\">snapshot</span>) </span>{\n    <span class=\"keyword\">if</span> (snapshot.adapterOptions.subscribe) {\n      <span class=\"comment\">// ...</span>\n    }\n    <span class=\"comment\">// ...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"../methods/peekRecord?anchor=peekRecord\">peekRecord</a> to get the cached version of a record.</p>\n<h3 id=\"retrieving-related-model-records\">Retrieving Related Model Records</h3>\n<p>If you use an adapter such as Ember's default\n<a href=\"/ember-data/release/classes/JSONAPIAdapter\"><code>JSONAPIAdapter</code></a>\nthat supports the <a href=\"http://jsonapi.org/\">JSON API specification</a> and if your server\nendpoint supports the use of an\n<a href=\"http://jsonapi.org/format/#fetching-includes\">'include' query parameter</a>,\nyou can use <code>findRecord()</code> or <code>findAll()</code> to automatically retrieve additional records related to\nthe one you request by supplying an <code>include</code> parameter in the <code>options</code> object.</p>\n<p>For example, given a <code>post</code> model that has a <code>hasMany</code> relationship with a <code>comment</code>\nmodel, when we retrieve a specific post we can have the server also return that post's\ncomments in the same request:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, { include: 'comments' });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> {\n  <span class=\"title function_\">findRecord</span>(<span class=\"params\">store, schema, id, snapshot</span>) {\n    <span class=\"keyword\">let</span> <span class=\"keyword\">type</span> = schema.<span class=\"property\">modelName</span>;\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">'post'</span>)\n      <span class=\"keyword\">let</span> includes = snapshot.<span class=\"property\">adapterOptions</span>.<span class=\"property\">include</span>;\n\n      <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`./posts/<span class=\"subst\">${postId}</span>?include=<span class=\"subst\">${includes}</span>`</span>)\n        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())\n    }\n  }\n\n  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">this</span>();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In this case, the post's comments would then be available in your template as\n<code>model.comments</code>.</p>\n<p>Multiple relationships can be requested using an <code>include</code> parameter consisting of a\ncomma-separated list (without white-space) while nested relationships can be specified\nusing a dot-separated sequence of relationship names. So to request both the post's\ncomments and the authors of those comments the request would look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"retrieving-specific-fields-by-type\">Retrieving Specific Fields by Type</h3>\n<p>If your server endpoint supports the use of a <a href=\"https://jsonapi.org/format/#fetching-sparse-fieldsets\">'fields' query parameter</a>,\nyou can use pass those fields through to your server.  At this point in time, this requires a few manual steps on your part.</p>\n<ol>\n<li>Implement <code>buildQuery</code> in your adapter.</li>\n</ol>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>buildQuery(snapshot) {\n  let query <span class=\"operator\">=</span> super.buildQuery(...arguments)<span class=\"comment\">;</span>\n\n  let { fields } <span class=\"operator\">=</span> snapshot.adapterOptions<span class=\"comment\">;</span>\n\n  if (fields) {\n    query.fields <span class=\"operator\">=</span> fields<span class=\"comment\">;</span>\n  }\n\n  return query<span class=\"comment\">;</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ol start=\"2\">\n<li>Then pass through the applicable fields to your <code>findRecord</code> request.</li>\n</ol>\n<p>Given a <code>post</code> model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title' } });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Moreover, you can filter attributes on related models as well. If a <code>post</code> has a <code>belongsTo</code> relationship to a user,\njust include the relationship key and attributes.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title', user: 'name,email' } });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "findRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "- either a string representing the name of the resource or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record",
              "type": "String|object"
            },
            {
              "name": "id",
              "description": "- optional object with options for the request only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved",
              "type": "(String|Integer|Object)"
            },
            {
              "name": "options",
              "description": "- if the first param is a string this will be the optional options for the request. See examples for available options.",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1410,
          "description": "<html><head></head><body><p>Get the reference for the specified record.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> userRef = store.getReference(<span class=\"string\">'user'</span>, <span class=\"string\">'1'</span>);\n\n<span class=\"comment\">// check if the user is loaded</span>\n<span class=\"keyword\">let</span> isLoaded = userRef.value() !== <span class=\"literal\">null</span>;\n\n<span class=\"comment\">// get the record of the reference (null if not yet available)</span>\n<span class=\"keyword\">let</span> user = userRef.value();\n\n<span class=\"comment\">// get the identifier of the reference</span>\n<span class=\"keyword\">if</span> (userRef.remoteType() === <span class=\"string\">'id'</span>) {\n<span class=\"keyword\">let</span> id = userRef.id();\n}\n\n<span class=\"comment\">// load user (via store.find)</span>\nuserRef.load().then(...)\n\n<span class=\"comment\">// or trigger a reload</span>\nuserRef.reload().then(...)\n\n<span class=\"comment\">// provide data for reference</span>\nuserRef.push({ <span class=\"attribute\">id:</span><span class=\"string\"> 1, username</span>: <span class=\"string\">'@user'</span> }).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>{\n  userRef.value() === user;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getReference",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "resource",
              "description": "- modelName (string) or Identifier (object)",
              "type": "String|object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Integer"
            }
          ],
          "since": "2.5.0",
          "return": {
            "description": "",
            "type": "RecordReference"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1473,
          "description": "<html><head></head><body><p>Get a record by a given type and ID without triggering a fetch.</p>\n<p>This method will synchronously return the record if it is available in the store,\notherwise it will return <code>null</code>. A record is available if it has been fetched earlier, or\npushed manually into the store.</p>\n<p>See <a href=\"../methods/findRecord?anchor=findRecord\">findRecord</a> if you would like to request this record from the backend.</p>\n<p><em>Note: This is a synchronous method and does not return a promise.</em></p>\n<p><strong>Example 1</strong></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> post = store.peekRecord(<span class=\"string\">'post'</span>, <span class=\"string\">'1'</span>);\n\npost<span class=\"built_in\">.id</span>; // <span class=\"string\">'1'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>peekRecord</code> can be called with a single identifier argument instead of the combination\nof <code>type</code> (modelName) and <code>id</code> as separate arguments. You may recognize this combo as\nthe typical pairing from <a href=\"https://jsonapi.org/format/#document-resource-object-identification\">JSON:API</a></p>\n<p><strong>Example 2</strong></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">let</span> post = store.peekRecord({ <span class=\"built_in\">type</span>: <span class=\"string\">'post'</span>, <span class=\"built_in\">id</span> });\npost.id; // <span class=\"string\">'1'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you have previously received an lid from an Identifier for this record, you can lookup the record again using\njust the lid.</p>\n<p><strong>Example 3</strong></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let post <span class=\"operator\">=</span> store.peekRecord({ lid })<span class=\"comment\">;</span>\npost.id<span class=\"comment\">; // '1'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "peekRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "- either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record",
              "type": "String|object"
            },
            {
              "name": "id",
              "description": "- optional only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved.",
              "type": "String|Integer"
            }
          ],
          "return": {
            "description": "record",
            "type": "Model|null"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1555,
          "description": "<html><head></head><body><p>This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.</p>\n<p>Each time this method is called a new request is made through the adapter.</p>\n<p>Exposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.</p>\n<hr>\n<p>If you do something like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>store.query(<span class=\"string\">'person'</span>, { <span class=\"keyword\">page</span>: <span class=\"number\">1</span> })<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The request made to the server will look something like this:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">GET</span> <span class=\"string\">\"/api/v1/person?page=1\"</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<hr>\n<p>If you do something like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">'person'</span>, { <span class=\"attr\">ids</span>: [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>] });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The request made to the server will look something like this:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>GET <span class=\"string\">\"/api/v1/person?ids%5B%5D=1&amp;ids%5B%5D=2&amp;ids%5B%5D=3\"</span>\ndecoded: <span class=\"string\">\"/api/v1/person?ids[]=1&amp;ids[]=2&amp;ids[]=3\"</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method returns a promise, which is resolved with a\n<a href=\"/ember-data/release/classes/Collection\"><code>Collection</code></a>\nonce the server returns.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "query",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "the name of the resource",
              "type": "String"
            },
            {
              "name": "query",
              "description": "a query to be used by the adapter",
              "type": "Object"
            },
            {
              "name": "options",
              "description": "optional, may include `adapterOptions` hash which will be passed to adapter.query",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1632,
          "description": "<html><head></head><body><p>This method makes a request for one record, where the <code>id</code> is not known\nbeforehand (if the <code>id</code> is known, use <a href=\"../methods/findRecord?anchor=findRecord\"><code>findRecord</code></a>\ninstead).</p>\n<p>This method can be used when it is certain that the server will return a\nsingle object for the primary data.</p>\n<p>Each time this method is called a new request is made through the adapter.</p>\n<p>Let's assume our API provides an endpoint for the currently logged in user\nvia:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>// <span class=\"keyword\">GET</span> /api/<span class=\"built_in\">current_user</span>\n{\n  <span class=\"keyword\">user</span>: {\n    id: <span class=\"number\">1234</span>,\n    username: <span class=\"string\">'admin'</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Since the specific <code>id</code> of the <code>user</code> is not known beforehand, we can use\n<code>queryRecord</code> to get the user:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"title function_\">queryRecord</span>(<span class=\"string\">'user'</span>, {}).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">user</span>) {\n  <span class=\"keyword\">let</span> username = user.<span class=\"property\">username</span>;\n  <span class=\"comment\">// do thing</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The request is made through the adapters' <code>queryRecord</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Adapter</span> from '<span class=\"meta\">@ember</span>-data/adapter';\n<span class=\"keyword\">import</span> $ from 'jquery';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>{\n  queryRecord(modelName, query) {\n    <span class=\"keyword\">return</span> $.getJSON('/api/current_user');\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note: the primary use case for <code>store.queryRecord</code> is when a single record\nis queried and the <code>id</code> is not known beforehand. In all other cases\n<code>store.query</code> and using the first item of the array is likely the preferred\nway:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">//</span> <span class=\"string\">GET</span> <span class=\"string\">/users?username=unique</span>\n{\n  <span class=\"attr\">data:</span> [{\n    <span class=\"attr\">id:</span> <span class=\"number\">1234</span>,\n    <span class=\"attr\">type:</span> <span class=\"string\">'user'</span>,\n    <span class=\"attr\">attributes:</span> {\n      <span class=\"attr\">username:</span> <span class=\"string\">\"unique\"</span>\n    }\n  }]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>store.query(<span class=\"string\">'user'</span>, { username: <span class=\"string\">'unique'</span> }).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(<span class=\"built_in\">users</span>) {\n  <span class=\"built_in\">return</span> users.firstObject;\n}).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(user) {\n  <span class=\"built_in\">let</span> <span class=\"built_in\">id</span> = user.id;\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method returns a promise, which resolves with the found record.</p>\n<p>If the adapter returns no data for the primary data of the payload, then\n<code>queryRecord</code> resolves with <code>null</code>:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// GET /users?username=unique</span>\n{\n  <span class=\"keyword\">data</span>: <span class=\"literal\">null</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>store.queryRecord(<span class=\"string\">'user'</span>, { username: <span class=\"string\">'unique'</span> }).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(<span class=\"keyword\">user</span>) {\n   // <span class=\"keyword\">user</span> <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "queryRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            },
            {
              "name": "query",
              "description": "an opaque query to be used by the adapter",
              "type": "Object"
            },
            {
              "name": "options",
              "description": "optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise which resolves with the found record or `null`",
            "type": "Promise"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1760,
          "description": "<html><head></head><body><p><code>findAll</code> asks the adapter's <code>findAll</code> method to find the records for the\ngiven type, and returns a promise which will resolve with all records of\nthis type present in the store, even if the adapter only returns a subset\nof them.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/authors.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorsRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findAll('author');\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><em>When</em> the returned promise resolves depends on the reload behavior,\nconfigured via the passed <code>options</code> hash and the result of the adapter's\n<code>shouldReloadAll</code> method.</p>\n<h3 id=\"reloading\">Reloading</h3>\n<p>If <code>{ reload: true }</code> is passed or <code>adapter.shouldReloadAll</code> evaluates to\n<code>true</code>, then the returned promise resolves once the adapter returns data,\nregardless if there are already records in the store:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>store.push({\n  data: {\n    id: <span class=\"string\">'first'</span>,\n    type: <span class=\"string\">'author'</span>\n  }\n});\n\n<span class=\"regexp\">//</span> adapter<span class=\"comment\">#findAll resolves with</span>\n<span class=\"regexp\">//</span> [\n<span class=\"regexp\">//</span>   {\n<span class=\"regexp\">//</span>     id: <span class=\"string\">'second'</span>,\n<span class=\"regexp\">//</span>     type: <span class=\"string\">'author'</span>\n<span class=\"regexp\">//</span>   }\n<span class=\"regexp\">//</span> ]\nstore.findAll(<span class=\"string\">'author'</span>, { reload: true }).then(<span class=\"keyword\">function</span>(authors) {\n  authors.getEach(<span class=\"string\">'id'</span>); <span class=\"regexp\">//</span> [<span class=\"string\">'first'</span>, <span class=\"string\">'second'</span>]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If no reload is indicated via the above mentioned ways, then the promise\nimmediately resolves with all the records currently loaded in the store.</p>\n<h3 id=\"background-reloading\">Background Reloading</h3>\n<p>Optionally, if <code>adapter.shouldBackgroundReloadAll</code> evaluates to <code>true</code>,\nthen a background reload is started. Once this resolves, the array with\nwhich the promise resolves, is updated automatically so it contains all the\nrecords in the store:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/adapter'</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Adapter</span> {\n  <span class=\"title function_\">shouldReloadAll</span>(<span class=\"params\">store, snapshotsArray</span>) {\n    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n  },\n\n  <span class=\"title function_\">shouldBackgroundReloadAll</span>(<span class=\"params\">store, snapshotsArray</span>) {\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n  }\n});\n\n<span class=\"comment\">// ...</span>\n\nstore.<span class=\"title function_\">push</span>({\n  <span class=\"attr\">data</span>: {\n    <span class=\"attr\">id</span>: <span class=\"string\">'first'</span>,\n    <span class=\"attr\">type</span>: <span class=\"string\">'author'</span>\n  }\n});\n\n<span class=\"keyword\">let</span> allAuthors;\nstore.<span class=\"title function_\">findAll</span>(<span class=\"string\">'author'</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">authors</span>) {\n  authors.<span class=\"title function_\">getEach</span>(<span class=\"string\">'id'</span>); <span class=\"comment\">// ['first']</span>\n\n  allAuthors = authors;\n});\n\n<span class=\"comment\">// later, once adapter#findAll resolved with</span>\n<span class=\"comment\">// [</span>\n<span class=\"comment\">//   {</span>\n<span class=\"comment\">//     id: 'second',</span>\n<span class=\"comment\">//     type: 'author'</span>\n<span class=\"comment\">//   }</span>\n<span class=\"comment\">// ]</span>\n\nallAuthors.<span class=\"title function_\">getEach</span>(<span class=\"string\">'id'</span>); <span class=\"comment\">// ['first', 'second']</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you would like to force or prevent background reloading, you can set a\nboolean value for <code>backgroundReload</code> in the options object for\n<code>findAll</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/post/edit.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostEditRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findAll('post', { backgroundReload: <span class=\"literal\">false</span> });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you pass an object on the <code>adapterOptions</code> property of the options\nargument it will be passed to you adapter via the <code>snapshotRecordArray</code></p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/posts.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostsRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model(params) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findAll('post', {\n      adapterOptions: { subscribe: <span class=\"literal\">false</span> }\n    });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">MyCustomAdapter</span> from './custom-adapter';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyCustomAdapter</span> </span>{\n  findAll(store, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">sinceToken</span>, <span class=\"title\">snapshotRecordArray</span>) </span>{\n    <span class=\"keyword\">if</span> (snapshotRecordArray.adapterOptions.subscribe) {\n      <span class=\"comment\">// ...</span>\n    }\n    <span class=\"comment\">// ...</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"../methods/peekAll?anchor=peekAll\">peekAll</a> to get an array of current records in the\nstore, without waiting until a reload is finished.</p>\n<h3 id=\"retrieving-related-model-records\">Retrieving Related Model Records</h3>\n<p>If you use an adapter such as Ember's default\n<a href=\"/ember-data/release/classes/JSONAPIAdapter\"><code>JSONAPIAdapter</code></a>\nthat supports the <a href=\"http://jsonapi.org/\">JSON API specification</a> and if your server\nendpoint supports the use of an\n<a href=\"http://jsonapi.org/format/#fetching-includes\">'include' query parameter</a>,\nyou can use <code>findAll()</code> to automatically retrieve additional records related to\nthose requested by supplying an <code>include</code> parameter in the <code>options</code> object.</p>\n<p>For example, given a <code>post</code> model that has a <code>hasMany</code> relationship with a <code>comment</code>\nmodel, when we retrieve all of the post records we can have the server also return\nall of the posts' comments in the same request:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/posts.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostsRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findAll('post', { include: 'comments' });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Multiple relationships can be requested using an <code>include</code> parameter consisting of a\ncomma-separated list (without white-space) while nested relationships can be specified\nusing a dot-separated sequence of relationship names. So to request both the posts'\ncomments and the authors of those comments the request would look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/routes/posts.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostsRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  model() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store.findAll('post', { include: 'comments,comments.author' });\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>See <a href=\"../methods/query?anchor=query\">query</a> to only get a subset of records from the server.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "findAll",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "the name of the resource",
              "type": "String"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "promise",
            "type": "Promise"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 1962,
          "description": "<html><head></head><body><p>This method returns a filtered array that contains all of the\nknown records for a given type in the store.</p>\n<p>Note that because it's just a filter, the result will contain any\nlocally created records of the type, however, it will not make a\nrequest to the backend to retrieve additional records. If you\nwould like to request all the records from the backend please use\n<a href=\"../methods/findAll?anchor=findAll\">store.findAll</a>.</p>\n<p>Also note that multiple calls to <code>peekAll</code> for a given type will always\nreturn the same <code>RecordArray</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">let</span> localPosts = store.peekAll(<span class=\"string\">'post'</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "peekAll",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "the name of the resource",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "RecordArray"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2002,
          "description": "<html><head></head><body><p>This method unloads all records in the store.\nIt schedules unloading to happen during the next run loop.</p>\n<p>Optionally you can pass a type which unload all records for a given type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">store</span>.unloadAll()<span class=\"comment\">;</span>\n<span class=\"keyword\">store</span>.unloadAll('post')<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unloadAll",
          "params": [
            {
              "name": "type",
              "description": "the name of the resource",
              "type": "String"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2043,
          "description": "<html><head></head><body><p>Push some data for a given type into the store.</p>\n<p>This method expects normalized <a href=\"http://jsonapi.org/\">JSON API</a> document. This means you have to follow <a href=\"http://jsonapi.org/format/\">JSON API specification</a> with few minor adjustments:</p>\n<ul>\n<li>record's <code>type</code> should always be in singular, dasherized form</li>\n<li>members (properties) should be camelCased</li>\n</ul>\n<p><a href=\"http://jsonapi.org/format/#document-top-level\">Your primary data should be wrapped inside <code>data</code> property</a>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"title function_ invoke__\">push</span>({\n  <span class=\"attr\">data</span>: {\n    // primary data <span class=\"keyword\">for</span> single record of type `Person`\n    <span class=\"attr\">id</span>: <span class=\"string\">'1'</span>,\n    <span class=\"attr\">type</span>: <span class=\"string\">'person'</span>,\n    <span class=\"attr\">attributes</span>: {\n      <span class=\"attr\">firstName</span>: <span class=\"string\">'Daniel'</span>,\n      <span class=\"attr\">lastName</span>: <span class=\"string\">'Kmak'</span>\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><a href=\"http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7\">Demo.</a></p>\n<p><code>data</code> property can also hold an array (of records):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"title function_ invoke__\">push</span>({\n  <span class=\"attr\">data</span>: [\n    // an <span class=\"keyword\">array</span> of records\n    {\n      <span class=\"attr\">id</span>: <span class=\"string\">'1'</span>,\n      <span class=\"attr\">type</span>: <span class=\"string\">'person'</span>,\n      <span class=\"attr\">attributes</span>: {\n        <span class=\"attr\">firstName</span>: <span class=\"string\">'Daniel'</span>,\n        <span class=\"attr\">lastName</span>: <span class=\"string\">'Kmak'</span>\n      }\n    },\n    {\n      <span class=\"attr\">id</span>: <span class=\"string\">'2'</span>,\n      <span class=\"attr\">type</span>: <span class=\"string\">'person'</span>,\n      <span class=\"attr\">attributes</span>: {\n        <span class=\"attr\">firstName</span>: <span class=\"string\">'Tom'</span>,\n        <span class=\"attr\">lastName</span>: <span class=\"string\">'Dale'</span>\n      }\n    }\n  ]\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><a href=\"http://ember-twiddle.com/69cdbeaa3702159dc355\">Demo.</a></p>\n<p>There are some typical properties for <code>JSONAPI</code> payload:</p>\n<ul>\n<li><code>id</code> - mandatory, unique record's key</li>\n<li><code>type</code> - mandatory string which matches <code>model</code>'s dasherized name in singular form</li>\n<li><code>attributes</code> - object which holds data for record attributes - <code>attr</code>'s declared in model</li>\n<li><code>relationships</code> - object which must contain any of the following properties under each relationships' respective key (example path is <code>relationships.achievements.data</code>):<ul>\n<li><a href=\"http://jsonapi.org/format/#document-links\"><code>links</code></a></li>\n<li><a href=\"http://jsonapi.org/format/#document-resource-object-linkage\"><code>data</code></a> - place for primary data</li>\n<li><a href=\"http://jsonapi.org/format/#document-meta\"><code>meta</code></a> - object which contains meta-information about relationship</li>\n</ul>\n</li>\n</ul>\n<p>For this model:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr, hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonRoute</span> <span class=\"keyword\">extends</span> <span class=\"title\">Route</span> </span>{\n  <span class=\"meta\">@attr</span>('string') firstName;\n  <span class=\"meta\">@attr</span>('string') lastName;\n\n  <span class=\"meta\">@hasMany</span>('person') children;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To represent the children as IDs:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n              <td class=\"code\"><pre>{\n  data: {\n    id: <span class=\"string\">'1'</span>,\n    type: <span class=\"string\">'person'</span>,\n    attributes: {\n      firstName: <span class=\"string\">'Tom'</span>,\n      lastName: <span class=\"string\">'Dale'</span>\n    },\n    relationships: {\n      children: {\n        data: [\n          {\n            id: <span class=\"string\">'2'</span>,\n            type: <span class=\"string\">'person'</span>\n          },\n          {\n            id: <span class=\"string\">'3'</span>,\n            type: <span class=\"string\">'person'</span>\n          },\n          {\n            id: <span class=\"string\">'4'</span>,\n            type: <span class=\"string\">'person'</span>\n          }\n        ]\n      }\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><a href=\"http://ember-twiddle.com/343e1735e034091f5bde\">Demo.</a></p>\n<p>To represent the children relationship as a URL:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>{\n  data: {\n    id: <span class=\"string\">'1'</span>,\n    type: <span class=\"string\">'person'</span>,\n    attributes: {\n      firstName: <span class=\"string\">'Tom'</span>,\n      lastName: <span class=\"string\">'Dale'</span>\n    },\n    relationships: {\n      children: {\n        links: {\n          related: <span class=\"string\">'/people/1/children'</span>\n        }\n      }\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you're streaming data or implementing an adapter, make sure\nthat you have converted the incoming data into this form. The\nstore's <a href=\"../methods/normalize?anchor=normalize\">normalize</a> method is a convenience\nhelper for converting a json payload into the form Ember Data\nexpects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>store.<span class=\"keyword\">push</span>(store.<span class=\"params\">normal</span>ize(<span class=\"string\">'person'</span>, data))<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method can be used both to push in brand new\nrecords, as well as to update existing records.</p>\n</body></html>",
          "itemtype": "method",
          "name": "push",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "data",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the record(s) that was created or\n  updated."
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2216,
          "description": "<html><head></head><body><p>Push some data in the form of a json-api document into the store,\nwithout creating materialized records.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_push",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "jsonApiDoc",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "identifiers for the primary records that had data loaded",
            "type": "StableRecordIdentifier|Array<StableRecordIdentifier>|null"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2256,
          "description": "<html><head></head><body><p>Trigger a save for a Record.</p>\n<p>Returns a promise resolving with the same record when the save is complete.</p>\n</body></html>",
          "itemtype": "method",
          "name": "saveRecord",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "record",
              "description": "",
              "type": "Unknown"
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Promise<record>"
          },
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2312,
          "description": "<html><head></head><body><p>Instantiation hook allowing applications or addons to configure the store\nto utilize a custom Cache implementation.</p>\n<p>This hook should not be called directly by consuming applications or libraries.\nUse <code>Store.cache</code> to access the Cache instance.</p>\n</body></html>",
          "itemtype": "method",
          "name": "createCache (hook)",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "storeWrapper",
              "description": ""
            }
          ],
          "return": {
            "description": "",
            "type": "Cache"
          },
          "class": "Store",
          "module": "@ember-data/store"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 428,
          "description": "<html><head></head><body><p>Provides access to the NotificationManager associated\nwith this Store instance.</p>\n<p>The NotificationManager can be used to subscribe to\nchanges to the cache.</p>\n</body></html>",
          "itemtype": "property",
          "name": "notifications",
          "type": "NotificationManager",
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 440,
          "description": "<html><head></head><body><p>Provides access to the SchemaService instance\nfor this Store instance.</p>\n<p>The SchemaService can be used to query for\ninformation about the schema of a resource.</p>\n</body></html>",
          "itemtype": "property",
          "name": "schema",
          "type": "SchemaService",
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 458,
          "description": "<html><head></head><body><p>Provides access to the IdentifierCache instance\nfor this store.</p>\n<p>The IdentifierCache can be used to generate or\nretrieve a stable unique identifier for any resource.</p>\n</body></html>",
          "itemtype": "property",
          "name": "identifierCache",
          "type": "IdentifierCache",
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 469,
          "description": "<html><head></head><body><p>Provides access to the requestManager instance associated\nwith this Store instance.</p>\n<p>When using <code>ember-data</code> this property is automatically\nset to an instance of <code>RequestManager</code>. When not using <code>ember-data</code>\nyou must configure this property yourself, either by declaring\nit as a service or by initializing it.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span>, { <span class=\"type\">CacheHandler</span> } from '<span class=\"meta\">@ember</span>-data/store';\n<span class=\"keyword\">import</span> <span class=\"type\">RequestManager</span> from '<span class=\"meta\">@ember</span>-data/request';\n<span class=\"keyword\">import</span> <span class=\"type\">Fetch</span> from '<span class=\"meta\">@ember</span>-data/request/fetch';\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{\n  constructor() {\n    <span class=\"keyword\">super</span>(...arguments);\n    <span class=\"keyword\">this</span>.requestManager = <span class=\"keyword\">new</span> <span class=\"type\">RequestManager</span>();\n    <span class=\"keyword\">this</span>.requestManager.use([<span class=\"type\">Fetch</span>]);\n    <span class=\"keyword\">this</span>.requestManager.useCache(<span class=\"type\">CacheHandler</span>);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "requestManager",
          "type": "RequestManager",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 498,
          "description": "<html><head></head><body><p>A Property which an App may set to provide a CachePolicy\nto control when a cached request becomes stale.</p>\n<p>Note, when defined, these methods will only be invoked if a\ncache key exists for the request, either because the request\ncontains <code>cacheOptions.key</code> or because the <a href=\"/ember-data/release/classes/IdentifierCache\">IdentifierCache</a>\nwas able to generate a key for the request using the configured\n<a href=\"/ember-data/release/functions/@ember-data%2Fstore/setIdentifierGenerationMethod\">generation method</a>.</p>\n<p><code>isSoftExpired</code> will only be invoked if <code>isHardExpired</code> returns <code>false</code>.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre>store.lifetimes = {\n  <span class=\"comment\">// make the request and ignore the current cache state</span>\n  <span class=\"title function_ invoke__\">isHardExpired</span>(<span class=\"attr\">identifier</span>: StableDocumentIdentifier): <span class=\"keyword\">boolean</span> {\n    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n  }\n\n  <span class=\"comment\">// make the request in the background if true, return cache state</span>\n  <span class=\"title function_ invoke__\">isSoftExpired</span>(<span class=\"attr\">identifier</span>: StableDocumentIdentifier): <span class=\"keyword\">boolean</span> {\n    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "lifetimes",
          "type": "CachePolicy|undefined",
          "class": "Store",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-private/store-service.ts",
          "line": 2325,
          "description": "<html><head></head><body><p>Returns the cache instance associated to this Store, instantiates the Cache\nif necessary via <code>Store.createCache</code></p>\n</body></html>",
          "itemtype": "property",
          "name": "cache",
          "type": "Cache",
          "access": "public",
          "tagname": "",
          "class": "Store",
          "module": "@ember-data/store"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/store",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}