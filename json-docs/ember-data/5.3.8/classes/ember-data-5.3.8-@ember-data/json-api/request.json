{
  "data": {
    "id": "ember-data-5.3.8-@ember-data/json-api/request",
    "type": "class",
    "attributes": {
      "name": "@ember-data/json-api/request",
      "shortname": "@ember-data/json-api/request",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/json-api/request",
      "namespace": "",
      "methods": [
        {
          "file": "../packages/json-api/src/-private/builders/-utils.ts",
          "line": 25,
          "description": "<html><head></head><body><p>Allows setting extensions and profiles to be used in the <code>Accept</code> header.</p>\n<p>Extensions and profiles are keyed by their namespace with the value being\ntheir URI.</p>\n<p>Example:</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>setBuildURLConfig({\n  extensions: {\n    atomic: <span class=\"string\">'https://jsonapi.org/ext/atomic'</span>\n  },\n  profiles: {\n    pagination: <span class=\"string\">'https://jsonapi.org/profiles/ethanresnick/cursor-pagination'</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This also sets the global configuration for <code>buildBaseURL</code>\nfor host and namespace values for the application\nin the <code>@ember-data/request-utils</code> package.</p>\n<p>These values may still be overridden by passing\nthem to buildBaseURL directly.</p>\n<p>This method may be called as many times as needed</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">type</span> <span class=\"title class_\">BuildURLConfig</span> <span class=\"operator\">=</span> {\n  host<span class=\"operator\">:</span> <span class=\"type\">string</span>;\n  <span class=\"keyword\">namespace</span><span class=\"operator\">:</span> <span class=\"type\">string</span>'\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setBuildURLConfig",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "config",
              "description": "",
              "type": "BuildURLConfig"
            }
          ],
          "return": {
            "description": "void"
          },
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/-utils.ts",
          "line": 164,
          "description": "<html><head></head><body><p>Sorts query params by both key and value, returning a query params string</p>\n<p>Treats <code>included</code> specially, splicing it into an array if it is a string and sorting the array.</p>\n<ul>\n<li>If <code>included</code> is an object we build paths dynamically for you\nTreats <code>fields</code> specially, building JSON:API partial fields params from an object\nTreats <code>page</code> specially, building cursor-pagination profile page params from an object</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">const</span> <span class=\"variable constant_\">params</span> = <span class=\"title function_ invoke__\">buildQueryParams</span>({\n <span class=\"attr\">include</span>: {\n   <span class=\"attr\">company</span>: {\n     <span class=\"attr\">locations</span>: <span class=\"string\">'address'</span>\n   }\n },\n  <span class=\"attr\">fields</span>: {\n    <span class=\"attr\">company</span>: [<span class=\"string\">'name'</span>, <span class=\"string\">'ticker'</span>],\n    <span class=\"attr\">person</span>: <span class=\"string\">'name'</span>\n  },\n  <span class=\"attr\">page</span>: {\n    <span class=\"attr\">size</span>: <span class=\"number\">10</span>,\n    <span class=\"attr\">after</span>: <span class=\"string\">'abc'</span>,\n  }\n});\n\n<span class=\"comment\">// =&gt; 'fields[company]=name,ticker&amp;fields[person]=name&amp;include=company.locations,company.locations.address&amp;page[after]=abc&amp;page[size]=10'</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Options:</p>\n<ul>\n<li>arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'</li>\n</ul>\n<p>'bracket': appends [] to the key for every value e.g. <code>ids[]=1&amp;ids[]=2</code>\n'indices': appends [i] to the key for every value e.g. <code>ids[0]=1&amp;ids[1]=2</code>\n'repeat': appends the key for every value e.g. <code>ids=1&amp;ids=2</code>\n'comma' (default): appends the key once with a comma separated list of values e.g. <code>ids=1,2</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "buildQueryParams",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "params",
              "description": "",
              "type": "URLSearchParams | object"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A sorted query params string without the leading `?`",
            "type": "String"
          },
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/find-record.ts",
          "line": 16,
          "description": "<html><head></head><body><p>Builds request options to fetch a single resource by a known id or identifier\nconfigured for the url and header expectations of most JSON:API APIs.</p>\n<p><strong>Basic Usage</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { findRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(<span class=\"title function_\">findRecord</span>(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>With Options</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { findRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = findRecord(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>With an Identifier</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { findRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = findRecord({ <span class=\"keyword\">type</span>: <span class=\"string\">'person'</span>, id: <span class=\"string\">'1'</span> }, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { findRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = findRecord(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] }, { namespace: <span class=\"string\">'api/v2'</span> });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "findRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/query.ts",
          "line": 18,
          "description": "<html><head></head><body><p>Builds request options to query for resources, usually by a primary\ntype, configured for the url and header expectations of most JSON:API APIs.</p>\n<p>The key difference between this and <code>postQuery</code> is that this method will send the query\nas query params in the url of a \"GET\" request instead of as the JSON body of a \"POST\"\nrequest.</p>\n<p><strong>Basic Usage</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { query } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(<span class=\"title function_\">query</span>(<span class=\"string\">'person'</span>));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>With Query Params</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { query } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = query(<span class=\"string\">'person'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { query } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = query(<span class=\"string\">'person'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] }, { reload: <span class=\"keyword\">true</span> });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "query",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "query",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/query.ts",
          "line": 113,
          "description": "<html><head></head><body><p>Builds request options to query for resources, usually by a primary\ntype, configured for the url and header expectations of most JSON:API APIs.</p>\n<p>The key difference between this and <code>query</code> is that this method will send the query\nas the JSON body of a \"POST\" request instead of as query params in the url of a \"GET\"\nrequest.</p>\n<p>A CacheKey is generated from the url and query params, and used to cache the response\nin the store.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { postQuery } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = postQuery(<span class=\"string\">'person'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { postQuery } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\nconst <span class=\"keyword\">options</span> = postQuery(<span class=\"string\">'person'</span>, { <span class=\"keyword\">include</span>: [<span class=\"string\">'pets'</span>, <span class=\"string\">'friends'</span>] }, { reload: <span class=\"keyword\">true</span> });\nconst data = await store.request(<span class=\"keyword\">options</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "postQuery",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "query",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/save-record.ts",
          "line": 24,
          "description": "<html><head></head><body><p>Builds request options to delete record for resources,\nconfigured for the url, method and header expectations of most JSON:API APIs.</p>\n<p><strong>Basic Usage</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { deleteRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">peekRecord</span>(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>);\n\n<span class=\"comment\">// mark record as deleted</span>\nstore.<span class=\"title function_\">deleteRecord</span>(person);\n\n<span class=\"comment\">// persist deletion</span>\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(<span class=\"title function_\">deleteRecord</span>(person));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { deleteRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">peekRecord</span>(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>);\n\n<span class=\"comment\">// mark record as deleted</span>\nstore.<span class=\"title function_\">deleteRecord</span>(person);\n\n<span class=\"comment\">// persist deletion</span>\n<span class=\"keyword\">const</span> options = <span class=\"title function_\">deleteRecord</span>(person, { <span class=\"attr\">namespace</span>: <span class=\"string\">'api/v1'</span> });\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(options);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "deleteRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/save-record.ts",
          "line": 107,
          "description": "<html><head></head><body><p>Builds request options to create new record for resources,\nconfigured for the url, method and header expectations of most JSON:API APIs.</p>\n<p><strong>Basic Usage</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { createRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">createRecord</span>(<span class=\"string\">'person'</span>, { <span class=\"attr\">name</span>: <span class=\"string\">'Ted'</span> });\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(<span class=\"title function_\">createRecord</span>(person));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { createRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">createRecord</span>(<span class=\"string\">'person'</span>, { <span class=\"attr\">name</span>: <span class=\"string\">'Ted'</span> });\n<span class=\"keyword\">const</span> options = <span class=\"title function_\">createRecord</span>(person, { <span class=\"attr\">namespace</span>: <span class=\"string\">'api/v1'</span> });\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(options);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "createRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/builders/save-record.ts",
          "line": 179,
          "description": "<html><head></head><body><p>Builds request options to update existing record for resources,\nconfigured for the url, method and header expectations of most JSON:API APIs.</p>\n<p><strong>Basic Usage</strong></p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { updateRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">peekRecord</span>(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>);\nperson.<span class=\"property\">name</span> = <span class=\"string\">'Chris'</span>;\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(<span class=\"title function_\">updateRecord</span>(person));</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><strong>Supplying Options to Modify the Request Behavior</strong></p>\n<p>The following options are supported:</p>\n<ul>\n<li><code>patch</code> - Allows caller to specify whether to use a PATCH request instead of a PUT request, defaults to <code>false</code>.</li>\n<li><code>host</code> - The host to use for the request, defaults to the <code>host</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>namespace</code> - The namespace to use for the request, defaults to the <code>namespace</code> configured with <code>setBuildURLConfig</code>.</li>\n<li><code>resourcePath</code> - The resource path to use for the request, defaults to pluralizing the supplied type</li>\n<li><code>reload</code> - Whether to forcibly reload the request if it is already in the store, not supplying this\n   option will delegate to the store's CachePolicy, defaulting to <code>false</code> if none is configured.</li>\n<li><code>backgroundReload</code> - Whether to reload the request if it is already in the store, but to also resolve the\n   promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n   defaulting to <code>false</code> if none is configured.</li>\n<li><code>urlParamsSetting</code> - an object containing options for how to serialize the query params (see <code>buildQueryParams</code>)</li>\n</ul>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> { updateRecord } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/json-api/request'</span>;\n\n<span class=\"keyword\">const</span> person = store.<span class=\"title function_\">peekRecord</span>(<span class=\"string\">'person'</span>, <span class=\"string\">'1'</span>);\nperson.<span class=\"property\">name</span> = <span class=\"string\">'Chris'</span>;\n<span class=\"keyword\">const</span> options = <span class=\"title function_\">updateRecord</span>(person, { <span class=\"attr\">patch</span>: <span class=\"literal\">true</span> });\n<span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> store.<span class=\"title function_\">request</span>(options);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "updateRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/serialize.ts",
          "line": 23,
          "description": "<html><head></head><body><p>Serializes the current state of a resource or array of resources for use with POST or PUT requests.</p>\n</body></html>",
          "itemtype": "method",
          "name": "serializeResources",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "cache}",
              "description": "",
              "type": "Cache"
            },
            {
              "name": "identifier",
              "description": "",
              "type": "StableRecordIdentifier"
            }
          ],
          "return": {
            "description": "An object with a `data` property containing the serialized resource patch",
            "type": "Object"
          },
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        },
        {
          "file": "../packages/json-api/src/-private/serialize.ts",
          "line": 60,
          "description": "<html><head></head><body><p>Serializes changes to a resource for use with PATCH requests.</p>\n<p>Only attributes which are changed are serialized.\nOnly relationships which are changed are serialized.</p>\n<p>Collection relationships serialize the collection as a whole.</p>\n<p>If you would like to serialize updates to a collection more granularly\n(for instance, as operations) request the diff from the store and\nserialize as desired:</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>const relationshipDiffMap <span class=\"operator\">=</span> cache.changedRelationships(identifier)<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializePatch",
          "static": 1,
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "cache}",
              "description": "",
              "type": "Cache"
            },
            {
              "name": "identifier",
              "description": "",
              "type": "StableRecordIdentifier"
            }
          ],
          "return": {
            "description": "An object with a `data` property containing the serialized resource patch",
            "type": "Object"
          },
          "class": "@ember-data/json-api/request",
          "module": "@ember-data/json-api/request"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/json-api/request",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}