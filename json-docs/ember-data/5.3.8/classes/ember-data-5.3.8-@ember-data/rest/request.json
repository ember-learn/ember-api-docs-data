{
  "data": {
    "id": "ember-data-5.3.8-@ember-data/rest/request",
    "type": "class",
    "attributes": {
      "name": "@ember-data/rest/request",
      "shortname": "@ember-data/rest/request",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/rest/request",
      "namespace": "",
      "methods": [
        {
          "file": "../packages/rest/src/-private/builders/find-record.ts",
          "line": 16,
          "description": "Builds request options to fetch a single resource by a known id or identifier\nconfigured for the url and header expectations of most REST APIs.\n\n**Basic Usage**\n\n```ts\nimport { findRecord } from '@ember-data/rest/request';\n\nconst data = await store.request(findRecord('person', '1'));\n```\n\n**With Options**\n\n```ts\nimport { findRecord } from '@ember-data/rest/request';\n\nconst options = findRecord('person', '1', { include: ['pets', 'friends'] });\nconst data = await store.request(options);\n```\n\n**With an Identifier**\n\n```ts\nimport { findRecord } from '@ember-data/rest/request';\n\nconst options = findRecord({ type: 'person', id: '1' }, { include: ['pets', 'friends'] });\nconst data = await store.request(options);\n```\n\n**Supplying Options to Modify the Request Behavior**\n\nThe following options are supported:\n\n- `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n- `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n- `resourcePath` - The resource path to use for the request, defaults to pluralizing and camelCasing the supplied type\n- `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n     option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n- `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n     promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n     defaulting to `false` if none is configured.\n- `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n\n```ts\nimport { findRecord } from '@ember-data/rest/request';\n\nconst options = findRecord('person', '1', { include: ['pets', 'friends'] }, { namespace: 'api/v2' });\nconst data = await store.request(options);\n```",
          "itemtype": "method",
          "name": "findRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/rest/request",
          "module": "@ember-data/rest/request"
        },
        {
          "file": "../packages/rest/src/-private/builders/query.ts",
          "line": 13,
          "description": "Builds request options to query for resources, usually by a primary\ntype, configured for the url and header expectations of most REST APIs.\n\n**Basic Usage**\n\n```ts\nimport { query } from '@ember-data/rest/request';\n\nconst data = await store.request(query('person'));\n```\n\n**With Query Params**\n\n```ts\nimport { query } from '@ember-data/rest/request';\n\nconst options = query('person', { include: ['pets', 'friends'] });\nconst data = await store.request(options);\n```\n\n**Supplying Options to Modify the Request Behavior**\n\nThe following options are supported:\n\n- `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n- `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n- `resourcePath` - The resource path to use for the request, defaults to pluralizing and camelCasing the supplied type\n- `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n     option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n- `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n     promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n     defaulting to `false` if none is configured.\n- `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n\n```ts\nimport { query } from '@ember-data/rest/request';\n\nconst options = query('person', { include: ['pets', 'friends'] }, { reload: true });\nconst data = await store.request(options);\n```",
          "itemtype": "method",
          "name": "query",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "identifier",
              "description": ""
            },
            {
              "name": "query",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/rest/request",
          "module": "@ember-data/rest/request"
        },
        {
          "file": "../packages/rest/src/-private/builders/save-record.ts",
          "line": 24,
          "description": "Builds request options to delete record for resources,\nconfigured for the url, method and header expectations of REST APIs.\n\n**Basic Usage**\n\n```ts\nimport { deleteRecord } from '@ember-data/rest/request';\n\nconst person = store.peekRecord('person', '1');\n\n// mark record as deleted\nstore.deleteRecord(person);\n\n// persist deletion\nconst data = await store.request(deleteRecord(person));\n```\n\n**Supplying Options to Modify the Request Behavior**\n\nThe following options are supported:\n\n- `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n- `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n- `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n- `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n     option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n- `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n     promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n     defaulting to `false` if none is configured.\n- `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n\n```ts\nimport { deleteRecord } from '@ember-data/rest/request';\n\nconst person = store.peekRecord('person', '1');\n\n// mark record as deleted\nstore.deleteRecord(person);\n\n// persist deletion\nconst options = deleteRecord(person, { namespace: 'api/v1' });\nconst data = await store.request(options);\n```",
          "itemtype": "method",
          "name": "deleteRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/rest/request",
          "module": "@ember-data/rest/request"
        },
        {
          "file": "../packages/rest/src/-private/builders/save-record.ts",
          "line": 107,
          "description": "Builds request options to create new record for resources,\nconfigured for the url, method and header expectations of most REST APIs.\n\n**Basic Usage**\n\n```ts\nimport { createRecord } from '@ember-data/rest/request';\n\nconst person = store.createRecord('person', { name: 'Ted' });\nconst data = await store.request(createRecord(person));\n```\n\n**Supplying Options to Modify the Request Behavior**\n\nThe following options are supported:\n\n- `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n- `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n- `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n- `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n     option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n- `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n     promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n     defaulting to `false` if none is configured.\n- `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n\n```ts\nimport { createRecord } from '@ember-data/rest/request';\n\nconst person = store.createRecord('person', { name: 'Ted' });\nconst options = createRecord(person, { namespace: 'api/v1' });\nconst data = await store.request(options);\n```",
          "itemtype": "method",
          "name": "createRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/rest/request",
          "module": "@ember-data/rest/request"
        },
        {
          "file": "../packages/rest/src/-private/builders/save-record.ts",
          "line": 179,
          "description": "Builds request options to update existing record for resources,\nconfigured for the url, method and header expectations of most REST APIs.\n\n**Basic Usage**\n\n```ts\nimport { updateRecord } from '@ember-data/rest/request';\n\nconst person = store.peekRecord('person', '1');\nperson.name = 'Chris';\nconst data = await store.request(updateRecord(person));\n```\n\n**Supplying Options to Modify the Request Behavior**\n\nThe following options are supported:\n\n- `patch` - Allows caller to specify whether to use a PATCH request instead of a PUT request, defaults to `false`.\n- `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n- `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n- `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n- `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n     option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n- `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n     promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n     defaulting to `false` if none is configured.\n- `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n\n```ts\nimport { updateRecord } from '@ember-data/rest/request';\n\nconst person = store.peekRecord('person', '1');\nperson.name = 'Chris';\nconst options = updateRecord(person, { patch: true });\nconst data = await store.request(options);\n```",
          "itemtype": "method",
          "name": "updateRecord",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "record",
              "description": ""
            },
            {
              "name": "options",
              "description": ""
            }
          ],
          "class": "@ember-data/rest/request",
          "module": "@ember-data/rest/request"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/rest/request",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}