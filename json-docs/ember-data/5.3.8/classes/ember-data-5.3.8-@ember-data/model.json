{
  "data": {
    "id": "ember-data-5.3.8-@ember-data/model",
    "type": "class",
    "attributes": {
      "name": "@ember-data/model",
      "shortname": "@ember-data/model",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "methods": [
        {
          "file": "../packages/model/src/-private/attr.ts",
          "line": 183,
          "description": "<html><head></head><body><p><code>attr</code> defines an attribute on a <a href=\"/ember-data/release/classes/Model\">Model</a>.\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmberData ships with four basic transform types: <code>string</code>, <code>number</code>,\n<code>boolean</code> and <code>date</code>. You can define your own transforms by subclassing\n<a href=\"/ember-data/release/classes/Transform\">Transform</a>.</p>\n<p>Note that you cannot use <code>attr</code> to define an attribute of <code>id</code>.</p>\n<p><code>attr</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>defaultValue</code>: Pass a string or a function to be called to set the attribute\nto a default value if and only if the key is absent from the payload response.</li>\n</ul>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('string') username;\n  <span class=\"meta\">@attr</span>('string') email;\n  <span class=\"meta\">@attr</span>('boolean', { defaultValue: <span class=\"literal\">false</span> }) verified;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Default value can also be a function. This is useful it you want to return\na new object for each attribute.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('string') username;\n  <span class=\"meta\">@attr</span>('string') email;\n\n  <span class=\"meta\">@attr</span>({\n    defaultValue() {\n      <span class=\"keyword\">return</span> {};\n    }\n  })\n  settings;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>options</code> hash is passed as second argument to a transforms'\n<code>serialize</code> and <code>deserialize</code> method. This allows to configure a\ntransformation and adapt the corresponding value, based on the config:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('text', {\n    uppercase: <span class=\"literal\">true</span>\n  })\n  text;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/transforms/text.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TextTransform</span> {\n  <span class=\"title function_\">serialize</span>(<span class=\"params\">value, options</span>) {\n    <span class=\"keyword\">if</span> (options.<span class=\"property\">uppercase</span>) {\n      <span class=\"keyword\">return</span> value.<span class=\"title function_\">toUpperCase</span>();\n    }\n\n    <span class=\"keyword\">return</span> value;\n  }\n\n  <span class=\"title function_\">deserialize</span>(<span class=\"params\">value</span>) {\n    <span class=\"keyword\">return</span> value;\n  }\n\n  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\"></span>) {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">this</span>();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "attr",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "type",
              "description": "the attribute type",
              "type": "String|Object"
            },
            {
              "name": "options",
              "description": "a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Attribute"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/belongs-to.ts",
          "line": 113,
          "description": "<html><head></head><body><p><code>belongsTo</code> is used to define One-To-One and One-To-Many, and One-To-None\nrelationships on a <a href=\"/ember-data/release/classes/Model\">Model</a>.</p>\n<p><code>belongsTo</code> takes a configuration hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: (<em>required</em>) A boolean value used to declare whether this is a sync (false) or async (true) relationship.</li>\n<li><code>inverse</code>: (<em>required</em>)  A string used to identify the inverse property on a related model, or <code>null</code>.</li>\n<li><code>polymorphic</code>: (<em>optional</em>) A boolean value to mark the relationship as polymorphic</li>\n<li><code>as</code>: (<em>optional</em>) A string used to declare the abstract type \"this\" record satisfies for polymorphism.</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>To declare a <strong>one-to-many</strong> (or many-to-many) relationship, use\n<code>belongsTo</code> in combination with <code>hasMany</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/comment.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('post', { async: <span class=\"literal\">false</span>, inverse: 'comments' }) post;\n}\n\n<span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment', { async: <span class=\"literal\">false</span>, inverse: 'post' }) comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a <strong>one-to-one</strong> relationship with managed inverses, use <code>belongsTo</code> for both sides:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/author.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('address', { async: <span class=\"literal\">true</span>, inverse: 'owner' }) address;\n}\n\n<span class=\"comment\">// app/models/address.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('author', { async: <span class=\"literal\">true</span>, inverse: 'address' }) owner;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a <strong>one-to-one</strong> relationship without managed inverses, use <code>belongsTo</code> for both sides\nwith <code>null</code> as the inverse:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/author.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('address', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) address;\n}\n\n<span class=\"comment\">// app/models/address.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('author', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) owner;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a one-to-none relationship between two models, use\n<code>belongsTo</code> with inverse set to <code>null</code> on just one side::</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/person.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('person', { async: <span class=\"literal\">false</span>, inverse: <span class=\"literal\">null</span> }) bestFriend;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"sync-vs-async-relationships\">Sync vs Async Relationships</h4>\n<p>EmberData fulfills relationships using resource data available in\nthe cache.</p>\n<p>Sync relationships point directly to the known related resources.</p>\n<p>When a relationship is declared as async, if any of the known related\nresources have not been loaded, they will be fetched. The property\non the record when accessed provides a promise that resolves once\nall resources are loaded.</p>\n<p>Async relationships may take advantage of links. On access, if the related\nlink has not been loaded, or if any known resources are not available in\nthe cache, the fresh state will be fetched using the link.</p>\n<p>In contrast to async relationship, accessing a sync relationship\nwill error on access when any of the known related resources have\nnot been loaded.</p>\n<p>If you are using <code>links</code> with sync relationships, you have to use\nthe BelongsTo reference API to fetch or refresh related resources\nthat aren't loaded. For instance, for a <code>bestFriend</code> relationship:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>person<span class=\"selector-class\">.belongsTo</span>('bestFriend')<span class=\"selector-class\">.reload</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"polymorphic-relationships\">Polymorphic Relationships</h4>\n<p>To declare a polymorphic relationship, use <code>hasMany</code> with the <code>polymorphic</code>\noption set to <code>true</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/comment.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('commentable', { async: <span class=\"literal\">false</span>, inverse: 'comments', polymorphic: <span class=\"literal\">true</span> }) parent;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>'commentable'</code> here is referred to as the \"abstract type\" for the polymorphic\nrelationship.</p>\n<p>Polymorphic relationships with <code>inverse: null</code> will accept any type of record as their content.\nPolymorphic relationships with <code>inverse</code> set to a string will only accept records with a matching\ninverse relationships declaring itself as satisfying the abstract type.</p>\n<p>Below, 'as' is used to declare the that 'post' record satisfies the abstract type 'commentable'\nfor this relationship.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment', { async: <span class=\"literal\">false</span>, inverse: 'parent', as: 'commentable' }) comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note: every Model that declares an inverse to a polymorphic relationship must\ndeclare itself exactly the same. This is because polymorphism is based on structural\ntraits.</p>\n<p>Polymorphic to polymorphic relationships are supported. Both sides of the relationship\nmust be declared as polymorphic, and the <code>as</code> option must be used to declare the abstract\ntype each record satisfies on both sides.</p>\n</body></html>",
          "itemtype": "method",
          "name": "belongsTo",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "type",
              "description": "(optional) the name of the related resource",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "PropertyDescriptor"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/has-many.ts",
          "line": 94,
          "description": "<html><head></head><body><p><code>hasMany</code> is used to define Many-To-One and Many-To-Many, and Many-To-None\nrelationships on a <a href=\"/ember-data/release/classes/Model\">Model</a>.</p>\n<p><code>hasMany</code> takes a configuration hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: (<em>required</em>) A boolean value used to declare whether this is a sync (false) or async (true) relationship.</li>\n<li><code>inverse</code>: (<em>required</em>)  A string used to identify the inverse property on a related model, or <code>null</code>.</li>\n<li><code>polymorphic</code>: (<em>optional</em>) A boolean value to mark the relationship as polymorphic</li>\n<li><code>as</code>: (<em>optional</em>) A string used to declare the abstract type \"this\" record satisfies for polymorphism.</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>To declare a <strong>many-to-one</strong> (or one-to-many) relationship, use\n<code>belongsTo</code> in combination with <code>hasMany</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment', { async: <span class=\"literal\">false</span>, inverse: 'post' }) comments;\n}\n\n\n<span class=\"comment\">// app/models/comment.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('post', { async: <span class=\"literal\">false</span>, inverse: 'comments' }) post;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a <strong>many-to-many</strong> relationship with managed inverses, use <code>hasMany</code> for both sides:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('tag', { async: <span class=\"literal\">true</span>, inverse: 'posts' }) tags;\n}\n\n<span class=\"comment\">// app/models/tag.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tag</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('post', { async: <span class=\"literal\">true</span>, inverse: 'tags' }) posts;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a <strong>many-to-many</strong> relationship without managed inverses, use <code>hasMany</code> for both sides\nwith <code>null</code> as the inverse:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('tag', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) tags;\n}\n\n<span class=\"comment\">// app/models/tag.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tag</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('post', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) posts;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To declare a many-to-none relationship between two models, use\n<code>hasMany</code> with inverse set to <code>null</code> on just one side::</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('category', { async: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> }) categories;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"sync-vs-async-relationships\">Sync vs Async Relationships</h4>\n<p>EmberData fulfills relationships using resource data available in\nthe cache.</p>\n<p>Sync relationships point directly to the known related resources.</p>\n<p>When a relationship is declared as async, if any of the known related\nresources have not been loaded, they will be fetched. The property\non the record when accessed provides a promise that resolves once\nall resources are loaded.</p>\n<p>Async relationships may take advantage of links. On access, if the related\nlink has not been loaded, or if any known resources are not available in\nthe cache, the fresh state will be fetched using the link.</p>\n<p>In contrast to async relationship, accessing a sync relationship\nwill error on access when any of the known related resources have\nnot been loaded.</p>\n<p>If you are using <code>links</code> with sync relationships, you have to use\nthe HasMany reference API to fetch or refresh related resources\nthat aren't loaded. For instance, for a <code>comments</code> relationship:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>post<span class=\"selector-class\">.hasMany</span>('comments')<span class=\"selector-class\">.reload</span>();</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"polymorphic-relationships\">Polymorphic Relationships</h4>\n<p>To declare a polymorphic relationship, use <code>hasMany</code> with the <code>polymorphic</code>\noption set to <code>true</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/comment.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('commentable', { async: <span class=\"literal\">false</span>, inverse: 'comments', polymorphic: <span class=\"literal\">true</span> }) parent;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p><code>'commentable'</code> here is referred to as the \"abstract type\" for the polymorphic\nrelationship.</p>\n<p>Polymorphic relationships with <code>inverse: null</code> will accept any type of record as their content.\nPolymorphic relationships with <code>inverse</code> set to a string will only accept records with a matching\ninverse relationships declaring itself as satisfying the abstract type.</p>\n<p>Below, 'as' is used to declare the that 'post' record satisfies the abstract type 'commentable'\nfor this relationship.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// app/models/post.js</span>\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasMany</span>('comment', { async: <span class=\"literal\">false</span>, inverse: 'parent', as: 'commentable' }) comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note: every Model that declares an inverse to a polymorphic relationship must\ndeclare itself exactly the same. This is because polymorphism is based on structural\ntraits.</p>\n<p>Polymorphic to polymorphic relationships are supported. Both sides of the relationship\nmust be declared as polymorphic, and the <code>as</code> option must be used to declare the abstract\ntype each record satisfies on both sides.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasMany",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "type",
              "description": "(optional) the name of the related resource",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "PropertyDescriptor"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}