{
  "data": {
    "id": "ember-data-5.3.8-RESTSerializer",
    "type": "class",
    "attributes": {
      "name": "RESTSerializer",
      "shortname": "RESTSerializer",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/serializer/rest",
      "namespace": "",
      "file": "../serializer/src/rest.js",
      "line": 17,
      "description": "<html><head></head><body><blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n <p>\n   ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n   If starting a new app or thinking of implementing a new adapter, consider writing a\n   <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n </p>\n </blockquote>\n\n<p> Normally, applications will use the <code>RESTSerializer</code> by implementing\n the <code>normalize</code> method.</p>\n<p> This allows you to do whatever kind of munging you need and is\n especially useful if your server is inconsistent and you need to\n do munging differently for many different kinds of responses.</p>\n<p> See the <code>normalize</code> documentation for more information.</p>\n<h2 id=\"across-the-board-normalization\">Across the Board Normalization</h2>\n<p> There are also a number of hooks that you might find useful to define\n across-the-board rules for your payload. These rules will be useful\n if your server is consistent, or if you're building an adapter for\n an infrastructure service, like Firebase, and want to encode service\n conventions.</p>\n<p> For example, if all of your keys are underscored and all-caps, but\n otherwise consistent with the names you use in your models, you\n can implement across-the-board rules for how to convert an attribute\n name in your model to a key in your JSON.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n<span class=\"keyword\">import</span> { underscore } from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  keyForAttribute(attr, method) {\n    <span class=\"keyword\">return</span> underscore(attr).toUpperCase();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> You can also implement <code>keyForRelationship</code>, which takes the name\n of the relationship as the first parameter, the kind of\n relationship (<code>hasMany</code> or <code>belongsTo</code>) as the second parameter, and\n the method (<code>serialize</code> or <code>deserialize</code>) as the third parameter.\n  @mainName @ember-data/serializer/rest\n  @tag main</p>\n</body></html>",
      "_main": true,
      "access": "public",
      "tagname": "",
      "extends": "JSONSerializer",
      "methods": [
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 70,
          "description": "<html><head></head><body><p><code>keyForPolymorphicType</code> can be used to define a custom key when\nserializing and deserializing a polymorphic type. By default, the\nreturned key is <code>${key}Type</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  keyForPolymorphicType(key, relationship) {\n    let relationshipKey = <span class=\"keyword\">this</span>.keyForRelationship(key);\n\n    <span class=\"keyword\">return</span> '<span class=\"class\"><span class=\"keyword\">type</span><span class=\"title\">-</span>' <span class=\"title\">+</span> <span class=\"title\">relationshipKey</span></span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "keyForPolymorphicType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 102,
          "description": "<html><head></head><body><p>Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.</p>\n<p>It takes the type of the record that is being normalized\n(as a Model class), the property where the hash was\noriginally found, and the hash to normalize.</p>\n<p>For example, if you have a payload that looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"post\"</span>: {\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Rails is omakase\"</span>,\n    <span class=\"string\">\"comments\"</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span> ]\n  },\n  <span class=\"string\">\"comments\"</span>: [{\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"FIRST\"</span>\n  }, {\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,\n    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"Rails is unagi\"</span>\n  }]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>normalize</code> method will be called three times:</p>\n<ul>\n<li>With <code>App.Post</code>, <code>\"posts\"</code> and <code>{ id: 1, title: \"Rails is omakase\", ... }</code></li>\n<li>With <code>App.Comment</code>, <code>\"comments\"</code> and <code>{ id: 1, body: \"FIRST\" }</code></li>\n<li>With <code>App.Comment</code>, <code>\"comments\"</code> and <code>{ id: 2, body: \"Rails is unagi\" }</code></li>\n</ul>\n<p>You can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations. You will only need to implement\n<code>normalize</code> and manipulate the payload as desired.</p>\n<p>For example, if the <code>IDs</code> under <code>\"comments\"</code> are provided as <code>_id</code> instead of\n<code>id</code>, you can specify how to normalize just the comments:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  normalize(model, hash, prop) {\n    <span class=\"keyword\">if</span> (prop === 'comments') {\n      hash.id = hash._id;\n      delete hash._id;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.normalize(...arguments);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>On each call to the <code>normalize</code> method, the third parameter (<code>prop</code>) is always\none of the keys that were in the original payload or in the result of another\nnormalization as <code>normalizeResponse</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 170,
          "description": "<html><head></head><body><p>Normalizes an array of resource payloads and returns a JSON-API Document\nwith primary data and, if any, included data as <code>{ data, included }</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_normalizeArray",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "arrayHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 221,
          "itemtype": "method",
          "name": "_normalizeResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            },
            {
              "name": "isSingle",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 363,
          "description": "<html><head></head><body><p>This method allows you to push a payload containing top-level\ncollections of records organized per type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"posts\"</span>: [{\n    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"1\"</span>,\n    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Rails is omakase\"</span>,\n    <span class=\"string\">\"author\"</span>, <span class=\"string\">\"1\"</span>,\n    <span class=\"string\">\"comments\"</span>: [ <span class=\"string\">\"1\"</span> ]\n  }],\n  <span class=\"string\">\"comments\"</span>: [{\n    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"1\"</span>,\n    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"FIRST\"</span>\n  }],\n  <span class=\"string\">\"users\"</span>: [{\n    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"1\"</span>,\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"@d2h\"</span>\n  }]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>It will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.</p>\n</body></html>",
          "itemtype": "method",
          "name": "pushPayload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 424,
          "description": "<html><head></head><body><p>This method is used to convert each JSON root key in the payload\ninto a modelName that it can use to look up the appropriate model for\nthat part of the payload.</p>\n<p>For example, your server may send a model name that does not correspond with\nthe name of the model in your app. Let's take a look at an example model,\nand an example payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span> from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>  {\n    <span class=\"string\">\"blog/post\"</span>: {\n      <span class=\"string\">\"id\"</span>: <span class=\"string\">\"1</span>\n    }\n  }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Ember Data is going to normalize the payload's root key for the modelName. As a result,\nit will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n(or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\nbecause it cannot find the \"blog/post\" model.</p>\n<p>Since we want to remove this namespace, we can define a serializer for the application that will\nremove \"blog/\" from the payload key whenver it's encountered by Ember Data:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  modelNameFromPayloadKey(payloadKey) {\n    <span class=\"keyword\">if</span> (payloadKey === 'blog/post') {\n      <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.modelNameFromPayloadKey(payloadKey.replace('blog/', ''));\n    } <span class=\"keyword\">else</span> {\n     <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.modelNameFromPayloadKey(payloadKey);\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>After refreshing, Ember Data will appropriately look up the \"post\" model.</p>\n<p>By default the modelName for a model is its\nname in dasherized form. This means that a payload key like \"blogPost\" would be\nnormalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\ncan use the correct inflection to do this for you. Most of the time, you won't\nneed to override <code>modelNameFromPayloadKey</code> for this purpose.</p>\n</body></html>",
          "itemtype": "method",
          "name": "modelNameFromPayloadKey",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model's modelName",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 488,
          "description": "<html><head></head><body><p>Called when a record is saved in order to convert the\nrecord into JSON.</p>\n<p>By default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.</p>\n<p>For example, consider this model:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr, belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span> title\n  <span class=\"meta\">@attr</span> body\n\n  <span class=\"meta\">@belongsTo</span>('user') author\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The default serialization would create a JSON object like:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"title\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Rails is unagi\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"body\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Rails? Omakase? O_O\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"author\"</span><span class=\"punctuation\">:</span> <span class=\"number\">12</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, attributes are passed through as-is, unless\nyou specified an attribute type (<code>attr('date')</code>). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.</p>\n<p>By default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.</p>\n<h2 id=\"ids\">IDs</h2>\n<p><code>serialize</code> takes an options hash with a single option:\n<code>includeId</code>. If this option is <code>true</code>, <code>serialize</code> will,\nby default include the ID in the JSON object it builds.</p>\n<p>The adapter passes in <code>includeId: true</code> when serializing\na record for <code>createRecord</code>, but not for <code>updateRecord</code>.</p>\n<h2 id=\"customization\">Customization</h2>\n<p>Your server may expect a different JSON format than the\nbuilt-in serialization format.</p>\n<p>In that case, you can implement <code>serialize</code> yourself and\nreturn a JSON hash of your choosing.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> RESTSerializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/rest'</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> ApplicationSerializer extends RESTSerializer {\n  serialize(<span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>) {\n    let <span class=\"type\">json</span> = {\n      POST_TTL: <span class=\"keyword\">snapshot</span>.attr(<span class=\"string\">'title'</span>),\n      POST_BDY: <span class=\"keyword\">snapshot</span>.attr(<span class=\"string\">'body'</span>),\n      POST_CMS: <span class=\"keyword\">snapshot</span>.hasMany(<span class=\"string\">'comments'</span>, { ids: <span class=\"keyword\">true</span> })\n    };\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">options</span>.includeId) {\n      <span class=\"type\">json</span>.POST_ID_ = <span class=\"keyword\">snapshot</span>.id;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"type\">json</span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"customizing-an-app-wide-serializer\">Customizing an App-Wide Serializer</h2>\n<p>If you want to define a serializer for your entire\napplication, you'll probably want to use <code>eachAttribute</code>\nand <code>eachRelationship</code> on the record.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> RESTSerializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/rest'</span>;\n<span class=\"keyword\">import</span> { pluralize } <span class=\"keyword\">from</span> <span class=\"string\">'&lt;app-name&gt;/utils/string-utils'</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> ApplicationSerializer extends RESTSerializer {\n  serialize(<span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>) {\n    let <span class=\"type\">json</span> = {};\n\n    <span class=\"keyword\">snapshot</span>.eachAttribute(<span class=\"keyword\">function</span>(<span class=\"type\">name</span>) {\n      <span class=\"type\">json</span>[serverAttributeName(<span class=\"type\">name</span>)] = <span class=\"keyword\">snapshot</span>.attr(<span class=\"type\">name</span>);\n    });\n\n    <span class=\"keyword\">snapshot</span>.eachRelationship(<span class=\"keyword\">function</span>(<span class=\"type\">name</span>, relationship) {\n      <span class=\"keyword\">if</span> (relationship.kind === <span class=\"string\">'hasMany'</span>) {\n        <span class=\"type\">json</span>[serverHasManyName(<span class=\"type\">name</span>)] = <span class=\"keyword\">snapshot</span>.hasMany(<span class=\"type\">name</span>, { ids: <span class=\"keyword\">true</span> });\n      }\n    });\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">options</span>.includeId) {\n      <span class=\"type\">json</span>.ID_ = <span class=\"keyword\">snapshot</span>.id;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"type\">json</span>;\n  }\n}\n\n<span class=\"keyword\">function</span> serverAttributeName(<span class=\"keyword\">attribute</span>) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">attribute</span>.underscore().toUpperCase();\n}\n\n<span class=\"keyword\">function</span> serverHasManyName(<span class=\"type\">name</span>) {\n  <span class=\"keyword\">return</span> serverAttributeName(singularize(<span class=\"type\">name</span>)) + \"_IDS\";\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This serializer will generate JSON that looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"TITLE\"</span>: <span class=\"string\">\"Rails is omakase\"</span>,\n  <span class=\"string\">\"BODY\"</span>: <span class=\"string\">\"Yep. Omakase.\"</span>,\n  <span class=\"string\">\"COMMENT_IDS\"</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"tweaking-the-default-json\">Tweaking the Default JSON</h2>\n<p>If you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  serialize(snapshot, options) {\n    let json = <span class=\"keyword\">super</span>.serialize(snapshot, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    <span class=\"keyword\">return</span> json;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "json",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 645,
          "description": "<html><head></head><body><p>You can use this method to customize the root keys serialized into the JSON.\nThe hash property should be modified by reference (possibly using something like _.extend)\nBy default the REST Serializer sends the modelName of a model, which is a camelized\nversion of the name.</p>\n<p>For example, your server may expect underscored root objects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n<span class=\"keyword\">import</span> { underscore } from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  serializeIntoHash(data, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">record</span>, <span class=\"title\">options</span>) </span>{\n    let root = underscore(<span class=\"keyword\">type</span>.modelName);\n    data[root] = <span class=\"keyword\">this</span>.serialize(record, options);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeIntoHash",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 677,
          "description": "<html><head></head><body><p>You can use <code>payloadKeyFromModelName</code> to override the root key for an outgoing\nrequest. By default, the RESTSerializer returns a camelized version of the\nmodel's name.</p>\n<p>For a model called TacoParty, its <code>modelName</code> would be the string <code>taco-party</code>. The RESTSerializer\nwill send it to the server with <code>tacoParty</code> as the root key in the JSON payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"tacoParty\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span>\n    <span class=\"attr\">\"id\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"1\"</span><span class=\"punctuation\">,</span>\n    <span class=\"attr\">\"location\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Matthew Beale's House\"</span>\n  <span class=\"punctuation\">}</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>For example, your server may expect dasherized root objects:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n<span class=\"keyword\">import</span> { dasherize } from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  payloadKeyFromModelName(modelName) {\n    <span class=\"keyword\">return</span> dasherize(modelName);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Given a <code>TacoParty</code> model, calling <code>save</code> on it would produce an outgoing\nrequest like:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"taco-party\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span>\n    <span class=\"attr\">\"id\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"1\"</span><span class=\"punctuation\">,</span>\n    <span class=\"attr\">\"location\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Matthew Beale's House\"</span>\n  <span class=\"punctuation\">}</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "payloadKeyFromModelName",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 728,
          "description": "<html><head></head><body><p>You can use this method to customize how polymorphic objects are serialized.\nBy default the REST Serializer creates the key by appending <code>Type</code> to\nthe attribute and value from the model's camelcased model name.</p>\n</body></html>",
          "itemtype": "method",
          "name": "serializePolymorphicType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/rest.js",
          "line": 751,
          "description": "<html><head></head><body><p>You can use this method to customize how a polymorphic relationship should\nbe extracted.</p>\n</body></html>",
          "itemtype": "method",
          "name": "extractPolymorphicRelationship",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "relationshipType",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/rest"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 189,
          "description": "<html><head></head><body><p>Given a subclass of <code>Model</code> and a JSON object this method will\niterate through each attribute of the <code>Model</code> and invoke the\n<code>Transform#deserialize</code> method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's <code>normalize</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "applyTransforms",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "data",
              "description": "The data to transform",
              "type": "Object"
            }
          ],
          "return": {
            "description": "data The transformed data object",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 218,
          "description": "<html><head></head><body><p>The <code>normalizeResponse</code> method is used to normalize a payload from the\nserver to a JSON-API Document.</p>\n<p><a href=\"http://jsonapi.org/format/#document-structure\">http://jsonapi.org/format/#document-structure</a></p>\n<p>This method delegates to a more specific normalize method based on\nthe <code>requestType</code>.</p>\n<p>To override this method with a custom one, make sure to call\n<code>return super.normalizeResponse(store, primaryModelClass, payload, id, requestType)</code> with your\npre-processed data.</p>\n<p>Here's an example of using <code>normalizeResponse</code> manually:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"title\">socket</span>.on('message', function(message) {\n  <span class=\"keyword\">let</span> <span class=\"class\"><span class=\"keyword\">data</span> = message.<span class=\"keyword\">data</span>;</span>\n  <span class=\"keyword\">let</span> modelClass = store.modelFor(<span class=\"class\"><span class=\"keyword\">data</span>.modelName);</span>\n  <span class=\"keyword\">let</span> serializer = store.serializerFor(<span class=\"class\"><span class=\"keyword\">data</span>.modelName);</span>\n  <span class=\"keyword\">let</span> normalized = serializer.normalizeSingleResponse(store, modelClass, <span class=\"class\"><span class=\"keyword\">data</span>, <span class=\"keyword\">data</span>.id);</span>\n\n  store.push(normalized);\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 279,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>findRecord</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindRecordResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 297,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>queryRecord</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeQueryRecordResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 315,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>findAll</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindAllResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 333,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>findBelongsTo</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindBelongsToResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 351,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>findHasMany</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindHasManyResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 369,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>findMany</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindManyResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 387,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>query</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeQueryResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 405,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>createRecord</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeCreateRecordResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 423,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>deleteRecord</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeDeleteRecordResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 441,
          "description": "<html><head></head><body><p>Called by the default normalizeResponse implementation when the\ntype of request is <code>updateRecord</code></p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeUpdateRecordResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 459,
          "description": "<html><head></head><body><p>normalizeUpdateRecordResponse, normalizeCreateRecordResponse and\nnormalizeDeleteRecordResponse delegate to this method by default.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeSaveResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 477,
          "description": "<html><head></head><body><p>normalizeQueryResponse and normalizeFindRecordResponse delegate to this\nmethod by default.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeSingleResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 495,
          "description": "<html><head></head><body><p>normalizeQueryResponse, normalizeFindManyResponse, and normalizeFindHasManyResponse delegate\nto this method by default.</p>\n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeArrayResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 513,
          "itemtype": "method",
          "name": "_normalizeResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            },
            {
              "name": "isSingle",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 562,
          "description": "<html><head></head><body><p>Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.</p>\n<p>It takes the type of the record that is being normalized\n(as a Model class), the property where the hash was\noriginally found, and the hash to normalize.</p>\n<p>You can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">JSON</span>Serializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/json'</span>;\n<span class=\"keyword\">import</span> { underscore } <span class=\"keyword\">from</span> <span class=\"string\">'&lt;app-name&gt;/utils/string-utils'</span>;\n<span class=\"keyword\">import</span> { get } <span class=\"keyword\">from</span> <span class=\"string\">'@ember/object'</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">JSONSerializer</span> {\n  <span class=\"title function_\">normalize</span>(<span class=\"params\">typeClass, hash</span>) {\n    <span class=\"keyword\">let</span> fields = typeClass.<span class=\"property\">fields</span>;\n\n    fields.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">type, field</span>) {\n      <span class=\"keyword\">let</span> payloadField = <span class=\"title function_\">underscore</span>(field);\n      <span class=\"keyword\">if</span> (field === payloadField) { <span class=\"keyword\">return</span>; }\n\n      hash[field] = hash[payloadField];\n      <span class=\"keyword\">delete</span> hash[payloadField];\n    });\n\n    <span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"title function_\">normalize</span>(...<span class=\"variable language_\">arguments</span>);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 630,
          "description": "<html><head></head><body><p>Returns the resource's ID.</p>\n</body></html>",
          "itemtype": "method",
          "name": "extractId",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 645,
          "description": "<html><head></head><body><p>Returns the resource's attributes formatted as a JSON-API \"attributes object\".</p>\n<p><a href=\"http://jsonapi.org/format/#document-resource-object-attributes\">http://jsonapi.org/format/#document-resource-object-attributes</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "extractAttributes",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 670,
          "description": "<html><head></head><body><p>Returns a relationship formatted as a JSON-API \"relationship object\".</p>\n<p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "extractRelationship",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "relationshipModelName",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 705,
          "description": "<html><head></head><body><p>Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".</p>\n<p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p>\n<p><code>relationshipOptions</code> is a hash which contains more information about the\npolymorphic relationship which should be extracted:</p>\n<ul>\n<li><code>resourceHash</code> complete hash of the resource the relationship should be\nextracted from</li>\n<li><code>relationshipKey</code> key under which the value for the relationship is\nextracted from the resourceHash</li>\n<li><code>relationshipMeta</code> meta information about the relationship</li>\n</ul>\n</body></html>",
          "itemtype": "method",
          "name": "extractPolymorphicRelationship",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "relationshipModelName",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 729,
          "description": "<html><head></head><body><p>Returns the resource's relationships formatted as a JSON-API \"relationships object\".</p>\n<p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p>\n</body></html>",
          "itemtype": "method",
          "name": "extractRelationships",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 801,
          "description": "<html><head></head><body><p>Dasherizes the model name in the payload</p>\n</body></html>",
          "itemtype": "method",
          "name": "modelNameFromPayloadKey",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model's modelName",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 813,
          "itemtype": "method",
          "name": "normalizeRelationships",
          "access": "private",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 836,
          "itemtype": "method",
          "name": "normalizeUsingDeclaredMapping",
          "access": "private",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 869,
          "description": "<html><head></head><body><p>Looks up the property key that was set by the custom <code>attr</code> mapping\npassed to the serializer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_getMappedKey",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "key",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 908,
          "description": "<html><head></head><body><p>Check attrs.key.serialize property to inform if the <code>key</code>\ncan be serialized</p>\n</body></html>",
          "itemtype": "method",
          "name": "_canSerialize",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the key can be serialized",
            "type": "Boolean"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 923,
          "description": "<html><head></head><body><p>When attrs.key.serialize is set to true then\nit takes priority over the other checks and the related\nattribute/relationship will be serialized</p>\n</body></html>",
          "itemtype": "method",
          "name": "_mustSerialize",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the key must be serialized",
            "type": "Boolean"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 939,
          "description": "<html><head></head><body><p>Check if the given hasMany relationship should be serialized</p>\n<p>By default only many-to-many and many-to-none relationships are serialized.\nThis could be configured per relationship by Serializer's <code>attrs</code> object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "shouldSerializeHasMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "RelationshipSchema"
            }
          ],
          "return": {
            "description": "true if the hasMany relationship should be serialized",
            "type": "Boolean"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 962,
          "description": "<html><head></head><body><p>Called when a record is saved in order to convert the\nrecord into JSON.</p>\n<p>By default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.</p>\n<p>For example, consider this model:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr, belongsTo } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span> title;\n  <span class=\"meta\">@attr</span> body;\n\n  <span class=\"meta\">@belongsTo</span>('user') author;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The default serialization would create a JSON object like:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"title\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Rails is unagi\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"body\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Rails? Omakase? O_O\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"author\"</span><span class=\"punctuation\">:</span> <span class=\"number\">12</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>By default, attributes are passed through as-is, unless\nyou specified an attribute type (<code>attr('date')</code>). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.</p>\n<p>By default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.</p>\n<h2 id=\"ids\">IDs</h2>\n<p><code>serialize</code> takes an options hash with a single option:\n<code>includeId</code>. If this option is <code>true</code>, <code>serialize</code> will,\nby default include the ID in the JSON object it builds.</p>\n<p>The adapter passes in <code>includeId: true</code> when serializing\na record for <code>createRecord</code>, but not for <code>updateRecord</code>.</p>\n<h2 id=\"customization\">Customization</h2>\n<p>Your server may expect a different JSON format than the\nbuilt-in serialization format.</p>\n<p>In that case, you can implement <code>serialize</code> yourself and\nreturn a JSON hash of your choosing.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> JSONSerializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/json'</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> PostSerializer extends JSONSerializer {\n  serialize(<span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>) {\n    let <span class=\"type\">json</span> = {\n      POST_TTL: <span class=\"keyword\">snapshot</span>.attr(<span class=\"string\">'title'</span>),\n      POST_BDY: <span class=\"keyword\">snapshot</span>.attr(<span class=\"string\">'body'</span>),\n      POST_CMS: <span class=\"keyword\">snapshot</span>.hasMany(<span class=\"string\">'comments'</span>, { ids: <span class=\"keyword\">true</span> })\n    };\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">options</span>.includeId) {\n      <span class=\"type\">json</span>.POST_ID_ = <span class=\"keyword\">snapshot</span>.id;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"type\">json</span>;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"customizing-an-app-wide-serializer\">Customizing an App-Wide Serializer</h2>\n<p>If you want to define a serializer for your entire\napplication, you'll probably want to use <code>eachAttribute</code>\nand <code>eachRelationship</code> on the record.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> JSONSerializer <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/serializer/json'</span>;\n<span class=\"keyword\">import</span> { singularize } <span class=\"keyword\">from</span> <span class=\"string\">'&lt;app-name&gt;/utils/string-utils'</span>;\n\nexport <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> ApplicationSerializer extends JSONSerializer {\n  serialize(<span class=\"keyword\">snapshot</span>, <span class=\"keyword\">options</span>) {\n    let <span class=\"type\">json</span> = {};\n\n    <span class=\"keyword\">snapshot</span>.eachAttribute((<span class=\"type\">name</span>) =&gt; {\n      <span class=\"type\">json</span>[serverAttributeName(<span class=\"type\">name</span>)] = <span class=\"keyword\">snapshot</span>.attr(<span class=\"type\">name</span>);\n    });\n\n    <span class=\"keyword\">snapshot</span>.eachRelationship((<span class=\"type\">name</span>, relationship) =&gt; {\n      <span class=\"keyword\">if</span> (relationship.kind === <span class=\"string\">'hasMany'</span>) {\n        <span class=\"type\">json</span>[serverHasManyName(<span class=\"type\">name</span>)] = <span class=\"keyword\">snapshot</span>.hasMany(<span class=\"type\">name</span>, { ids: <span class=\"keyword\">true</span> });\n      }\n    });\n\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">options</span>.includeId) {\n      <span class=\"type\">json</span>.ID_ = <span class=\"keyword\">snapshot</span>.id;\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"type\">json</span>;\n  }\n}\n\n<span class=\"keyword\">function</span> serverAttributeName(<span class=\"keyword\">attribute</span>) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">attribute</span>.underscore().toUpperCase();\n}\n\n<span class=\"keyword\">function</span> serverHasManyName(<span class=\"type\">name</span>) {\n  <span class=\"keyword\">return</span> serverAttributeName(singularize(<span class=\"type\">name</span>)) + \"_IDS\";\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This serializer will generate JSON that looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"TITLE\"</span>: <span class=\"string\">\"Rails is omakase\"</span>,\n  <span class=\"string\">\"BODY\"</span>: <span class=\"string\">\"Yep. Omakase.\"</span>,\n  <span class=\"string\">\"COMMENT_IDS\"</span>: [ <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span> ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h2 id=\"tweaking-the-default-json\">Tweaking the Default JSON</h2>\n<p>If you just want to do some small tweaks on the default JSON,\nyou can call <code>super.serialize</code> first and make the tweaks on\nthe returned JSON.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  serialize(snapshot, options) {\n    let json = <span class=\"keyword\">super</span>.serialize(...arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    <span class=\"keyword\">return</span> json;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "json",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1140,
          "description": "<html><head></head><body><p>You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\nThe hash property should be modified by reference.</p>\n<p>For example, your server may expect underscored root objects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/rest';\n<span class=\"keyword\">import</span> { underscoren} from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTSerializer</span> </span>{\n  serializeIntoHash(data, <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">snapshot</span>, <span class=\"title\">options</span>) </span>{\n    let root = underscore(<span class=\"keyword\">type</span>.modelName);\n    data[root] = <span class=\"keyword\">this</span>.serialize(snapshot, options);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeIntoHash",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1173,
          "description": "<html><head></head><body><p><code>serializeAttribute</code> can be used to customize how <code>attr</code>\nproperties are serialized</p>\n<p>For example if you wanted to ensure all your attributes were always\nserialized as properties on an <code>attributes</code> object you could\nwrite:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  serializeAttribute(snapshot, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    <span class=\"keyword\">super</span>.serializeAttribute(snapshot, json.attributes, key, attributes);\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeAttribute",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "attribute",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1221,
          "description": "<html><head></head><body><p><code>serializeBelongsTo</code> can be used to customize how <code>belongsTo</code>\nproperties are serialized.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  serializeBelongsTo(snapshot, json, relationship) {\n    let key = relationship.name;\n    let belongsTo = snapshot.belongsTo(key);\n\n    key = <span class=\"keyword\">this</span>.keyForRelationship ? <span class=\"keyword\">this</span>.keyForRelationship(key, <span class=\"string\">\"belongsTo\"</span>, <span class=\"string\">\"serialize\"</span>) : key;\n\n    json[key] = !belongsTo ? <span class=\"literal\">null</span> : belongsTo.record.toJSON();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeBelongsTo",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1275,
          "description": "<html><head></head><body><p><code>serializeHasMany</code> can be used to customize how <code>hasMany</code>\nproperties are serialized.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  serializeHasMany(snapshot, json, relationship) {\n    let key = relationship.name;\n    <span class=\"keyword\">if</span> (key === 'comments') {\n      <span class=\"keyword\">return</span>;\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">super</span>.serializeHasMany(...arguments);\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeHasMany",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1322,
          "description": "<html><head></head><body><p>You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n<code>{ polymorphic: true }</code> is pass as the second argument to the\n<code>belongsTo</code> function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  serializePolymorphicType(snapshot, json, relationship) {\n    let key = relationship.name;\n    let belongsTo = snapshot.belongsTo(key);\n\n    key = <span class=\"keyword\">this</span>.keyForAttribute ? <span class=\"keyword\">this</span>.keyForAttribute(key, 'serialize') : key;\n\n    <span class=\"keyword\">if</span> (!belongsTo) {\n      json[key + '_type'] = <span class=\"literal\">null</span>;\n    } <span class=\"keyword\">else</span> {\n      json[key + '_type'] = belongsTo.modelName;\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializePolymorphicType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1357,
          "description": "<html><head></head><body><p><code>extractMeta</code> is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the <code>meta</code> property of the payload object.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  extractMeta(store, typeClass, payload) {\n    <span class=\"keyword\">if</span> (payload &amp;&amp; payload.hasOwnProperty('_pagination')) {\n      let meta = payload._pagination;\n      delete payload._pagination;\n      <span class=\"keyword\">return</span> meta;\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "extractMeta",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "modelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1392,
          "description": "<html><head></head><body><p><code>extractErrors</code> is used to extract model errors when a call\nto <code>Model#save</code> fails with an <code>InvalidError</code>. By default\nEmber Data expects error information to be located on the <code>errors</code>\nproperty of the payload object.</p>\n<p>This serializer expects this <code>errors</code> object to be an Array similar\nto the following, compliant with the <a href=\"https://jsonapi.org/format/#errors\">https://jsonapi.org/format/#errors</a> specification:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"comment\">\"errors\"</span>: [\n    {\n      <span class=\"comment\">\"detail\"</span>: <span class=\"comment\">\"This username is already taken!\"</span>,\n      <span class=\"comment\">\"source\"</span>: {\n        <span class=\"comment\">\"pointer\"</span>: <span class=\"comment\">\"data/attributes/username\"</span>\n      }\n    }, {\n      <span class=\"comment\">\"detail\"</span>: <span class=\"comment\">\"Doesn't look like a valid email.\"</span>,\n      <span class=\"comment\">\"source\"</span>: {\n        <span class=\"comment\">\"pointer\"</span>: <span class=\"comment\">\"data/attributes/email\"</span>\n      }\n    }\n  ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The key <code>detail</code> provides a textual description of the problem.\nAlternatively, the key <code>title</code> can be used for the same purpose.</p>\n<p>The nested keys <code>source.pointer</code> detail which specific element\nof the request data was invalid.</p>\n<p>Note that JSON-API also allows for object-level errors to be placed\nin an object with pointer <code>data</code>, signifying that the problem\ncannot be traced to a specific attribute:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"errors\"</span>: [\n    {\n      <span class=\"string\">\"detail\"</span>: <span class=\"string\">\"Some generic non property error message\"</span>,\n      <span class=\"string\">\"source\"</span>: {\n        <span class=\"string\">\"pointer\"</span>: <span class=\"string\">\"data\"</span>\n      }\n    }\n  ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When turn into a <code>Errors</code> object, you can read these errors\nthrough the property <code>base</code>:</p>\n<div class=\"highlight handlebars\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"template-tag\">{{#<span class=\"name\"><span class=\"built_in\">each</span></span> @model.errors.base <span class=\"keyword\">as</span> |error|}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span>\n    </span><span class=\"template-variable\">{{<span class=\"name\">error.message</span>}}</span><span class=\"language-xml\">\n  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\n</span><span class=\"template-tag\">{{/<span class=\"name\"><span class=\"built_in\">each</span></span>}}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Example of alternative implementation, overriding the default\nbehavior to deal with a different format of errors:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  extractErrors(store, typeClass, payload, id) {\n    <span class=\"keyword\">if</span> (payload &amp;&amp; typeof payload === '<span class=\"class\"><span class=\"keyword\">object</span>' <span class=\"title\">&amp;&amp;</span> <span class=\"title\">payload</span>.<span class=\"title\">_problems</span>) </span>{\n      payload = payload._problems;\n      <span class=\"keyword\">this</span>.normalizeErrors(typeClass, payload);\n    }\n    <span class=\"keyword\">return</span> payload;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "extractErrors",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "(String|Number)"
            }
          ],
          "return": {
            "description": "json The deserialized errors",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1527,
          "description": "<html><head></head><body><p><code>keyForAttribute</code> can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n<span class=\"keyword\">import</span> { underscore } from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  keyForAttribute(attr, method) {\n    <span class=\"keyword\">return</span> underscore(attr).toUpperCase();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "keyForAttribute",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1554,
          "description": "<html><head></head><body><p><code>keyForRelationship</code> can be used to define a custom key when\nserializing and deserializing relationship properties. By default\n<code>JSONSerializer</code> does not provide an implementation of this method.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n<span class=\"keyword\">import</span> { underscore } from '&lt;app-name&gt;/utils/string-utils';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  keyForRelationship(key, relationship, method) {\n    <span class=\"keyword\">return</span> `rel_${underscore(key)}`;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "keyForRelationship",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1583,
          "description": "<html><head></head><body><p><code>keyForLink</code> can be used to define a custom key when deserializing link\nproperties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "keyForLink",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "kind",
              "description": "`belongsTo` or `hasMany`",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 1599,
          "itemtype": "method",
          "name": "transformFor",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "attributeType",
              "description": "",
              "type": "String"
            },
            {
              "name": "skipAssertion",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "transform",
            "type": "Transform"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/index.ts",
          "line": 164,
          "description": "<html><head></head><body><p>The <code>normalizeResponse</code> method is used to normalize a payload from the\nserver to a JSON-API Document.</p>\n<p><a href=\"http://jsonapi.org/format/#document-structure\">http://jsonapi.org/format/#document-structure</a></p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>Serializer.extend({\n  normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n    <span class=\"keyword\">if</span> (requestType === <span class=\"string\">'findRecord'</span>) {\n      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.normalize(primaryModelClass, payload);\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">return</span> payload.reduce(function(documentHash, item) {\n        let { <span class=\"keyword\">data</span>, included } = <span class=\"keyword\">this</span>.normalize(primaryModelClass, item);\n        documentHash.included.push(...included);\n        documentHash.<span class=\"keyword\">data</span>.push(<span class=\"keyword\">data</span>);\n        <span class=\"keyword\">return</span> documentHash;\n      }, { <span class=\"keyword\">data</span>: [], included: [] })\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeResponse",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer",
          "inherited": true,
          "inheritedFrom": "Serializer"
        },
        {
          "file": "../packages/serializer/src/index.ts",
          "line": 200,
          "description": "<html><head></head><body><p>The <code>serialize</code> method is used when a record is saved in order to convert\nthe record into the form that your external data source expects.</p>\n<p><code>serialize</code> takes an optional <code>options</code> hash with a single option:</p>\n<ul>\n<li><code>includeId</code>: If this is <code>true</code>, <code>serialize</code> should include the ID\nin the serialized object it builds.</li>\n</ul>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre>Serializer.extend({\n  serialize<span class=\"built_in\">(snapshot</span>, options) {\n    <span class=\"keyword\">let</span> json = {\n     <span class=\"built_in\"> id</span>:<span class=\"built_in\"> snapshot</span><span class=\"built_in\">.id</span>\n    };\n\n   <span class=\"built_in\"> snapshot</span>.eachAttribute(<span class=\"built_in\">(key</span>, <span class=\"keyword\">attribute</span>) =&gt; {\n      json<span class=\"built_in\">[key</span>] =<span class=\"built_in\"> snapshot</span>.attr<span class=\"built_in\">(key</span>);\n    });\n\n   <span class=\"built_in\"> snapshot</span>.eachRelationship(<span class=\"built_in\">(key</span>, relationship) =&gt; {\n      <span class=\"keyword\">if</span> (relationship.kind === <span class=\"string\">'belongsTo'</span>) {\n        json<span class=\"built_in\">[key</span>] =<span class=\"built_in\"> snapshot</span>.belongsTo<span class=\"built_in\">(key</span>, {<span class=\"built_in\"> id</span>:<span class=\"built_in\"> true</span> });\n      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relationship.kind === <span class=\"string\">'hasMany'</span>) {\n        json<span class=\"built_in\">[key</span>] =<span class=\"built_in\"> snapshot</span>.hasMany<span class=\"built_in\">(key</span>, { ids:<span class=\"built_in\"> true</span> });\n      }\n    });\n\n    <span class=\"keyword\">return</span> json;\n  },\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serialize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer",
          "inherited": true,
          "inheritedFrom": "Serializer"
        },
        {
          "file": "../packages/serializer/src/index.ts",
          "line": 242,
          "description": "<html><head></head><body><p>The <code>normalize</code> method is used to convert a payload received from your\nexternal data source into the normalized form <code>store.push()</code> expects. You\nshould override this method, munge the hash and return the normalized\npayload.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"type\">Serializer</span>.extend({\n  normalize(modelClass, resourceHash) {\n    <span class=\"keyword\">let</span> <span class=\"class\"><span class=\"keyword\">data</span> = {\n      <span class=\"title\">id</span>:            <span class=\"title\">resourceHash</span>.<span class=\"title\">id</span>,\n      <span class=\"title\">type</span>:          <span class=\"title\">modelClass</span>.<span class=\"title\">modelName</span>,\n      <span class=\"title\">attributes</span>:    <span class=\"title\">resourceHash</span>\n    };</span>\n    return { <span class=\"class\"><span class=\"keyword\">data</span>: <span class=\"keyword\">data</span> };</span>\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "Model"
            },
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "RESTSerializer",
          "module": "@ember-data/serializer",
          "inherited": true,
          "inheritedFrom": "Serializer"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/serializer/src/json.js",
          "line": 95,
          "description": "<html><head></head><body><p>The <code>primaryKey</code> is used when serializing and deserializing\ndata. Ember Data always uses the <code>id</code> property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\n<code>primaryKey</code> property to match the <code>primaryKey</code> of your external\nstore.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  primaryKey = '_id'\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "primaryKey",
          "type": "{String}",
          "access": "public",
          "tagname": "",
          "default": "'id'",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/json.js",
          "line": 120,
          "description": "<html><head></head><body><p>The <code>attrs</code> object can be used to declare a simple mapping between\nproperty names on <code>Model</code> records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty <code>key</code> can also be used to designate the attribute's key on\nthe response payload.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from '<span class=\"meta\">@ember</span>-data/model';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('string') firstName;\n  <span class=\"meta\">@attr</span>('string') lastName;\n  <span class=\"meta\">@attr</span>('string') occupation;\n  <span class=\"meta\">@attr</span>('boolean') admin;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  attrs = {\n    admin: 'is_admin',\n    occupation: { key: 'career' }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also remove attributes and relationships by setting the <code>serialize</code>\nkey to <code>false</code> in your mapping object.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">JSONSerializer</span> from '<span class=\"meta\">@ember</span>-data/serializer/json';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JSONSerializer</span> </span>{\n  attrs = {\n    admin: { serialize: <span class=\"literal\">false</span> },\n    occupation: { key: 'career' }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When serialized:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"firstName\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Harry\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"lastName\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Houdini\"</span><span class=\"punctuation\">,</span>\n  <span class=\"attr\">\"career\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"magician\"</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that the <code>admin</code> is now not included in the payload.</p>\n<p>Setting <code>serialize</code> to <code>true</code> enforces serialization for hasMany\nrelationships even if it's neither a many-to-many nor many-to-none\nrelationship.</p>\n</body></html>",
          "itemtype": "property",
          "name": "attrs",
          "access": "public",
          "tagname": "",
          "type": "{Object}",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer/json",
          "inherited": true,
          "inheritedFrom": "JSONSerializer"
        },
        {
          "file": "../packages/serializer/src/index.ts",
          "line": 142,
          "description": "<html><head></head><body><p>The <code>store</code> property is the application's <code>store</code> that contains\nall records. It can be used to look up serializers for other model\ntypes that may be nested inside the payload response.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"title class_\">Serializer</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"title function_\">extractRelationship</span>(<span class=\"params\">relationshipModelName, relationshipHash</span>) {\n    <span class=\"keyword\">let</span> modelClass = <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">modelFor</span>(relationshipModelName);\n    <span class=\"keyword\">let</span> relationshipSerializer = <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">serializerFor</span>(relationshipModelName);\n    <span class=\"keyword\">return</span> relationshipSerializer.<span class=\"title function_\">normalize</span>(modelClass, relationshipHash);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "store",
          "type": "{Store}",
          "access": "public",
          "tagname": "",
          "class": "RESTSerializer",
          "module": "@ember-data/serializer",
          "inherited": true,
          "inheritedFrom": "Serializer"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-data-5.3.8-JSONSerializer",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/serializer/rest",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}