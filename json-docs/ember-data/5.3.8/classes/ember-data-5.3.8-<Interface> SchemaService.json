{
  "data": {
    "id": "ember-data-5.3.8-<Interface> SchemaService",
    "type": "class",
    "attributes": {
      "name": "<Interface> SchemaService",
      "shortname": "<Interface> SchemaService",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/store",
      "namespace": "",
      "file": "../store/src/-types/q/schema-service.ts",
      "line": 25,
      "description": "<html><head></head><body><p>The SchemaService provides the ability to query for information about the structure\nof any resource type.</p>\n<p>Applications can provide any implementation of the SchemaService they please so long\nas it conforms to this interface.</p>\n<p>The design of the service means that schema information could be lazily populated,\nderived-on-demand, or progressively enhanced during the course of an application's runtime.\nThe primary requirement is merely that any information the service needs to correctly\nrespond to an inquest is available by the time it is asked.</p>\n<p>The <code>@ember-data/model</code> package provides an implementation of this service which\nmakes use of your model classes as the source of information to respond to queries\nabout resource schema. While this is useful, this may not be ideal for your application.\nFor instance, Schema information could be sideloaded or pre-flighted for API calls,\nresulting in no need to bundle and ship potentially large and expensive JSON\nor large Javascript based Models to pull information from.</p>\n<p>To register a custom schema implementation, implement the store's <code>createSchemaService</code>\nhook to return an instance of your service.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Store</span> from '<span class=\"meta\">@ember</span>-data/store';\n<span class=\"keyword\">import</span> <span class=\"type\">CustomSchemas</span> from './custom-schemas';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Store</span> </span>{\n  createSchemaService() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">CustomSchemas</span>();\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>At runtime, both the <code>Store</code> and the <code>CacheCapabilitiesManager</code> provide\naccess to this service via the <code>schema</code> property.</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n <span class=\"meta\">@service</span> store;\n\n get fields() {\n   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.store\n     .schema\n     .fields(<span class=\"keyword\">this</span>.args.dataType);\n }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 77,
          "description": "<html><head></head><body><p>DEPRECATED - use <code>hasResource</code> instead</p>\n<p>Queries whether the SchemaService recognizes <code>type</code> as a resource type</p>\n</body></html>",
          "itemtype": "method",
          "name": "doesTypeExist",
          "access": "public",
          "tagname": "",
          "deprecated": true,
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 90,
          "description": "<html><head></head><body><p>Queries whether the SchemaService recognizes <code>type</code> as a resource type</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasResource",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "resource",
              "type": "StableRecordIdentifier| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 100,
          "description": "<html><head></head><body><p>Queries whether the SchemaService recognizes <code>type</code> as a resource trait</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasTrait",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 110,
          "description": "<html><head></head><body><p>Queries whether the given resource has the given trait</p>\n</body></html>",
          "itemtype": "method",
          "name": "resourceHasTrait",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "resource",
              "type": "StableRecordIdentifier| type: string"
            },
            {
              "name": "trait",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 121,
          "description": "<html><head></head><body><p>Queries for the fields of a given resource type or resource identity.</p>\n<p>Should error if the resource type is not recognized.</p>\n</body></html>",
          "itemtype": "method",
          "name": "fields",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "resource",
              "type": "StableRecordIdentifier| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "Map<string, FieldSchema>"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 133,
          "description": "<html><head></head><body><p>Returns the transformation registered with the name provided\nby <code>field.type</code>. Validates that the field is a valid transformable.</p>\n</body></html>",
          "itemtype": "method",
          "name": "transformation",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "field",
              "type": "TransformableField| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "Transformation"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 144,
          "description": "<html><head></head><body><p>Returns the hash function registered with the name provided\nby <code>field.type</code>. Validates that the field is a valid HashField.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hashFn",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "field",
              "type": "HashField| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "HashFn"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 155,
          "description": "<html><head></head><body><p>Returns the derivation registered with the name provided\nby <code>field.type</code>. Validates that the field is a valid DerivedField.</p>\n</body></html>",
          "itemtype": "method",
          "name": "derivation",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "field",
              "type": "DerivedField| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "Derivation"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 166,
          "description": "<html><head></head><body><p>Returns the schema for the provided resource type.</p>\n</body></html>",
          "itemtype": "method",
          "name": "resource",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "}",
              "description": "resource",
              "type": "StableRecordIdentifier| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "ResourceSchema"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 176,
          "description": "<html><head></head><body><p>Enables registration of multiple ResourceSchemas at once.</p>\n<p>This can be useful for either pre-loading schema information\nor for registering schema information delivered by API calls\nor other sources just-in-time.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerResources",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "schemas",
              "description": ""
            }
          ],
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 189,
          "description": "<html><head></head><body><p>Enables registration of a single ResourceSchema.</p>\n<p>This can be useful for either pre-loading schema information\nor for registering schema information delivered by API calls\nor other sources just-in-time.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerResource",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "schema",
              "description": "",
              "type": "ResourceSchema"
            }
          ],
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 202,
          "description": "<html><head></head><body><p>Enables registration of a transformation.</p>\n<p>The transformation can later be retrieved by the name\nattached to it's <code>[Type]</code> property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerTransformations",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "transform",
              "description": "",
              "type": "Transformation"
            }
          ],
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 214,
          "description": "<html><head></head><body><p>Enables registration of a derivation.</p>\n<p>The derivation can later be retrieved by the name\nattached to it's <code>[Type]</code> property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerDerivations",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "derivation",
              "description": "",
              "type": "Derivation"
            }
          ],
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 226,
          "description": "<html><head></head><body><p>Enables registration of a hashing function</p>\n<p>The hashing function can later be retrieved by the name\nattached to it's <code>[Type]</code> property.</p>\n</body></html>",
          "itemtype": "method",
          "name": "registerHashFn",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "hashfn",
              "description": "",
              "type": "HashFn"
            }
          ],
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 238,
          "description": "<html><head></head><body><p>DEPRECATED - use <code>fields</code> instead</p>\n<p>Returns definitions for all properties of the specified resource\nthat are considered \"attributes\". Generally these are properties\nthat are not related to book-keeping state on the client and do\nnot represent a linkage to another resource.</p>\n<p>The return value should be a dictionary of key:value pairs\nwhere the <code>key</code> is the attribute or property's name and <code>value</code>\nis an object with at least the property <code>name</code> which should also\nmatch <code>key</code>.</p>\n<p>Optionally, this object may also specify <code>type</code>, which should\nbe a string reference to a <code>transform</code>, and <code>options</code> which\nshould be dictionary in which any key:value pairs are permissable.</p>\n<p>For instance, when using <code>@ember-data/model</code>, the following attribute\ndefinition:</p>\n<div class=\"highlight typescript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>('string', { defaultValue: 'hello' }) greeting;\n  <span class=\"meta\">@attr</span>('date') birthday;\n  <span class=\"meta\">@attr</span> firstName;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Would be returned as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>{\n  greeting: { name: <span class=\"string\">'greeting'</span>, type: <span class=\"string\">'string'</span>, options: { defaultValue: <span class=\"string\">'hello'</span> } },\n  birthday: { name: <span class=\"string\">'birthday'</span>, type: <span class=\"string\">'date'</span> },\n  firstName: { name: <span class=\"string\">'firstName'</span> }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "attributesDefinitionFor",
          "access": "public",
          "tagname": "",
          "deprecated": true,
          "params": [
            {
              "name": "}",
              "description": "identifier",
              "type": "RecordIdentifier| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "AttributesSchema"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        },
        {
          "file": "../packages/store/src/-types/q/schema-service.ts",
          "line": 284,
          "description": "<html><head></head><body><p>DEPRECATED - use <code>fields</code> instead</p>\n<p>Returns definitions for all properties of the specified resource\nthat are considered \"relationships\". Generally these are properties\nthat represent a linkage to another resource.</p>\n<p>The return value should be a dictionary of key:value pairs\nwhere the <code>key</code> is the relationship or property's name and <code>value</code>\nis an object with at least the following properties:</p>\n<ul>\n<li><p><code>name</code> which should also match the <code>key</code> used in the dictionary.</p>\n</li>\n<li><p><code>kind</code> which should be either <code>belongsTo</code> or <code>hasMany</code></p>\n</li>\n<li><p><code>type</code> which should be the related resource's string \"type\"</p>\n</li>\n<li><p><code>options</code> which should be a dictionary allowing any key but with\n at least the below keys present.</p>\n</li>\n<li><p><code>options.async</code> a boolean representing whether data for this relationship is\n   typically loaded on-demand.</p>\n</li>\n<li><p><code>options.inverse</code> a string or null representing the field name / key of the\ncorresponding relationship on the inverse resource.</p>\n</li>\n</ul>\n<p>Additionally the following options properties are optional. See <a href=\"https://rfcs.emberjs.com/id/0793-polymporphic-relations-without-inheritance\">Polymorphic Relationships</a></p>\n<ul>\n<li><code>options.polymorphic</code> a boolean representing whether multiple resource types\n can be used to satisfy this relationship.</li>\n<li><code>options.as</code> a string representing the abstract type that the concrete side of\n a relationship must specify when fulfilling a polymorphic inverse.</li>\n</ul>\n<p>For example, the following Model using @ember-data/model would generate this relationships\ndefinition by default:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsTo</span>('user', { async: <span class=\"literal\">false</span>, inverse: <span class=\"literal\">null</span> }) bestFriend;\n  <span class=\"meta\">@hasMany</span>('user', { async: <span class=\"literal\">true</span>, inverse: 'friends' }) friends;\n  <span class=\"meta\">@hasMany</span>('pet', { async: <span class=\"literal\">false</span>, polymorphic: <span class=\"literal\">true</span>, inverse: 'owner' }) pets;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Which would be returned as</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">bestFriend:</span> {\n    <span class=\"attr\">name:</span> <span class=\"string\">'bestFriend'</span>,\n    <span class=\"attr\">kind:</span> <span class=\"string\">'belongsTo'</span>,\n    <span class=\"attr\">type:</span> <span class=\"string\">'user'</span>,\n    <span class=\"attr\">options:</span> {\n      <span class=\"attr\">async:</span> <span class=\"literal\">false</span>,\n      <span class=\"attr\">inverse:</span> <span class=\"literal\">null</span>\n    }\n  },\n  <span class=\"attr\">friends:</span> {\n    <span class=\"attr\">name:</span> <span class=\"string\">'friends'</span>,\n    <span class=\"attr\">kind:</span> <span class=\"string\">'hasMany'</span>,\n    <span class=\"attr\">type:</span> <span class=\"string\">'user'</span>,\n    <span class=\"attr\">options:</span> {\n      <span class=\"attr\">async:</span> <span class=\"literal\">true</span>,\n      <span class=\"attr\">inverse:</span> <span class=\"string\">'friends'</span>\n    }\n  },\n  <span class=\"attr\">pets:</span> {\n    <span class=\"attr\">name:</span> <span class=\"string\">'pets'</span>,\n    <span class=\"attr\">kind:</span> <span class=\"string\">'hasMany'</span>,\n    <span class=\"attr\">type:</span> <span class=\"string\">'pet'</span>,\n    <span class=\"attr\">options:</span> {\n      <span class=\"attr\">async:</span> <span class=\"literal\">false</span>,\n      <span class=\"attr\">polymorphic:</span> <span class=\"literal\">true</span>,\n      <span class=\"attr\">inverse:</span> <span class=\"string\">'owner'</span>\n    }\n  },\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "relationshipsDefinitionFor",
          "access": "public",
          "tagname": "",
          "deprecated": true,
          "params": [
            {
              "name": "}",
              "description": "identifier",
              "type": "RecordIdentifier| type: string"
            }
          ],
          "return": {
            "description": "",
            "type": "RelationshipsSchema"
          },
          "class": "<Interface> SchemaService",
          "module": "@ember-data/store"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-5.3.8-@ember-data/store",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}