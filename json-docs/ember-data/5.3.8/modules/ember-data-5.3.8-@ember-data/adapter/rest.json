{
  "data": {
    "id": "ember-data-5.3.8-@ember-data/adapter/rest",
    "type": "module",
    "attributes": {
      "name": "@ember-data/adapter/rest",
      "submodules": {},
      "elements": {},
      "fors": {
        "@ember-data/adapter/rest": 1
      },
      "namespaces": {},
      "tag": "main",
      "file": "../adapter/src/rest.ts",
      "line": 68,
      "description": "<html><head></head><body><blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n <p>\n   ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n   If starting a new app or thinking of implementing a new adapter, consider writing a\n   <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n </p>\n </blockquote>\n\n<p> The REST adapter allows your store to communicate with an HTTP server by\n transmitting JSON via XHR.</p>\n<p> This adapter is designed around the idea that the JSON exchanged with\n the server should be conventional. It builds URLs in a manner that follows\n the structure of most common REST-style web services.</p>\n<h2 id=\"success-and-failure\">Success and failure</h2>\n<p> The REST adapter will consider a success any response with a status code\n of the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other\n status code will be considered a failure.</p>\n<p> On success, the request promise will be resolved with the full response\n payload.</p>\n<p> Failed responses with status code 422 (\"Unprocessable Entity\") will be\n considered \"invalid\". The response will be discarded, except for the\n <code>errors</code> key. The request promise will be rejected with a <code>InvalidError</code>.\n This error object will encapsulate the saved <code>errors</code> value.</p>\n<p> Any other status codes will be treated as an \"adapter error\". The request\n promise will be rejected, similarly to the \"invalid\" case, but with\n an instance of <code>AdapterError</code> instead.</p>\n<h2 id=\"json-structure\">JSON Structure</h2>\n<p> The REST adapter expects the JSON returned from your server to follow\n these conventions.</p>\n<h3 id=\"object-root\">Object Root</h3>\n<p> The JSON payload should be an object that contains the record inside a\n root property. For example, in response to a <code>GET</code> request for\n <code>/posts/1</code>, the JSON should look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"comment\">\"posts\"</span>: {\n    <span class=\"comment\">\"id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"comment\">\"title\"</span>: <span class=\"comment\">\"I'm Running to Reform the W3C\"</span>,\n    <span class=\"comment\">\"author\"</span>: <span class=\"comment\">\"Yehuda Katz\"</span>\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Similarly, in response to a <code>GET</code> request for <code>/posts</code>, the JSON should\n look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"posts\"</span>: [\n    {\n      <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,\n      <span class=\"string\">\"title\"</span>: <span class=\"string\">\"I'm Running to Reform the W3C\"</span>,\n      <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Yehuda Katz\"</span>\n    },\n    {\n      <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,\n      <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Rails is omakase\"</span>,\n      <span class=\"string\">\"author\"</span>: <span class=\"string\">\"D2H\"</span>\n    }\n  ]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Note that the object root can be pluralized for both a single-object response\n and an array response: the REST adapter is not strict on this. Further, if the\n HTTP server responds to a <code>GET</code> request to <code>/posts/1</code> (e.g. the response to a\n <code>findRecord</code> query) with more than one object in the array, Ember Data will\n only display the object with the matching ID.</p>\n<h3 id=\"conventional-names\">Conventional Names</h3>\n<p> Attribute names in your JSON payload should be the camelCased versions of\n the attributes in your Ember.js models.</p>\n<p> For example, if you have a <code>Person</code> model:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/person.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>import Model, { attr } <span class=\"keyword\">from</span> <span class=\"string\">'@ember-data/model'</span>;\n\nexport <span class=\"keyword\">default</span> Model.<span class=\"title function_ invoke__\">extend</span>({\n  <span class=\"attr\">firstName</span>: <span class=\"title function_ invoke__\">attr</span>(<span class=\"string\">'string'</span>),\n  <span class=\"attr\">lastName</span>: <span class=\"title function_ invoke__\">attr</span>(<span class=\"string\">'string'</span>),\n  <span class=\"attr\">occupation</span>: <span class=\"title function_ invoke__\">attr</span>(<span class=\"string\">'string'</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> The JSON returned should look like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"people\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span>\n    <span class=\"attr\">\"id\"</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span>\n    <span class=\"attr\">\"firstName\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Zaphod\"</span><span class=\"punctuation\">,</span>\n    <span class=\"attr\">\"lastName\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Beeblebrox\"</span><span class=\"punctuation\">,</span>\n    <span class=\"attr\">\"occupation\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"President\"</span>\n  <span class=\"punctuation\">}</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"relationships\">Relationships</h4>\n<p> Relationships are usually represented by ids to the record in the\n relationship. The related records can then be sideloaded in the\n response under a key for the type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"string\">\"posts\"</span>: {\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>,\n    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"I'm Running to Reform the W3C\"</span>,\n    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Yehuda Katz\"</span>,\n    <span class=\"string\">\"comments\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]\n  },\n  <span class=\"string\">\"comments\"</span>: [{\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"User 1\"</span>,\n    <span class=\"string\">\"message\"</span>: <span class=\"string\">\"First!\"</span>,\n  }, {\n    <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,\n    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"User 2\"</span>,\n    <span class=\"string\">\"message\"</span>: <span class=\"string\">\"Good Luck!\"</span>,\n  }]\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> If the records in the relationship are not known when the response\n is serialized it's also possible to represent the relationship as a\n URL using the <code>links</code> key in the response. Ember Data will fetch\n this URL to resolve the relationship when it is accessed for the\n first time.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"comment\">\"posts\"</span>: {\n    <span class=\"comment\">\"id\"</span>: <span class=\"number\">5</span>,\n    <span class=\"comment\">\"title\"</span>: <span class=\"comment\">\"I'm Running to Reform the W3C\"</span>,\n    <span class=\"comment\">\"author\"</span>: <span class=\"comment\">\"Yehuda Katz\"</span>,\n    <span class=\"comment\">\"links\"</span>: {\n      <span class=\"comment\">\"comments\"</span>: <span class=\"comment\">\"/posts/5/comments\"</span>\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"errors\">Errors</h3>\n<p> If a response is considered a failure, the JSON payload is expected to include\n a top-level key <code>errors</code>, detailing any specific issues. For example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"punctuation\">{</span>\n  <span class=\"attr\">\"errors\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span>\n    <span class=\"attr\">\"msg\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Something went wrong\"</span>\n  <span class=\"punctuation\">}</span>\n<span class=\"punctuation\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> This adapter does not make any assumptions as to the format of the <code>errors</code>\n object. It will simply be passed along as is, wrapped in an instance\n of <code>InvalidError</code> or <code>AdapterError</code>. The serializer can interpret it\n afterwards.</p>\n<h2 id=\"customization\">Customization</h2>\n<h3 id=\"endpoint-path-customization\">Endpoint path customization</h3>\n<p> Endpoint paths can be prefixed with a <code>namespace</code> by setting the namespace\n property on the adapter:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from '<span class=\"meta\">@ember</span>-data/adapter/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  namespace = 'api/<span class=\"number\">1</span>';\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p> Requests for the <code>Person</code> model would now target <code>/api/1/people/1</code>.</p>\n<h3 id=\"host-customization\">Host customization</h3>\n<p> An adapter can target other hosts by setting the <code>host</code> property.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from '<span class=\"meta\">@ember</span>-data/adapter/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  host = 'https:<span class=\"comment\">//api.example.com';</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"headers-customization\">Headers customization</h3>\n<p> Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary\n headers can be set as key/value pairs on the <code>RESTAdapter</code>'s <code>headers</code>\n object and EmberData will send them along with each ajax request.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">RESTAdapter</span> from '<span class=\"meta\">@ember</span>-data/adapter/rest';\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RESTAdapter</span> </span>{\n  get headers() {\n    <span class=\"keyword\">return</span> {\n      '<span class=\"type\">API_KEY</span>': 'secret key',\n      '<span class=\"type\">ANOTHER_HEADER</span>': '<span class=\"type\">Some</span> header value'\n    };\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "itemtype": "main",
      "parent": null,
      "publicclasses": [
        "RESTAdapter"
      ],
      "privateclasses": [],
      "staticfunctions": {},
      "allstaticfunctions": {},
      "version": "5.3.8"
    },
    "relationships": {
      "classes": {
        "data": []
      },
      "project-version": {
        "data": {
          "id": "ember-data-5.3.8",
          "type": "project-version"
        }
      }
    }
  }
}