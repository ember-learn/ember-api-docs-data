{
  "data": {
    "id": "ember-data-2.1.0-DS.InvalidError",
    "type": "class",
    "attributes": {
      "name": "DS.InvalidError",
      "shortname": "DS.InvalidError",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "packages/ember-data/lib/system/model/errors/invalid.js",
      "line": 3,
      "description": "<html><head></head><body><p>A <code>DS.InvalidError</code> is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually this means a\nrecord failed some form of server side validation. When a promise\nfrom an adapter is rejected with a <code>DS.InvalidError</code> the record will\ntransition to the <code>invalid</code> state and the errors will be set to the\n<code>errors</code> property on the record.</p>\n<p>For Ember Data to correctly map errors to their corresponding\nproperties on the model, Ember Data expects each error to be\nnamespaced under a key that matches the property name. For example\nif you had a Post model that looked like this.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  title: DS.attr(<span class=\"string\">&apos;string&apos;</span>),\n  content: DS.attr(<span class=\"string\">&apos;string&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To show an error from the server related to the <code>title</code> and\n<code>content</code> properties your adapter could return a promise that\nrejects with a <code>DS.InvalidError</code> object that looks like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Ember</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember&apos;</span>;\n<span class=\"keyword\">import</span> <span class=\"variable constant_\">DS</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"variable constant_\">DS</span>.<span class=\"property\">RESTAdapter</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">updateRecord</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) {\n    <span class=\"comment\">// Fictional adapter that always rejects</span>\n    <span class=\"keyword\">return</span> <span class=\"title class_\">Ember</span>.<span class=\"property\">RSVP</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"variable constant_\">DS</span>.<span class=\"title class_\">InvalidError</span>({\n      <span class=\"attr\">title</span>: [<span class=\"string\">&apos;Must be unique&apos;</span>],\n      <span class=\"attr\">content</span>: [<span class=\"string\">&apos;Must not be blank&apos;</span>],\n    }));\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Your backend may use different property names for your records the\nstore will attempt extract and normalize the errors using the\nserializer&apos;s <code>extractErrors</code> method before the errors get added to\nthe the model. As a result, it is safe for the <code>InvalidError</code> to\nwrap the error payload unaltered.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/adapters/application.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"title class_\">Ember</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember&apos;</span>;\n<span class=\"keyword\">import</span> <span class=\"variable constant_\">DS</span> <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"variable constant_\">DS</span>.<span class=\"property\">RESTAdapter</span>.<span class=\"title function_\">extend</span>({\n  <span class=\"attr\">ajaxError</span>: <span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>) {\n    <span class=\"keyword\">var</span> error = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_super</span>(jqXHR);\n\n    <span class=\"comment\">// 422 is used by this fictional server to signal a validation error</span>\n    <span class=\"keyword\">if</span> (jqXHR &amp;&amp; jqXHR.<span class=\"property\">status</span> === <span class=\"number\">422</span>) {\n      <span class=\"keyword\">var</span> jsonErrors = <span class=\"title class_\">Ember</span>.<span class=\"property\">$</span>.<span class=\"title function_\">parseJSON</span>(jqXHR.<span class=\"property\">responseText</span>);\n      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"variable constant_\">DS</span>.<span class=\"title class_\">InvalidError</span>(jsonErrors);\n    } <span class=\"keyword\">else</span> {\n      <span class=\"comment\">// The ajax request failed however it is not a result of this</span>\n      <span class=\"comment\">// record being in an invalid state so we do not return a</span>\n      <span class=\"comment\">// `InvalidError` object.</span>\n      <span class=\"keyword\">return</span> error;\n    }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.1.0-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.1.0",
          "type": "project-version"
        }
      }
    }
  }
}