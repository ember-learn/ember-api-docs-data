{
  "data": {
    "id": "ember-data-2.0.1-DS.EmbeddedRecordsMixin",
    "type": "class",
    "attributes": {
      "name": "DS.EmbeddedRecordsMixin",
      "shortname": "DS.EmbeddedRecordsMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
      "line": 5,
      "description": "<html><head></head><body><h2 id=\"using-embedded-records\">Using Embedded Records</h2>\n<p><code>DS.EmbeddedRecordsMixin</code> supports serializing embedded records.</p>\n<p>To set up embedded records, include the mixin when extending a serializer\nthen define and configure embedded (model) relationships.</p>\n<p>Below is an example of a per-type serializer (&apos;post&apos; type).</p>\n<div class=\"highlight app/serializers/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: <span class=\"string\">&apos;always&apos;</span> },\n    comments: { serialize: <span class=\"string\">&apos;ids&apos;</span> }\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that this use of <code>{ embedded: &apos;always&apos; }</code> is unrelated to\nthe <code>{ embedded: &apos;always&apos; }</code> that is defined as an option on <code>DS.attr</code> as part of\ndefining a model while working with the ActiveModelSerializer.  Nevertheless,\nusing <code>{ embedded: &apos;always&apos; }</code> as an option to DS.attr is not a valid way to setup\nembedded records.</p>\n<p>The <code>attrs</code> option for a resource <code>{ embedded: &apos;always&apos; }</code> is shorthand for:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attribute\">serialize</span>: <span class=\"string\">&apos;records&apos;</span>,\n  deserialize: <span class=\"string\">&apos;records&apos;</span>\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h3 id=\"configuring-attrs\">Configuring Attrs</h3>\n<p>A resource&apos;s <code>attrs</code> option may be set to use <code>ids</code>, <code>records</code> or false for the\n<code>serialize</code>  and <code>deserialize</code> settings.</p>\n<p>The <code>attrs</code> property can be set on the ApplicationSerializer or a per-type\nserializer.</p>\n<p>In the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is <code>deserialize: &apos;records&apos;</code>, there is no need to use <code>ids</code> when\nextracting as that is the default behavior without this mixin if you are using\nthe vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while\nserializing <code>serialize: &apos;records&apos;</code> is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using <code>serialize: &apos;ids&apos;</code>. If you\ndo not want the relationship sent at all, you can use <code>serialize: false</code>.</p>\n<h3 id=\"embeddedrecordsmixin-defaults\">EmbeddedRecordsMixin defaults</h3>\n<p>If you do not overwrite <code>attrs</code> for a specific relationship, the <code>EmbeddedRecordsMixin</code>\nwill behave in the following way:</p>\n<p>BelongsTo: <code>{ serialize: &apos;id&apos;, deserialize: &apos;id&apos; }</code>\nHasMany:   <code>{ serialize: false, deserialize: &apos;ids&apos; }</code></p>\n<h3 id=\"model-relationships\">Model Relationships</h3>\n<p>Embedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as <code>belongsTo</code> and <code>hasMany</code>, you\nshould not both specify <code>async:true</code> and also indicate through the serializer&apos;s\n<code>attrs</code> attribute that the related model should be embedded for deserialization.\nIf a model is declared embedded for deserialization (<code>embedded: &apos;always&apos;</code>,\n<code>deserialize: &apos;record&apos;</code> or <code>deserialize: &apos;records&apos;</code>), then do not use <code>async:true</code>.</p>\n<p>To successfully extract and serialize embedded records the model relationships\nmust be setup correcty See the\n<a href=\"/guides/models/defining-models/#toc_defining-relationships\">defining relationships</a>\nsection of the <strong>Defining Models</strong> guide page.</p>\n<p>Records without an <code>id</code> property are not considered embedded records, model\ninstances must have an <code>id</code> property to be used with Ember Data.</p>\n<h3 id=\"example-json-payloads-models-and-serializers\">Example JSON payloads, Models and Serializers</h3>\n<p><strong>When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.</strong></p>\n<p>For example review the docs for each method of this mixin:</p>\n<ul>\n<li><a href=\"/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize\">normalize</a></li>\n<li><a href=\"/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo\">serializeBelongsTo</a></li>\n<li><a href=\"/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany\">serializeHasMany</a></li>\n</ul>\n</body></html>",
      "methods": [
        {
          "file": "packages/ember-data/lib/initializers/data-adapter.js",
          "line": 3,
          "description": "<html><head></head><body><p>Configures a registry with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.</p>\n</body></html>",
          "itemtype": "method",
          "name": "initializeStoreInjections",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/store-injections.js",
          "line": 1,
          "description": "<html><head></head><body><p>Configures a registry with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.</p>\n</body></html>",
          "itemtype": "method",
          "name": "initializeStoreInjections",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/store.js",
          "line": 15,
          "description": "<html><head></head><body><p>Configures a registry for use with an Ember-Data\nstore. Accepts an optional namespace argument.</p>\n</body></html>",
          "itemtype": "method",
          "name": "initializeStore",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/initializers/transforms.js",
          "line": 8,
          "description": "<html><head></head><body><p>Configures a registry for use with Ember-Data\ntransforms.</p>\n</body></html>",
          "itemtype": "method",
          "name": "initializeTransforms",
          "params": [
            {
              "name": "registry",
              "description": "",
              "type": "Ember.Registry"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/instance-initializers/initialize-store-service.js",
          "line": 1,
          "description": "<html><head></head><body><p>Configures a registry for use with an Ember-Data\nstore.</p>\n</body></html>",
          "itemtype": "method",
          "name": "initializeStore",
          "params": [
            {
              "name": "applicationOrRegistry",
              "description": "",
              "type": "Ember.ApplicationInstance"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "Ember"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 97,
          "description": "<html><head></head><body><p>Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered</p>\n<p>A payload with an attr configured for embedded records needs to be extracted:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;post&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>\n    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n    <span class=\"attr\">&quot;comments&quot;</span>: [{\n      <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,\n      <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;Rails is unagi&quot;</span>\n    }, {\n      <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span>,\n      <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;Omakase O_o&quot;</span>\n    }]\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "hash",
              "description": "to be normalized",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "the hash has been referenced by",
              "type": "String"
            }
          ],
          "return": {
            "description": "the normalized hash",
            "type": "Object"
          },
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 138,
          "description": "<html><head></head><body><p>Serialize <code>belongsTo</code> relationship when it is configured as an embedded object.</p>\n<p>This example of an author model belongs to a post model:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>Post = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span><span class=\"module\"><span class=\"identifier\">Model</span>.</span></span>extend({\n  title:    <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  body:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  author:   <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>belongs<span class=\"constructor\">To(&apos;<span class=\"params\">author</span>&apos;)</span>\n});\n\nAuthor = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span><span class=\"module\"><span class=\"identifier\">Model</span>.</span></span>extend({\n  name:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  post:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>belongs<span class=\"constructor\">To(&apos;<span class=\"params\">post</span>&apos;)</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Use a custom (type) serializer for the post model to configure embedded author</p>\n<div class=\"highlight app/serializers/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"meta\"><span class=\"meta-keyword\">import</span> DS from &apos;ember-data;</span>\n\nexport <span class=\"keyword\">default</span> DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: <span class=\"string\">&apos;always&apos;</span> }\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute&apos;s payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;post&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>\n    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n    <span class=\"attr\">&quot;author&quot;</span>: {\n      <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span>\n      <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;dhh&quot;</span>\n    }\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeBelongsTo",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 217,
          "description": "<html><head></head><body><p>Serialize <code>hasMany</code> relationship when it is configured as embedded objects.</p>\n<p>This example of a post model has many comments:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>Post = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span><span class=\"module\"><span class=\"identifier\">Model</span>.</span></span>extend({\n  title:    <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  body:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  comments: <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>has<span class=\"constructor\">Many(&apos;<span class=\"params\">comment</span>&apos;)</span>\n});\n\nComment = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span><span class=\"module\"><span class=\"identifier\">Model</span>.</span></span>extend({\n  body:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>attr(&apos;<span class=\"built_in\">string</span>&apos;),\n  post:     <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">DS</span>.</span></span>belongs<span class=\"constructor\">To(&apos;<span class=\"params\">post</span>&apos;)</span>\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Use a custom (type) serializer for the post model to configure embedded comments</p>\n<div class=\"highlight app/serializers/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"meta\"><span class=\"meta-keyword\">import</span> DS from &apos;ember-data;</span>\n\nexport <span class=\"keyword\">default</span> DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: {embedded: <span class=\"string\">&apos;always&apos;</span>}\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>A payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute&apos;s payload:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;post&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>\n    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n    <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;I want this for my ORM, I want that for my template language...&quot;</span>\n    <span class=\"string\">&quot;comments&quot;</span>: [{\n      <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,\n      <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;Rails is unagi&quot;</span>\n    }, {\n      <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;2&quot;</span>,\n      <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;Omakase O_o&quot;</span>\n    }]\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed <code>ids</code> or <code>records</code> can be set.\nWhen extracting the only option is <code>records</code>.</p>\n<p>So <code>{ embedded: &apos;always&apos; }</code> is shorthand for:\n<code>{ serialize: &apos;records&apos;, deserialize: &apos;records&apos; }</code></p>\n<p>To embed the <code>ids</code> for a related object (using a hasMany relationship):</p>\n<div class=\"highlight app/serializers/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/serializers/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"meta\"><span class=\"meta-keyword\">import</span> DS from &apos;ember-data;</span>\n\nexport <span class=\"keyword\">default</span> DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { serialize: <span class=\"string\">&apos;ids&apos;</span>, deserialize: <span class=\"string\">&apos;records&apos;</span> }\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>{\n  <span class=\"attr\">&quot;post&quot;</span>: {\n    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>\n    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Rails is omakase&quot;</span>,\n    <span class=\"attr\">&quot;body&quot;</span>: <span class=\"string\">&quot;I want this for my ORM, I want that for my template language...&quot;</span>\n    <span class=\"string\">&quot;comments&quot;</span>: [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>]\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "serializeHasMany",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 332,
          "description": "<html><head></head><body><p>When serializing an embedded record, modify the property (in the json payload)\nthat refers to the parent record (foreign key for relationship).</p>\n<p>Serializing a <code>belongsTo</code> relationship removes the property that refers to the\nparent record</p>\n<p>Serializing a <code>hasMany</code> relationship does not remove the property that refers to\nthe parent record.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEmbeddedForeignKey",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "embeddedSnapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 403,
          "itemtype": "method",
          "name": "_extractEmbeddedRecords",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 421,
          "itemtype": "method",
          "name": "_extractEmbeddedHasMany",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 446,
          "itemtype": "method",
          "name": "_extractEmbeddedBelongsTo",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "packages/ember-data/lib/serializers/embedded-records-mixin.js",
          "line": 469,
          "itemtype": "method",
          "name": "_normalizeEmbeddedRelationship",
          "access": "private",
          "tagname": "",
          "class": "DS.EmbeddedRecordsMixin",
          "module": "ember-data",
          "namespace": "DS"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.0.1-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.0.1",
          "type": "project-version"
        }
      }
    }
  }
}