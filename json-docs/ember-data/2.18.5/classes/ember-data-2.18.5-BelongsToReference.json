{
  "data": {
    "id": "ember-data-2.18.5-BelongsToReference",
    "type": "class",
    "attributes": {
      "name": "BelongsToReference",
      "shortname": "BelongsToReference",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "file": "../model/src/-private/references/belongs-to.ts",
      "line": 42,
      "description": "<html><head></head><body><p>A <code>BelongsToReference</code> is a low-level API that allows users and\naddon authors to perform meta-operations on a belongs-to\nrelationship.</p>\n</body></html>",
      "access": "public",
      "tagname": "",
      "methods": [
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 134,
          "description": "<html><head></head><body><p>The <code>id</code> of the record that this reference refers to. Together, the\n<code>type()</code> and <code>id()</code> methods form a composite key for the identity\nmap. This can be used to access the id of an async relationship\nwithout triggering a fetch that would normally happen if you\nattempted to use <code>record.relationship.id</code>.</p>\n<p>Example</p>\n<p>```javascript\n// models/blog.js\nimport Model, { belongsTo } from &apos;@ember-data/model&apos;;</p>\n<p>export default class BlogModel extends Model {</p>\n</body></html>",
          "belongsto": "('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n   let id = userRef.id();\n }\n```",
          "itemtype": "method",
          "name": "id",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The id of the record in this belongsTo relationship.",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 178,
          "description": "<html><head></head><body><p>The link Ember Data will use to fetch or reload this belongs-to\nrelationship. By default it uses only the &quot;related&quot; resource linkage.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">// models/blog.js</span>\n<span class=\"keyword\">import</span> Model, { belongsTo } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember-data/model&apos;</span>;\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Model.extend({\n   user: belongsTo(<span class=\"string\">&apos;user&apos;</span>, { <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>, inverse: <span class=\"literal\">null</span> })\n });\n\n<span class=\"keyword\">let</span> blog = store.push({\n   data: {\n     <span class=\"keyword\">type</span>: <span class=\"string\">&apos;blog&apos;</span>,\n     id: <span class=\"number\">1</span>,\n     relationships: {\n       user: {\n         links: {\n           related: <span class=\"string\">&apos;/articles/1/author&apos;</span>\n         }\n       }\n     }\n   }\n });\n<span class=\"keyword\">let</span> userRef = blog.belongsTo(<span class=\"string\">&apos;user&apos;</span>);\n\n<span class=\"comment\">// get the identifier of the reference</span>\n<span class=\"keyword\">if</span> (userRef.remoteType() === <span class=\"string\">&quot;link&quot;</span>) {\n   <span class=\"keyword\">let</span> link = userRef.link();\n }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "link",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The link Ember Data will use to fetch or reload this belongs-to relationship.",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 228,
          "description": "<html><head></head><body><p>any links that have been received for this relationship</p>\n</body></html>",
          "itemtype": "method",
          "name": "links",
          "access": "public",
          "tagname": "",
          "return": {
            "description": ""
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 241,
          "description": "<html><head></head><body><p>The meta data for the belongs-to relationship.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n              <td class=\"code\"><pre><span class=\"string\">//</span> <span class=\"string\">models/blog.js</span>\n<span class=\"string\">import</span> <span class=\"string\">Model,</span> <span class=\"string\">{</span> <span class=\"string\">belongsTo</span> <span class=\"string\">}</span> <span class=\"string\">from</span> <span class=\"string\">&apos;@ember-data/model&apos;</span><span class=\"string\">;</span>\n<span class=\"string\">export</span> <span class=\"string\">default</span> <span class=\"string\">Model.extend({</span>\n<span class=\"attr\">   user:</span> <span class=\"string\">belongsTo(&apos;user&apos;,</span> <span class=\"string\">{</span> <span class=\"attr\">async:</span> <span class=\"literal\">true</span><span class=\"string\">,</span> <span class=\"attr\">inverse:</span> <span class=\"literal\">null</span> <span class=\"string\">})</span>\n <span class=\"string\">});</span>\n\n<span class=\"string\">let</span> <span class=\"string\">blog</span> <span class=\"string\">=</span> <span class=\"string\">store.push({</span>\n<span class=\"attr\">   data:</span> <span class=\"string\">{</span>\n<span class=\"attr\">     type:</span> <span class=\"string\">&apos;blog&apos;</span><span class=\"string\">,</span>\n<span class=\"attr\">     id:</span> <span class=\"number\">1</span><span class=\"string\">,</span>\n<span class=\"attr\">     relationships:</span> <span class=\"string\">{</span>\n<span class=\"attr\">       user:</span> <span class=\"string\">{</span>\n<span class=\"attr\">         links:</span> <span class=\"string\">{</span>\n<span class=\"attr\">           related:</span> <span class=\"string\">{</span>\n<span class=\"attr\">             href:</span> <span class=\"string\">&apos;/articles/1/author&apos;</span>\n           <span class=\"string\">},</span>\n         <span class=\"string\">},</span>\n<span class=\"attr\">         meta:</span> <span class=\"string\">{</span>\n<span class=\"attr\">           lastUpdated:</span> <span class=\"number\">1458014400000</span>\n         <span class=\"string\">}</span>\n       <span class=\"string\">}</span>\n     <span class=\"string\">}</span>\n   <span class=\"string\">}</span>\n <span class=\"string\">});</span>\n\n<span class=\"string\">let</span> <span class=\"string\">userRef</span> <span class=\"string\">=</span> <span class=\"string\">blog.belongsTo(&apos;user&apos;);</span>\n\n<span class=\"string\">userRef.meta()</span> <span class=\"string\">//</span> <span class=\"string\">{</span> <span class=\"attr\">lastUpdated:</span> <span class=\"number\">1458014400000</span> <span class=\"string\">}</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "meta",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The meta information for the belongs-to relationship.",
            "type": "Object"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 296,
          "description": "<html><head></head><body><p>This returns a string that represents how the reference will be\nlooked up when it is loaded. If the relationship has a link it will\nuse the &quot;link&quot; otherwise it defaults to &quot;id&quot;.</p>\n<p>Example</p>\n<p>```app/models/post.js\nimport Model, { hasMany } from &apos;@ember-data/model&apos;;</p>\n<p>export default class PostModel extends Model {</p>\n</body></html>",
          "hasmany": "('comment', { async: true, inverse: null }) comments;\n}\n```\n\n```javascript\nlet post = store.push({\n  data: {\n    type: 'post',\n    id: 1,\n    relationships: {\n      comments: {\n        data: [{ type: 'comment', id: 1 }]\n      }\n    }\n  }\n});\n\nlet commentsRef = post.hasMany('comments');\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  let ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  let link = commentsRef.link();\n}\n```",
          "itemtype": "method",
          "name": "remoteType",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "The name of the remote type. This should either be `link` or `id`",
            "type": "String"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 346,
          "description": "<html><head></head><body><p><code>push</code> can be used to update the data in the relationship and Ember\nData will treat the new data as the canonical value of this\nrelationship on the backend.</p>\n<p>Example</p>\n<p>```app/models/blog.js\nimport Model, { belongsTo } from &apos;@ember-data/model&apos;;</p>\n<p>export default class BlogModel extends Model {</p>\n</body></html>",
          "belongsto": "('user', { async: true, inverse: null }) user;\n }\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\n// provide data for reference\nuserRef.push({\n   data: {\n     type: 'user',\n     id: 1,\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value() === user;\n });\n```",
          "itemtype": "method",
          "name": "push",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "object",
              "description": "a JSONAPI document object describing the new value of this relationship.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "A promise that resolves with the new value in this belongs-to relationship.",
            "type": "Promise<record>"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 419,
          "description": "<html><head></head><body><p><code>value()</code> synchronously returns the current value of the belongs-to\nrelationship. Unlike <code>record.relationshipName</code>, calling\n<code>value()</code> on a reference does not trigger a fetch if the async\nrelationship is not yet loaded. If the relationship is not loaded\nit will always return <code>null</code>.</p>\n<p>Example</p>\n<p>```javascript\n// models/blog.js\nimport Model, { belongsTo } from &apos;@ember-data/model&apos;;</p>\n<p>export default class BlogModel extends Model {</p>\n</body></html>",
          "belongsto": "('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\n// provide data for reference\nuserRef.push({\n   data: {\n     type: 'user',\n     id: 1,\n     attributes: {\n       username: \"@user\"\n     }\n   }\n }).then(function(user) {\n   userRef.value(); // user\n });\n```",
          "itemtype": "method",
          "name": "value",
          "access": "public",
          "tagname": "",
          "return": {
            "description": "the record in this relationship",
            "type": "Model"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 474,
          "description": "<html><head></head><body><p>Loads a record in a belongs-to relationship if it is not already\nloaded. If the relationship is already loaded this method does not\ntrigger a new load.</p>\n<p>Example</p>\n<p>```javascript\n// models/blog.js\nimport Model, { belongsTo } from &apos;@ember-data/model&apos;;</p>\n<p>export default class BlogModel extends Model {</p>\n</body></html>",
          "belongsto": "('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.value(); // null\n\nuserRef.load().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference.\n\nExample\n\n```javascript\nuserRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n  userRef.value() === user;\n});\n```\n```app/adapters/user.js\nimport Adapter from '@ember-data/adapter';\n\nexport default class UserAdapter extends Adapter {\n  findRecord(store, type, id, snapshot) {\n    // In the adapter you will have access to adapterOptions.\n    let adapterOptions = snapshot.adapterOptions;\n  }\n});\n```",
          "itemtype": "method",
          "name": "load",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the record in this belongs-to relationship.",
            "type": "Promise"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 547,
          "description": "<html><head></head><body><p>Triggers a reload of the value in this relationship. If the\nremoteType is <code>&quot;link&quot;</code> Ember Data will use the relationship link to\nreload the relationship. Otherwise it will reload the record by its\nid.</p>\n<p>Example</p>\n<p>```javascript\n// models/blog.js\nimport Model, { belongsTo } from &apos;@ember-data/model&apos;;</p>\n<p>export default class BlogModel extends Model {</p>\n</body></html>",
          "belongsto": "('user', { async: true, inverse: null }) user;\n}\n\nlet blog = store.push({\n   data: {\n     type: 'blog',\n     id: 1,\n     relationships: {\n       user: {\n         data: { type: 'user', id: 1 }\n       }\n     }\n   }\n });\nlet userRef = blog.belongsTo('user');\n\nuserRef.reload().then(function(user) {\n   userRef.value() === user\n });\n```\n\nYou may also pass in an options object whose properties will be\nfed forward. This enables you to pass `adapterOptions` into the\nrequest given to the adapter via the reference. A full example\ncan be found in the `load` method.\n\nExample\n\n```javascript\nuserRef.reload({ adapterOptions: { isPrivate: true } })\n```",
          "itemtype": "method",
          "name": "reload",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "options",
              "description": "the options to pass in.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "a promise that resolves with the record in this belongs-to relationship after the reload has completed.",
            "type": "Promise"
          },
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "../packages/model/src/-private/references/belongs-to.ts",
          "line": 101,
          "description": "<html><head></head><body><p>The identifier of the record that this reference refers to.\n<code>null</code> if no related record is known.</p>\n</body></html>",
          "itemtype": "property",
          "name": "identifier",
          "type": "StableRecordIdentifier | null",
          "access": "public",
          "tagname": "",
          "class": "BelongsToReference",
          "module": "@ember-data/model"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.18.5-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.18.5",
          "type": "project-version"
        }
      }
    }
  }
}