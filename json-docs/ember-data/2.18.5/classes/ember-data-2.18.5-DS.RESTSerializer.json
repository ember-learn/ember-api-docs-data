{
  "data": {
    "id": "ember-data-2.18.5-DS.RESTSerializer",
    "type": "class",
    "attributes": {
      "name": "DS.RESTSerializer",
      "shortname": "DS.RESTSerializer",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "addon/serializers/rest.js",
      "line": 21,
      "description": "Normally, applications will use the `RESTSerializer` by implementing\nthe `normalize` method.\n\nThis allows you to do whatever kind of munging you need, and is\nespecially useful if your server is inconsistent and you need to\ndo munging differently for many different kinds of responses.\n\nSee the `normalize` documentation for more information.\n\n## Across the Board Normalization\n\nThere are also a number of hooks that you might find useful to define\nacross-the-board rules for your payload. These rules will be useful\nif your server is consistent, or if you're building an adapter for\nan infrastructure service, like Firebase, and want to encode service\nconventions.\n\nFor example, if all of your keys are underscored and all-caps, but\notherwise consistent with the names you use in your models, you\ncan implement across-the-board rules for how to convert an attribute\nname in your model to a key in your JSON.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { underscore } from '@ember/string';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute(attr, method) {\n    return underscore(attr).toUpperCase();\n  }\n});\n```\n\nYou can also implement `keyForRelationship`, which takes the name\nof the relationship as the first parameter, the kind of\nrelationship (`hasMany` or `belongsTo`) as the second parameter, and\nthe method (`serialize` or `deserialize`) as the third parameter.",
      "extends": "DS.JSONSerializer",
      "methods": [
        {
          "file": "addon/serializers/rest.js",
          "line": 66,
          "description": "`keyForPolymorphicType` can be used to define a custom key when\nserializing and deserializing a polymorphic type. By default, the\nreturned key is `${key}Type`.\n\nExample\n\n ```js {data-filename=app/serializers/post.js}\n import DS from 'ember-data';\n\n export default DS.RESTSerializer.extend({\n   keyForPolymorphicType(key, relationship) {\n     var relationshipKey = this.keyForRelationship(key);\n\n     return 'type-' + relationshipKey;\n   }\n });\n ```",
          "itemtype": "method",
          "name": "keyForPolymorphicType",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 97,
          "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nFor example, if you have a payload that looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nThe `normalize` method will be called three times:\n\n* With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n* With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n* With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations. You will only need to implement\n`normalize` and manipulate the payload as desired.\n\nFor example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n`id`, you can specify how to normalize just the comments:\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  normalize(model, hash, prop) {\n    if (prop === 'comments') {\n      hash.id = hash._id;\n      delete hash._id;\n    }\n\n    return this._super(...arguments);\n  }\n});\n```\n\nOn each call to the `normalize` method, the third parameter (`prop`) is always\none of the keys that were in the original payload or in the result of another\nnormalization as `normalizeResponse`.",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 174,
          "description": "Normalizes an array of resource payloads and returns a JSON-API Document\nwith primary data and, if any, included data as `{ data, included }`.",
          "itemtype": "method",
          "name": "_normalizeArray",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            },
            {
              "name": "arrayHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "prop",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 385,
          "description": "This method allows you to push a payload containing top-level\ncollections of records organized per type.\n\n```js\n{\n  \"posts\": [{\n    \"id\": \"1\",\n    \"title\": \"Rails is omakase\",\n    \"author\", \"1\",\n    \"comments\": [ \"1\" ]\n  }],\n  \"comments\": [{\n    \"id\": \"1\",\n    \"body\": \"FIRST\"\n  }],\n  \"users\": [{\n    \"id\": \"1\",\n    \"name\": \"@d2h\"\n  }]\n}\n```\n\nIt will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.",
          "itemtype": "method",
          "name": "pushPayload",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 449,
          "description": "This method is used to convert each JSON root key in the payload\ninto a modelName that it can use to look up the appropriate model for\nthat part of the payload.\n\nFor example, your server may send a model name that does not correspond with\nthe name of the model in your app. Let's take a look at an example model,\nand an example payload:\n\n```js {data-filename=app/models/post.js}\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n});\n```\n\n```javascript\n  {\n    \"blog/post\": {\n      \"id\": \"1\n    }\n  }\n```\n\nEmber Data is going to normalize the payload's root key for the modelName. As a result,\nit will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n(or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\nbecause it cannot find the \"blog/post\" model.\n\nSince we want to remove this namespace, we can define a serializer for the application that will\nremove \"blog/\" from the payload key whenver it's encountered by Ember Data:\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadKey(payloadKey) {\n    if (payloadKey === 'blog/post') {\n      return this._super(payloadKey.replace('blog/', ''));\n    } else {\n     return this._super(payloadKey);\n    }\n  }\n});\n```\n\nAfter refreshing, Ember Data will appropriately look up the \"post\" model.\n\nBy default the modelName for a model is its\nname in dasherized form. This means that a payload key like \"blogPost\" would be\nnormalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\ncan use the correct inflection to do this for you. Most of the time, you won't\nneed to override `modelNameFromPayloadKey` for this purpose.",
          "itemtype": "method",
          "name": "modelNameFromPayloadKey",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model's modelName",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 513,
          "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```js {data-filename=app/models/comment.js}\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```js\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    };\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { pluralize } from 'ember-inflector';\n\nexport default DS.RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    });\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(singularize(name)) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```js\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize(snapshot, options) {\n    var json = this._super(snapshot, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "json",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 669,
          "description": "You can use this method to customize the root keys serialized into the JSON.\nThe hash property should be modified by reference (possibly using something like _.extend)\nBy default the REST Serializer sends the modelName of a model, which is a camelized\nversion of the name.\n\nFor example, your server may expect underscored root objects.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { decamelize } from '@ember/string';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash(data, type, record, options) {\n    var root = decamelize(type.modelName);\n    data[root] = this.serialize(record, options);\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeIntoHash",
          "params": [
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 700,
          "description": "You can use `payloadKeyFromModelName` to override the root key for an outgoing\nrequest. By default, the RESTSerializer returns a camelized version of the\nmodel's name.\n\nFor a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer\nwill send it to the server with `tacoParty` as the root key in the JSON payload:\n\n```js\n{\n  \"tacoParty\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```\n\nFor example, your server may expect dasherized root objects:\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { dasherize } from '@ember/string';\n\nexport default DS.RESTSerializer.extend({\n  payloadKeyFromModelName(modelName) {\n    return dasherize(modelName);\n  }\n});\n```\n\nGiven a `TacoParty` model, calling `save` on it would produce an outgoing\nrequest like:\n\n```js\n{\n  \"taco-party\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n```",
          "itemtype": "method",
          "name": "payloadKeyFromModelName",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 750,
          "description": "You can use this method to customize how polymorphic objects are serialized.\nBy default the REST Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.",
          "itemtype": "method",
          "name": "serializePolymorphicType",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 794,
          "description": "You can use this method to customize how a polymorphic relationship should\nbe extracted.",
          "itemtype": "method",
          "name": "extractPolymorphicRelationship",
          "params": [
            {
              "name": "relationshipType",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 869,
          "description": "`modelNameFromPayloadType` can be used to change the mapping for a DS model\nname, taken from the value in the payload.\n\nSay your API namespaces the type of a model and returns the following\npayload for the `post` model, which has a polymorphic `user` relationship:\n\n```javascript\n// GET /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType: \"api::v1::administrator\"\n  }\n}\n```\n\nBy overwriting `modelNameFromPayloadType` you can specify that the\n`administrator` model should be used:\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadType(payloadType) {\n    return payloadType.replace('api::v1::', '');\n  }\n});\n```\n\nBy default the modelName for a model is its name in dasherized form.\nUsually, Ember Data can use the correct inflection to do this for you. Most\nof the time, you won't need to override `modelNameFromPayloadType` for this\npurpose.\n\nAlso take a look at\n[payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize\nhow the type of a record should be serialized.",
          "itemtype": "method",
          "name": "modelNameFromPayloadType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "payloadType",
              "description": "type from payload",
              "type": "String"
            }
          ],
          "return": {
            "description": "modelName",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/rest.js",
          "line": 918,
          "description": "`payloadTypeFromModelName` can be used to change the mapping for the type in\nthe payload, taken from the model name.\n\nSay your API namespaces the type of a model and expects the following\npayload when you update the `post` model, which has a polymorphic `user`\nrelationship:\n\n```javascript\n// POST /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType\": \"api::v1::administrator\"\n  }\n}\n```\n\nBy overwriting `payloadTypeFromModelName` you can specify that the\nnamespaces model name for the `administrator` should be used:\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  payloadTypeFromModelName(modelName) {\n    return 'api::v1::' + modelName;\n  }\n});\n```\n\nBy default the payload type is the camelized model name. Usually, Ember\nData can use the correct inflection to do this for you. Most of the time,\nyou won't need to override `payloadTypeFromModelName` for this purpose.\n\nAlso take a look at\n[modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize\nhow the model name from should be mapped from the payload.",
          "itemtype": "method",
          "name": "payloadTypeFromModelName",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "modelName from the record",
              "type": "String"
            }
          ],
          "return": {
            "description": "payloadType",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 173,
          "description": "Given a subclass of `DS.Model` and a JSON object this method will\niterate through each attribute of the `DS.Model` and invoke the\n`DS.Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.",
          "itemtype": "method",
          "name": "applyTransforms",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "data",
              "description": "The data to transform",
              "type": "Object"
            }
          ],
          "return": {
            "description": "data The transformed data object",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 200,
          "description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure\n\nThis method delegates to a more specific normalize method based on\nthe `requestType`.\n\nTo override this method with a custom one, make sure to call\n`return this._super(store, primaryModelClass, payload, id, requestType)` with your\npre-processed data.\n\nHere's an example of using `normalizeResponse` manually:\n\n```javascript\nsocket.on('message', function(message) {\n  var data = message.data;\n  var modelClass = store.modelFor(data.modelName);\n  var serializer = store.serializerFor(data.modelName);\n  var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n\n  store.push(normalized);\n});\n```",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 260,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindRecordResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 274,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeQueryRecordResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 288,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindAllResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 302,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindBelongsToResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 316,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindHasManyResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 330,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeFindManyResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 344,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeQueryResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 358,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeCreateRecordResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 372,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeDeleteRecordResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 386,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeUpdateRecordResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 400,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeSaveResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 414,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeSingleResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 428,
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeArrayResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 442,
          "itemtype": "method",
          "name": "_normalizeResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            },
            {
              "name": "isSingle",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 489,
          "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\n\nExample\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { underscore } from '@ember/string';\nimport { get } from '@ember/object';\n\nexport default DS.JSONSerializer.extend({\n  normalize(typeClass, hash) {\n    var fields = get(typeClass, 'fields');\n\n    fields.forEach(function(field) {\n      var payloadField = underscore(field);\n      if (field === payloadField) { return; }\n\n      hash[field] = hash[payloadField];\n      delete hash[payloadField];\n    });\n\n    return this._super.apply(this, arguments);\n  }\n});\n```",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 552,
          "description": "Returns the resource's ID.",
          "itemtype": "method",
          "name": "extractId",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 566,
          "description": "Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n\nhttp://jsonapi.org/format/#document-resource-object-attributes",
          "itemtype": "method",
          "name": "extractAttributes",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 590,
          "description": "Returns a relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
          "itemtype": "method",
          "name": "extractRelationship",
          "params": [
            {
              "name": "relationshipModelName",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 639,
          "description": "Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships\n\n`relationshipOptions` is a hash which contains more information about the\npolymorphic relationship which should be extracted:\n  - `resourceHash` complete hash of the resource the relationship should be\n    extracted from\n  - `relationshipKey` key under which the value for the relationship is\n    extracted from the resourceHash\n  - `relationshipMeta` meta information about the relationship",
          "itemtype": "method",
          "name": "extractPolymorphicRelationship",
          "params": [
            {
              "name": "relationshipModelName",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipHash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationshipOptions",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 662,
          "description": "Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n\nhttp://jsonapi.org/format/#document-resource-object-relationships",
          "itemtype": "method",
          "name": "extractRelationships",
          "params": [
            {
              "name": "modelClass",
              "description": "",
              "type": "Object"
            },
            {
              "name": "resourceHash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 718,
          "itemtype": "method",
          "name": "modelNameFromPayloadKey",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model's modelName",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 728,
          "itemtype": "method",
          "name": "normalizeRelationships",
          "access": "private",
          "tagname": "",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 747,
          "itemtype": "method",
          "name": "normalizeUsingDeclaredMapping",
          "access": "private",
          "tagname": "",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 778,
          "description": "Looks up the property key that was set by the custom `attr` mapping\npassed to the serializer.",
          "itemtype": "method",
          "name": "_getMappedKey",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "key",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 809,
          "description": "Check attrs.key.serialize property to inform if the `key`\ncan be serialized",
          "itemtype": "method",
          "name": "_canSerialize",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the key can be serialized",
            "type": "Boolean"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 824,
          "description": "When attrs.key.serialize is set to true then\nit takes priority over the other checks and the related\nattribute/relationship will be serialized",
          "itemtype": "method",
          "name": "_mustSerialize",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the key must be serialized",
            "type": "Boolean"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 840,
          "description": "Check if the given hasMany relationship should be serialized",
          "itemtype": "method",
          "name": "shouldSerializeHasMany",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "relationshipType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the hasMany relationship should be serialized",
            "type": "Boolean"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 861,
          "description": "Check if the given hasMany relationship should be serialized",
          "itemtype": "method",
          "name": "_shouldSerializeHasMany",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "relationshipType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "true if the hasMany relationship should be serialized",
            "type": "Boolean"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 881,
          "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```js {data-filename=app/models/comment.js}\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```javascript\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    };\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { singularize } from 'ember-inflector';\n\nexport default DS.JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    });\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(singularize(name)) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```javascript\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize(snapshot, options) {\n    var json = this._super(...arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "json",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1062,
          "description": "You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\nThe hash property should be modified by reference.\n\nFor example, your server may expect underscored root objects.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { decamelize } from '@ember/string';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash(data, type, snapshot, options) {\n    var root = decamelize(type.modelName);\n    data[root] = this.serialize(snapshot, options);\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeIntoHash",
          "params": [
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1094,
          "description": "`serializeAttribute` can be used to customize how `DS.attr`\nproperties are serialized\n\nFor example if you wanted to ensure all your attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeAttribute(snapshot, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    this._super(snapshot, json.attributes, key, attributes);\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeAttribute",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "attribute",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1141,
          "description": "`serializeBelongsTo` can be used to customize how `DS.belongsTo`\nproperties are serialized.\n\nExample\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\nimport { isNone } from '@ember/utils';\n\nexport default DS.JSONSerializer.extend({\n  serializeBelongsTo(snapshot, json, relationship) {\n    var key = relationship.key;\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n\n    json[key] = isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeBelongsTo",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1194,
          "description": "`serializeHasMany` can be used to customize how `DS.hasMany`\nproperties are serialized.\n\nExample\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeHasMany(snapshot, json, relationship) {\n    var key = relationship.key;\n    if (key === 'comments') {\n      return;\n    } else {\n      this._super(...arguments);\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeHasMany",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1243,
          "description": "You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n`{ polymorphic: true }` is pass as the second argument to the\n`DS.belongsTo` function.\n\nExample\n\n```js {data-filename=app/serializers/comment.js}\nimport DS from 'ember-data';\nimport { isNone } from '@ember/utils';\n\nexport default DS.JSONSerializer.extend({\n  serializePolymorphicType(snapshot, json, relationship) {\n    var key = relationship.key;\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForAttribute ? this.keyForAttribute(key, 'serialize') : key;\n\n    if (isNone(belongsTo)) {\n      json[key + '_type'] = null;\n    } else {\n      json[key + '_type'] = belongsTo.modelName;\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializePolymorphicType",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "relationship",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1278,
          "description": "`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\n\nExample\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractMeta(store, typeClass, payload) {\n    if (payload && payload.hasOwnProperty('_pagination')) {\n      let meta = payload._pagination;\n      delete payload._pagination;\n      return meta;\n    }\n  }\n});\n```",
          "itemtype": "method",
          "name": "extractMeta",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "modelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1312,
          "description": "`extractErrors` is used to extract model errors when a call\nto `DS.Model#save` fails with an `InvalidError`. By default\nEmber Data expects error information to be located on the `errors`\nproperty of the payload object.\n\nThis serializer expects this `errors` object to be an Array similar\nto the following, compliant with the JSON-API specification:\n\n```js\n{\n  \"errors\": [\n    {\n      \"detail\": \"This username is already taken!\",\n      \"source\": {\n        \"pointer\": \"data/attributes/username\"\n      }\n    }, {\n      \"detail\": \"Doesn't look like a valid email.\",\n      \"source\": {\n        \"pointer\": \"data/attributes/email\"\n      }\n    }\n  ]\n}\n```\n\nThe key `detail` provides a textual description of the problem.\nAlternatively, the key `title` can be used for the same purpose.\n\nThe nested keys `source.pointer` detail which specific element\nof the request data was invalid.\n\nNote that JSON-API also allows for object-level errors to be placed\nin an object with pointer `data`, signifying that the problem\ncannot be traced to a specific attribute:\n\n```javascript\n{\n  \"errors\": [\n    {\n      \"detail\": \"Some generic non property error message\",\n      \"source\": {\n        \"pointer\": \"data\"\n      }\n    }\n  ]\n}\n```\n\nWhen turn into a `DS.Errors` object, you can read these errors\nthrough the property `base`:\n\n```handlebars\n{{#each model.errors.base as |error|}}\n  <div class=\"error\">\n    {{error.message}}\n  </div>\n{{/each}}\n```\n\nExample of alternative implementation, overriding the default\nbehavior to deal with a different format of errors:\n\n```js {data-filename=app/serializers/post.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractErrors(store, typeClass, payload, id) {\n    if (payload && typeof payload === 'object' && payload._problems) {\n      payload = payload._problems;\n      this.normalizeErrors(typeClass, payload);\n    }\n    return payload;\n  }\n});\n```",
          "itemtype": "method",
          "name": "extractErrors",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "(String|Number)"
            }
          ],
          "return": {
            "description": "json The deserialized errors",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1423,
          "description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\n\nExample\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\nimport { underscore } from '@ember/string';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute(attr, method) {\n    return underscore(attr).toUpperCase();\n  }\n});\n```",
          "itemtype": "method",
          "name": "keyForAttribute",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1449,
          "description": "`keyForRelationship` can be used to define a custom key when\nserializing and deserializing relationship properties. By default\n`JSONSerializer` does not provide an implementation of this method.\n\nExample\n\n  ```js {data-filename=app/serializers/post.js}\n  import DS from 'ember-data';\n  import { underscore } from '@ember/string';\n\n  export default DS.JSONSerializer.extend({\n    keyForRelationship(key, relationship, method) {\n      return `rel_${underscore(key)}`;\n    }\n  });\n  ```",
          "itemtype": "method",
          "name": "keyForRelationship",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "typeClass",
              "description": "",
              "type": "String"
            },
            {
              "name": "method",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1477,
          "description": "`keyForLink` can be used to define a custom key when deserializing link\nproperties.",
          "itemtype": "method",
          "name": "keyForLink",
          "params": [
            {
              "name": "key",
              "description": "",
              "type": "String"
            },
            {
              "name": "kind",
              "description": "`belongsTo` or `hasMany`",
              "type": "String"
            }
          ],
          "return": {
            "description": "normalized key",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1492,
          "itemtype": "method",
          "name": "transformFor",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "attributeType",
              "description": "",
              "type": "String"
            },
            {
              "name": "skipAssertion",
              "description": "",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "transform",
            "type": "DS.Transform"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1512,
          "itemtype": "method",
          "name": "modelNameFromPayloadType",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "type",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "the model's modelName",
            "type": "String"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 1534,
          "description": "serializeId can be used to customize how id is serialized\nFor example, your server may expect integer datatype of id\n\nBy default the snapshot's id (String) is set on the json hash via json[primaryKey] = snapshot.id.\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\nserializeId(snapshot, json, primaryKey) {\n    var id = snapshot.id;\n    json[primaryKey] = parseInt(id, 10);\n  }\n});\n```",
          "itemtype": "method",
          "name": "serializeId",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "json",
              "description": "",
              "type": "Object"
            },
            {
              "name": "primaryKey",
              "description": "",
              "type": "String"
            }
          ],
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializer.js",
          "line": 51,
          "description": "The `normalizeResponse` method is used to normalize a payload from the\nserver to a JSON-API Document.\n\nhttp://jsonapi.org/format/#document-structure\n\nExample:\n\n```js\nSerializer.extend({\n  normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n    if (requestType === 'findRecord') {\n      return this.normalize(primaryModelClass, payload);\n    } else {\n      return payload.reduce(function(documentHash, item) {\n        let { data, included } = this.normalize(primaryModelClass, item);\n        documentHash.included.push(...included);\n        documentHash.data.push(data);\n        return documentHash;\n      }, { data: [], included: [] })\n    }\n  }\n});\n```",
          "since": "1.13.0",
          "itemtype": "method",
          "name": "normalizeResponse",
          "params": [
            {
              "name": "store",
              "description": "",
              "type": "DS.Store"
            },
            {
              "name": "primaryModelClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "payload",
              "description": "",
              "type": "Object"
            },
            {
              "name": "id",
              "description": "",
              "type": "String|Number"
            },
            {
              "name": "requestType",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "JSON-API Document",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.Serializer"
        },
        {
          "file": "addon/serializer.js",
          "line": 87,
          "description": "The `serialize` method is used when a record is saved in order to convert\nthe record into the form that your external data source expects.\n\n`serialize` takes an optional `options` hash with a single option:\n\n- `includeId`: If this is `true`, `serialize` should include the ID\n  in the serialized object it builds.\n\nExample:\n\n```js\nSerializer.extend({\n  serialize(snapshot, options) {\n    var json = {\n      id: snapshot.id\n    };\n\n    snapshot.eachAttribute((key, attribute) => {\n      json[key] = snapshot.attr(key);\n    });\n\n    snapshot.eachRelationship((key, relationship) => {\n      if (relationship.kind === 'belongsTo') {\n        json[key] = snapshot.belongsTo(key, { id: true });\n      } else if (relationship.kind === 'hasMany') {\n        json[key] = snapshot.hasMany(key, { ids: true });\n      }\n    });\n\n    return json;\n  },\n});\n```",
          "itemtype": "method",
          "name": "serialize",
          "params": [
            {
              "name": "snapshot",
              "description": "",
              "type": "DS.Snapshot"
            },
            {
              "name": "options",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.Serializer"
        },
        {
          "file": "addon/serializer.js",
          "line": 129,
          "description": "The `normalize` method is used to convert a payload received from your\nexternal data source into the normalized form `store.push()` expects. You\nshould override this method, munge the hash and return the normalized\npayload.\n\nExample:\n\n```js\nSerializer.extend({\n  normalize(modelClass, resourceHash) {\n    var data = {\n      id:            resourceHash.id,\n      type:          modelClass.modelName,\n      attributes:    resourceHash\n    };\n    return { data: data };\n  }\n})\n```",
          "itemtype": "method",
          "name": "normalize",
          "params": [
            {
              "name": "typeClass",
              "description": "",
              "type": "DS.Model"
            },
            {
              "name": "hash",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.Serializer"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "addon/serializers/json.js",
          "line": 85,
          "description": "The `primaryKey` is used when serializing and deserializing\ndata. Ember Data always uses the `id` property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\n`primaryKey` property to match the `primaryKey` of your external\nstore.\n\nExample\n\n```js {data-filename=app/serializers/application.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  primaryKey: '_id'\n});\n```",
          "itemtype": "property",
          "name": "primaryKey",
          "type": "{String}",
          "default": "'id'",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializers/json.js",
          "line": 109,
          "description": "The `attrs` object can be used to declare a simple mapping between\nproperty names on `DS.Model` records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty `key` can also be used to designate the attribute's key on\nthe response payload.\n\nExample\n\n```js {data-filename=app/models/person.js}\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string'),\n  admin: DS.attr('boolean')\n});\n```\n\n```js {data-filename=app/serializers/person.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: { key: 'career' }\n  }\n});\n```\n\nYou can also remove attributes by setting the `serialize` key to\n`false` in your mapping object.\n\nExample\n\n```js {data-filename=app/serializers/person.js}\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: { serialize: false },\n    occupation: { key: 'career' }\n  }\n});\n```\n\nWhen serialized:\n\n```javascript\n{\n  \"firstName\": \"Harry\",\n  \"lastName\": \"Houdini\",\n  \"career\": \"magician\"\n}\n```\n\nNote that the `admin` is now not included in the payload.",
          "itemtype": "property",
          "name": "attrs",
          "type": "{Object}",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.JSONSerializer"
        },
        {
          "file": "addon/serializer.js",
          "line": 29,
          "description": "The `store` property is the application's `store` that contains\nall records. It can be used to look up serializers for other model\ntypes that may be nested inside the payload response.\n\nExample:\n\n```js\nSerializer.extend({\n  extractRelationship(relationshipModelName, relationshipHash) {\n    var modelClass = this.store.modelFor(relationshipModelName);\n    var relationshipSerializer = this.store.serializerFor(relationshipModelName);\n    return relationshipSerializer.normalize(modelClass, relationshipHash);\n  }\n});\n```",
          "itemtype": "property",
          "name": "store",
          "type": "{DS.Store}",
          "access": "public",
          "tagname": "",
          "class": "DS.RESTSerializer",
          "module": "ember-data",
          "namespace": "DS",
          "inherited": true,
          "inheritedFrom": "DS.Serializer"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-data-2.18.5-DS.JSONSerializer",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.18.5-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.18.5",
          "type": "project-version"
        }
      }
    }
  }
}