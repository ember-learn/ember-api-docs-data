{
  "data": {
    "id": "ember-data-2.18.5-UnauthorizedError",
    "type": "class",
    "attributes": {
      "name": "UnauthorizedError",
      "shortname": "UnauthorizedError",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/adapter/error",
      "namespace": "",
      "file": "../adapter/src/error.js",
      "line": 230,
      "description": "<html><head></head><body><p>A <code>UnauthorizedError</code> equates to a HTTP <code>401 Unauthorized</code> response\nstatus. It is used by an adapter to signal that a request to the external\nAPI was rejected because authorization is required and has failed or has not\nyet been provided.</p>\n<p>An example use case would be to redirect the user to a login route if a\nrequest is unauthorized:</p>\n<p>```app/routes/application.js\nimport Route from &apos;@ember/routing/route&apos;;\nimport { UnauthorizedError } from &apos;@ember-data/adapter/error&apos;;\nimport { action } from &apos;@ember/object&apos;;</p>\n<p>export default class ApplicationRoute extends Route {</p>\n</body></html>",
      "action": "error(error, transition) {\n    if (error instanceof UnauthorizedError) {\n      // go to the login route\n      this.transitionTo('login');\n      return;\n    }\n\n    // ...other error handling logic\n  }\n}\n```",
      "access": "public",
      "tagname": "",
      "extends": "AdapterError",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-data-2.18.5-AdapterError",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.18.5-@ember-data/adapter/error",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.18.5",
          "type": "project-version"
        }
      }
    }
  }
}