{
  "data": {
    "id": "ember-data-2.5.5-DS",
    "type": "namespace",
    "attributes": {
      "name": "DS",
      "shortname": "DS",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "",
      "file": "addon/-private/core.js",
      "line": 8,
      "description": "<html><head></head><body><p>All Ember Data methods and functions are defined inside of this namespace.</p>\n</body></html>",
      "static": 1,
      "version": "2.5.5",
      "since": "2.5.5",
      "methods": [
        {
          "file": "addon/-private/system/relationships/belongs-to.js",
          "line": 5,
          "description": "<html><head></head><body><p><code>DS.belongsTo</code> is used to define One-To-One and One-To-Many\nrelationships on a <a href=\"/api/data/classes/DS.Model.html\">DS.Model</a>.</p>\n<p><code>DS.belongsTo</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: A boolean value used to explicitly declare this to be an async relationship.</li>\n<li><code>inverse</code>: A string used to identify the inverse property on a\nrelated model in a One-To-Many relationship. See <a href=\"#toc_explicit-inverses\">Explicit Inverses</a></li>\n</ul>\n<h4 id=\"one-to-one\">One-To-One</h4>\n<p>To declare a one-to-one relationship between two models, use\n<code>DS.belongsTo</code>:</p>\n<div class=\"highlight app/models/user.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  profile: DS.belongsTo(<span class=\"string\">&apos;profile&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/models/profile.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/profile.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  user: DS.belongsTo(<span class=\"string\">&apos;user&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"one-to-many\">One-To-Many</h4>\n<p>To declare a one-to-many relationship between two models, use\n<code>DS.belongsTo</code> in combination with <code>DS.hasMany</code>, like this:</p>\n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  comments: DS.hasMany(<span class=\"string\">&apos;comment&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/models/comment.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  post: DS.belongsTo(<span class=\"string\">&apos;post&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the key name.</p>\n<div class=\"highlight app/models/comment.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  post: DS.belongsTo()\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will lookup for a Post type.</p>\n</body></html>",
          "itemtype": "method",
          "name": "belongsTo",
          "params": [
            {
              "name": "modelName",
              "description": "(optional) type of the relationship",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "Ember.computed"
          },
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        },
        {
          "file": "addon/-private/system/relationships/has-many.js",
          "line": 11,
          "description": "<html><head></head><body><p><code>DS.hasMany</code> is used to define One-To-Many and Many-To-Many\nrelationships on a <a href=\"/api/data/classes/DS.Model.html\">DS.Model</a>.</p>\n<p><code>DS.hasMany</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: A boolean value used to explicitly declare this to be an async relationship.</li>\n<li><code>inverse</code>: A string used to identify the inverse property on a related model.</li>\n</ul>\n<h4 id=\"one-to-many\">One-To-Many</h4>\n<p>To declare a one-to-many relationship between two models, use\n<code>DS.belongsTo</code> in combination with <code>DS.hasMany</code>, like this:</p>\n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  comments: DS.hasMany(<span class=\"string\">&apos;comment&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/models/comment.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  post: DS.belongsTo(<span class=\"string\">&apos;post&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<h4 id=\"many-to-many\">Many-To-Many</h4>\n<p>To declare a many-to-many relationship between two models, use\n<code>DS.hasMany</code>:</p>\n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  tags: DS.hasMany(<span class=\"string\">&apos;tag&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/models/tag.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/tag.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  posts: DS.hasMany(<span class=\"string\">&apos;post&apos;</span>)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can avoid passing a string as the first parameter. In that case Ember Data\nwill infer the type from the singularized key name.</p>\n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  tags: DS.hasMany()\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>will lookup for a Tag type.</p>\n<h4 id=\"explicit-inverses\">Explicit Inverses</h4>\n<p>Ember Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the <code>comments</code> relationship should update\nthe <code>post</code> relationship on the inverse because post is the only\nrelationship to that model.</p>\n<p>However, sometimes you may have multiple <code>belongsTo</code>/<code>hasManys</code> for the\nsame type. You can specify which property on the related model is\nthe inverse using <code>DS.hasMany</code>&apos;s <code>inverse</code> option:</p>\n<div class=\"highlight app/models/comment.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/comment.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>import <span class=\"keyword\">DS</span> from &apos;ember-data&apos;;\n\nexport default <span class=\"keyword\">DS</span>.Model.extend({\n  onePost: <span class=\"keyword\">DS</span>.belongsTo(&apos;<span class=\"keyword\">post</span>&apos;),\n  twoPost: <span class=\"keyword\">DS</span>.belongsTo(&apos;<span class=\"keyword\">post</span>&apos;),\n  redPost: <span class=\"keyword\">DS</span>.belongsTo(&apos;<span class=\"keyword\">post</span>&apos;),\n  bluePost: <span class=\"keyword\">DS</span>.belongsTo(&apos;<span class=\"keyword\">post</span>&apos;)\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight app/models/post.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  comments: DS.hasMany(<span class=\"string\">&apos;comment&apos;</span>, {\n    inverse: <span class=\"string\">&apos;redPost&apos;</span>\n  })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also specify an inverse on a <code>belongsTo</code>, which works how\nyou&apos;d expect.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasMany",
          "params": [
            {
              "name": "type",
              "description": "(optional) type of the relationship",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "Ember.computed"
          },
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        },
        {
          "file": "addon/-private/system/normalize-link.js",
          "line": 1,
          "description": "<html><head></head><body><p>This method normalizes a link to an &quot;links object&quot;. If the passed link is\nalready an object it&apos;s returned without any modifications.</p>\n<p>See <a href=\"http://jsonapi.org/format/#document-links\">http://jsonapi.org/format/#document-links</a> for more information.</p>\n</body></html>",
          "itemtype": "method",
          "name": "_normalizeLink",
          "access": "private",
          "tagname": "",
          "params": [
            {
              "name": "link",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Object|null"
          },
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        },
        {
          "file": "addon/-private/system/normalize-model-name.js",
          "line": 3,
          "description": "<html><head></head><body><p>All modelNames are dasherized internally. Changing this function may\nrequire changes to other normalization hooks (such as typeForRoot).</p>\n</body></html>",
          "itemtype": "method",
          "name": "normalizeModelName",
          "access": "public",
          "tagname": "",
          "params": [
            {
              "name": "modelName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "if the adapter can generate one, an ID",
            "type": "String"
          },
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        },
        {
          "file": "addon/attr.js",
          "line": 38,
          "description": "<html><head></head><body><p><code>DS.attr</code> defines an attribute on a <a href=\"/api/data/classes/DS.Model.html\">DS.Model</a>.\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: <code>string</code>, <code>number</code>,\n<code>boolean</code> and <code>date</code>. You can define your own transforms by subclassing\n<a href=\"/api/data/classes/DS.Transform.html\">DS.Transform</a>.</p>\n<p>Note that you cannot use <code>attr</code> to define an attribute of <code>id</code>.</p>\n<p><code>DS.attr</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>defaultValue</code>: Pass a string or a function to be called to set the attribute<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>            <span class=\"keyword\">to</span> a<span class=\"built_in\"> default </span>value <span class=\"keyword\">if</span> none is supplied.</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    </li>\n</ul>\n<p>Example</p>\n<div class=\"highlight app/models/user.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  username: DS.attr(<span class=\"string\">&apos;string&apos;</span>),\n  email: DS.attr(<span class=\"string\">&apos;string&apos;</span>),\n  verified: DS.attr(<span class=\"string\">&apos;boolean&apos;</span>, { defaultValue: <span class=\"literal\">false</span> })\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Default value can also be a function. This is useful it you want to return\na new object for each attribute.</p>\n<div class=\"highlight app/models/user.js\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> DS <span class=\"keyword\">from</span> <span class=\"string\">&apos;ember-data&apos;</span>;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"attr\">username</span>: attr(<span class=\"string\">&apos;string&apos;</span>),\n  <span class=\"attr\">email</span>: attr(<span class=\"string\">&apos;string&apos;</span>),\n  <span class=\"attr\">settings</span>: attr({<span class=\"attr\">defaultValue</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> {};\n  }})\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "attr",
          "params": [
            {
              "name": "type",
              "description": "the attribute type",
              "type": "String"
            },
            {
              "name": "options",
              "description": "a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Attribute"
          },
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "addon/-private/core.js",
          "line": 15,
          "itemtype": "property",
          "name": "VERSION",
          "type": "String",
          "static": 1,
          "class": "DS",
          "module": "ember-data",
          "version": "2.5.5",
          "since": "2.5.5"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.5.5-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.5.5",
          "type": "project-version"
        }
      }
    }
  }
}