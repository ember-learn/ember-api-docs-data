{
  "data": {
    "id": "ember-data-4.8.8-@ember-data/model",
    "type": "class",
    "attributes": {
      "name": "@ember-data/model",
      "shortname": "@ember-data/model",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember-data/model",
      "namespace": "",
      "methods": [
        {
          "file": "../packages/model/addon/-private/attr.js",
          "line": 14,
          "itemtype": "method",
          "description": "<html><head></head><body><p><code>attr</code> defines an attribute on a <a href=\"/ember-data/release/classes/Model\">Model</a>.\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: <code>string</code>, <code>number</code>,\n<code>boolean</code> and <code>date</code>. You can define your own transforms by subclassing\n<a href=\"/ember-data/release/classes/Transform\">Transform</a>.</p>\n<p>Note that you cannot use <code>attr</code> to define an attribute of <code>id</code>.</p>\n<p><code>attr</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>defaultValue</code>: Pass a string or a function to be called to set the attribute\nto a default value if and only if the key is absent from the payload response.</li>\n</ul>\n<p>Example</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { attr } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@attr</span>(&apos;text&apos;, {\n    uppercase: <span class=\"literal\">true</span>\n  })\n  text;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/transforms/text.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Transform</span> from &apos;<span class=\"meta\">@ember</span>-data/serializer/transform&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">Transform</span> </span>{\n  serialize(value, options) {\n    <span class=\"keyword\">if</span> (options.uppercase) {\n      <span class=\"keyword\">return</span> value.toUpperCase();\n    }\n\n    <span class=\"keyword\">return</span> value;\n  }\n\n  deserialize(value) {\n    <span class=\"keyword\">return</span> value;\n  }\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "name": "attr",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "type",
              "description": "the attribute type",
              "type": "String|Object"
            },
            {
              "name": "options",
              "description": "a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Attribute"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/addon/-private/belongs-to.js",
          "line": 28,
          "itemtype": "method",
          "description": "<html><head></head><body><p><code>belongsTo</code> is used to define One-To-One and One-To-Many\nrelationships on a <a href=\"/ember-data/release/classes/Model\">Model</a>.</p>\n<p><code>belongsTo</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: A boolean value used to explicitly declare this to be an async relationship. The default is true.</li>\n<li><code>inverse</code>: A string used to identify the inverse property on a\nrelated model in a One-To-Many relationship. See <a href=\"#explicit-inverses\">Explicit Inverses</a></li>\n<li><code>polymorphic</code> A boolean value to mark the relationship as polymorphic</li>\n</ul>\n<h4 id=\"one-to-one\">One-To-One</h4>\n<p>To declare a one-to-one relationship between two models, use\n<code>belongsTo</code>:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/user.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@belongsto</span>(&apos;post&apos;, {\n    async: <span class=\"literal\">false</span>\n  })\n  post;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In contrast to async relationship, accessing a sync relationship\nwill always return the record (Model instance) for the existing\nlocal resource, or null. But it will error on access when\na related resource is known to exist and it has not been loaded.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre>let post <span class=\"operator\">=</span> comment.post<span class=\"comment\">;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>  @hasmany(&apos;comment&apos;) comments;\n}</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>```app/models/comment.js\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { belongsTo } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "name": "belongsTo",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "modelName",
              "description": "(optional) type of the relationship",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "Ember.computed"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        },
        {
          "file": "../packages/model/addon/-private/has-many.js",
          "line": 31,
          "itemtype": "method",
          "description": "<html><head></head><body><p><code>hasMany</code> is used to define One-To-Many and Many-To-Many\nrelationships on a <a href=\"/ember-data/release/classes/Model\">Model</a>.</p>\n<p><code>hasMany</code> takes an optional hash as a second parameter, currently\nsupported options are:</p>\n<ul>\n<li><code>async</code>: A boolean value used to explicitly declare this to be an async relationship. The default is true.</li>\n<li><code>inverse</code>: A string used to identify the inverse property on a related model.</li>\n<li><code>polymorphic</code> A boolean value to mark the relationship as polymorphic</li>\n</ul>\n<h4 id=\"one-to-many\">One-To-Many</h4>\n<p>To declare a one-to-many relationship between two models, use\n<code>belongsTo</code> in combination with <code>hasMany</code>, like this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <thead>\n            <tr>\n              <td colspan=\"2\">app/models/post.js</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{\n  <span class=\"meta\">@hasmany</span>(&apos;comment&apos;, {\n    async: <span class=\"literal\">false</span>\n  })\n  comments;\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>In contrast to async relationship, accessing a sync relationship\nwill always return a <a href=\"/ember-data/release/classes/ManyArray\">ManyArray</a> instance\ncontaining the existing local resources. But it will error on access\nwhen any of the known related resources have not been loaded.</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>post.comments.forEach(<span class=\"function\"><span class=\"params\">(comment)</span> =&gt;</span> {\n\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you are using <code>links</code> with sync relationships, you have to use\n<code>ref.reload</code> to fetch the resources.\n  @belongsto(&apos;post&apos;) bluePost;\n}</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>```app/models/post.js\n<span class=\"keyword\">import</span> <span class=\"type\">Model</span>, { hasMany } from &apos;<span class=\"meta\">@ember</span>-data/model&apos;;\n\n<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>{</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "name": "hasMany",
          "access": "public",
          "tagname": "",
          "static": 1,
          "params": [
            {
              "name": "type",
              "description": "(optional) type of the relationship",
              "type": "String"
            },
            {
              "name": "options",
              "description": "(optional) a hash of options",
              "type": "Object"
            }
          ],
          "return": {
            "description": "relationship",
            "type": "Ember.computed"
          },
          "class": "@ember-data/model",
          "module": "@ember-data/model"
        }
      ],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-4.8.8-@ember-data/model",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-4.8.8",
          "type": "project-version"
        }
      }
    }
  }
}